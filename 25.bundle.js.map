{"version":3,"sources":["webpack://mk-ui-host/./src/app/App.scss","webpack://mk-ui-host/./src/app/store/index.ts","webpack://mk-ui-host/./src/app/App.scss?af09","webpack://mk-ui-host/./src/app/utils/insights.ts","webpack://mk-ui-host/./src/app/utils/useDocumentTitle.ts","webpack://mk-ui-host/./src/app/Routes.tsx","webpack://mk-ui-host/./src/app/NotFound/NotFound.tsx","webpack://mk-ui-host/./src/app/utils/a11y.ts","webpack://mk-ui-host/./src/app/DataPlanePage/DataPlanePage.tsx","webpack://mk-ui-host/./src/app/ControlPlanePage/ControlPlanePage.tsx","webpack://mk-ui-host/./src/app/App.tsx","webpack://mk-ui-host/./src/app/utils/getBaseName.ts","webpack://mk-ui-host/./src/bootstrap.tsx"],"names":["___CSS_LOADER_EXPORT___","i","push","module","id","registry","options","InsightsContext","useDocumentTitle","title","originalTitle","document","routeFocusTimer","NotFound","PageSection","EmptyState","variant","EmptyStateIcon","icon","ExclamationTriangleIcon","Title","headingLevel","size","EmptyStateBody","history","Button","onClick","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","window","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","Component","rest","render","routeProps","PageNotFound","component","flattenedRoutes","console","log","Home","exact","label","path","useState","token","setToken","insights","useContext","useEffect","chrome","auth","getToken","then","t","dispatch","useDispatch","OpenshiftStreams","OpenshiftStreamsFederated","onConnectToInstance","event","undefined","Error","addAlert","message","addNotification","reduce","flattened","route","routes","AppRoutes","LastLocationProvider","map","idx","key","getRegistry","register","notifications","connect","init","identifyApp","on","navId","Provider","store","getStore","NotificationsPortal","pathname","release","pathName","split","shift","middleware","value","basename","location"],"mappings":"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","file":"25.bundle.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_variables.scss\",\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_helpers.scss\"],\"names\":[],\"mappings\":\"AAAA,MACI,4BAAA,CCDJ,aACI,YAAA\",\"sourcesContent\":[\":root {\\n    --ins-color--orange: #ec7a08;\\n}\\n\\n// Spacing\\n$ins-padding: var(--pf-global--spacer--lg);\\n$ins-margin: var(--pf-global--spacer--xl);\\n$ins-gutter: var(--pf-global--gutter);\\n\\n// Font Size\\n$ins-fontSize: var(--pf-global--FontSize--md);\\n$ins-fontSize--sm: var(--pf-global--FontSize--sm);\\n$ins-fontSize--lg: var(--pf-global--FontSize--lg);\\n$ins-fontSize--xl: var(--pf-global--FontSize--xl);\\n\\n// Borders\\n$ins-borderRadius: var(--pf-global--BorderRadius--sm);\\n$ins-borderRadius--round: var(--pf-global--BorderRadius--lg);\\n\\n// Grid breakpoints\\n$ins-break--xs: var(--pf-global--breakpoint--xs);\\n$ins-break--sm: var(--pf-global--breakpoint--sm);\\n$ins-break--md: var(--pf-global--breakpoint--md);\\n$ins-break--lg: var(--pf-global--breakpoint--lg);\\n$ins-break--xl: var(--pf-global--breakpoint--xl);\\n\\n// Colors\\n$ins-color--red: var(--pf-global--danger-color--100);\\n$ins-color--critical: $ins-color--red;\\n\\n$ins-color--orange: var(--ins-color--orange);\\n$ins-color--high: $ins-color--orange;\\n\\n$ins-color--yellow: var(--pf-global--warning-color--100);\\n$ins-color--medium: $ins-color--yellow;\\n\\n$ins-color--green: var(--pf-global--success-color--100);\\n$ins-color--low: $ins-color--green;\\n\\n$ins-color--blue: var(--pf-global--info-color--100);\\n\\n$ins-color--gray: var(--pf-global--disabled-color--200);\",\"button:focus {\\n    outline:none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    //If you want to register all of your reducers, this is good place.\n    /*\n     *  registry.register({\n     *    someName: (state, action) => ({...state})\n     *  });\n     */\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\n\nexport type InsightsType = {\n  chrome: {\n    init: () => void;\n    identifyApp: (appId: string) => Promise<void>;\n    getApp: () => string;\n    getBundle: () => string;\n    getEnvironment: () => 'ci' | 'qa' | 'prod' | 'stage';\n    on: (type: string, callback: ((event: any) => void)) => void;\n    auth: {\n      getToken(): Promise<string>;\n    };\n    isProd: boolean;\n    isBeta: () => boolean;\n    isPenTest: () => boolean;\n  };\n};\n\nexport const InsightsContext = React.createContext({} as InsightsType);\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import React from 'react';\nimport { Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport {accessibleRouteChangeHandler, useDocumentTitle} from '@app/utils';\nimport { NotFound } from '@app/NotFound/NotFound';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport {ControlPlanePage} from \"@app/ControlPlanePage/ControlPlanePage\";\nimport {DataPlanePage} from \"@app/DataPlanePage/DataPlanePage\";\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: DataPlanePage,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ControlPlanePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  }\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return <Component {...rest} {...routeProps} />;\n  }\n\n  return <Route render={routeWithTitle} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFound} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <Switch>\n      {flattenedRoutes.map(({ path, exact, component, title, isAsync }, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n        />\n      ))}\n      <PageNotFound title=\"404 Page Not Found\" />\n    </Switch>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFound: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFound };\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","// @ts-ignore\nimport {Home} from 'strimziUi/Home';\nimport React from 'react';\n\nexport const DataPlanePage = () => {\n  console.log('Data Plane');\n  return (\n    <Home/>\n  );\n};\n","// @ts-ignore\nimport {OpenshiftStreamsFederated} from 'mkUiFrontend/OpenshiftStreams';\nimport React, {useContext, useEffect, useState} from 'react';\nimport {useHistory} from 'react-router';\nimport {InsightsContext} from \"@app/utils/insights\";\nimport {useDispatch} from 'react-redux';\nimport {addNotification} from '@redhat-cloud-services/frontend-components-notifications/';\nimport {AlertVariant} from \"@patternfly/react-core\";\n\nexport const ControlPlanePage = () => {\n\n  const [token, setToken] = useState('');\n\n  const insights = useContext(InsightsContext);\n\n  useEffect(() => {\n    insights.chrome.auth.getToken().then(t => setToken(t));\n  }, []);\n\n  const history = useHistory();\n\n  const onConnectInstance = async (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n\n    history.push(`/kafkas/${event.id}`);\n  };\n\n  const dispatch = useDispatch();\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n\n  };\n\n  return (\n    <OpenshiftStreamsFederated token={token} onConnectToInstance={onConnectInstance} addAlert={addAlert}/>\n  );\n};\n","import PropTypes from 'prop-types';\nimport React, {Component, useContext, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {connect, Provider} from 'react-redux';\nimport './App.scss';\nimport {getRegistry} from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport {notifications, NotificationsPortal} from '@redhat-cloud-services/frontend-components-notifications/';\nimport {InsightsContext} from \"@app/utils/insights\";\nimport {AppRoutes} from \"@app/Routes\";\n\nconst registry = getRegistry();\nregistry.register({notifications});\n\nexport const App = () => {\n\n  const insights = useContext(InsightsContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.identifyApp('openshift-streams');\n\n    const appNav = insights.chrome.on('APP_NAVIGATION', event => history.push(`/${event.navId}`));\n    return function cleanup() {\n      //appNav();\n    }\n  });\n\n  return (\n    <Provider store={registry.getStore()}>\n      <NotificationsPortal/>\n      <AppRoutes />\n    </Provider>\n  );\n}\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}/${pathName[1] || ''}`;\n}\n\nexport default getBaseName;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {init} from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport {InsightsContext} from \"@app/utils/insights\";\n\nReactDOM.render(\n  <Provider store={init(logger).getStore()}>\n    <InsightsContext.Provider value={window[\"insights\"]}>\n      <Router basename={getBaseName(window.location.pathname)}>\n        <App/>\n      </Router>\n    </InsightsContext.Provider>\n  </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}