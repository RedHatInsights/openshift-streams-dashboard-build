{"version":3,"file":"8007.f3836c0c5eee4ffb9660.js","mappings":"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","sources":["webpack://application-services-ui/./src/app/AppRoutes.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/PrincipalsProvider/PrincipalsProvider.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/components/KasModalLoader/KasModalLoader.tsx","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/hooks/modal.ts","webpack://application-services-ui/./src/app/hooks/insights.ts","webpack://application-services-ui/./src/app/hooks/keycloak.ts","webpack://application-services-ui/./src/app/hooks/useMASToken.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/CosPage/CosPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederatedComponent.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Dashboard.tsx","webpack://application-services-ui/./src/app/pages/Kafka/ConsumerGroups.tsx","webpack://application-services-ui/./src/app/pages/Kafka/AclPermissions.tsx","webpack://application-services-ui/./src/app/pages/Kafka/kafka-instance.ts","webpack://application-services-ui/./src/app/pages/Kafka/KafkaRoutes.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaMainView.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaTopicsFromAdmin.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchTopicsMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/ConnectedMetrics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaInstanceMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchMetricsKpi.ts","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactVersion.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/Artifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactsRedirect.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/DownloadArtifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/RulesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/SrsLayout.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistrySchemaMapping.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/providers/config/ServiceConstants.ts","webpack://application-services-ui/./src/app/providers/config/ServiceConstantsContextProvider.tsx","webpack://application-services-ui/./src/app/providers/featureflags/FeatureFlags.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/Routing.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/utils/keycloak/keycloakUtils.ts"],"sourcesContent":["import React, { VoidFunctionComponent } from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch, useHistory } from 'react-router-dom';\nimport { LastLocationProvider } from 'react-router-last-location';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport getBaseName from './utils/getBaseName';\nimport {\n  DevelopmentPreview,\n  AppServicesPageNotFound,\n  AppServicesEmptyState,\n  AppServicesEmptyStateVariant,\n} from '@rhoas/app-services-ui-components';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange } from '@app/utils/Routing';\nimport { useDocumentTitle } from '@app/utils';\nimport { KafkaMainView } from '@app/pages/Kafka';\nimport { BasenameContext } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@patternfly/react-core';\n\nconst QuickStartLoaderFederated = React.lazy(() => import('@app/pages/Resources/QuickStartLoaderFederated'));\n\nconst APIManagementPage = React.lazy(() => import('@app/pages/APIManagement/APIManagementPage'));\nconst ArtifactRedirect = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactsRedirect'));\nconst Artifacts = React.lazy(() => import('@app/pages/ServiceRegistry/Artifacts'));\nconst ArtifactVersionDetails = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactVersion'));\nconst DataSciencePage = React.lazy(() => import('@app/pages/DataScience/DataSciencePage'));\n\nconst KasPage = React.lazy(() => import('@app/pages/Kas/KasPage'));\nconst OverviewPage = React.lazy(() => import('@app/pages/Overview/OverviewPage'));\nconst ResourcesPage = React.lazy(() => import('@app/pages/Resources/ResourcesPage'));\nconst RulesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RulesPage'));\nconst RolesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RolesPage'));\nconst ServiceAccountsPage = React.lazy(() => import('@app/pages/ServiceAccounts/ServiceAccountsPage'));\nconst CosPage = React.lazy(() => import('@app/pages/CosPage/CosPage'));\nconst ServiceRegistryPage = React.lazy(() => import('@app/pages/ServiceRegistry/ServiceRegistryPage'));\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\nconst RedirectToServiceAccounts: React.FunctionComponent = () => <Redirect to=\"/service-accounts\" />;\nconst RedirectToResources: React.FunctionComponent = () => <Redirect to=\"/learning-resources\" />;\n\nconst appRoutes: AppRouteConfig<any>[] = [\n  {\n    component: KafkaMainView,\n    label: 'Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Streams for Apache Kafka | Red Hat OpenShift Application Services',\n    basename: '/streams/kafkas/:id',\n    devPreview: false,\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Streams for Apache Kafka | Red Hat OpenShift Application Services',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Streams for Apache Kafka | Red Hat OpenShift Application Services',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Streams for Apache Kafka | Red Hat OpenShift Application Services',\n    basename: '/streams/kafkas',\n    devPreview: false,\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/rules',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: RolesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/roles',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: CosPage,\n    exact: false,\n    label: 'COS',\n    path: '/connectors',\n    title: 'Connectors | Red Hat OpenShift Application Services',\n    basename: `${getBaseName(window.location.pathname)}/connectors`,\n    devPreview: true,\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Service Accounts',\n    path: '/service-accounts',\n    title: 'Service Accounts | Red Hat OpenShift Application Services',\n    devPreview: false,\n  },\n  {\n    component: RedirectToServiceAccounts,\n    exact: true,\n    label: 'Service Accounts',\n    path: '/streams/service-accounts',\n    title: 'Service Accounts | Red Hat OpenShift Application Services',\n    devPreview: false,\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Overview',\n    path: '/overview',\n    title: 'Overview | Red Hat OpenShift Application Services',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Overview',\n    path: '/',\n    title: 'Overview | Red Hat OpenShift Application Services',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'API Management',\n    path: '/api-management',\n    title: 'API Management | Red Hat OpenShift Application Services',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Data Science',\n    path: '/data-science',\n    title: 'Data Science | Red Hat OpenShift Application Services',\n  },\n  {\n    // Handle the redirect for the old url application-services/streams/resources to application-services/learning-resources\n    component: RedirectToResources,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n    devPreview: true,\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'Learning Resources | Red Hat OpenShift Application Services',\n    path: '/learning-resources',\n    title: 'Learning Resources | Red Hat OpenShift Application Services',\n    devPreview: false,\n  },\n];\n\nconst WrappedRoute: React.FunctionComponent<IAppRoute<any>> = ({\n  component: Component,\n  isAsync = false,\n  title,\n  basename,\n  devPreview,\n  ...rest\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const getBasename = () => {\n    return basename || '';\n  };\n  const onClickButton = () => history.push('/');\n\n  function wrapRoute(routeProps: RouteComponentProps) {\n    return (\n      <ErrorBoundary\n        fallbackRender={({ error }) =>\n          error.message === '404' ? (\n            <AppServicesPageNotFound />\n          ) : (\n            <AppServicesEmptyState\n              emptyStateProps={{\n                variant: AppServicesEmptyStateVariant.UnexpectedError,\n              }}\n              emptyStateIconProps={{\n                className: 'icon-color',\n              }}\n              titleProps={{\n                title: t('common:something_went_wrong'),\n              }}\n              emptyStateBodyProps={{\n                body: t('common:unexpected_error'),\n              }}\n            >\n              <Button onClick={onClickButton}>{t('common:return_to_home_page')}</Button>\n            </AppServicesEmptyState>\n          )\n        }\n      >\n        <DevelopmentPreview show={devPreview}>\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        </DevelopmentPreview>\n      </ErrorBoundary>\n    );\n  }\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst AppRoutes: VoidFunctionComponent = () => {\n  return (\n    <>\n      <LastLocationProvider>\n        <React.Suspense fallback={<AppServicesLoading />}>\n          <Switch>\n            {flattenedRoutes(appRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n              <WrappedRoute\n                path={path}\n                exact={exact}\n                component={component}\n                key={idx}\n                title={title}\n                isAsync={isAsync}\n                {...rest}\n              />\n            ))}\n            <PageNotFoundRoute title=\"404 Page Not Found\" />\n          </Switch>\n        </React.Suspense>\n      </LastLocationProvider>\n      <QuickStartLoaderFederated />\n    </>\n  );\n};\n\nexport { AppRoutes, appRoutes };\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AppRoutes } from '@app/AppRoutes';\nimport { FederatedModuleProvider } from '@app/components';\nimport { useInsights } from '@app/hooks';\n\nexport const App: React.FunctionComponent = () => {\n  const insights = useInsights();\n  const history = useHistory();\n\n  const getAppId = () => {\n    const defaultAppId = 'overview';\n\n    const parts = history.location.pathname.split('/');\n    if (parts.length > 1) {\n      if (parts[1] === '') {\n        return defaultAppId;\n      } else {\n        if (parts[1] === 'openshift-streams') {\n          return 'streams';\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal />\n      <AppRoutes />\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ComponentType, memo, ReactNode, useEffect, useRef, useState } from 'react';\nimport { AssetsContext } from '@rhoas/app-services-ui-shared';\nimport { ModuleInfo } from '@app/components/FederatedModule/moduleInfo';\nimport { useFederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\ndeclare function __webpack_init_sharing__(shareScope: string);\n\ndeclare const __webpack_share_scopes__: {\n  default: unknown;\n};\n\ntype Container = {\n  init: (shareScopes: unknown) => Promise<void>;\n  get: (module: string) => Promise<{ (): { default: ComponentType<any> } }>;\n};\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope] as unknown as Container; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await container.get(module);\n    const Module = factory();\n    console.debug(`loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = (url: string) => {\n  const isMounted = useIsMounted();\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    let element;\n    if (isMounted.current) {\n      if (!url) {\n        setFailed(true);\n        return;\n      }\n\n      element = document.createElement('script');\n\n      element.src = url;\n      element.type = 'text/javascript';\n      element.async = true;\n\n      setReady(false);\n      setFailed(false);\n\n      element.onload = () => {\n        console.log(`Dynamic federated module Loaded: ${url}`);\n        setReady(true);\n      };\n\n      element.onerror = () => {\n        console.error(`Dynamic federated module Error: ${url}`);\n        setReady(false);\n        setFailed(true);\n      };\n\n      document.head.appendChild(element);\n    }\n\n    return () => {\n      if (element) {\n        console.log(`Dynamic federated module Removed: ${url}`);\n        document.head.removeChild(element);\n      }\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed,\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: React.ReactNode;\n};\n\nexport const FederatedModule = memo<FederatedModuleProps>(({ scope, module, render, fallback }) => {\n  const isMounted = useIsMounted();\n\n  const { getModuleInfo, modules } = useFederatedModule();\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(modules[scope].basePath, scope, modules[scope].fallbackBasePath);\n      if (isMounted.current) {\n        setModuleInfo(moduleInfo);\n      }\n    };\n    fetchModuleInfo();\n  }, [scope, modules, getModuleInfo, isMounted]);\n\n  if (moduleInfo !== undefined) {\n    return <DynamicFederatedModule scope={scope} module={module} render={render} moduleInfo={moduleInfo} />;\n  }\n  if (fallback !== undefined) {\n    return <>{fallback}</>;\n  }\n  return null;\n});\nFederatedModule.displayName = 'FederatedModule';\n\ntype DynamicFederatedModuleProps = FederatedModuleProps & {\n  moduleInfo: ModuleInfo;\n};\n\nconst DynamicFederatedModule: React.FunctionComponent<DynamicFederatedModuleProps> = ({\n  moduleInfo,\n  fallback,\n  scope,\n  render,\n  module,\n}) => {\n  const { ready, failed } = useDynamicScript(moduleInfo.entryPoint);\n\n  if (ready && !failed) {\n    const Component = React.lazy(loadComponent(scope, module));\n\n    const getPath = () => {\n      return moduleInfo.basePath;\n    };\n\n    return (\n      <AssetsContext.Provider value={{ getPath }}>\n        <React.Suspense fallback={<AppServicesLoading />}>{render(Component)}</React.Suspense>\n      </AssetsContext.Provider>\n    );\n  }\n\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n","import React, { useEffect, useState } from 'react';\nimport { Configuration, KafkaRequest, SecurityApi } from '@rhoas/kafka-management-sdk';\nimport { Principal, PrincipalsContext, PrincipalType, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { PrincipalApi } from '@redhat-cloud-services/rbac-client';\n\nexport type PrincipalsProviderProps = {\n  kafkaInstance?: KafkaRequest;\n};\n\nexport const usePrincipal = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [serviceAccountPrincipals, setServiceAccountPrincipals] = useState<Principal[] | undefined>();\n  const [userAcountPrincipals, setUserAccountPrincipals] = useState<Principal[] | undefined>();\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      if (config !== undefined && auth !== undefined && config.rbac.basePath !== undefined) {\n        const accessToken = await auth.kas.getToken();\n        const principalApi = new PrincipalApi({\n          accessToken,\n          basePath: config?.rbac.basePath,\n        });\n\n        try {\n          const userAccounts = await principalApi.listPrincipals(-1).then((response) =>\n            response.data.data.map((p) => {\n              return {\n                id: p.username,\n                principalType: PrincipalType.UserAccount,\n                displayName: `${p.first_name} ${p.last_name}`,\n                emailAddress: p.email,\n              } as Principal;\n            })\n          );\n          setUserAccountPrincipals(userAccounts);\n        } catch (e) {\n          // temp fix - this API is only available to org admins\n          // needs a proper approach longer term\n        }\n      }\n    };\n    fetchUserAccounts();\n  }, [auth, config]);\n\n  useEffect(() => {\n    const fetchServiceAccounts = async () => {\n      if (config !== undefined && auth !== undefined && config.rbac.basePath !== undefined) {\n        const accessToken = await auth.kas.getToken();\n        const securityApi = new SecurityApi({\n          accessToken,\n          basePath: config.kas.apiBasePath,\n        } as Configuration);\n        const serviceAccounts = await securityApi.getServiceAccounts().then((response) =>\n          response.data.items.map((sa) => {\n            return {\n              id: sa.client_id,\n              displayName: sa.name,\n              principalType: PrincipalType.ServiceAccount,\n            } as Principal;\n          })\n        );\n\n        setServiceAccountPrincipals(serviceAccounts);\n      }\n    };\n    fetchServiceAccounts();\n  }, [auth, config]);\n\n  return {\n    getAllPrincipals: () => {\n      let answer: Principal[] = [];\n      if (userAcountPrincipals !== undefined && serviceAccountPrincipals !== undefined) {\n        answer = answer.concat(userAcountPrincipals);\n      }\n      if (serviceAccountPrincipals !== undefined) {\n        answer = answer.concat(serviceAccountPrincipals);\n      }\n      return answer;\n    },\n    getAllUserAccounts: () => userAcountPrincipals,\n    getAllServiceAccounts: () => serviceAccountPrincipals,\n  };\n};\n\nexport const PrincipalsProvider: React.FunctionComponent<PrincipalsProviderProps> = ({ children }) => {\n  const { getAllPrincipals } = usePrincipal();\n  return <PrincipalsContext.Provider value={{ getAllPrincipals }}>{children}</PrincipalsContext.Provider>;\n};\n","import React, { ReactElement, VoidFunctionComponent } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useHistory } from 'react-router-dom';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\ntype InstanceDrawerProps = {\n  kafkaInstance: KafkaRequest;\n  Component: React.LazyExoticComponent<any>;\n  renderContent: (props: {\n    handleInstanceDrawer: (isOpen: boolean, activeTab?: string) => void;\n    setInstance: (instance: KafkaRequest) => void;\n  }) => ReactElement;\n};\n\nexport const InstanceDrawer: VoidFunctionComponent<Omit<InstanceDrawerProps, 'Component'>> = (props) => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={null}\n      render={(component) => <InstanceDrawerConnected Component={component} {...props} />}\n    />\n  );\n};\n\nconst InstanceDrawerConnected: VoidFunctionComponent<InstanceDrawerProps> = ({\n  Component,\n  renderContent,\n  kafkaInstance,\n  ...props\n}) => {\n  const config = useConfig();\n  const history = useHistory();\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  const onDeleteInstance = () => {\n    history.push('/streams/kafkas');\n  };\n\n  return (\n    <Component\n      tokenEndPointUrl={tokenEndPointUrl}\n      onDeleteInstance={onDeleteInstance}\n      renderContent={({ closeDrawer, openDrawer, setInstance }) => {\n        const handleInstanceDrawer = (isOpen: boolean, activeTab?: string) => {\n          isOpen ? openDrawer() : closeDrawer();\n        };\n        return renderContent({ handleInstanceDrawer, setInstance });\n      }}\n      initialInstance={kafkaInstance}\n      {...props}\n    />\n  );\n};\n","export type ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nexport type FetchModuleInfoFunction = {\n  (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined>\n}\n\nexport const fetchModuleInfo: FetchModuleInfoFunction = async (baseUrl, scope, fallbackBasePath) => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n","import React, { useRef } from \"react\";\nimport { FederatedModuleConfig, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { fetchModuleInfo, FetchModuleInfoFunction, ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\n\nexport type FederatedModuleContextProps = {\n  modules: {\n    [module: string]: FederatedModuleConfig\n  };\n  getModuleInfo: FetchModuleInfoFunction;\n}\n\nexport const FederatedModuleContext = React.createContext<FederatedModuleContextProps | undefined>(undefined);\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  type ModuleInfoCache = {\n    [key:string]: ModuleInfo\n  }\n\n  const moduleInfoCache = useRef<ModuleInfoCache>({} as ModuleInfoCache );\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <AppServicesLoading/>;\n  }\n\n  const getModuleInfo: FetchModuleInfoFunction = async ( baseUrl,scope, fallbackBasePath) => {\n    if (moduleInfoCache.current[scope] !== undefined) {\n      return moduleInfoCache.current[scope];\n    }\n    const answer = await fetchModuleInfo(baseUrl, scope, fallbackBasePath);\n    if (answer !== undefined) {\n      moduleInfoCache.current[scope] = answer;\n    }\n    return answer;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={{\n      modules: config.federatedModules,\n      getModuleInfo\n    }}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nexport const useFederatedModule = (): FederatedModuleContextProps => {\n  const answer = React.useContext(FederatedModuleContext);\n  if (answer === undefined) {\n    throw new Error('must be used inside FederatedModuleContext provider');\n  }\n  return answer;\n}\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\n\nexport const KasModalLoader: React.FC = ({ children }) => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./KasModalLoader\"\n      fallback={null}\n      render={(KasModalLoaderFederated) => {\n        return <KasModalLoaderFederated>{children}</KasModalLoaderFederated>;\n      }}\n    />\n  );\n};\n","import { Reducer, useEffect, useReducer, useRef } from 'react';\nimport { AxiosResponse } from 'axios';\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<AxiosResponse<T>>;\n  key: string;\n};\n\nexport const useFetch = <T extends any>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>((states, action: Action<T>) => {\n    switch (action.type) {\n      case Status.FETCHING:\n        return { ...initialState, status: Status.FETCHING };\n      case Status.FETCHED:\n        return { ...initialState, status: Status.FETCHED, data: action.payload };\n      case Status.FETCH_ERROR:\n        return { ...initialState, status: Status.FETCH_ERROR, error: action.error };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response.data;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response.data });\n        } catch (error) {\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCH_ERROR, payload: error.message });\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, []);\n\n  return state;\n};\n","import { useEffect, useState, useMemo } from 'react';\nimport { useAuth, useConfig, Quota, QuotaValue, QuotaType, ProductType } from '@rhoas/app-services-ui-shared';\nimport { Configuration, AppServicesApi } from '@rhoas/account-management-sdk';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\n\nexport const useQuota = (productId: ProductType) => {\n    const config = useConfig();\n    const auth = useAuth();\n    const constants =  useConstants();\n\n    const [orgId, setOrgId] = useState();\n\n    useEffect(() => {\n        const getCurrentAccount = async () => {\n            if (!orgId) {\n                const accessToken = await auth?.ams.getToken();\n                const ams = new AppServicesApi({\n                    accessToken,\n                    basePath: config?.ams.apiBasePath || '',\n                } as Configuration);\n\n                await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n                    const orgID = account?.data?.organization?.id;\n                    setOrgId(orgID);\n                });\n            }\n        };\n\n        getCurrentAccount();\n    }, [config?.ams.apiBasePath, auth]);\n\n    const getQuotaTypesByProductId = () => {\n        const kasQuotaId = constants.kafka.ams.instanceQuotaId\n        const kasTrialQuotaId  =  constants.kafka.ams.trialQuotaId\n        const srsQuotaId = constants.serviceRegistry.ams.instanceQuotaId\n        const srsTrialQuotaId  =  constants.serviceRegistry.ams.trialQuotaId\n        if (productId === ProductType.kas) {\n            return { quotaId: kasQuotaId, trialQuotaId: kasTrialQuotaId, quotaKey: QuotaType.kas, trialQuotaKey: QuotaType.kasTrial };\n        } else if (productId === ProductType.srs) {\n            return { quotaId: srsQuotaId, trialQuotaId: srsTrialQuotaId, quotaKey: QuotaType.srs, trialQuotaKey: QuotaType.srsTrial };\n        }\n    }\n\n    const getQuota = async () => {\n        let filteredQuota: Quota = { loading: true, isServiceDown: false, data: undefined };\n\n        if (orgId) {\n            const { quotaId, trialQuotaId, quotaKey, trialQuotaKey } = getQuotaTypesByProductId() || {};\n\n            const accessToken = await auth?.ams.getToken();\n            const ams = new AppServicesApi({\n                accessToken,\n                basePath: config?.ams.apiBasePath || '',\n            } as Configuration);\n\n            await ams\n                .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, undefined, true)\n                .then((res) => {\n                    const quotaData = new Map<QuotaType, QuotaValue>();\n                    const quota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === quotaId\n                    )[0];\n\n                    const trialQuota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === trialQuotaId\n                    )[0];\n\n                    if (quota && quota.allowed > 0) {\n                        const remaining = quota?.allowed - quota?.consumed;\n                        quotaData?.set(quotaKey, {\n                            allowed: quota?.allowed,\n                            consumed: quota?.consumed,\n                            remaining: remaining < 0 ? 0 : remaining\n                        });\n                    }\n\n                    if (trialQuota) {\n                        quotaData?.set(trialQuotaKey, {\n                            allowed: trialQuota?.allowed,\n                            consumed: trialQuota?.consumed,\n                            remaining: trialQuota?.allowed - trialQuota?.consumed\n                        });\n                    }\n\n                    filteredQuota.loading = false;\n                    filteredQuota.data = quotaData;\n                })\n                .catch((error) => {\n                    filteredQuota.loading = false;\n                    filteredQuota.isServiceDown = true;\n                });\n        }\n        return filteredQuota;\n    };\n\n    const contextValue = useMemo(() => {\n        return { orgId, getQuota };\n    }, [orgId, getQuota]);\n\n    return contextValue;\n}\n\n","import { Auth, Config, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { Configuration, AppServicesApi, TermsReviewResponse } from '@rhoas/account-management-sdk';\nimport { useFetch } from '@app/services/fetch';\nimport { useEffect, useRef } from \"react\";\n\nexport type ITermsConfig = {\n  eventCode: string;\n  siteCode: string;\n}\n\nexport const useTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  return useFetch(fetchTermsReviewFactory(config, auth, termsConfig));\n};\n\nexport const useAsyncTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth, termsConfig).fetch().then(r => r.data);\n    ref.current = answer;\n    return answer;\n  }\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth]);\n  return load;\n}\n\nconst fetchTermsReviewFactory = (config: Config, auth: Auth, termsConfig: ITermsConfig) => {\n  return {\n    key: 'selfTermsReview',\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || '',\n      } as Configuration);\n      return await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: termsConfig.eventCode,\n        site_code: termsConfig.siteCode,\n      });\n    },\n  }\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join('&');\n","import { useLocation } from 'react-router-dom';\nimport { parse as parseQueryString, stringifyUrl } from 'query-string';\nimport { useAsyncTermsReview, ITermsConfig } from '@app/services/termsReview';\nimport { getTermsAppURL } from '@app/utils/termsApp';\n\nexport const useModalControl = (termsConfig: ITermsConfig) => {\n    const loadTermsReview = useAsyncTermsReview(termsConfig);\n    const location = useLocation();\n\n    const shouldOpenCreateModal = async () => {\n        const parsed = parseQueryString(location.search);\n        const c = parsed['create'] === 'true';\n        if (c) {\n            const termsReview = await loadTermsReview();\n            if (!termsReview.terms_required) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const preCreateInstance = async (open: boolean) => {\n        const termsReview = await loadTermsReview();\n        if (termsReview.terms_available || termsReview.terms_required) {\n            if (termsReview.redirect_url === undefined) {\n                throw new Error('terms must be signed but there is no terms url');\n            }\n            const redirectURL = stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n            const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n            window.location.href = url;\n            return false;\n        }\n        return open;\n    };\n\n    return { shouldOpenCreateModal, preCreateInstance };\n};","import { InsightsType } from \"@app/utils\";\n\nexport const useInsights = () => {\n  const insights = window['insights'] as InsightsType;\n  if (insights === undefined) {\n    throw new Error(\"must be used inside an initialized insights context\");\n  }\n  return insights;\n}\n","import { KeycloakConfig, KeycloakInstance } from \"keycloak-js\";\nimport { Auth, Config, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { getAccessToken, initKeycloak } from \"@app/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { useInsights } from \"@app/hooks/insights\";\n\nconst init = async (config: Config, getInsightsAccessToken: () => Promise<string>) => {\n  const keycloakConfig = {\n    url: config.masSso.authServerUrl,\n    clientId: config.masSso.clientId,\n    realm: config.masSso.realm,\n  } as KeycloakConfig;\n  return await initKeycloak(keycloakConfig, getInsightsAccessToken);\n}\n\nexport const useAuth = (): Auth => {\n  const keycloakInstance = useRef<KeycloakInstance>();\n  const config = useConfig();\n  const insights = useInsights();\n\n  if (config === undefined || insights.chrome.auth === undefined) {\n    throw new Error(\"useAuth must be used inside a config provider, and insights auth\");\n  }\n\n  const insightsChromeAuth = insights.chrome.auth;\n\n  const getKeycloakInstance = async () => {\n    const instance = keycloakInstance.current;\n    if (instance === undefined) {\n      const answer = await init(config, insightsChromeAuth.getToken);\n      keycloakInstance.current = answer;\n      return answer;\n    }\n    return instance;\n  }\n\n  useEffect(() => {\n    // Start loading keycloak immediately\n    getKeycloakInstance();\n  }, [config, insightsChromeAuth]);\n\n  const getMASSSOToken = async () => {\n    const keycloakInstance = await getKeycloakInstance();\n    return getAccessToken(keycloakInstance, insightsChromeAuth.getToken)\n  };\n\n  const getUsername = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.username;\n  }\n\n  const isOrgAdmin = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.is_org_admin;\n  }\n\n  const getToken = insightsChromeAuth.getToken;\n\n  return {\n    getUsername,\n    isOrgAdmin,\n    kafka: {\n      getToken: getMASSSOToken,\n    },\n    kas: {\n      getToken,\n    },\n    ams: {\n      getToken,\n    },\n    srs: {\n      getToken,\n    },\n    apicurio_registry: {\n      getToken: getMASSSOToken,\n    },\n  };\n\n}\n","import { } from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { buildTokenEndPointUrl } from \"@app/utils\";\n\nexport const useMASToken = () => {\n    const config = useConfig();\n    const getTokenEndPointUrl = () => {\n        if (config) {\n            return buildTokenEndPointUrl(config.masSso.authServerUrl, config.masSso.realm);\n        }\n        return undefined;\n    };\n\n    return { getTokenEndPointUrl };\n}\n","import React from 'react';\nimport { APIManagementPage } from '@rhoas/app-services-ui-components';\n\nexport const APIManagementOverviewPage: React.FunctionComponent = () => {\n  return (\n    <APIManagementPage />\n  );\n};\n\nexport default APIManagementOverviewPage;\n","import { FederatedModule } from '@app/components';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport React from 'react';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\n\nexport const CosPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage/>;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"cos\"\n      fallback={<AppServicesLoading/>}\n      module=\"./OpenshiftManagedConnectors\"\n      render={(OpenshiftManagedConnectors) => <OpenshiftManagedConnectors/>}\n    />\n  )\n};\n\nexport default CosPage;\n","import React from 'react';\nimport { DataSciencePage } from '@rhoas/app-services-ui-components';\n\nexport const DataScienceOverViewPage: React.FunctionComponent = () => {\n\n  return (\n    <DataSciencePage />\n  );\n};\n\nexport default DataScienceOverViewPage;","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type KafkaFederatedComponentProps = UnderlyingProps & {\n  module: string;\n};\n\nexport type UnderlyingProps = {\n  activeTab?: number;\n  getToken?: () => Promise<string>;\n  apiBasePath: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  showMetrics?: JSX.Element;\n  showSchemas?: JSX.Element;\n  kafka?: KafkaRequest;\n  redirectAfterDeleteInstance?: () => void;\n};\n\n// Provides properties for component path and it's underlying properties\nexport const KafkaFederatedComponent: React.FunctionComponent<KafkaFederatedComponentProps> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => <FederatedKafka {...rest} />}\n    />\n  );\n};\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const Topics: React.FunctionComponent<UnderlyingProps> = (props) => (\n    <KafkaFederatedComponent module=\"./Topics\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const TopicDetails: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./TopicDetails\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const CreateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./CreateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const UpdateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./UpdateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const Dashboard: React.FunctionComponent<UnderlyingProps> = (props) => ( \n    <KafkaFederatedComponent module=\"./Dashboard\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const ConsumerGroups: React.FunctionComponent<UnderlyingProps> = (props) => (\n   <KafkaFederatedComponent module=\"./ConsumerGroups\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const AclPermissions: React.FunctionComponent<UnderlyingProps> = (props) => (\n     <KafkaFederatedComponent module=\"./AclPermissions\" {...props} />\n);\n","import { useEffect, useState } from 'react';\nimport { Configuration, DefaultApi, KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport { useParams } from 'react-router-dom';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\n\nexport const getAdminServerUrl = (kafkaRequest?: KafkaRequest): string => {\n  if (kafkaRequest === undefined) {\n    throw new Error('kafkaRequest cannot be undefined');\n  }\n  return `https://admin-server-${kafkaRequest?.bootstrap_server_host}/rest`;\n};\n\nexport type KafkaInstance = {\n  kafkaDetail: Required<KafkaRequest>;\n  adminServerUrl: string;\n};\n\nexport const useKafkaInstance = (): KafkaInstance | false | undefined => {\n  const config = useConfig();\n  const auth = useAuth();\n  const [kafkaRequest, setKafkaRequest] = useState<KafkaRequest | false | undefined>();\n  const { id } = useParams<{ id: string }>();\n  useEffect(() => {\n    const getAdminApiUrl = async () => {\n      if (auth === undefined || config === undefined) {\n        return;\n      }\n      const accessToken = await auth.kas.getToken();\n      const kasService = new DefaultApi({\n        accessToken,\n        basePath: config.kas.apiBasePath || '',\n      } as Configuration);\n      try {\n        const kafka = await kasService.getKafkaById(id);\n        setKafkaRequest(kafka.data);\n      } catch (e) {\n        setKafkaRequest(false);\n      }\n    };\n\n    getAdminApiUrl();\n  }, [auth, config, id]);\n\n  return kafkaRequest\n    ? {\n        kafkaDetail: kafkaRequest as Required<KafkaRequest>,\n        adminServerUrl: getAdminServerUrl(kafkaRequest),\n      }\n    : kafkaRequest;\n};\n","import React, { memo } from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange } from '@app/utils/Routing';\nimport { useDocumentTitle } from '@app/utils';\nimport { CreateTopic, TopicDetails, Topics, UpdateTopic, Dashboard, ConsumerGroups, AclPermissions } from '@app/pages';\nimport { UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\nimport { BasenameContext } from '@rhoas/app-services-ui-shared';\n\nconst kafkaRoutes: AppRouteConfig<UnderlyingProps>[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topics',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/create',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/update/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/dashboard',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: ConsumerGroups,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/consumer-groups',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: AclPermissions,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/acls',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n];\n\ntype WrappedRouteProps = IAppRoute<UnderlyingProps> & {\n  underlyingProps: UnderlyingProps;\n  url: string;\n};\n\n/**\n * The wrapped route allows us to apply the basename, document title and accessible route change for all components\n * without having to add these to each component. They must happen inside the route.\n */\nconst WrappedRoute: React.FunctionComponent<WrappedRouteProps> = ({\n  component: Component,\n  isAsync = false,\n  title,\n  underlyingProps,\n  url,\n  ...rest\n}) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  const getBasename = () => {\n    return url;\n  };\n\n  return (\n    <Route\n      render={(routeProps) => {\n        return (\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...underlyingProps} {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        );\n      }}\n      {...rest}\n    />\n  );\n};\n\nconst KafkaRoutes = memo<UnderlyingProps>((props): React.ReactElement => {\n  const routeMatch = useRouteMatch();\n  return (\n    <Switch>\n      {flattenedRoutes(kafkaRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => {\n        const routePath = `${routeMatch.path}${path}`;\n        console.log(`Creating route for ${routePath}`);\n        return (\n          <WrappedRoute\n            path={routePath}\n            exact={exact}\n            component={component}\n            key={idx}\n            title={title}\n            isAsync={isAsync}\n            underlyingProps={props}\n            url={routeMatch.url}\n            {...rest}\n          />\n        );\n      })}\n      <PageNotFoundRoute title=\"404 Page Not Found\" />\n    </Switch>\n  );\n});\nKafkaRoutes.displayName = 'KafkaRoutes';\n\nexport { KafkaRoutes, kafkaRoutes };\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { InstanceDrawer } from '@app/components';\nimport { AccessDeniedPage, ConnectedMetrics, ServiceDownPage } from '@app/pages';\nimport { useKafkaInstance } from '@app/pages/Kafka/kafka-instance';\nimport { UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\nimport { PrincipalsProvider } from '@app/components/PrincipalsProvider/PrincipalsProvider';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ServiceRegistrySchemaMapping } from '@app/pages/ServiceRegistry';\nimport { KafkaRoutes } from './KafkaRoutes';\n\nexport const KafkaMainView = (): React.ReactElement => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const kafka = useKafkaInstance();\n\n  const [error, setError] = useState<undefined | number>();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  if (kafka === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (kafka === false) {\n    throw new Error('404');\n  }\n\n  const redirectAfterDeleteInstance = () => {\n    history.push('/streams/kafkas');\n  };\n\n  const { kafkaDetail, adminServerUrl } = kafka;\n\n  const props = {\n    kafkaPageLink: history.createHref({\n      pathname: '/streams/kafkas',\n    }),\n    kafkaInstanceLink: history.createHref({\n      pathname: `/streams/kafkas/${kafkaDetail.id}/topics`,\n    }),\n    showMetrics: <ConnectedMetrics kafkaId={kafkaDetail.id} kafkaAdminUrl={adminServerUrl} />,\n    onError: (code: number) => {\n      setError(code);\n    },\n    kafkaName: kafkaDetail.name,\n    apiBasePath: adminServerUrl,\n    getToken: auth?.kafka.getToken,\n    showSchemas: <ServiceRegistrySchemaMapping />,\n    kafka: kafkaDetail,\n    redirectAfterDeleteInstance,\n  } as UnderlyingProps;\n\n  if (error === 401) {\n    return <AccessDeniedPage />;\n  }\n\n  return (\n    <PrincipalsProvider kafkaInstance={kafkaDetail}>\n      <InstanceDrawer\n        data-ouia-app-id=\"dataPlane-streams\"\n        kafkaInstance={kafkaDetail}\n        renderContent={({ handleInstanceDrawer, setInstance }) => (\n          <KafkaRoutes\n            handleInstanceDrawer={(isOpen) => {\n              setInstance(kafkaDetail);\n              handleInstanceDrawer(isOpen);\n            }}\n            {...props}\n          />\n        )}\n      />\n    </PrincipalsProvider>\n  );\n};\n","import { TopicsApi } from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters } from './types';\n\nexport async function fetchKafkaTopisFromAdmin({\n  accessToken,\n  basePath,\n}: BasicApiConfigurationParameters): Promise<string[]> {\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  const response = await api.getTopics(undefined, 100, 100, undefined, undefined, undefined, undefined);\n  return (response.data.items || []).map((t) => t.name as string);\n}\n","import { GetTopicsMetricsResponse, PartitionBytesMetric, TimeSeriesMetrics } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from './types';\n\nexport type FetchTopicsMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchTopicMetrics({\n  accessToken,\n  basePath,\n  kafkaId,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<Omit<GetTopicsMetricsResponse, 'kafkaTopics'>> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(kafkaId, duration, interval, [\n    'kafka_server_brokertopicmetrics_bytes_in_total',\n    'kafka_server_brokertopicmetrics_bytes_out_total',\n    'kafka_topic:kafka_log_log_size:sum',\n    'kafka_server_brokertopicmetrics_messages_in_total',\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(({ value, timestamp }) => (metric[timestamp] = value + (metric[timestamp] || 0)));\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(({ value, timestamp }) => (partition[timestamp] = value + (partition[timestamp] || 0)));\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case 'kafka_server_brokertopicmetrics_bytes_in_total':\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case 'kafka_server_brokertopicmetrics_bytes_out_total':\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case 'kafka_topic:kafka_log_log_size:sum':\n        addAggregatePartitionBytes();\n        break;\n      case 'kafka_server_brokertopicmetrics_messages_in_total':\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import React, { useCallback, VoidFunctionComponent } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth, useBasename, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading, Metrics, MetricsProps } from '@rhoas/app-services-ui-components';\nimport { fetchKafkaInstanceMetrics, fetchKafkaTopisFromAdmin, fetchMetricsKpi, fetchTopicMetrics } from './api';\n\ntype ConnectedMetricsProps = {\n  kafkaId: string;\n  kafkaAdminUrl: string;\n};\n\nexport const ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({ kafkaId, kafkaAdminUrl }) => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n\n  const onCreateTopic = () => {\n    history.push(`${basename}/topic/create`);\n  };\n\n  const getKafkaInstanceMetrics: MetricsProps['getKafkaInstanceMetrics'] = useCallback(\n    (props) =>\n      fetchKafkaInstanceMetrics({\n        ...props,\n        kafkaId,\n        basePath: config.kas.apiBasePath,\n        accessToken: auth?.kas.getToken(),\n      }),\n    [auth?.kas, config.kas.apiBasePath, kafkaId]\n  );\n\n  const getTopicMetrics: MetricsProps['getTopicsMetrics'] = useCallback(\n    async (props) => {\n      const [kafkaTopics, metrics] = await Promise.all([\n        fetchKafkaTopisFromAdmin({\n          accessToken: auth?.kafka.getToken(),\n          basePath: kafkaAdminUrl,\n        }),\n        fetchTopicMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        }),\n      ]);\n      const { metricsTopics, bytesIncoming, bytesOutgoing, bytesPerPartition, incomingMessageRate } = metrics;\n      return {\n        kafkaTopics,\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      };\n    },\n    [auth?.kafka, auth?.kas, config.kas.apiBasePath, kafkaAdminUrl, kafkaId]\n  );\n\n  const getMetricsKpi: MetricsProps['getMetricsKpi'] = useCallback(\n    () =>\n      fetchMetricsKpi({\n        kafkaId,\n        basePath: config.kas.apiBasePath,\n        accessToken: auth?.kas.getToken(),\n      }),\n    [auth?.kas, config.kas.apiBasePath, kafkaId]\n  );\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <Metrics\n      onCreateTopic={onCreateTopic}\n      getTopicsMetrics={getTopicMetrics}\n      getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      getMetricsKpi={getMetricsKpi}\n    />\n  );\n};\n","import { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from './types';\n\ntype FetchKafkaInstanceMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n} & BasicApiConfigurationParameters;\nexport async function fetchKafkaInstanceMetrics({\n  kafkaId,\n  duration,\n  interval,\n  accessToken,\n  basePath,\n}: FetchKafkaInstanceMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(kafkaId, duration, interval, [\n    'kubelet_volume_stats_used_bytes',\n    'kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum',\n    'kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum',\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes('zookeeper')\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(({ value, timestamp }) => (metric[timestamp] = value + (metric[timestamp] || 0)));\n    }\n\n    switch (name) {\n      case 'kubelet_volume_stats_used_bytes':\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case 'kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum':\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case 'kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum':\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n  };\n}\n","import { GetMetricsKpiResponse } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi, InstantQuery } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, NoUndefinedField } from './types';\n\nexport type FetchMetricsKpiProps = {\n  kafkaId: string;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchMetricsKpi({\n  accessToken,\n  basePath,\n  kafkaId,\n}: FetchMetricsKpiProps): Promise<Omit<GetMetricsKpiResponse, 'kafkaTopics'>> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await apisService.getMetricsByInstantQuery(kafkaId, [\n    'kafka_topic:kafka_topic_partitions:sum', // (Number of topic partitions)\n    'kafka_topic:kafka_topic_partitions:count', // (Number of topics)\n    'consumergroup:kafka_consumergroup_members:count', // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items || []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case 'kafka_topic:kafka_topic_partitions:sum':\n        topicPartitions = value;\n        break;\n      case 'kafka_topic:kafka_topic_partitions:count':\n        topics = value;\n        break;\n      case 'consumergroup:kafka_consumergroup_members:count':\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import React, { VoidFunctionComponent } from 'react';\nimport { ProductType, QuotaContext, useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { FederatedModule, usePrincipal } from '@app/components';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ITermsConfig } from '@app/services';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\n\nconst KasPage: React.FC = () => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      fallback={<AppServicesLoading />}\n      render={(component) => <KasPageConnected Component={component} />}\n    />\n  );\n};\n\nconst KasPageConnected: VoidFunctionComponent<{ Component: React.LazyExoticComponent<any> }> = ({ Component }) => {\n  const config = useConfig();\n  const constants = useConstants();\n  const { getQuota } = useQuota(ProductType?.kas);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.kafka.ams.termsAndConditionsEventCode,\n    siteCode: constants.kafka.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getTokenEndPointUrl } = useMASToken();\n  const { getAllUserAccounts } = usePrincipal();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <QuotaContext.Provider value={{ getQuota }}>\n      <Component\n        preCreateInstance={preCreateInstance}\n        shouldOpenCreateModal={shouldOpenCreateModal}\n        tokenEndPointUrl={getTokenEndPointUrl()}\n        getAllUserAccounts={getAllUserAccounts}\n      />\n    </QuotaContext.Provider>\n  );\n};\n\nexport default KasPage;\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFoundPage: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n\n","import { OverviewPage } from '@rhoas/app-services-ui-components';\nimport React from 'react';\n\nexport const ConnectedOverviewPage: React.FunctionComponent = () => {\n\n  const kafkaHref = '/streams/kafkas';\n  const serviceRegistryHref ='/service-registry';\n\n  return <OverviewPage toKafkaHref={kafkaHref} toServiceRegistryHref={serviceRegistryHref} />;\n};\n\nexport default ConnectedOverviewPage;\n","import React, { VoidFunctionComponent } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ResourcesPage: VoidFunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<AppServicesLoading />}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n\nexport default ResourcesPage;\n","import React, { VoidFunctionComponent } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ServiceAccountsPage: VoidFunctionComponent = () => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<AppServicesLoading />}\n      render={(component) => <ServiceAccountsPageConnected Component={component} />}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<{ Component: React.LazyExoticComponent<any> }> = ({\n  Component,\n}) => {\n  const config = useConfig();\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n  return <Component />;\n};\nexport default ServiceAccountsPage;\n","import React from 'react';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport { PageSection, Title, Button, EmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const ServiceDownPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['appTemporaryFixMe']);\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t('serviceDown.serviceDownTitle')}\n        </Title>\n        <EmptyStateBody>{t('serviceDown.serviceDownMessage')}</EmptyStateBody>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            window.location.href = 'https://status.starter.openshift.com/';\n          }}\n        >\n          {t('serviceDown.serviceDownButton')}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactVersionDetails: React.FunctionComponent = () => {\n  const config = useConfig();  \n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactVersionDetailsConnected />;\n};\n\nconst ArtifactVersionDetailsConnected: React.FunctionComponent = () => {\n  const { artifactId }=useParams<{artifactId:string}>();\n  \n  return (\n    <SrsLayout breadcrumbId=\"srs.artifacts_details\" artifactId={artifactId} render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactVersionPage\" />\n    )}/>\n  );\n};\n\nexport default ArtifactVersionDetails;\n","import { FederatedApicurioComponent } from '@app/pages/ServiceRegistry/FederatedApicurioComponent';\nimport React from 'react';\nimport { SrsLayout } from '@app/pages/ServiceRegistry/SrsLayout';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages';\n\nexport const Artifacts: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactsConnected />;\n};\n\nconst ArtifactsConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts\"\n      render={(registry) => <FederatedApicurioComponent module=\"./FederatedArtifactsPage\" registry={registry} />}\n    />\n  );\n};\n\nexport default Artifacts;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactRedirect: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactRedirectConnected />;\n};\n\nconst ArtifactRedirectConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactRedirectPage\" />\n    )} />\n  );\n};\n\nexport default ArtifactRedirect;\n","import React from 'react';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { FederatedApicurioComponent } from './FederatedApicurioComponent';\n\ntype DownloadArtifactsProps = {\n  registry: Registry;\n  downloadLabel?: string;\n};\n\nexport const DownloadArtifacts: React.FC<DownloadArtifactsProps> = ({ registry, downloadLabel }) => {\n  return (\n    <FederatedApicurioComponent\n      module=\"./FederatedDownloadArtifacts\"\n      registry={registry}\n      fileName={registry.name}\n      downloadLinkLabel={downloadLabel}\n    />\n  );\n};\n","import React, { VoidFunctionComponent } from 'react';\nimport { ConfigType, createApicurioConfig } from '@app/pages/ServiceRegistry/utils';\nimport { FederatedModule } from '@app/components';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { useAuth, useBasename, useConfig, Principal } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: Registry | undefined;\n  topicName?: string;\n  groupId?: string | null | undefined;\n  version?: string;\n  registryId?: string;\n  basename?: string;\n  fileName?: string;\n  downloadLinkLabel?: string;\n  principals?: Principal[];\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: React.FC<FederatedApicurioComponentProps> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<AppServicesLoading />}\n      render={(component) => <ServiceAccountsPageConnected Component={component} {...rest} />}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<\n  { Component: React.LazyExoticComponent<any> } & Omit<FederatedApicurioComponentProps, 'module'>\n> = ({ Component, registry, principals, ...rest }) => {\n  let federateConfig: ConfigType;\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const getToken = auth?.apicurio_registry.getToken;\n\n  const { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n\n  if (config === undefined || registry === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (getToken && basename) {\n    federateConfig = createApicurioConfig(\n      config,\n      registry.registryUrl as string,\n      `${basename.getBasename()}/t/${registry?.id}`,\n      getToken,\n      principals\n    );\n    return (\n      <Component\n        config={federateConfig}\n        tenantId={registry.id}\n        groupId={groupId}\n        artifactId={artifactId}\n        version={version}\n        history={history}\n        {...rest}\n      />\n    );\n  }\n  return null;\n};\n","import { Principal } from '@rhoas/app-services-ui-shared';\nimport { Config } from \"@rhoas/app-services-ui-shared\";\n\n\nexport interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport interface NoneAuthConfig extends AuthConfig { }\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n  principals?: Principal[] | undefined;\n}\n\nconst createApicurioConfig = (config: Config, apiUrl: string, navPathPrefix: string,\n  getToken: () => Promise<string> | undefined, principals?: Principal[] | undefined) => {\n  const apicurioConfig: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: 'gettoken',\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      roleManagement: true,\n      multiTenant: true,\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n    principals\n  } as ConfigType;\n\n  return apicurioConfig;\n};\n\nexport { createApicurioConfig };\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const RulesPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RulesPageConnected />;\n};\n\nconst RulesPageConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout breadcrumbId=\"srs.global_rules\" render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedRulesPage\"/>\n    )}/>\n  );\n};\n\nexport default RulesPage;\n","import React from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { FederatedModule, KasModalLoader } from '@app/components';\nimport { ServiceDownPage } from '@app/pages';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading, DevelopmentPreview } from '@rhoas/app-services-ui-components';\nimport { ProductType, QuotaContext } from '@rhoas/app-services-ui-shared';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { ITermsConfig } from '@app/services';\nimport { DownloadArtifacts } from './DownloadArtifacts';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\n\nexport const ServiceRegistryPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ServiceRegistryPageConnected />;\n};\n\nexport const ServiceRegistryPageConnected: React.FC = () => {\n  const config = useConfig();\n  const constants =  useConstants();\n  const { getQuota } = useQuota(ProductType.srs);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.serviceRegistry.ams.termsAndConditionsEventCode,\n    siteCode: constants.serviceRegistry.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getTokenEndPointUrl } = useMASToken();\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <DevelopmentPreview>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistry\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <QuotaContext.Provider value={{ getQuota }}>\n              <KasModalLoader>\n                <ServiceRegistryFederated\n                  preCreateInstance={preCreateInstance}\n                  shouldOpenCreateModal={shouldOpenCreateModal}\n                  tokenEndPointUrl={getTokenEndPointUrl()}\n                  renderDownloadArtifacts={(registry: Registry, downloadLabel?: string) => (\n                    <DownloadArtifacts registry={registry} downloadLabel={downloadLabel} />\n                  )}\n                />\n              </KasModalLoader>\n            </QuotaContext.Provider>\n          );\n        }}\n      />\n    </DevelopmentPreview>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import React, { VoidFunctionComponent } from 'react';\nimport { FederatedModule, KasModalLoader } from '@app/components';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useMASToken } from '@app/hooks';\nimport { DownloadArtifacts } from './DownloadArtifacts';\n\ntype SrsLayoutProps = {\n  render: (registry: Registry) => JSX.Element;\n  breadcrumbId?: string;\n  artifactId?: string;\n};\n\nexport const SrsLayout: React.FC<SrsLayoutProps> = (props) => {\n  return (\n    <FederatedModule\n      scope=\"srs\"\n      module=\"./ApicurioRegistry\"\n      fallback={<AppServicesLoading />}\n      render={(component) => <SrsLayoutConnected Component={component} {...props} />}\n    />\n  );\n};\n\nconst SrsLayoutConnected: VoidFunctionComponent<{ Component: React.LazyExoticComponent<any> } & SrsLayoutProps> = ({\n  Component,\n  render,\n  breadcrumbId,\n  artifactId,\n}) => {\n  const { getTokenEndPointUrl } = useMASToken();\n\n  return (\n    <KasModalLoader>\n      <Component\n        render={render}\n        breadcrumbId={breadcrumbId}\n        tokenEndPointUrl={getTokenEndPointUrl()}\n        artifactId={artifactId}\n        renderDownloadArtifacts={(registry: Registry, downloadLabel?: string) => (\n          <DownloadArtifacts registry={registry} downloadLabel={downloadLabel} />\n        )}\n      />\n    </KasModalLoader>\n  );\n};\n","import React, { VoidFunctionComponent } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { FederatedApicurioComponent } from './FederatedApicurioComponent';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ServiceRegistrySchemaMapping: React.FC = () => {\n  return (\n    <>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistryMapping\"\n        fallback={<AppServicesLoading />}\n        render={(component) => <ServiceRegistrySchemaMappingConnected Component={component} />}\n      />\n    </>\n  );\n};\n\nconst ServiceRegistrySchemaMappingConnected: VoidFunctionComponent<{ Component: React.LazyExoticComponent<any> }> = ({\n  Component,\n}) => {\n  const { topicName } = useParams<{ topicName: string }>();\n  const basename = '/service-registry';\n\n  return (\n    <Component\n      basename={basename}\n      topicName={topicName}\n      renderSchema={(registry: Registry) => (\n        <FederatedApicurioComponent\n          module=\"./FederatedSchemaMapping\"\n          registry={registry}\n          topicName={topicName}\n          groupId={null}\n          version={'latest'}\n          registryId={registry?.id}\n          basename={basename}\n        />\n      )}\n    />\n  );\n};\n","import React from 'react';\n\nimport { Main, NotAuthorized } from '@redhat-cloud-services/frontend-components';\n\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: React.FunctionComponent<GetLinkProps> = ({ href, children }) => <Link to={href || ''}>{children}</Link>;\n\nexport const AccessDeniedPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['appTemporaryFixMe']);\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t('accessdenied.accessDeniedTitle')}\n        description={accessDeniedDetails}\n        prevPageButtonText={t('accessdenied.accessDeniedButtonText')}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import { Config } from '@rhoas/app-services-ui-shared';\n\nconst defaultHostname = 'console.redhat.com';\n\ntype FederatedModulesConfig = Config['federatedModules'];\n\ntype EnvironmentConfig = {\n  hostnames: string[];\n  fetchConfig?: boolean;\n  type?: string;\n  config: Omit<Config, 'federatedModules'>;\n};\n\nexport type EnvironmentConfigs = Array<EnvironmentConfig>;\n\nexport const filterEnvironmentConfig = (environmentConfig: EnvironmentConfigs): EnvironmentConfig => {\n  const hostname = window.location.hostname;\n  console.log(`Filter config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(hostname));\n  if (possibleConfigs.length > 1) {\n    throw new Error(`Unable to find config for ${hostname}, more than one config matched ${possibleConfigs}`);\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(defaultHostname));\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      return possibleDefaultConfigs[0];\n    }\n  }\n  return possibleConfigs[0];\n};\n\nexport const addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfig,\n  federatedModulesConfig: FederatedModulesConfig,\n  beta: boolean\n): Config => {\n  const federatedModules = {} as FederatedModulesConfig;\n  Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n    let { basePath } = v;\n    let fallbackBasePath: string | undefined = undefined;\n    if (environmentConfig.type !== 'proxy') {\n      basePath = v.fallbackBasePath;\n    } else {\n      fallbackBasePath = v.fallbackBasePath;\n    }\n    if (!beta) {\n      if (basePath.startsWith('/beta')) {\n        basePath = basePath.substring(5);\n      }\n      if (fallbackBasePath?.startsWith('/beta')) {\n        fallbackBasePath = fallbackBasePath.substring(5);\n      }\n    }\n    federatedModules[k] = {\n      basePath,\n      fallbackBasePath\n    };\n  });\n  return {\n    ...environmentConfig.config,\n    federatedModules,\n  };\n};\n","import React from 'react';\nimport { Config, ConfigContext } from '@rhoas/app-services-ui-shared';\nimport configs from '../../../../config/config.json';\nimport { addFederatedModulesToConfig, EnvironmentConfigs, filterEnvironmentConfig } from '@app/providers/config/utils';\nimport { useFeatureFlags } from \"@app/providers/featureflags/FeatureFlags\";\n\ndeclare const __webpack_public_path__: string;\n\nexport const EmbeddedConfigProvider: React.FunctionComponent = ({ children }) => {\n\n  const { beta } = useFeatureFlags();\n\n  const [value, setValue] = React.useState<Config | undefined>(() => {\n    const environmentConfig = filterEnvironmentConfig(configs.config as EnvironmentConfigs);\n    if (environmentConfig.fetchConfig) {\n      return undefined;\n    }\n    const config = addFederatedModulesToConfig(environmentConfig, configs.federatedModules, beta);\n    console.log('Done loading config', config);\n    return config;\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      if (value === undefined) {\n        const response = await fetch(`${__webpack_public_path__}config.json`);\n        const jsonConfig = await response.json();\n        const environmentConfig = filterEnvironmentConfig(jsonConfig.config);\n        const config = addFederatedModulesToConfig(environmentConfig, jsonConfig.federatedModules, beta);\n        console.debug('Done loading config', config);\n        setValue(config);\n      }\n    })();\n  }, []);\n  return <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>;\n};\n","import React from \"react\";\nimport { useContext } from \"react\";\n\n/**\n * Configuration for AMS\n */\nexport type AmsConfig = {\n  termsAndConditionsEventCode: string;\n  termsAndConditionsSiteCode: string;\n  instanceQuotaId: string;\n  trialQuotaId: string;\n}\n\nexport type ServiceConstants = {\n  version: number;\n  kafka: {\n    ams: AmsConfig;\n  },\n  serviceRegistry: {\n    ams: AmsConfig;\n  }\n}\n\n/**\n * The ConstantContext allows access to the constants for the application.\n */\nexport const ConstantContext: React.Context<ServiceConstants | undefined> =\n  React.createContext<ServiceConstants | undefined>(undefined);\n\n/**\n * useConstants is a custom hook that is a shorthand for useContext(ConfigContext)\n */\nexport const useConstants = (): ServiceConstants => {\n  const answer = useContext(ConstantContext);\n  if (answer === undefined) {\n    throw new Error(\"useConstants must be used inside an ServiceConstantsContextProvider\");\n  }\n  return answer;\n}\n","import React from 'react';\nimport { ConstantContext, ServiceConstants } from './ServiceConstants';\nimport constantsFallback   from '../../../../static/configs/service-constants.json'\n\nexport const ServiceConstantsContextProvider: React.FunctionComponent = ({ children }) => {\n  return <ConstantContext.Provider value={constantsFallback as ServiceConstants}>{children}</ConstantContext.Provider>;\n};\n","import React, { useContext } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport type FeatureFlags = {\n  beta: boolean\n}\n\nexport const FeatureFlagsContext = React.createContext<FeatureFlags | undefined>(undefined);\n\nexport const useFeatureFlags = (): FeatureFlags => {\n  const answer = useContext(FeatureFlagsContext);\n  if (answer === undefined) {\n    throw new Error('useFeatureFlags must be used inside a FeatureFlagContext provider');\n  }\n  return answer;\n};\n\nexport const FeatureFlagProvider: React.FunctionComponent = ({\n                                                               children\n                                                             }) => {\n  const value = {\n    beta: window.location.pathname.startsWith('/beta')\n  } as FeatureFlags;\n  return (\n    <FeatureFlagsContext.Provider value={value}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  )\n}\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (!registry) {\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React from 'react';\nimport { Route, RouteComponentProps } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { useLastLocation } from 'react-router-last-location';\n\nconst NotFoundPage = React.lazy(() => import('@app/pages/NotFound/NotFoundPage'));\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute<T> {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps> | React.ComponentType<T>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup<T> {\n  label: string;\n  routes: IAppRoute<T>[];\n}\n\nexport type AppRouteConfig<T> = IAppRoute<T> | IAppRouteGroup<T>;\n\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nexport const useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nexport const PageNotFoundRoute: React.FunctionComponent<{ title: string }> = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage}/>;\n};\n\nexport const flattenedRoutes = <T, >(routes: AppRouteConfig<T>[]) => routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute<T>[]\n);\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport { accessibleRouteChangeHandler };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport { Base64 } from 'js-base64';\nimport jwtDecode, { JwtPayload } from 'jwt-decode';\nimport getUnixTime from 'date-fns/getUnixTime';\n\nconst REFRESH_TOKEN_COOKIE_NAME = 'mrt';\nconst MIN_VALIDITY = 50;\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n};\n\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const initKeycloak = async (\n  config: KeycloakConfig,\n  getInsightsAccessToken: () => Promise<string>\n): Promise<KeycloakInstance> => {\n  const initOptions = {\n    responseMode: 'query',\n    enableLogging: false,\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken !== undefined && config.url !== undefined) {\n    // try to get an access token from the token endpoint so that we can pass it to initOptions\n    const url = buildTokenEndPointUrl(config.url, config.realm);\n    const body = new URLSearchParams();\n    body.append('grant_type', 'refresh_token');\n    body.append('refresh_token', refreshToken);\n    body.append('client_id', config.clientId);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body,\n    });\n    if (response.status === 200) {\n      console.debug('found valid access token');\n      const json = await response.json();\n      const accessToken = json['access_token'];\n      initOptions.token = accessToken;\n      initOptions.refreshToken = refreshToken;\n    } else {\n      console.debug('error getting access token from endpoint');\n      initOptions.onLoad = 'login-required';\n    }\n  } else {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (!urlParams.has('state')) {\n      // only when this isn't a redirect back from MASSSO\n      console.debug('did not find refresh token, will require a full login');\n      initOptions.onLoad = 'login-required';\n    }\n  }\n  const keycloak = Keycloak(config);\n  await keycloak.init(initOptions);\n  if (keycloak.refreshToken) {\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak;\n};\n\nconst retrieveRefreshToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = (JSON.parse(storedToken) as unknown) as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n};\n\nconst clearRefreshToken = () => {\n  console.debug('clearing stored refresh token');\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n};\n\nconst storeRefreshToken = async (refreshToken: string, getInsightsAccessToken: () => Promise<string>) => {\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const rhUserId = insightsJWT['account_id'];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId,\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug('storing refresh token');\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n};\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getAccessToken = async (keycloak: KeycloakInstance, getInsightsAccessToken: () => Promise<string>): Promise<string> => {\n  await keycloak.updateToken(MIN_VALIDITY);\n  if (!keycloak.token || !keycloak.tokenParsed) {\n    throw new Error('No token from keycloak!');\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const accountId = insightsJWT['account_id'];\n  const rhUserId = keycloak.tokenParsed['rh-user-id'];\n  if (accountId !== rhUserId) {\n    console.debug(`Triggering MASSSO logout because sso.redhat.com account_id claim does not match the MASSSO rh-user-id claim. account_id: ${accountId}, rh-user-id ${rhUserId}`);\n    await logout(keycloak);\n    return '';\n  }\n  if (keycloak.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak.token;\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nconst logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.debug('Performing MASSSO logout');\n    await k.logout();\n  }\n};\n\nexport const buildTokenEndPointUrl = (authServerUrl: string, realm: string) => {\n    return `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n};\n"],"names":["QuickStartLoaderFederated","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","KasPage","OverviewPage","ResourcesPage","RulesPage","RolesPage","ServiceAccountsPage","CosPage","ServiceRegistryPage","RedirectToStreamsKafkas","Redirect","to","appRoutes","component","Kafka","label","path","title","basename","devPreview","exact","getBaseName","window","location","pathname","WrappedRoute","Component","isAsync","rest","t","useTranslation","history","useHistory","getBasename","onClickButton","push","Route","render","routeProps","ErrorBoundary","fallbackRender","message","AppServicesPageNotFound","AppServicesEmptyState","emptyStateProps","variant","AppServicesEmptyStateVariant","emptyStateIconProps","className","titleProps","emptyStateBodyProps","body","Button","onClick","DevelopmentPreview","show","BasenameContext","value","AppRoutes","LastLocationProvider","fallback","AppServicesLoading","Switch","map","idx","key","connect","insights","getAppId","defaultAppId","parts","split","length","useEffect","chrome","init","appId","identifyApp","unregister","on","event","includes","navId","useIsMounted","isMounted","useRef","current","FederatedModule","memo","scope","module","getModuleInfo","modules","useState","moduleInfo","setModuleInfo","basePath","fallbackBasePath","undefined","DynamicFederatedModule","displayName","url","ready","setReady","failed","setFailed","element","document","createElement","src","type","async","onload","console","log","onerror","error","head","appendChild","removeChild","useDynamicScript","entryPoint","container","default","get","factory","Module","debug","loadComponent","AssetsContext","getPath","usePrincipal","config","useConfig","auth","useAuth","serviceAccountPrincipals","setServiceAccountPrincipals","userAcountPrincipals","setUserAccountPrincipals","rbac","kas","getToken","accessToken","principalApi","PrincipalApi","listPrincipals","then","response","data","p","id","username","principalType","PrincipalType","first_name","last_name","emailAddress","email","userAccounts","SecurityApi","apiBasePath","getServiceAccounts","items","sa","client_id","name","serviceAccounts","getAllPrincipals","answer","concat","getAllUserAccounts","getAllServiceAccounts","PrincipalsProvider","children","PrincipalsContext","InstanceDrawer","props","InstanceDrawerConnected","renderContent","kafkaInstance","masSso","authServerUrl","realm","tokenEndPointUrl","onDeleteInstance","closeDrawer","openDrawer","setInstance","handleInstanceDrawer","isOpen","activeTab","initialInstance","fetchModuleInfo","baseUrl","fetch","json","fedMods","s","entry","startsWith","FederatedModuleContext","FederatedModuleProvider","moduleInfoCache","Provider","federatedModules","useFederatedModule","Error","KasModalLoader","KasModalLoaderFederated","Status","useQuota","productId","constants","orgId","setOrgId","ams","AppServicesApi","apiAccountsMgmtV1CurrentAccountGet","account","orgID","organization","getQuota","filteredQuota","loading","isServiceDown","kasQuotaId","kafka","instanceQuotaId","kasTrialQuotaId","trialQuotaId","srsQuotaId","serviceRegistry","srsTrialQuotaId","ProductType","quotaId","quotaKey","QuotaType","trialQuotaKey","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","res","quotaData","Map","quota","filter","q","quota_id","trim","trialQuota","allowed","remaining","consumed","set","catch","useMemo","fetchTermsReviewFactory","termsConfig","apiAuthorizationsV1SelfTermsReviewPost","event_code","eventCode","site_code","siteCode","buildUrlParams","params","Object","keys","encodeURIComponent","join","useModalControl","loadTermsReview","ref","load","Promise","r","useAsyncTermsReview","useLocation","shouldOpenCreateModal","parsed","parse","search","terms_required","preCreateInstance","open","termsReview","terms_available","redirect_url","redirectURL","stringifyUrl","href","query","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","useInsights","getInsightsAccessToken","keycloakConfig","clientId","keycloakInstance","insightsChromeAuth","getKeycloakInstance","instance","getMASSSOToken","getUsername","getUser","identity","user","isOrgAdmin","is_org_admin","srs","apicurio_registry","useMASToken","getTokenEndPointUrl","APIManagementOverviewPage","serviceDown","OpenshiftManagedConnectors","DataScienceOverViewPage","KafkaFederatedComponent","FederatedKafka","Topics","TopicDetails","CreateTopic","UpdateTopic","Dashboard","ConsumerGroups","AclPermissions","getAdminServerUrl","kafkaRequest","bootstrap_server_host","kafkaRoutes","underlyingProps","KafkaRoutes","routeMatch","useRouteMatch","routePath","KafkaMainView","setKafkaRequest","useParams","kasService","DefaultApi","getKafkaById","kafkaDetail","adminServerUrl","useKafkaInstance","setError","kafkaPageLink","createHref","kafkaInstanceLink","showMetrics","kafkaId","kafkaAdminUrl","onError","code","kafkaName","showSchemas","ServiceRegistry","redirectAfterDeleteInstance","fetchKafkaTopisFromAdmin","TopicsApi","Configuration","getTopics","fetchTopicMetrics","duration","interval","selectedTopic","getMetricsByRangeQuery","safeMetrics","m","values","metric","topic","filteredMetrics","topics","Array","from","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","forEach","partition","addAggregatedTotalBytesTo","timestamp","metricsTopics","ConnectedMetrics","useBasename","getKafkaInstanceMetrics","useCallback","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","fetchKafkaInstanceMetrics","getTopicMetrics","all","kafkaTopics","metrics","getMetricsKpi","apisService","topicPartitions","consumerGroups","getMetricsByInstantQuery","fetchMetricsKpi","Metrics","onCreateTopic","getTopicsMetrics","KasPageConnected","termsAndConditionsEventCode","termsAndConditionsSiteCode","QuotaContext","NotFoundPage","PageSection","EmptyState","EmptyStateIcon","icon","ExclamationTriangleIcon","Title","headingLevel","size","EmptyStateBody","ConnectedOverviewPage","toKafkaHref","toServiceRegistryHref","QuickStartCatalogFederated","ServiceAccountsPageConnected","ServiceDownPage","ArtifactVersionDetailsConnected","artifactId","breadcrumbId","registry","ArtifactsConnected","ArtifactRedirectConnected","DownloadArtifacts","downloadLabel","fileName","downloadLinkLabel","FederatedApicurioComponent","federateConfig","principals","groupId","version","apiUrl","navPathPrefix","artifacts","features","readOnly","breadcrumbs","roleManagement","multiTenant","ui","navPrefixPath","createApicurioConfig","registryUrl","tenantId","RulesPageConnected","ServiceRegistryPageConnected","ServiceRegistryFederated","renderDownloadArtifacts","SrsLayout","SrsLayoutConnected","ServiceRegistrySchemaMapping","ServiceRegistrySchemaMappingConnected","topicName","renderSchema","registryId","GetLink","Link","AccessDeniedPage","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","filterEnvironmentConfig","environmentConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","federatedModulesConfig","beta","entries","k","v","substring","EmbeddedConfigProvider","fetchConfig","setValue","jsonConfig","ConfigContext","ConstantContext","useConstants","useContext","ServiceConstantsContextProvider","FeatureFlagsContext","useFeatureFlags","FeatureFlagProvider","middleware","register","notifications","routeFocusTimer","useA11yRouteChange","lastNavigation","useLastLocation","clearTimeout","PageNotFoundRoute","flattenedRoutes","routes","reduce","flattened","route","release","pathName","shift","accessibleRouteChangeHandler","setTimeout","mainContainer","getElementById","focus","useDocumentTitle","originalTitle","REFRESH_TOKEN_COOKIE_NAME","initKeycloak","initOptions","responseMode","enableLogging","retrieveRefreshToken","refreshToken","buildTokenEndPointUrl","URLSearchParams","append","method","headers","status","token","onLoad","has","keycloak","storeRefreshToken","encoded","storedToken","Base64","storedRefreshToken","JSON","refreshJWT","clearRefreshToken","exp","getUnixTime","Date","insightsToken","rhUserId","insightsJWT","stringify","getAccessToken","updateToken","tokenParsed","accountId","logout"],"sourceRoot":""}