{"version":3,"file":"2367.8181007e3e71c56f8cc5.js","mappings":"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","sources":["webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/utils/Routing.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederatedComponent.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Dashboard.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistrySchemaMapping.tsx","webpack://application-services-ui/./src/app/pages/Kafka/kafka-instance.ts","webpack://application-services-ui/./src/app/pages/Kafka/Settings.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaRoutes.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/ConsumerGroups.tsx","webpack://application-services-ui/./src/app/pages/Kafka/AclPermissions.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaTopicsFromAdmin.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchTopicsMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/SettingsTab.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchSettings.ts","webpack://application-services-ui/./src/app/pages/Kafka/KafkaMainView.tsx","webpack://application-services-ui/./src/app/pages/Kafka/ConnectedMetrics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaInstanceMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchMetricsKpi.ts","webpack://application-services-ui/./src/app/AppRoutes.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/PrincipalsProvider/PrincipalsProvider.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/hooks/modal.ts","webpack://application-services-ui/./src/app/hooks/insights.ts","webpack://application-services-ui/./src/app/hooks/keycloak.ts","webpack://application-services-ui/./src/app/hooks/useSSOProviders.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/hooks/usePrincipals.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/providers/auth/auth.ts","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/providers/config/ServiceConstants.ts","webpack://application-services-ui/./src/app/providers/config/ServiceConstantsContextProvider.tsx","webpack://application-services-ui/./src/app/providers/featureflags/FeatureFlags.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/getBaseName.ts"],"sourcesContent":["import { useEffect } from \"react\";\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import { ComponentType, FunctionComponent, lazy } from \"react\";\nimport { Route, RouteComponentProps } from \"react-router-dom\";\nimport { useDocumentTitle } from \"@app/utils\";\n\nconst NotFoundPage = lazy(() => import(\"@app/pages/NotFound/NotFoundPage\"));\n\nexport interface IAppRoute<T> {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: ComponentType<RouteComponentProps> | ComponentType<T>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup<T> {\n  label: string;\n  routes: IAppRoute<T>[];\n}\n\nexport type AppRouteConfig<T> = IAppRoute<T> | IAppRouteGroup<T>;\n\nexport const PageNotFoundRoute: FunctionComponent<{ title: string }> = ({\n  title,\n}: {\n  title: string;\n}) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage} />;\n};\n\nexport const flattenedRoutes = <T,>(routes: AppRouteConfig<T>[]) =>\n  routes.reduce(\n    (flattened, route) => [\n      ...flattened,\n      ...(route.routes ? route.routes : [route]),\n    ],\n    [] as IAppRoute<T>[]\n  );\n","import { FederatedModule } from \"@app/components\";\nimport { KafkaRequestWithSize } from \"@app/pages/Kafka/kafka-instance\";\nimport { FunctionComponent } from \"react\";\n\nexport type KafkaFederatedComponentProps = UnderlyingProps & {\n  module: string;\n};\n\nexport type UnderlyingProps = {\n  activeTab?: number;\n  getToken?: () => Promise<string> | undefined;\n  apiBasePath?: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  showMetrics?: JSX.Element;\n  showSchemas?: JSX.Element;\n  kafka?: Required<KafkaRequestWithSize>;\n  redirectAfterDeleteInstance?: () => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  showSettings?: JSX.Element;\n};\n\n// Provides properties for component path and it's underlying properties\nexport const KafkaFederatedComponent: FunctionComponent<\n  KafkaFederatedComponentProps\n> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => <FederatedKafka {...rest} />}\n    />\n  );\n};\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const Dashboard: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./Dashboard\" {...props} />\n);\n","import {\n  Main,\n  NotAuthorized,\n} from \"@redhat-cloud-services/frontend-components\";\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { FunctionComponent } from \"react\";\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: FunctionComponent<GetLinkProps> = ({ href, children }) => (\n  <Link to={href || \"\"}>{children}</Link>\n);\n\nexport const AccessDeniedPage: FunctionComponent = () => {\n  const { t } = useTranslation([\"appTemporaryFixMe\"]);\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t(\"accessdenied.accessDeniedTitle\")}\n        description={accessDeniedDetails}\n        prevPageButtonText={t(\"accessdenied.accessDeniedButtonText\")}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import {\n  LazyExoticComponent,\n  useCallback,\n  useState,\n  VoidFunctionComponent,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FederatedModule, KasModalLoader } from \"@app/components\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { useModalControl, useQuota } from \"@app/hooks\";\nimport {\n  AppServicesLoading,\n  DevelopmentPreview,\n  TermsAndConditionModal,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  ProductType,\n  QuotaContext,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { ITermsConfig } from \"@app/services\";\nimport { DownloadArtifacts } from \"./DownloadArtifacts\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\nimport { useAuth } from \"@app/providers/auth\";\n\nexport const ServiceRegistryPage: VoidFunctionComponent = () => {\n  const { getQuota } = useQuota(ProductType.srs);\n\n  return (\n    <QuotaContext.Provider value={{ getQuota }}>\n      <KasModalLoader>\n        <FederatedModule\n          scope=\"srs\"\n          module=\"./ServiceRegistry\"\n          fallback={<AppServicesLoading />}\n          render={(component) => (\n            <ServiceRegistryPageConnected Component={component} />\n          )}\n        />\n      </KasModalLoader>\n    </QuotaContext.Provider>\n  );\n};\n\nexport const ServiceRegistryPageConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const { t } = useTranslation([\"service-registry\"]);\n\n  const constants = useConstants();\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.serviceRegistry.ams.termsAndConditionsEventCode,\n    siteCode: constants.serviceRegistry.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n\n  //states\n  const [isOpenModal, setIsOpenModal] = useState<boolean>(false);\n  const [url, setUrl] = useState<string>(\"\");\n\n  const handlePreCreateInstance = useCallback(\n    async (open: boolean) => {\n      const { shouldOpenCreateModal, url } = await preCreateInstance(open);\n      if (shouldOpenCreateModal === false && url) {\n        setIsOpenModal(true);\n        setUrl(url);\n        return false;\n      }\n      return true;\n    },\n    [preCreateInstance, setIsOpenModal, setUrl]\n  );\n\n  const onClsoeModal = useCallback(() => {\n    setIsOpenModal(false);\n  }, [setIsOpenModal]);\n\n  const onClickViewTermsConditions = useCallback(async () => {\n    window.location.href = url;\n  }, [url]);\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (config.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <>\n      <TermsAndConditionModal\n        isModalOpen={isOpenModal}\n        serviceName={t(\"service_registry\")}\n        ouiaIdModal=\"modal-SrvRegTerms\"\n        ouiaIdButtonViewTerms=\"button-view-terms\"\n        ouiaIdButtonCancel=\"button-cancel\"\n        onClickViewTermsConditions={onClickViewTermsConditions}\n        onCancel={onClsoeModal}\n      />\n      <DevelopmentPreview>\n        <Component\n          preCreateInstance={handlePreCreateInstance}\n          shouldOpenCreateModal={shouldOpenCreateModal}\n          tokenEndPointUrl={auth?.tokenEndPointUrl}\n          renderDownloadArtifacts={(\n            registry: Registry,\n            downloadLabel?: string\n          ) => (\n            <DownloadArtifacts\n              registry={registry}\n              downloadLabel={downloadLabel}\n            />\n          )}\n        />\n      </DevelopmentPreview>\n    </>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import { FC, LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { FederatedApicurioComponent } from \"./FederatedApicurioComponent\";\nimport { FederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceRegistrySchemaMapping: FC = () => {\n  return (\n    <>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistryMapping\"\n        fallback={<AppServicesLoading />}\n        render={(component) => (\n          <ServiceRegistrySchemaMappingConnected Component={component} />\n        )}\n      />\n    </>\n  );\n};\n\nconst ServiceRegistrySchemaMappingConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const { topicName } = useParams<{ topicName: string }>();\n  const basename = \"/service-registry\";\n\n  return (\n    <Component\n      basename={basename}\n      topicName={topicName}\n      renderSchema={(registry: Registry) => (\n        <FederatedApicurioComponent\n          module=\"./FederatedSchemaMapping\"\n          registry={registry}\n          topicName={topicName}\n          groupId={null}\n          version={\"latest\"}\n          registryId={registry?.id}\n          basename={basename}\n        />\n      )}\n    />\n  );\n};\n","import { useEffect, useState, useCallback } from \"react\";\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\n\n/**\n * Join admin server url template with the kafka bootstrap host and return the kafka admin url.\n *\n * @param kafkaRequest KafkaRequest\n * @returns The admin server full URL included the protocol and base path\n */\n\nexport const getAdminServerUrl = (\n  kafkaRequest?: KafkaRequest\n): string | undefined => {\n  if (!kafkaRequest) {\n    throw new Error(\"kafkaRequest cannot be undefined\");\n  }\n  /**\n   * admin_api_server_url will be available when kafka instance will be ready\n   */\n  return kafkaRequest.admin_api_server_url\n    ? kafkaRequest.admin_api_server_url\n    : undefined;\n};\n\nexport type KafkaInstance = {\n  kafkaDetail: Required<KafkaRequestWithSize>;\n  adminServerUrl: string | undefined;\n};\n\nexport type KafkaRequestWithSize = KafkaRequest & {\n  size: SupportedKafkaSize;\n};\n\nexport const useKafkaInstance = (\n  id: string | undefined\n): KafkaInstance | false | undefined => {\n  const {\n    kas: { apiBasePath },\n  } = useConfig();\n  const {\n    kas: { getToken },\n  } = useAuth();\n  const [kafkaRequest, setKafkaRequest] = useState<\n    KafkaRequestWithSize | false | undefined\n  >();\n  const getKafkaSize = useGetAvailableSizes();\n\n  const fetchKafka = useCallback(\n    async (id: string) => {\n      setKafkaRequest(undefined);\n      const kasService = new DefaultApi({\n        accessToken: getToken,\n        basePath: apiBasePath,\n      } as Configuration);\n      try {\n        const kafka = await kasService.getKafkaById(id);\n\n        const { cloud_provider, region, instance_type, size_id } = kafka.data;\n        if (!cloud_provider || !region || !size_id || !instance_type) {\n          throw new Error(\n            `Kafka instance ${kafka.data.id} missing some required info: ${cloud_provider}, ${region}, ${instance_type}, ${size_id}`\n          );\n        }\n        const size = await getKafkaSize(\n          cloud_provider,\n          region,\n          size_id,\n          instance_type\n        );\n\n        setKafkaRequest({\n          ...kafka.data,\n          size,\n        });\n      } catch (e) {\n        setKafkaRequest(false);\n      }\n    },\n    [apiBasePath, getKafkaSize, getToken]\n  );\n\n  useEffect(() => {\n    if (id) {\n      fetchKafka(id);\n    } else {\n      setKafkaRequest(undefined);\n    }\n  }, [fetchKafka, id]);\n\n  return kafkaRequest\n    ? {\n        kafkaDetail: kafkaRequest as Required<KafkaRequestWithSize>,\n        adminServerUrl: getAdminServerUrl(kafkaRequest),\n      }\n    : kafkaRequest;\n};\n\n/**\n * Return list of the instance types available for the current user\n *\n * @returns {Promise<InstanceType[]>}\n */\n\nexport const useGetAvailableSizes = () => {\n  const {\n    kas: { getToken },\n  } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  return useCallback(\n    async (\n      provider: string,\n      region: string,\n      sizeId: string,\n      instanceType: string\n    ): Promise<SupportedKafkaSize> => {\n      try {\n        const api = new DefaultApi(\n          new Configuration({\n            accessToken: getToken(),\n            basePath,\n          })\n        );\n\n        const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n          provider,\n          region\n        );\n\n        if (!sizes?.data?.instance_types) {\n          throw new Error(\n            `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}, no instance_types returned`\n          );\n        }\n        const instanceTypesSizes = sizes?.data?.instance_types.find(\n          (i) => i.id === instanceType\n        )?.sizes;\n        const size = instanceTypesSizes?.find((s) => s.id === sizeId);\n\n        if (!size) {\n          throw new Error(\n            `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}, can't find a size matching ${sizeId}`\n          );\n        }\n\n        return size;\n      } catch (e: unknown) {\n        throw new Error(\n          `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}: ${e}`\n        );\n      }\n    },\n    [getToken, basePath]\n  );\n};\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const Settings: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./Settings\" {...props} />\n);\n","import {\n  ComponentType,\n  FunctionComponent,\n  ReactElement,\n  useCallback,\n  VoidFunctionComponent,\n} from \"react\";\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport {\n  AppRouteConfig,\n  flattenedRoutes,\n  IAppRoute,\n  PageNotFoundRoute,\n} from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport {\n  CreateTopic,\n  TopicDetails,\n  Topics,\n  UpdateTopic,\n  Dashboard,\n  ConsumerGroups,\n  AclPermissions,\n} from \"@app/pages\";\nimport { Settings } from \"@app/pages/Kafka/Settings\";\nimport { UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { BasenameContext } from \"@rhoas/app-services-ui-shared\";\nimport { useKafkaInstanceDrawer } from \"@app/components\";\n\nconst kafkaRoutes: AppRouteConfig<UnderlyingProps>[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topics\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topics/:topicName\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topic/create\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topic/update/:topicName\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/dashboard\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: ConsumerGroups,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/consumer-groups\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: AclPermissions,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/acls\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: Settings,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/settings\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n];\nconst flatRoutes = flattenedRoutes(kafkaRoutes);\n\ntype WrappedRouteProps = IAppRoute<UnderlyingProps> & {\n  underlyingProps: UnderlyingProps;\n  url: string;\n  InstanceDrawer: ComponentType;\n};\n\n/**\n * The wrapped route allows us to apply the basename, document title and accessible route change for all components\n * without having to add these to each component. They must happen inside the route.\n */\nconst WrappedRoute: FunctionComponent<WrappedRouteProps> = ({\n  component: Component,\n  InstanceDrawer,\n  isAsync = false,\n  title,\n  underlyingProps,\n  url,\n  ...rest\n}) => {\n  useDocumentTitle(title);\n\n  const getBasename = () => {\n    return url;\n  };\n\n  return (\n    <Route\n      render={(routeProps) => {\n        return (\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...underlyingProps} {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        );\n      }}\n      {...rest}\n    />\n  );\n};\n\nconst KafkaRoutes: VoidFunctionComponent<\n  UnderlyingProps & { InstanceDrawer: ComponentType<any> }\n> = ({ InstanceDrawer, ...props }): ReactElement => {\n  const routeMatch = useRouteMatch();\n  const { kafka } = props;\n\n  const drawerProps = useKafkaInstanceDrawer();\n  const handleInstanceDrawer: (isOpen: boolean, activeTab?: string) => void =\n    useCallback(\n      (isOpen, activeTab) => {\n        if (isOpen) {\n          drawerProps.openDrawer(activeTab);\n        } else {\n          drawerProps.closeDrawer();\n        }\n      },\n      [drawerProps]\n    );\n\n  return (\n    <InstanceDrawer\n      data-ouia-app-id=\"dataPlane-streams\"\n      drawerInstance={kafka}\n      setDrawerInstance={() => false} // can't change the instance from the data plane\n      {...drawerProps}\n    >\n      <Switch>\n        {flatRoutes.map(\n          ({ path, exact, component, title, isAsync, ...rest }, idx) => {\n            const routePath = `${routeMatch.path}${path}`;\n            console.log(`Creating route for ${routePath}`);\n            return (\n              <WrappedRoute\n                path={routePath}\n                exact={exact}\n                component={component}\n                key={idx}\n                title={title}\n                isAsync={isAsync}\n                underlyingProps={{\n                  ...props,\n                  handleInstanceDrawer,\n                }}\n                url={routeMatch.url}\n                InstanceDrawer={InstanceDrawer}\n                {...rest}\n              />\n            );\n          }\n        )}\n        <PageNotFoundRoute title=\"404 Page Not Found\" />\n      </Switch>\n    </InstanceDrawer>\n  );\n};\n\nexport { KafkaRoutes, kafkaRoutes };\n","import { FunctionComponent } from \"react\";\nimport {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const Topics: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./Topics\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const TopicDetails: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./TopicDetails\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const CreateTopic: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./CreateTopic\" {...props} />\n);\n","import { FunctionComponent } from \"react\";\nimport {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const UpdateTopic: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./UpdateTopic\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const ConsumerGroups: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./ConsumerGroups\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const AclPermissions: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./AclPermissions\" {...props} />\n);\n","import { TopicsApi, Topic } from \"@rhoas/kafka-instance-sdk\";\nimport { Configuration } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters } from \"./types\";\n\nexport async function fetchKafkaTopisFromAdmin({\n  accessToken,\n  basePath,\n}: BasicApiConfigurationParameters): Promise<string[]> {\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  const response = await api.getTopics(\n    undefined,\n    100,\n    100,\n    undefined,\n    undefined,\n    undefined,\n    undefined\n  );\n  return (response.data.items || []).map((t: Topic) => t.name as string);\n}\n","import {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from \"./types\";\n\nexport type FetchTopicsMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchTopicMetrics({\n  accessToken,\n  basePath,\n  kafkaId,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(\n    kafkaId,\n    duration,\n    interval,\n    [\n      \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n      \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n      \"kafka_topic:kafka_log_log_size:sum\",\n      \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n    ]\n  );\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import { VoidFunctionComponent, useCallback } from \"react\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { Settings } from \"@rhoas/app-services-ui-components\";\nimport { fetchSettings } from \"./api\";\n\ntype SettingsTabProps = {\n  kafkaId: string;\n  owner: string;\n  reauthenticationEnabled: boolean;\n};\n\nexport const SettingsTab: VoidFunctionComponent<SettingsTabProps> = ({\n  kafkaId,\n  owner,\n  reauthenticationEnabled,\n}) => {\n  const auth = useAuth();\n  const config = useConfig();\n\n  const onSubmitReAuthentication = useCallback(\n    (reauthenticationEnabled: boolean) => {\n      return fetchSettings({\n        kafkaId,\n        basePath: config.kas.apiBasePath,\n        accessToken: auth?.kas.getToken(),\n        owner,\n        settings: reauthenticationEnabled,\n      });\n    },\n    [config.kas.apiBasePath, auth?.kas, owner, kafkaId]\n  );\n\n  return (\n    <Settings\n      onSubmitReAuthentication={onSubmitReAuthentication}\n      reauthenticationEnabled={reauthenticationEnabled}\n    />\n  );\n};\n","import { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters } from \"./types\";\n\ntype fetchSettingsProp = {\n  kafkaId: string;\n  owner: string;\n  settings: boolean;\n} & BasicApiConfigurationParameters;\nexport async function fetchSettings({\n  kafkaId,\n  owner,\n  settings,\n  accessToken,\n  basePath,\n}: fetchSettingsProp): Promise<boolean> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  const response = await apisService.updateKafkaById(kafkaId, {\n    owner: owner,\n    reauthentication_enabled: settings,\n  });\n\n  return response.data.reauthentication_enabled;\n}\n","import { useCallback, useMemo, useState, VoidFunctionComponent } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  AccessDeniedPage,\n  ConnectedMetrics,\n  ServiceDownPage,\n} from \"@app/pages\";\nimport {\n  KafkaInstance,\n  useKafkaInstance,\n} from \"@app/pages/Kafka/kafka-instance\";\nimport { UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { PrincipalsProvider } from \"@app/components/PrincipalsProvider/PrincipalsProvider\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { ServiceRegistrySchemaMapping } from \"@app/pages/ServiceRegistry\";\nimport { KafkaRoutes } from \"./KafkaRoutes\";\nimport { FederatedModule } from \"@app/components\";\nimport { SettingsTab } from \"./SettingsTab\";\n\nexport const KafkaMainView: VoidFunctionComponent = () => {\n  const config = useConfig();\n  const { id: kafkaInstanceId } = useParams<{ id: string }>();\n  const kafka = useKafkaInstance(kafkaInstanceId);\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  if (kafka === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (kafka === false) {\n    throw new Error(\"404\");\n  }\n\n  return <KafkaMainViewConnected kafka={kafka} />;\n};\n\nexport const KafkaMainViewConnected: VoidFunctionComponent<{\n  kafka: KafkaInstance;\n}> = ({ kafka }) => {\n  return (\n    <PrincipalsProvider kafkaInstance={kafka.kafkaDetail}>\n      <ConnectedKafkaRoutes kafka={kafka} />\n    </PrincipalsProvider>\n  );\n};\n\nconst ConnectedKafkaRoutes: VoidFunctionComponent<{\n  kafka: KafkaInstance;\n}> = ({ kafka: { kafkaDetail, adminServerUrl } }) => {\n  const {\n    kafka: { getToken },\n  } = useAuth();\n  const history = useHistory();\n  const [error, setError] = useState<undefined | number>();\n\n  const onError = useCallback((code: number) => {\n    setError(code);\n  }, []);\n\n  const redirectAfterDeleteInstance = useCallback(() => {\n    history.push(\"/streams/kafkas\");\n  }, [history]);\n\n  const showMetrics = useMemo(\n    () => (\n      <ConnectedMetrics\n        kafkaId={kafkaDetail.id}\n        kafkaAdminUrl={adminServerUrl}\n        totalMaxConnections={kafkaDetail.size.total_max_connections || 0}\n        maxConnections={kafkaDetail.size.max_connection_attempts_per_sec || 0}\n        maxPartitions={kafkaDetail.size.max_partitions || 0}\n        kafkaStorageBytes={kafkaDetail.max_data_retention_size?.bytes || 0}\n      />\n    ),\n    [adminServerUrl, kafkaDetail]\n  );\n  const showSchemas = useMemo(() => <ServiceRegistrySchemaMapping />, []);\n\n  const showSettings = useMemo(\n    () => (\n      <SettingsTab\n        kafkaId={kafkaDetail.id}\n        owner={kafkaDetail.owner}\n        reauthenticationEnabled={kafkaDetail.reauthentication_enabled}\n      />\n    ),\n    [kafkaDetail.id, kafkaDetail.owner, kafkaDetail.reauthentication_enabled]\n  );\n\n  const props = useMemo<Partial<UnderlyingProps>>(\n    () => ({\n      kafkaPageLink: \"/streams/kafkas\",\n      kafkaInstanceLink: `/streams/kafkas/${kafkaDetail.id}/topics`,\n      showMetrics,\n      onError,\n      kafkaName: kafkaDetail.name,\n      apiBasePath: adminServerUrl,\n      getToken: getToken,\n      showSchemas,\n      kafka: kafkaDetail,\n      redirectAfterDeleteInstance,\n      showSettings,\n    }),\n    [\n      adminServerUrl,\n      getToken,\n      kafkaDetail,\n      onError,\n      redirectAfterDeleteInstance,\n      showMetrics,\n      showSchemas,\n      showSettings,\n    ]\n  );\n\n  if (error === 401) {\n    return <AccessDeniedPage />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={null}\n      render={(InstanceDrawer) => (\n        <KafkaRoutes {...props} InstanceDrawer={InstanceDrawer} />\n      )}\n    />\n  );\n};\n","import { useCallback, useState, VoidFunctionComponent } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth, useBasename, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport {\n  AppServicesLoading,\n  Metrics,\n  MetricsProps,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  fetchKafkaInstanceMetrics,\n  fetchKafkaTopisFromAdmin,\n  fetchMetricsKpi,\n  fetchTopicMetrics,\n} from \"./api\";\n\ntype ConnectedMetricsProps = {\n  kafkaId: string;\n  kafkaAdminUrl: string | undefined;\n  totalMaxConnections: number;\n  maxConnections: number;\n  maxPartitions: number;\n  kafkaStorageBytes: number;\n};\n\nexport const ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  kafkaId,\n  kafkaAdminUrl,\n  totalMaxConnections,\n  maxConnections,\n  maxPartitions,\n  kafkaStorageBytes,\n}) => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n\n  const storageKey = `metrics-alert-${kafkaId}`;\n\n  const [isAlertClosed, setIsAlertClosed] = useState<boolean>(\n    localStorage.getItem(storageKey) !== null\n  );\n\n  const onAlertClose = () => {\n    setIsAlertClosed(true);\n    localStorage.setItem(storageKey, \"true\");\n  };\n\n  const onCreateTopic = () => {\n    history.push(`${basename}/topic/create`);\n  };\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async (props) => {\n        const kafkaResponse = await fetchKafkaInstanceMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        });\n\n        return {\n          ...kafkaResponse,\n          diskSpaceLimit: kafkaStorageBytes / 1073741824,\n          connectionsLimit: totalMaxConnections,\n          connectionRateLimit: maxConnections,\n        };\n      },\n      [\n        auth,\n        config,\n        kafkaId,\n        kafkaStorageBytes,\n        totalMaxConnections,\n        maxConnections,\n      ]\n    );\n\n  const getTopicMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async (props) => {\n      const [kafkaTopics, metrics] = await Promise.all([\n        fetchKafkaTopisFromAdmin({\n          accessToken: auth?.kafka.getToken(),\n          basePath: kafkaAdminUrl,\n        }),\n        fetchTopicMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        }),\n      ]);\n      const {\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      } = metrics;\n      return {\n        kafkaTopics,\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      };\n    },\n    [auth?.kafka, auth?.kas, config.kas.apiBasePath, kafkaAdminUrl, kafkaId]\n  );\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpiResponse = await fetchMetricsKpi({\n      kafkaId,\n      basePath: config.kas.apiBasePath,\n      accessToken: auth?.kas.getToken(),\n    });\n\n    return { ...kpiResponse, topicPartitionsLimit: maxPartitions };\n  }, [auth?.kas, config.kas.apiBasePath, kafkaId, maxPartitions]);\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <Metrics\n      onCreateTopic={onCreateTopic}\n      getTopicsMetrics={getTopicMetrics}\n      getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      getMetricsKpi={getMetricsKpi}\n      isClosed={isAlertClosed}\n      onClickClose={onAlertClose}\n    />\n  );\n};\n","import {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from \"./types\";\n\ntype FetchKafkaInstanceMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n} & BasicApiConfigurationParameters;\nexport async function fetchKafkaInstanceMetrics({\n  kafkaId,\n  duration,\n  interval,\n  accessToken,\n  basePath,\n}: FetchKafkaInstanceMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(\n    kafkaId,\n    duration,\n    interval,\n    [\n      \"kubelet_volume_stats_used_bytes\",\n      \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n      \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n    ]\n  );\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","import { GetMetricsKpiResponse } from \"@rhoas/app-services-ui-components\";\nimport {\n  Configuration,\n  DefaultApi,\n  InstantQuery,\n} from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, NoUndefinedField } from \"./types\";\n\nexport type FetchMetricsKpiProps = {\n  kafkaId: string;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchMetricsKpi({\n  accessToken,\n  basePath,\n  kafkaId,\n}: FetchMetricsKpiProps): Promise<\n  Omit<GetMetricsKpiResponse, \"kafkaTopics\" | \"topicPartitionsLimit\">\n> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await apisService.getMetricsByInstantQuery(kafkaId, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import {\n  FunctionComponent,\n  lazy,\n  useCallback,\n  VoidFunctionComponent,\n  Suspense,\n} from \"react\";\nimport {\n  Redirect,\n  Route,\n  RouteComponentProps,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport {\n  DevelopmentPreview,\n  AppServicesPageNotFound,\n  AppServicesEmptyState,\n  AppServicesEmptyStateVariant,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  AppRouteConfig,\n  flattenedRoutes,\n  IAppRoute,\n  PageNotFoundRoute,\n} from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport { KafkaMainView } from \"@app/pages/Kafka\";\nimport { BasenameContext } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@patternfly/react-core\";\n\nconst QuickStartLoaderFederated = lazy(\n  () => import(\"@app/pages/Resources/QuickStartLoaderFederated\")\n);\n\nconst APIManagementPage = lazy(\n  () => import(\"@app/pages/APIManagement/APIManagementPage\")\n);\n\nconst DataSciencePage = lazy(\n  () => import(\"@app/pages/DataScience/DataSciencePage\")\n);\nconst KafkaOverviewPage = lazy(\n  () => import(\"@app/pages/KafkaOverview/KafkaOverviewPage\")\n);\n\nconst KasPage = lazy(() => import(\"@app/pages/Kas/KasPage\"));\nconst OverviewPage = lazy(() => import(\"@app/pages/Overview/OverviewPage\"));\nconst ResourcesPage = lazy(() => import(\"@app/pages/Resources/ResourcesPage\"));\nconst ServiceAccountsPage = lazy(\n  () => import(\"@app/pages/ServiceAccounts/ServiceAccountsPage\")\n);\n\nconst RedirectToOverview: FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: FunctionComponent = () => (\n  <Redirect to=\"/streams/kafkas\" />\n);\nconst RedirectToServiceAccounts: FunctionComponent = () => (\n  <Redirect to=\"/service-accounts\" />\n);\nconst RedirectToResources: FunctionComponent = () => (\n  <Redirect to=\"/learning-resources\" />\n);\n\nconst appRoutes: AppRouteConfig<unknown>[] = [\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: \"Overview\",\n    path: \"/\",\n    title: \"Overview | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: \"Overview\",\n    path: \"/overview\",\n    title: \"Overview | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: \"API Management\",\n    path: \"/api-management\",\n    title: \"API Management | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: \"Data Science\",\n    path: \"/data-science\",\n    title: \"Data Science | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: \"Learning Resources | Red Hat OpenShift Application Services\",\n    path: \"/learning-resources\",\n    title: \"Learning Resources | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n  /**\n   * STREAMS SECTION\n   */\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: KafkaOverviewPage,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/overview\",\n    title:\n      \"Overview | Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/kafkas\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n    basename: \"/streams/kafkas\",\n    devPreview: false,\n  },\n  {\n    component: RedirectToServiceAccounts,\n    exact: true,\n    label: \"Service Accounts\",\n    path: \"/streams/service-accounts\",\n    title: \"Service Accounts | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n  {\n    // Handle the redirect for the old url application-services/streams/resources to application-services/learning-resources\n    component: RedirectToResources,\n    label: \"QuickStarts for Red Hat OpenShift Application Services\",\n    path: \"/streams/resources\",\n    title: \"QuickStarts for Red Hat OpenShift Application Services\",\n    devPreview: true,\n  },\n  // this needs to be the last route for the streams section since it's the catch-all one\n  {\n    component: KafkaMainView,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/kafkas/:id\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n    basename: \"/streams/kafkas/:id\",\n    devPreview: false,\n  },\n  /**\n   * END OF STREAMS SECTION\n   */\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: \"Service Accounts\",\n    path: \"/service-accounts\",\n    title: \"Service Accounts | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n\n  // old url handling\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/openshift-streams\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n];\n\nconst WrappedRoute: FunctionComponent<IAppRoute<unknown>> = ({\n  component: Component,\n  title,\n  basename,\n  devPreview,\n  ...rest\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  useDocumentTitle(title);\n  const getBasename = useCallback(() => {\n    return basename || \"\";\n  }, [basename]);\n  const onClickButton = useCallback(() => history.push(\"/\"), [history]);\n\n  const wrapRoute = useCallback(\n    (routeProps: RouteComponentProps) => {\n      return (\n        <ErrorBoundary\n          fallbackRender={({ error }) =>\n            error.message === \"404\" ? (\n              <AppServicesPageNotFound />\n            ) : (\n              <AppServicesEmptyState\n                emptyStateProps={{\n                  variant: AppServicesEmptyStateVariant.UnexpectedError,\n                }}\n                emptyStateIconProps={{\n                  className: \"icon-color\",\n                }}\n                titleProps={{\n                  title: t(\"common:something_went_wrong\"),\n                }}\n                emptyStateBodyProps={{\n                  body: t(\"common:unexpected_error\"),\n                }}\n              >\n                <Button onClick={onClickButton}>\n                  {t(\"common:return_to_home_page\")}\n                </Button>\n              </AppServicesEmptyState>\n            )\n          }\n        >\n          <DevelopmentPreview show={devPreview}>\n            <BasenameContext.Provider value={{ getBasename }}>\n              <Component {...rest} {...routeProps} />\n            </BasenameContext.Provider>\n          </DevelopmentPreview>\n        </ErrorBoundary>\n      );\n    },\n    [Component, devPreview, getBasename, onClickButton, rest, t]\n  );\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst AppRoutes: VoidFunctionComponent = () => {\n  return (\n    <>\n      <Suspense fallback={<AppServicesLoading />}>\n        <Switch>\n          {flattenedRoutes(appRoutes).map(\n            ({ path, exact, component, title, isAsync, ...rest }, idx) => (\n              <WrappedRoute\n                path={path}\n                exact={exact}\n                component={component}\n                key={idx}\n                title={title}\n                isAsync={isAsync}\n                {...rest}\n              />\n            )\n          )}\n          <PageNotFoundRoute title=\"404 Page Not Found\" />\n        </Switch>\n      </Suspense>\n      <QuickStartLoaderFederated />\n    </>\n  );\n};\n\nexport { AppRoutes, appRoutes };\n","import { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { NotificationsPortal } from \"@redhat-cloud-services/frontend-components-notifications\";\nimport { AppRoutes } from \"@app/AppRoutes\";\nimport { useInsights } from \"@app/hooks\";\nimport { Page } from \"@patternfly/react-core\";\nimport \"./App.css\";\n\nexport const App: FunctionComponent = () => {\n  const insights = useInsights();\n  const history = useHistory();\n\n  const getAppId = useCallback(() => {\n    const defaultAppId = \"overview\";\n\n    const parts = history.location.pathname.split(\"/\");\n    if (parts.length > 1) {\n      if (parts[1] === \"\") {\n        return defaultAppId;\n      } else {\n        if (parts[1] === \"openshift-streams\") {\n          return \"streams\";\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  }, [history]);\n\n  useEffect(() => {\n    const unregister = insights.chrome.on(\"APP_NAVIGATION\", (event) => {\n      if (event?.domEvent?.href) {\n        const pathName = event?.domEvent?.href\n          .replace(\"/application-services\", \"/\")\n          .replace(/^\\/\\//gm, \"/\");\n        history.push(pathName);\n      }\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Page>\n        <AppRoutes />\n      </Page>\n    </>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport {\n  Configuration,\n  KafkaRequest,\n  SecurityApi,\n} from \"@rhoas/kafka-management-sdk\";\nimport {\n  Principal,\n  PrincipalsContext,\n  PrincipalType,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport {\n  PrincipalApi,\n  Principal as PrincipalSDK,\n} from \"@redhat-cloud-services/rbac-client\";\n\nexport type PrincipalsProviderProps = {\n  kafkaInstance?: KafkaRequest;\n};\n\nexport const usePrincipal = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [serviceAccountPrincipals, setServiceAccountPrincipals] = useState<\n    Principal[] | undefined\n  >();\n  const [userAcountPrincipals, setUserAccountPrincipals] = useState<\n    Principal[] | undefined\n  >();\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      if (\n        config !== undefined &&\n        auth !== undefined &&\n        config.rbac.basePath !== undefined\n      ) {\n        const accessToken = await auth.kas.getToken();\n        const principalApi = new PrincipalApi({\n          accessToken,\n          basePath: config?.rbac.basePath,\n        });\n\n        try {\n          const userAccounts = await principalApi\n            .listPrincipals(-1)\n            .then((response) =>\n              response.data.data.map((p) => {\n                const pp = p as PrincipalSDK;\n                return {\n                  id: p.username,\n                  principalType: PrincipalType.UserAccount,\n                  displayName: `${pp.first_name} ${pp.last_name}`,\n                  emailAddress: pp.email,\n                } as Principal;\n              })\n            );\n          setUserAccountPrincipals(userAccounts);\n        } catch (e) {\n          // temp fix - this API is only available to org admins\n          // needs a proper approach longer term\n        }\n      }\n    };\n    fetchUserAccounts();\n  }, [auth, config]);\n\n  useEffect(() => {\n    const fetchServiceAccounts = async () => {\n      if (\n        config !== undefined &&\n        auth !== undefined &&\n        config.rbac.basePath !== undefined\n      ) {\n        const accessToken = await auth.kas.getToken();\n        const securityApi = new SecurityApi({\n          accessToken,\n          basePath: config.kas.apiBasePath,\n        } as Configuration);\n        const serviceAccounts = await securityApi\n          .getServiceAccounts()\n          .then((response) =>\n            response.data.items.map((sa) => {\n              return {\n                id: sa.client_id,\n                displayName: sa.name,\n                principalType: PrincipalType.ServiceAccount,\n              } as Principal;\n            })\n          );\n\n        setServiceAccountPrincipals(serviceAccounts);\n      }\n    };\n    fetchServiceAccounts();\n  }, [auth, config]);\n\n  const getAllPrincipals = useCallback(() => {\n    let answer: Principal[] = [];\n    if (\n      userAcountPrincipals !== undefined &&\n      serviceAccountPrincipals !== undefined\n    ) {\n      answer = answer.concat(userAcountPrincipals);\n    }\n    if (serviceAccountPrincipals !== undefined) {\n      answer = answer.concat(serviceAccountPrincipals);\n    }\n    return answer;\n  }, [serviceAccountPrincipals, userAcountPrincipals]);\n\n  const getAllUserAccounts = useCallback(\n    () => userAcountPrincipals || [],\n    [userAcountPrincipals]\n  );\n  const getAllServiceAccounts = useCallback(\n    () => serviceAccountPrincipals || [],\n    [serviceAccountPrincipals]\n  );\n\n  return {\n    getAllPrincipals,\n    getAllUserAccounts,\n    getAllServiceAccounts,\n  };\n};\n\nexport const PrincipalsProvider: FunctionComponent<PrincipalsProviderProps> = ({\n  children,\n}) => {\n  const value = usePrincipal();\n  return (\n    <PrincipalsContext.Provider value={value}>\n      {children}\n    </PrincipalsContext.Provider>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth } from \"@app/providers/auth\";\n\nexport function useKafkaInstanceDrawer() {\n  const history = useHistory();\n  const auth = useAuth();\n\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [drawerActiveTab, setDrawerActiveTab] = useState<string | undefined>(\n    undefined\n  );\n\n  const openDrawer = useCallback((tab: string | undefined) => {\n    if (tab) {\n      setDrawerActiveTab(tab);\n    }\n    setIsDrawerOpen(true);\n  }, []);\n\n  const closeDrawer = useCallback(() => {\n    setDrawerActiveTab(undefined);\n    setIsDrawerOpen(false);\n  }, []);\n\n  const onDeleteInstance = () => {\n    history.push(\"/streams/kafkas\");\n  };\n\n  return {\n    isDrawerOpen,\n    drawerActiveTab,\n    setDrawerActiveTab,\n    openDrawer,\n    closeDrawer,\n    tokenEndPointUrl: auth?.tokenEndPointUrl,\n    onDeleteInstance,\n  };\n}\n","export type ModuleInfo = {\n  entryPoint: string;\n  basePath: string;\n};\n\nexport type FetchModuleInfoFunction = {\n  (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<\n    ModuleInfo | undefined\n  >;\n};\n\nexport const fetchModuleInfo: FetchModuleInfoFunction = async (\n  baseUrl,\n  scope,\n  fallbackBasePath\n) => {\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[];\n      modules: string[];\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}?ts=${Date.now()}`;\n    const response = await fetch(url);\n    return await response\n      .json()\n      .then((json) => json as FedMods)\n      .then((fedMods) => fedMods[scope])\n      .then((s) => s.entry[0])\n      .then((path) => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath,\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath,\n        };\n      });\n  };\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath);\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n};\n","import { createContext, FunctionComponent, useContext, useRef } from \"react\";\nimport {\n  FederatedModuleConfig,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport {\n  fetchModuleInfo,\n  FetchModuleInfoFunction,\n  ModuleInfo,\n} from \"@app/components/FederatedModule/moduleInfo\";\n\nexport type FederatedModuleContextProps = {\n  modules: {\n    [module: string]: FederatedModuleConfig;\n  };\n  getModuleInfo: FetchModuleInfoFunction;\n};\n\nexport const FederatedModuleContext = createContext<\n  FederatedModuleContextProps | undefined\n>(undefined);\n\nexport const FederatedModuleProvider: FunctionComponent = ({ children }) => {\n  type ModuleInfoCache = {\n    [key: string]: ModuleInfo;\n  };\n\n  const moduleInfoCache = useRef<ModuleInfoCache>({} as ModuleInfoCache);\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const getModuleInfo: FetchModuleInfoFunction = async (\n    baseUrl,\n    scope,\n    fallbackBasePath\n  ) => {\n    if (moduleInfoCache.current[scope] !== undefined) {\n      return moduleInfoCache.current[scope];\n    }\n    const answer = await fetchModuleInfo(baseUrl, scope, fallbackBasePath);\n    if (answer !== undefined) {\n      moduleInfoCache.current[scope] = answer;\n    }\n    return answer;\n  };\n\n  return (\n    <FederatedModuleContext.Provider\n      value={{\n        modules: config.federatedModules,\n        getModuleInfo,\n      }}\n    >\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n};\n\nexport const useFederatedModule = (): FederatedModuleContextProps => {\n  const answer = useContext(FederatedModuleContext);\n  if (answer === undefined) {\n    throw new Error(\"must be used inside FederatedModuleContext provider\");\n  }\n  return answer;\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport {\n  useAuth,\n  useConfig,\n  Quota,\n  QuotaValue,\n  QuotaType,\n  ProductType,\n} from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\n\nexport const useQuota = (productId: ProductType) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const constants = useConstants();\n\n  const [orgId, setOrgId] = useState<string>();\n\n  useEffect(() => {\n    const getCurrentAccount = async () => {\n      if (!orgId) {\n        const accessToken = await auth?.ams.getToken();\n        const ams = new AppServicesApi({\n          accessToken,\n          basePath: config?.ams.apiBasePath || \"\",\n        } as Configuration);\n\n        await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n          const orgID = account?.data?.organization?.id;\n          setOrgId(orgID);\n        });\n      }\n    };\n\n    getCurrentAccount();\n  }, [config, auth, orgId]);\n\n  const getQuotaTypesByProductId = useCallback(() => {\n    const kasQuotaProductId = constants.kafka.ams.quotaProductId;\n    const kasTrialQuotaProductId = constants.kafka.ams.trialQuotaProductId;\n    const kasResourceName = constants.kafka.ams.resourceName;\n\n    const srsQuotaProductId = constants.serviceRegistry.ams.quotaProductId;\n    const srsTrialQuotaProductId =\n      constants.serviceRegistry.ams.trialQuotaProductId;\n    const srsResourceName = constants.serviceRegistry.ams.resourceName;\n\n    if (productId === ProductType.kas) {\n      return {\n        quotaProductId: kasQuotaProductId,\n        trialQuotaProductId: kasTrialQuotaProductId,\n        resourceName: kasResourceName,\n        quotaKey: QuotaType.kas,\n        trialQuotaKey: QuotaType.kasTrial,\n      };\n    } else if (productId === ProductType.srs) {\n      return {\n        quotaProductId: srsQuotaProductId,\n        trialQuotaProductId: srsTrialQuotaProductId,\n        resourceName: srsResourceName,\n        quotaKey: QuotaType.srs,\n        trialQuotaKey: QuotaType.srsTrial,\n      };\n    }\n    throw new Error(\n      `getQuotaTypesByProductId error, unrecognized productId ${productId}`\n    );\n  }, [constants, productId]);\n\n  const getQuota = useCallback(async () => {\n    const quotaData = new Map<QuotaType, QuotaValue>();\n    const filteredQuota: Quota = {\n      loading: true,\n      isServiceDown: false,\n      data: undefined,\n    };\n\n    if (orgId) {\n      const {\n        quotaProductId,\n        trialQuotaProductId,\n        resourceName,\n        quotaKey,\n        trialQuotaKey,\n      } = getQuotaTypesByProductId() || {};\n\n      const accessToken = await auth?.ams.getToken();\n      const ams = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || \"\",\n      } as Configuration);\n\n      try {\n        const response =\n          await ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n            orgId,\n            undefined,\n            true\n          );\n\n        const quota = response?.data?.items?.find((q) =>\n          q.related_resources?.find(\n            (r) =>\n              r.resource_name === resourceName && r.product === quotaProductId\n          )\n        );\n        const trialQuota = response?.data?.items?.find((q) =>\n          q.related_resources?.find(\n            (r) =>\n              r.resource_name === resourceName &&\n              r.product === trialQuotaProductId\n          )\n        );\n\n        if (quota && quota.allowed > 0) {\n          const remaining = quota?.allowed - quota?.consumed;\n          quotaData?.set(quotaKey, {\n            allowed: quota?.allowed,\n            consumed: quota?.consumed,\n            remaining: remaining < 0 ? 0 : remaining,\n          });\n        }\n\n        if (trialQuota) {\n          quotaData?.set(trialQuotaKey, {\n            allowed: trialQuota?.allowed,\n            consumed: trialQuota?.consumed,\n            remaining: trialQuota?.allowed - trialQuota?.consumed,\n          });\n        }\n\n        filteredQuota.loading = false;\n        filteredQuota.data = quotaData;\n      } catch (error) {\n        filteredQuota.loading = false;\n        filteredQuota.isServiceDown = true;\n        console.error(error);\n      }\n    }\n\n    return filteredQuota;\n  }, [auth, config, getQuotaTypesByProductId, orgId]);\n\n  return { orgId, getQuota };\n};\n","import { Reducer, useEffect, useReducer, useRef } from \"react\";\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<T>;\n  key: string;\n};\n\nexport const useFetch = <T>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef<{ [key: string]: T }>({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>(\n    (state, action: Action<T>) => {\n      switch (action.type) {\n        case Status.FETCHING:\n          return { ...state, status: Status.FETCHING };\n        case Status.FETCHED:\n          return { ...state, status: Status.FETCHED, data: action.payload };\n        case Status.FETCH_ERROR:\n          return { ...state, status: Status.FETCH_ERROR, error: action.error };\n        default:\n          return state;\n      }\n    },\n    initialState\n  );\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response });\n        } catch (error) {\n          if (cancelRequest) return;\n          if (error instanceof Error) {\n            dispatch({ type: Status.FETCH_ERROR, error });\n          } else if (typeof error === \"string\") {\n            dispatch({\n              type: Status.FETCH_ERROR,\n              error: new Error(error),\n            });\n          } else {\n            dispatch({\n              type: Status.FETCH_ERROR,\n              error: new Error(\"unknown error\"),\n            });\n          }\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, [fetch, key]);\n\n  return state;\n};\n","import {\n  Auth,\n  Config,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport {\n  Configuration,\n  AppServicesApi,\n  TermsReviewResponse,\n} from \"@rhoas/account-management-sdk\";\nimport { ServiceProps, useFetch } from \"@app/services/fetch\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\n\nexport type ITermsConfig = {\n  eventCode: string;\n  siteCode: string;\n};\n\nexport const useTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const fetchProps = useMemo(\n    () => fetchTermsReviewFactory(config, auth, termsConfig),\n    [auth, config, termsConfig]\n  );\n\n  return useFetch(fetchProps);\n};\n\nexport const useAsyncTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = useCallback(async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth, termsConfig)\n      .fetch()\n      .then((r) => r);\n    ref.current = answer;\n    return answer;\n  }, [auth, config, termsConfig]);\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth, load]);\n  return load;\n};\n\nconst fetchTermsReviewFactory = (\n  config: Config,\n  auth: Auth,\n  termsConfig: ITermsConfig\n): ServiceProps<TermsReviewResponse> => {\n  return {\n    key: \"selfTermsReview\",\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || \"\",\n      } as Configuration);\n      const response = await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: termsConfig.eventCode,\n        site_code: termsConfig.siteCode,\n      });\n      return response.data;\n    },\n  };\n};\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (\n  baseURL: string,\n  redirectURL: string,\n  cancelURL: string\n) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params: { [key: string]: string }) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join(\"&\");\n","import { useLocation } from \"react-router-dom\";\nimport { parse as parseQueryString, stringifyUrl } from \"query-string\";\nimport { useAsyncTermsReview, ITermsConfig } from \"@app/services/termsReview\";\nimport { getTermsAppURL } from \"@app/utils/termsApp\";\n\nexport const useModalControl = (termsConfig: ITermsConfig) => {\n  const loadTermsReview = useAsyncTermsReview(termsConfig);\n  const location = useLocation();\n\n  const shouldOpenCreateModal = async () => {\n    const parsed = parseQueryString(location.search);\n    const c = parsed[\"create\"] === \"true\";\n    if (c) {\n      const termsReview = await loadTermsReview();\n      if (!termsReview.terms_required) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const preCreateInstance = async (shouldOpenCreateModal: boolean) => {\n    const termsReview = await loadTermsReview();\n    if (termsReview.terms_available || termsReview.terms_required) {\n      if (termsReview.redirect_url === undefined) {\n        throw new Error(\"terms must be signed but there is no terms url\");\n      }\n      const redirectURL = stringifyUrl({\n        url: window.location.href,\n        query: { create: \"true\" },\n      });\n      const url = getTermsAppURL(\n        termsReview.redirect_url,\n        redirectURL,\n        window.location.href\n      );\n\n      return { shouldOpenCreateModal: false, url };\n    }\n    return { shouldOpenCreateModal, url: undefined };\n  };\n\n  return { shouldOpenCreateModal, preCreateInstance };\n};\n","import { InsightsType } from \"@app/utils\";\n\nexport const useInsights = () => {\n  const insights = (window as any)[\"insights\"] as InsightsType;\n  if (insights === undefined) {\n    throw new Error(\"must be used inside an initialized insights context\");\n  }\n  return insights;\n};\n","import { Auth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { useInsights } from \"@app/hooks/insights\";\n\nexport const useAuth = (): Auth => {\n  const config = useConfig();\n  const insights = useInsights();\n\n  if (config === undefined || insights.chrome.auth === undefined) {\n    throw new Error(\n      \"useAuth must be used inside a config provider, and insights auth\"\n    );\n  }\n\n  const insightsChromeAuth = insights.chrome.auth;\n\n  const getUsername = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.username;\n  };\n\n  const isOrgAdmin = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.is_org_admin;\n  };\n\n  const getToken = insightsChromeAuth.getToken;\n\n  return {\n    getUsername,\n    isOrgAdmin,\n    kafka: {\n      getToken,\n    },\n    kas: {\n      getToken,\n    },\n    ams: {\n      getToken,\n    },\n    srs: {\n      getToken,\n    },\n    apicurio_registry: {\n      getToken,\n    },\n    smart_events: {\n      getToken,\n    },\n    sas_ui: {\n      getToken,\n    },\n  };\n};\n","import { useCallback } from \"react\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { SsoProviderAllOf } from \"@rhoas/kafka-management-sdk\";\n\nexport const useSSOProviders = () => {\n  const config = useConfig();\n  return useCallback(async (): Promise<SsoProviderAllOf> => {\n    const response = await fetch(\n      `${config.kas.apiBasePath}/api/kafkas_mgmt/v1/sso_providers`\n    );\n    return response.json();\n  }, [config.kas.apiBasePath]);\n};\n","import { APIManagementPage } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const APIManagementOverviewPage: FunctionComponent = () => {\n  return <APIManagementPage />;\n};\n\nexport default APIManagementOverviewPage;\n","import useChrome from \"@redhat-cloud-services/frontend-components/useChrome/useChrome\";\nimport {\n  DataSciencePage,\n  ClusterObject,\n  DataSciencePageProps,\n} from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent, useCallback } from \"react\";\n\nexport type ClustersResponse = {\n  clusters: ClusterObject[];\n  installableClusters: ClusterObject[];\n};\n\nfunction findValidClusterWithNodes(cluster: ClusterObject) {\n  const hasWorkerNodes = !!cluster.metrics?.find(\n    (metric: { nodes?: { compute: number } } = { nodes: { compute: 0 } }) =>\n      metric && metric.nodes && metric.nodes.compute >= 2\n  );\n  return hasWorkerNodes;\n}\n\nconst RHODS_ADDON_ID = \"managed-odh\";\n\nasync function fetchAddonInquirues(cluster: ClusterObject) {\n  // TODO: FIx the data fetching according the app standards\n  await window.insights.chrome.auth.getUser();\n  const token = await window.insights.chrome.auth.getToken();\n  const getCluster = fetch(\n    `https://api.openshift.com/api/clusters_mgmt/v1/clusters/${cluster.cluster_id}/addon_inquiries?search=id=${RHODS_ADDON_ID}`,\n    {\n      method: \"get\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  ).then((d) => d.json());\n  return getCluster.then(({ data }) => ({\n    clusterId: cluster.cluster_id,\n    ...data,\n  }));\n}\n\nfunction getEligbleRHODSClusters({\n  clusterId,\n  items,\n}: {\n  clusterId: string;\n  items: {\n    id: string;\n    requirements?: {\n      enabled?: boolean;\n      status: {\n        fulfilled: boolean;\n      };\n    }[];\n  }[];\n}) {\n  // may not be necessary in prod, Filtering on addon scope was not working with mocked server\n  const internalItems = items.filter(({ id }) => id === RHODS_ADDON_ID);\n  const hasAddon = !!internalItems.find((addon) =>\n    addon?.requirements?.every(({ enabled }) => enabled)\n  );\n  const canInstallAddon = !!internalItems.find((addon) =>\n    addon?.requirements?.every(({ status: { fulfilled } }) => fulfilled)\n  );\n  return { clusterId, hasAddon, canInstallAddon };\n}\n\nasync function loadClusters(): Promise<ClustersResponse> {\n  // TODO: FIx the data fetching according the app standards\n  await window.insights.chrome.auth.getUser();\n  const token = await window.insights.chrome.auth.getToken();\n  const search = `plan_id='MOA'\n  and status IN ('Active', 'Reserved')`;\n  const { items: clusters } = await fetch(\n    `https://api.openshift.com/api/accounts_mgmt/v1/subscriptions?search=${search}&fetchMetrics=true`,\n    {\n      method: \"get\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  ).then((d) => d.json() as unknown as { items: ClusterObject[] });\n  const clusterswithNodes = clusters.filter((cluster) =>\n    findValidClusterWithNodes(cluster)\n  );\n  const clusterAddonInquirues = await Promise.allSettled<{\n    value: { clusterId: string };\n  }>(clusterswithNodes.map(fetchAddonInquirues));\n  const clustersAvailability: {\n    [key: string]: {\n      canInstallAddon: boolean;\n      hasAddon: boolean;\n      clusterId?: string;\n    };\n  } = (\n    clusterAddonInquirues.filter(\n      ({ status }) => status === \"fulfilled\"\n    ) as unknown as { value: any }[]\n  ).reduce((acc, { value }) => {\n    const result = getEligbleRHODSClusters(value);\n    return {\n      ...acc,\n      [result.clusterId]: result,\n    };\n  }, {});\n  const installableClusters = clusterswithNodes.filter(\n    ({ cluster_id }) => clustersAvailability[cluster_id]?.canInstallAddon\n  );\n  return {\n    installableClusters,\n    clusters,\n  };\n}\n\nexport const DataScienceOverViewPage: FunctionComponent = () => {\n  const { analytics } = useChrome();\n\n  const trackClick = useCallback<DataSciencePageProps[\"trackClick\"]>(\n    (e, properties) => {\n      try {\n        analytics.track(e, properties);\n      } catch (e) {\n        console.warn(\"analytics not found: \", e);\n      }\n    },\n    [analytics]\n  );\n\n  return (\n    <DataSciencePage loadClusters={loadClusters} trackClick={trackClick} />\n  );\n};\n\nexport default DataScienceOverViewPage;\n","import {\n  LazyExoticComponent,\n  useState,\n  VoidFunctionComponent,\n  useCallback,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ProductType,\n  QuotaContext,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages/ServiceDown/ServiceDownPage\";\nimport {\n  FederatedModule,\n  usePrincipal,\n  useKafkaInstanceDrawer,\n} from \"@app/components\";\nimport { useModalControl, useQuota } from \"@app/hooks\";\nimport {\n  AppServicesLoading,\n  TermsAndConditionModal,\n} from \"@rhoas/app-services-ui-components\";\nimport { ITermsConfig } from \"@app/services\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\n\nconst KasPage: VoidFunctionComponent = () => {\n  const { getQuota } = useQuota(ProductType?.kas);\n\n  return (\n    <QuotaContext.Provider value={{ getQuota }}>\n      <FederatedModule\n        scope=\"kas\"\n        module=\"./OpenshiftStreams\"\n        fallback={<AppServicesLoading />}\n        render={(component) => <KasPageConnected Component={component} />}\n      />\n    </QuotaContext.Provider>\n  );\n};\n\nconst KasPageConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const config = useConfig();\n  const constants = useConstants();\n  const { t } = useTranslation();\n\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.kafka.ams.termsAndConditionsEventCode,\n    siteCode: constants.kafka.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getAllUserAccounts } = usePrincipal();\n\n  const [drawerInstance, setDrawerInstance] = useState<unknown | undefined>(\n    undefined\n  );\n  const [isOpenModal, setIsOpenModal] = useState<boolean>(false);\n  const [url, setUrl] = useState<string>(\"\");\n\n  const drawerProps = useKafkaInstanceDrawer();\n\n  const handlePreCreateInstance = useCallback(\n    async (open: boolean) => {\n      const { shouldOpenCreateModal, url } = await preCreateInstance(open);\n      if (shouldOpenCreateModal === false && url) {\n        setIsOpenModal(true);\n        setUrl(url);\n        return false;\n      }\n      return true;\n    },\n    [preCreateInstance, setIsOpenModal, setUrl]\n  );\n\n  const onCancel = () => {\n    setIsOpenModal(false);\n  };\n\n  const onClickViewTermsConditions = useCallback(async () => {\n    window.location.href = url;\n  }, [url]);\n\n  if (config.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <>\n      <TermsAndConditionModal\n        isModalOpen={isOpenModal}\n        serviceName={t(\"common:kafka\")}\n        ouiaIdModal=\"modal-KafkaTerms\"\n        ouiaIdButtonViewTerms=\"button-view-terms\"\n        ouiaIdButtonCancel=\"button-cancel\"\n        onClickViewTermsConditions={onClickViewTermsConditions}\n        onCancel={onCancel}\n      />\n      <Component\n        preCreateInstance={handlePreCreateInstance}\n        shouldOpenCreateModal={shouldOpenCreateModal}\n        drawerInstance={drawerInstance}\n        setDrawerInstance={setDrawerInstance}\n        {...drawerProps}\n        getAllUserAccounts={getAllUserAccounts}\n      />\n    </>\n  );\n};\n\nexport default KasPage;\n","import { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from \"@patternfly/react-core\";\nimport { useHistory } from \"react-router-dom\";\nimport { FunctionComponent } from \"react\";\n\nconst NotFoundPage: FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push(\"/\");\n    }\n    return <Button onClick={handleClick}>Take me home</Button>;\n  }\n\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={ExclamationTriangleIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          404 Page not found\n        </Title>\n        <EmptyStateBody>\n          We didn&apos;t find a page that matches the address you navigated to.\n        </EmptyStateBody>\n        <GoHomeBtn />\n      </EmptyState>\n    </PageSection>\n  );\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n","import { OverviewPageV4 } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const ConnectedOverviewPage: FunctionComponent = () => {\n  return <OverviewPageV4 />;\n};\n\nexport default ConnectedOverviewPage;\n","import { VoidFunctionComponent } from \"react\";\nimport { FederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ResourcesPage: VoidFunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<AppServicesLoading />}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n\nexport default ResourcesPage;\n","import { LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport { FederatedModule } from \"@app/components\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages/ServiceDown/ServiceDownPage\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceAccountsPage: VoidFunctionComponent = () => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<AppServicesLoading />}\n      render={(component) => (\n        <ServiceAccountsPageConnected Component={component} />\n      )}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const config = useConfig();\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n  return <Component />;\n};\nexport default ServiceAccountsPage;\n","import { WrenchIcon } from \"@patternfly/react-icons\";\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { FunctionComponent } from \"react\";\n\nexport const ServiceDownPage: FunctionComponent = () => {\n  const { t } = useTranslation([\"appTemporaryFixMe\"]);\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t(\"serviceDown.serviceDownTitle\")}\n        </Title>\n        <EmptyStateBody>{t(\"serviceDown.serviceDownMessage\")}</EmptyStateBody>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            window.location.href = \"https://status.starter.openshift.com/\";\n          }}\n        >\n          {t(\"serviceDown.serviceDownButton\")}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { Configuration, SecurityApi } from \"@rhoas/kafka-management-sdk\";\nimport {\n  PrincipalApi,\n  Principal as PrincipalSDK,\n} from \"@redhat-cloud-services/rbac-client\";\nimport {\n  Principal,\n  PrincipalType,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\n\nexport function usePrincipals(): {\n  loading: boolean;\n  users: Principal[] | undefined;\n  services: Principal[] | undefined;\n  allPrincipals: Principal[] | undefined;\n} {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [loading, setLoading] = useState(true);\n  const [services, setServices] = useState<Principal[] | undefined>();\n  const [users, setUsers] = useState<Principal[] | undefined>();\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      try {\n        const accessToken = await auth.kas.getToken();\n        const rbacBasePath = config.rbac.basePath;\n        const saBasePath = config.kas.apiBasePath;\n        if (accessToken) {\n          const [usersResult, servicesResult] = await Promise.allSettled([\n            fetchUserAccounts(accessToken, rbacBasePath),\n            fetchServiceAccounts(accessToken, saBasePath),\n          ]);\n\n          if (usersResult.status === \"fulfilled\") {\n            setUsers(usersResult.value);\n          }\n          if (servicesResult.status === \"fulfilled\") {\n            setServices(servicesResult.value);\n          }\n        } else {\n          console.warn(\"app-services-ui no access token in usePrincipals\");\n        }\n        setLoading(false);\n      } catch {\n        setLoading(false);\n      }\n    })();\n  }, [auth, config]);\n\n  return {\n    loading,\n    users,\n    services,\n    allPrincipals:\n      users || services ? [...(users || []), ...(services || [])] : undefined,\n  };\n}\n\nasync function fetchUserAccounts(accessToken: string, basePath: string) {\n  try {\n    const principalApi = new PrincipalApi({\n      accessToken,\n      basePath,\n    });\n\n    return await principalApi.listPrincipals(-1).then((response) =>\n      response.data.data.map((p) => {\n        const pp = p as PrincipalSDK;\n        return {\n          id: p.username,\n          principalType: PrincipalType.UserAccount,\n          displayName: `${pp.first_name} ${pp.last_name}`,\n          emailAddress: pp.email,\n        } as Principal;\n      })\n    );\n  } catch (e) {\n    // temp fix - this API is only available to org admins\n    // needs a proper approach longer term\n    console.warn(\"app-services-ui fetchUserAccounts error\", e);\n  }\n  return undefined;\n}\n\nasync function fetchServiceAccounts(accessToken: string, basePath: string) {\n  try {\n    const securityApi = new SecurityApi({\n      accessToken,\n      basePath,\n    } as Configuration);\n    return await securityApi.getServiceAccounts().then((response) =>\n      response.data.items.map((sa) => {\n        return {\n          id: sa.client_id,\n          displayName: sa.name,\n          principalType: PrincipalType.ServiceAccount,\n        } as Principal;\n      })\n    );\n  } catch (e) {\n    console.warn(\"app-services-ui fetchServiceAccounts error\", e);\n  }\n  return undefined;\n}\n","import { FC, LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport {\n  ConfigType,\n  createApicurioConfig,\n} from \"@app/pages/ServiceRegistry/utils\";\nimport { FederatedModule } from \"@app/components\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport {\n  useAlert,\n  useAuth,\n  useBasename,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { usePrincipals } from \"@app/hooks/usePrincipals\";\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: Registry | undefined;\n  topicName?: string;\n  groupId?: string | null | undefined;\n  version?: string;\n  registryId?: string;\n  basename?: string;\n  fileName?: string;\n  downloadLinkLabel?: string;\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: FC<\n  FederatedApicurioComponentProps\n> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<AppServicesLoading />}\n      render={(component) => (\n        <ServiceAccountsPageConnected Component={component} {...rest} />\n      )}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<\n  { Component: LazyExoticComponent<any> } & Omit<\n    FederatedApicurioComponentProps,\n    \"module\"\n  >\n> = ({ Component, registry, ...rest }) => {\n  let federateConfig: ConfigType;\n  const alert = useAlert();\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const { loading: loadingPrincipals, allPrincipals } = usePrincipals();\n  const getToken = auth?.apicurio_registry.getToken;\n  let { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n  groupId = decodeURIComponent(groupId);\n  artifactId = decodeURIComponent(artifactId);\n  version = decodeURIComponent(version);\n\n  if (config === undefined || registry === undefined || loadingPrincipals) {\n    return <AppServicesLoading />;\n  }\n\n  if (getToken && basename) {\n    federateConfig = createApicurioConfig(\n      config,\n      alert,\n      registry.registryUrl as string,\n      `${basename.getBasename()}/t/${registry?.id}`,\n      getToken,\n      allPrincipals\n    );\n    return (\n      <Component\n        config={federateConfig}\n        tenantId={registry.id}\n        groupId={groupId}\n        artifactId={artifactId}\n        version={version}\n        history={history}\n        {...rest}\n      />\n    );\n  }\n  return null;\n};\n","import { Alert, Principal } from \"@rhoas/app-services-ui-shared\";\nimport { Config } from \"@rhoas/app-services-ui-shared\";\n\nexport interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n  roleManagement?: boolean;\n  settings?: boolean;\n  alerts?: Alert;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport type NoneAuthConfig = AuthConfig;\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n  principals?: Principal[] | undefined;\n}\n\nconst createApicurioConfig = (\n  _config: Config,\n  alert: Alert,\n  apiUrl: string,\n  navPathPrefix: string,\n  getToken: () => Promise<string> | undefined,\n  principals?: Principal[] | (() => Principal[]) | undefined\n) => {\n  const apicurioConfig: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: \"gettoken\",\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      roleManagement: true,\n      multiTenant: true,\n      settings: true,\n      alerts: alert,\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n    principals,\n  } as ConfigType;\n\n  return apicurioConfig;\n};\n\nexport { createApicurioConfig };\n","import { Context, createContext, useContext } from \"react\";\n\n/**\n * The Auth object provides information about the authenticated user\n */\nexport type Auth = {\n  /**\n   * Get the username of the authenticated user\n   */\n  getUsername: () => Promise<string> | undefined;\n  /**\n   * Get the is_org_admin of the authenticated user\n   */\n  isOrgAdmin: () => Promise<boolean> | undefined;\n  /**\n   * Get the token for accessing the control plane api\n   */\n  getToken: () => Promise<string> | undefined;\n  /**\n   * Get the token end point url\n   */\n  tokenEndPointUrl?: string;\n};\n\n/**\n * The AuthContext allows access to the Auth context\n */\nexport const AuthContext: Context<Auth | undefined> = createContext<\n  Auth | undefined\n>(undefined);\n\n/**\n * useAuth is a custom hook that is a shorthand for useContext(AuthContext)\n */\nexport const useAuth = (): Auth => {\n  const answer = useContext(AuthContext);\n  if (answer === undefined) {\n    throw new Error(\"must be used inside an AuthContext provider\");\n  }\n  return answer;\n};\n","import { Config } from \"@rhoas/app-services-ui-shared\";\n\nconst defaultHostname = \"console.redhat.com\";\n\ntype FederatedModulesConfig = Config[\"federatedModules\"];\n\ntype EnvironmentConfigWithoutFederatedModules = {\n  hostnames: string[];\n  fetchConfig?: boolean;\n  type?: string;\n  config: Omit<Config, \"federatedModules\">;\n};\n\nexport type EnvironmentConfigsWithoutFederatedModules =\n  Array<EnvironmentConfigWithoutFederatedModules>;\n\nexport const filterEnvironmentConfig = (\n  environmentConfig: EnvironmentConfigsWithoutFederatedModules\n): EnvironmentConfigWithoutFederatedModules => {\n  const hostname = window.location.hostname;\n  console.log(`Filter config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) =>\n    entry.hostnames.includes(hostname)\n  );\n  if (possibleConfigs.length > 1) {\n    throw new Error(\n      `Unable to find config for ${hostname}, more than one config matched ${possibleConfigs}`\n    );\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) =>\n      entry.hostnames.includes(defaultHostname)\n    );\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(\n        `Unable to load default config, more than one config matched ${possibleConfigs}`\n      );\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      return possibleDefaultConfigs[0];\n    }\n  }\n  return possibleConfigs[0];\n};\n\nexport const addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfigWithoutFederatedModules,\n  federatedModulesConfig: FederatedModulesConfig,\n  beta: boolean\n): Config => {\n  const federatedModules = {} as FederatedModulesConfig;\n  Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n    let { basePath } = v;\n    let fallbackBasePath: string | undefined = undefined;\n    if (environmentConfig.type !== \"proxy\") {\n      basePath = v.fallbackBasePath;\n    } else {\n      fallbackBasePath = v.fallbackBasePath;\n    }\n    if (!beta) {\n      if (basePath.startsWith(\"/preview\")) {\n        basePath = basePath.substring(8);\n      }\n      if (fallbackBasePath?.startsWith(\"/preview\")) {\n        fallbackBasePath = fallbackBasePath.substring(8);\n      }\n    }\n    federatedModules[k as keyof FederatedModulesConfig] = {\n      basePath,\n      fallbackBasePath: fallbackBasePath!,\n    };\n  });\n  return {\n    ...environmentConfig.config,\n    federatedModules,\n  };\n};\n","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { Config, ConfigContext } from \"@rhoas/app-services-ui-shared\";\nimport configs from \"../../../../config/config.json\";\nimport {\n  addFederatedModulesToConfig,\n  EnvironmentConfigsWithoutFederatedModules,\n  filterEnvironmentConfig,\n} from \"@app/providers/config/utils\";\nimport { useFeatureFlags } from \"@app/providers/featureflags/FeatureFlags\";\n\nexport const EmbeddedConfigProvider: FunctionComponent = ({ children }) => {\n  const { beta } = useFeatureFlags();\n\n  const [value, setValue] = useState<Config | undefined>(() => {\n    const configFromJson: EnvironmentConfigsWithoutFederatedModules =\n      configs.config;\n    const environmentConfig = filterEnvironmentConfig(configFromJson);\n    if (environmentConfig.fetchConfig) {\n      return undefined;\n    }\n    const config = addFederatedModulesToConfig(\n      environmentConfig,\n      configs.federatedModules,\n      beta\n    );\n    console.log(\"Done loading config\", config);\n    return config;\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (value === undefined) {\n        const response = await fetch(`${__webpack_public_path__}config.json`);\n        const jsonConfig = await response.json();\n        const environmentConfig = filterEnvironmentConfig(jsonConfig.config);\n        const config = addFederatedModulesToConfig(\n          environmentConfig,\n          jsonConfig.federatedModules,\n          beta\n        );\n        console.debug(\"Done loading config\", config);\n        setValue(config);\n      }\n    })();\n  }, [beta, value]);\n  return (\n    <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>\n  );\n};\n","import { Context, createContext, useContext } from \"react\";\n\n/**\n * Configuration for AMS\n */\nexport type AmsConfig = {\n  termsAndConditionsEventCode: string;\n  termsAndConditionsSiteCode: string;\n  quotaProductId: string;\n  trialQuotaProductId: string;\n  resourceName: string;\n};\n\nexport type ServiceConstants = {\n  version: number;\n  kafka: {\n    ams: AmsConfig;\n  };\n  serviceRegistry: {\n    ams: AmsConfig;\n  };\n};\n\n/**\n * The ConstantContext allows access to the constants for the application.\n */\nexport const ConstantContext: Context<ServiceConstants | undefined> =\n  createContext<ServiceConstants | undefined>(undefined);\n\n/**\n * useConstants is a custom hook that is a shorthand for useContext(ConfigContext)\n */\nexport const useConstants = (): ServiceConstants => {\n  const answer = useContext(ConstantContext);\n  if (answer === undefined) {\n    throw new Error(\n      \"useConstants must be used inside an ServiceConstantsContextProvider\"\n    );\n  }\n  return answer;\n};\n","import { ConstantContext, ServiceConstants } from \"./ServiceConstants\";\nimport constantsFallback from \"../../../../static/configs/service-constants.json\";\nimport { FunctionComponent } from \"react\";\n\nexport const ServiceConstantsContextProvider: FunctionComponent = ({\n  children,\n}) => {\n  return (\n    <ConstantContext.Provider value={constantsFallback as ServiceConstants}>\n      {children}\n    </ConstantContext.Provider>\n  );\n};\n","import { createContext, FunctionComponent, useContext } from \"react\";\n\nexport type FeatureFlags = {\n  beta: boolean;\n};\n\nexport const FeatureFlagsContext = createContext<FeatureFlags | undefined>(\n  undefined\n);\n\nexport const useFeatureFlags = (): FeatureFlags => {\n  const answer = useContext(FeatureFlagsContext);\n  if (answer === undefined) {\n    throw new Error(\n      \"useFeatureFlags must be used inside a FeatureFlagContext provider\"\n    );\n  }\n  return answer;\n};\n\nexport const FeatureFlagProvider: FunctionComponent = ({ children }) => {\n  const value = {\n    beta: window.location.pathname.startsWith(\"/preview\"),\n  } as FeatureFlags;\n  return (\n    <FeatureFlagsContext.Provider value={value}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  );\n};\n","import ReducerRegistry from \"@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry\";\nimport promiseMiddleware from \"redux-promise-middleware\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\n\nlet registry: ReducerRegistry<Record<string, string>>;\n\nexport function init(...middleware: any) {\n  if (!registry) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n","function getBaseName(pathname: string) {\n  let release = \"/\";\n  const pathName = pathname.split(\"/\");\n\n  pathName.shift();\n\n  if (pathName[0] === \"preview\") {\n    pathName.shift();\n    release = `/preview/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n"],"names":["useDocumentTitle","title","useEffect","originalTitle","document","NotFoundPage","lazy","PageNotFoundRoute","Route","component","flattenedRoutes","routes","reduce","flattened","route","KafkaFederatedComponent","module","rest","scope","render","FederatedKafka","Dashboard","props","GetLink","href","children","Link","to","AccessDeniedPage","t","useTranslation","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","ServiceRegistrySchemaMapping","fallback","AppServicesLoading","ServiceRegistrySchemaMappingConnected","Component","topicName","useParams","basename","renderSchema","registry","groupId","version","registryId","id","getAdminServerUrl","kafkaRequest","Error","admin_api_server_url","undefined","useGetAvailableSizes","kas","getToken","useAuth","apiBasePath","basePath","useConfig","useCallback","provider","region","sizeId","instanceType","api","DefaultApi","Configuration","accessToken","sizes","getInstanceTypesByCloudProviderAndRegion","data","instance_types","instanceTypesSizes","find","i","size","s","e","flatRoutes","exact","label","path","devPreview","WrappedRoute","InstanceDrawer","isAsync","underlyingProps","url","getBasename","routeProps","BasenameContext","Provider","value","KafkaRoutes","routeMatch","useRouteMatch","kafka","drawerProps","handleInstanceDrawer","isOpen","activeTab","openDrawer","closeDrawer","drawerInstance","setDrawerInstance","Switch","map","idx","routePath","console","log","fetchKafkaTopisFromAdmin","TopicsApi","getTopics","items","name","fetchTopicMetrics","kafkaId","duration","interval","selectedTopic","apisService","safeMetrics","getMetricsByRangeQuery","filter","m","values","metric","topic","filteredMetrics","topics","Array","from","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","forEach","__name__","addAggregatedTotalBytesTo","timestamp","partition","addAggregatePartitionBytes","metricsTopics","SettingsTab","owner","reauthenticationEnabled","auth","config","onSubmitReAuthentication","settings","updateKafkaById","reauthentication_enabled","fetchSettings","Settings","KafkaMainViewConnected","PrincipalsProvider","kafkaInstance","kafkaDetail","ConnectedKafkaRoutes","adminServerUrl","history","useHistory","error","setError","useState","onError","code","redirectAfterDeleteInstance","push","showMetrics","useMemo","ConnectedMetrics","kafkaAdminUrl","totalMaxConnections","total_max_connections","maxConnections","max_connection_attempts_per_sec","maxPartitions","max_partitions","kafkaStorageBytes","max_data_retention_size","bytes","showSchemas","showSettings","kafkaPageLink","kafkaInstanceLink","kafkaName","useBasename","storageKey","isAlertClosed","setIsAlertClosed","localStorage","getItem","getKafkaInstanceMetrics","kafkaResponse","persistentvolumeclaim","includes","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","diskSpaceLimit","connectionRateLimit","connectionsLimit","fetchKafkaInstanceMetrics","getTopicMetrics","kafkaTopics","metrics","Promise","all","getMetricsKpi","kpiResponse","topicPartitions","consumerGroups","getMetricsByInstantQuery","fetchMetricsKpi","topicPartitionsLimit","Metrics","onCreateTopic","getTopicsMetrics","isClosed","onClickClose","setItem","QuickStartLoaderFederated","KafkaOverviewPage","RedirectToStreamsKafkas","Redirect","appRoutes","kafkaInstanceId","setKafkaRequest","getKafkaSize","fetchKafka","kasService","getKafkaById","cloud_provider","instance_type","size_id","useKafkaInstance","serviceDown","onClickButton","wrapRoute","fallbackRender","message","AppServicesPageNotFound","AppServicesEmptyState","emptyStateProps","variant","AppServicesEmptyStateVariant","UnexpectedError","emptyStateIconProps","className","titleProps","emptyStateBodyProps","body","Button","onClick","DevelopmentPreview","show","AppRoutes","Suspense","connect","insights","getAppId","defaultAppId","parts","location","pathname","split","length","unregister","chrome","on","event","domEvent","pathName","replace","NotificationsPortal","Page","usePrincipal","serviceAccountPrincipals","setServiceAccountPrincipals","userAcountPrincipals","setUserAccountPrincipals","rbac","principalApi","PrincipalApi","userAccounts","listPrincipals","then","response","p","pp","username","principalType","PrincipalType","UserAccount","displayName","first_name","last_name","emailAddress","email","securityApi","SecurityApi","serviceAccounts","getServiceAccounts","sa","client_id","ServiceAccount","getAllPrincipals","answer","concat","getAllUserAccounts","getAllServiceAccounts","PrincipalsContext","useKafkaInstanceDrawer","isDrawerOpen","setIsDrawerOpen","drawerActiveTab","setDrawerActiveTab","tab","tokenEndPointUrl","onDeleteInstance","FederatedModuleContext","createContext","FederatedModuleProvider","moduleInfoCache","useRef","modules","federatedModules","getModuleInfo","baseUrl","fallbackBasePath","current","fetchModuleInfo","Date","now","fetch","json","fedMods","entry","startsWith","entryPoint","e1","useFederatedModule","useContext","useQuota","productId","constants","orgId","setOrgId","ams","AppServicesApi","apiAccountsMgmtV1CurrentAccountGet","account","orgID","organization","getQuotaTypesByProductId","kasQuotaProductId","quotaProductId","kasTrialQuotaProductId","trialQuotaProductId","kasResourceName","resourceName","srsQuotaProductId","serviceRegistry","srsTrialQuotaProductId","srsResourceName","ProductType","quotaKey","QuotaType","trialQuotaKey","kasTrial","srs","srsTrial","getQuota","quotaData","Map","filteredQuota","loading","isServiceDown","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","quota","q","related_resources","r","resource_name","product","trialQuota","allowed","remaining","consumed","set","Status","fetchTermsReviewFactory","termsConfig","key","defaultApi","apiAuthorizationsV1SelfTermsReviewPost","event_code","eventCode","site_code","siteCode","buildUrlParams","params","Object","keys","encodeURIComponent","join","useModalControl","loadTermsReview","ref","load","useAsyncTermsReview","useLocation","shouldOpenCreateModal","parse","search","terms_required","preCreateInstance","termsReview","terms_available","redirect_url","redirectURL","stringifyUrl","window","query","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","useInsights","insightsChromeAuth","getUsername","getUser","identity","user","isOrgAdmin","is_org_admin","apicurio_registry","smart_events","sas_ui","useSSOProviders","APIManagementOverviewPage","APIManagementPage","RHODS_ADDON_ID","fetchAddonInquirues","cluster","token","cluster_id","method","headers","Authorization","d","clusterId","loadClusters","clusters","clusterswithNodes","nodes","compute","findValidClusterWithNodes","clustersAvailability","allSettled","status","acc","result","internalItems","hasAddon","addon","requirements","every","enabled","canInstallAddon","fulfilled","getEligbleRHODSClusters","installableClusters","DataScienceOverViewPage","analytics","trackClick","properties","track","warn","DataSciencePage","KasPageConnected","termsAndConditionsEventCode","termsAndConditionsSiteCode","isOpenModal","setIsOpenModal","setUrl","handlePreCreateInstance","open","onClickViewTermsConditions","TermsAndConditionModal","isModalOpen","serviceName","ouiaIdModal","ouiaIdButtonViewTerms","ouiaIdButtonCancel","onCancel","QuotaContext","icon","headingLevel","ConnectedOverviewPage","OverviewPageV4","ResourcesPage","QuickStartCatalogFederated","ServiceAccountsPage","ServiceAccountsPageConnected","ServiceDownPage","fetchUserAccounts","fetchServiceAccounts","FederatedApicurioComponent","federateConfig","alert","useAlert","loadingPrincipals","allPrincipals","setLoading","services","setServices","users","setUsers","rbacBasePath","saBasePath","usersResult","servicesResult","usePrincipals","artifactId","decodeURIComponent","_config","apiUrl","navPathPrefix","principals","artifacts","type","features","readOnly","breadcrumbs","roleManagement","multiTenant","alerts","ui","navPrefixPath","createApicurioConfig","registryUrl","tenantId","AuthContext","filterEnvironmentConfig","environmentConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","federatedModulesConfig","beta","entries","k","v","substring","EmbeddedConfigProvider","setValue","configFromJson","fetchConfig","jsonConfig","debug","ConfigContext","ConstantContext","useConstants","ServiceConstantsContextProvider","FeatureFlagsContext","useFeatureFlags","FeatureFlagProvider","init","middleware","register","notifications","release","shift"],"sourceRoot":""}