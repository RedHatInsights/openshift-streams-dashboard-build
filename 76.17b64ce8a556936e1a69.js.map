{"version":3,"sources":["webpack://application-services-ui/./src/app/App.scss","webpack://application-services-ui/./src/app/ResourcesPage/QuickStartDrawerFederated.scss","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/App.scss?af09","webpack://application-services-ui/./src/app/utils/insights.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/NotFound/NotFound.tsx","webpack://application-services-ui/./src/app/Components/Loading/Loading.tsx","webpack://application-services-ui/./src/app/Config/Config.tsx","webpack://application-services-ui/./src/app/Components/FederatedModule/utils.tsx","webpack://application-services-ui/./src/app/Components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/openapi/ams/api.ts","webpack://application-services-ui/./src/openapi/ams/base.ts","webpack://application-services-ui/./src/openapi/ams/common.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/openapi/ams/configuration.ts","webpack://application-services-ui/./src/app/utils/auth/AuthContext.tsx","webpack://application-services-ui/./src/openapi/kas/base.ts","webpack://application-services-ui/./src/openapi/kas/common.ts","webpack://application-services-ui/./src/openapi/kas/api.ts","webpack://application-services-ui/./src/openapi/kas/configuration.ts","webpack://application-services-ui/./src/app/ResourcesPage/QuickStartDrawerFederated.scss?181b","webpack://application-services-ui/./src/app/ResourcesPage/QuickStartDrawerFederated.tsx","webpack://application-services-ui/./src/app/Routes.tsx","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/KafkaPage/KafkaPage.tsx","webpack://application-services-ui/./src/app/KasPage/KasPage.tsx","webpack://application-services-ui/./src/app/ServiceAccountsPage/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/ResourcesPage/ResourcesPage.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/keycloakAuth.ts","webpack://application-services-ui/./src/AppEntry.tsx","webpack://application-services-ui/./src/bootstrap.tsx"],"names":["___CSS_LOADER_EXPORT___","i","push","module","id","registry","init","Error","ReducerRegistry","middleware","options","InsightsContext","useDocumentTitle","title","originalTitle","document","NotFound","PageSection","EmptyState","variant","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","history","Button","onClick","Loading","Bullseye","Spinner","ConfigContext","undefined","ConfigProvider","configUrl","children","config","setConfig","controller","AbortController","signal","console","log","fetch","json","newConfig","abort","Provider","value","getEntryPoint","baseUrl","fileName","scope","Promise","endsWith","url","then","fedMods","s","entry","path","startsWith","FederatedModuleContext","FederatedModuleProvider","useContext","federatedModules","AccessReviewActionEnum","AccessReviewResourceTypeEnum","AccessReviewResponseActionEnum","AccessReviewResponseResourceTypeEnum","CapabilityReviewRequestCapabilityEnum","CapabilityReviewRequestTypeEnum","ClusterAuthorizationRequestProductCategoryEnum","ClusterAuthorizationRequestProductIdEnum","OneMetricHealthStateEnum","PermissionActionEnum","PermissionAllOfActionEnum","ResourceQuotaTypeEnum","ResourceQuotaAllOfTypeEnum","ResourceQuotaRequestTypeEnum","ResourceReviewActionEnum","ResourceReviewResourceTypeEnum","ResourceReviewRequestActionEnum","ResourceReviewRequestResourceTypeEnum","RoleBindingTypeEnum","RoleBindingAllOfTypeEnum","SelfAccessReviewActionEnum","SelfAccessReviewResourceTypeEnum","SelfResourceReviewActionEnum","SelfResourceReviewResourceTypeEnum","SelfResourceReviewRequestActionEnum","SelfResourceReviewRequestResourceTypeEnum","SubscriptionProductBundleEnum","SubscriptionServiceLevelEnum","SubscriptionSupportLevelEnum","SubscriptionSystemUnitsEnum","SubscriptionUsageEnum","SubscriptionAllOfProductBundleEnum","SubscriptionAllOfServiceLevelEnum","SubscriptionAllOfSupportLevelEnum","SubscriptionAllOfSystemUnitsEnum","SubscriptionAllOfUsageEnum","SubscriptionCreateRequestPlanIdEnum","SubscriptionCreateRequestStatusEnum","SubscriptionPatchRequestProductBundleEnum","SubscriptionPatchRequestServiceLevelEnum","SubscriptionPatchRequestSupportLevelEnum","SubscriptionPatchRequestSystemUnitsEnum","SubscriptionPatchRequestUsageEnum","SupportCasesRequestSeverityEnum","FederatedModule","render","fallback","federatedModuleContext","useState","setUrl","useEffect","basePath","entryPoint","ready","setReady","failed","setFailed","element","createElement","src","type","async","onload","onerror","error","head","appendChild","removeChild","useDynamicScript","Component","window","default","get","factory","Module","loadComponent","BASE_PATH","replace","configuration","axios","this","field","msg","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","RequiredError","setBearerAuthToObject","object","accessToken","setSearchParams","searchParams","URLSearchParams","search","objects","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","globalAxios","axiosRequestArgs","request","DefaultApiFp","localVarAxiosParamCreator","apiAccountsMgmtV1AccessTokenPost","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","apiAccountsMgmtV1AccountsGet","page","orderBy","fields","fetchLabels","fetchCapabilities","apiAccountsMgmtV1AccountsIdGet","localVarPath","encodeURIComponent","String","apiAccountsMgmtV1AccountsIdLabelsGet","apiAccountsMgmtV1AccountsIdLabelsKeyDelete","apiAccountsMgmtV1AccountsIdLabelsKeyGet","apiAccountsMgmtV1AccountsIdLabelsKeyPatch","label","data","apiAccountsMgmtV1AccountsIdLabelsPost","apiAccountsMgmtV1AccountsIdPatch","accountPatchRequest","apiAccountsMgmtV1AccountsPost","account","dryRun","apiAccountsMgmtV1ClusterAuthorizationsPost","clusterAuthorizationRequest","apiAccountsMgmtV1ClusterRegistrationsPost","clusterRegistrationRequest","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1ErrorsGet","apiAccountsMgmtV1ErrorsIdGet","apiAccountsMgmtV1FeatureTogglesIdQueryPost","featureToggleQueryRequest","apiAccountsMgmtV1LabelsGet","apiAccountsMgmtV1MetricsGet","apiAccountsMgmtV1NotifyPost","notificationRequest","apiAccountsMgmtV1OrganizationsGet","apiAccountsMgmtV1OrganizationsIdGet","apiAccountsMgmtV1OrganizationsIdLabelsGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete","apiAccountsMgmtV1OrganizationsIdLabelsKeyGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch","apiAccountsMgmtV1OrganizationsIdLabelsPost","apiAccountsMgmtV1OrganizationsIdPatch","organizationPatchRequest","apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","orgId","fetchRelatedResources","apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost","resourceQuotaRequest","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete","quotaId","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch","apiAccountsMgmtV1OrganizationsPost","organization","apiAccountsMgmtV1PlansGet","apiAccountsMgmtV1PlansIdGet","apiAccountsMgmtV1PullSecretsExternalResourceIdDelete","externalResourceId","apiAccountsMgmtV1PullSecretsPost","pullSecretRequest","apiAccountsMgmtV1RegistriesGet","apiAccountsMgmtV1RegistriesIdGet","apiAccountsMgmtV1RegistryCredentialsGet","apiAccountsMgmtV1RegistryCredentialsIdDelete","apiAccountsMgmtV1RegistryCredentialsIdGet","apiAccountsMgmtV1RegistryCredentialsIdPatch","registryCredentialPatchRequest","apiAccountsMgmtV1RegistryCredentialsPost","registryCredential","apiAccountsMgmtV1ReservedResourcesGet","apiAccountsMgmtV1ResourceQuotaGet","apiAccountsMgmtV1RoleBindingsGet","apiAccountsMgmtV1RoleBindingsIdDelete","apiAccountsMgmtV1RoleBindingsIdGet","apiAccountsMgmtV1RoleBindingsIdPatch","roleBindingRequest","apiAccountsMgmtV1RoleBindingsPost","roleBindingCreateRequest","apiAccountsMgmtV1RolesGet","apiAccountsMgmtV1RolesIdGet","apiAccountsMgmtV1SkuRulesGet","apiAccountsMgmtV1SkuRulesIdGet","apiAccountsMgmtV1SkusGet","apiAccountsMgmtV1SkusIdGet","apiAccountsMgmtV1SubscriptionsGet","fetchAccounts","labels","apiAccountsMgmtV1SubscriptionsIdDelete","apiAccountsMgmtV1SubscriptionsIdGet","fetchCpuAndSocket","apiAccountsMgmtV1SubscriptionsIdLabelsGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete","apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch","apiAccountsMgmtV1SubscriptionsIdLabelsPost","apiAccountsMgmtV1SubscriptionsIdNotifyPost","apiAccountsMgmtV1SubscriptionsIdPatch","subscriptionPatchRequest","apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet","apiAccountsMgmtV1SubscriptionsIdSupportCasesGet","apiAccountsMgmtV1SubscriptionsPost","subscriptionCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete","subId","accountId","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost","notificationContactCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet","reservedResourceId","apiAccountsMgmtV1SupportCasesCaseIdDelete","caseId","apiAccountsMgmtV1SupportCasesPost","supportCasesRequest","apiAccountsMgmtV1TokenAuthorizationPost","tokenAuthorizationRequest","apiAuthorizationsV1AccessReviewPost","accessReview","apiAuthorizationsV1CapabilityReviewPost","capabilityReviewRequest","apiAuthorizationsV1ExportControlReviewPost","exportControlReviewRequest","apiAuthorizationsV1ResourceReviewPost","resourceReviewRequest","apiAuthorizationsV1SelfAccessReviewPost","selfAccessReview","apiAuthorizationsV1SelfResourceReviewPost","selfResourceReviewRequest","apiAuthorizationsV1SelfTermsReviewPost","apiAuthorizationsV1TermsReviewPost","termsReview","DefaultApiAxiosParamCreator","localVarAxiosArgs","BaseAPI","buildUrlParams","param","apiKey","username","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","params","Object","keys","map","join","AuthContext","getToken","resolve","createKafka","kafkaRequestPayload","createServiceAccount","serviceAccountRequest","deleteKafkaById","deleteServiceAccount","getKafkaById","getMetricsByInstantQuery","filters","getMetricsByRangeQuery","duration","interval","getServiceAccountById","listCloudProviderRegions","listCloudProviders","listKafkas","listServiceAccounts","resetServiceAccountCreds","routeFocusTimer","QuickStartDrawerFederated","guides","className","RedirectToStreamsKafkas","to","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","rest","routeProps","PageNotFound","component","flattenedRoutes","insights","showCreateTopic","setShowCreateTopic","adminServerUrl","setAdminServerUrl","parts","location","split","length","chrome","auth","controlPlane","serviceApiBasePath","kafka","bootstrapServerHost","onCreateTopic","onCloseCreateTopic","createTopicPage","FederatedTopics","apiBasePath","topicListPage","exact","create","setCreate","setTermsReview","ams","DefaultApi","amsBasePath","resp","onConnectInstance","event","getConnectToInstancePath","createHref","preCreateInstance","open","terms_available","terms_required","redirect_url","redirectURL","href","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","createDialogOpen","dispatch","useDispatch","addAlert","message","getUsername","getUser","user","identity","OpenshiftStreamsFederated","onConnectToInstance","ServiceAccountsFederated","PageSectionVariants","p","QuickStartCatalogFederated","reduce","flattened","route","routes","AppRoutes","LastLocationProvider","idx","register","notifications","connect","defaultAppId","appId","identifyApp","on","includes","navId","store","getStore","release","pathName","shift","keycloak","REFRESH_TOKEN_COOKIE_NAME","getKeycloakInstance","k","initOptions","responseMode","storedRefreshToken","refreshJWT","exp","Date","refreshToken","updateToken","onLoad","getValidAccessToken","token","AppWithKeycloak","dataPlane","authServerUrl","clientId","realm","setKeycloak","setLoadingKeycloak","loadingKeycloak","baseName","basename","root"],"mappings":"yMAIIA,EAA0B,IAA4B,KAC1DA,EAAwBC,EAAE,KAE1BD,EAAwBE,KAAK,CAACC,EAAOC,GAAI,gEAAiE,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,gHAAgH,+GAA+G,MAAQ,GAAG,SAAW,iCAAiC,eAAiB,CAAC,qzCAAqzC,0CAA0C,WAAa,MAEzxD,W,iFCNIJ,E,MAA0B,GAA4B,KAE1DA,EAAwBE,KAAK,CAACC,EAAOC,GAAI,+DAAgE,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,oEAAoE,MAAQ,GAAG,SAAW,mBAAmB,eAAiB,CAAC,gHAAgH,WAAa,MAEhY,W,wCCJIC,E,wGAEG,SAASC,I,IAAM,sDAClB,GAAID,EACA,MAAM,IAAIE,MAAM,6BAcpB,OAXAF,EAAW,IAAIG,EAAA,GAAgB,IAAI,SAC/B,KACGC,I,8CCTPC,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEP,IAAI,IAASA,GAIX,W,0BCkCFC,EAAkB,kBAAoB,IC3C5C,SAASC,EAAiBC,GAC/B,aAAgB,WACd,IAAMC,EAAgBC,SAASF,MAG/B,OAFAE,SAASF,MAAQA,EAEV,WACLE,SAASF,MAAQC,KAElB,CAACD,I,0BCCAG,EAAoC,WAWxC,OACE,gBAAC,EAAAC,YAAW,KACZ,gBAAC,EAAAC,WAAU,CAACC,QAAQ,QAClB,gBAAC,EAAAC,eAAc,CAACC,KAAM,OACtB,gBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAI,sBAGlC,gBAAC,EAAAC,eAAc,yEAGf,iBApBJ,WACE,IAAMC,GAAU,UAIhB,OACE,gBAAC,EAAAC,OAAM,CAACC,QAJV,WACEF,EAAQxB,KAAK,OAGe,kBAclB,S,qBC5BH2B,EAAmC,WAAM,OACpD,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,QAAO,QCmBCC,EAAgB,uBAAwCC,GAMxDC,EAA+D,SAAC,G,IAAEC,EAAS,YAAEC,EAAQ,WAC1F,EAAsB,kBAAmCH,GAAxDI,EAAM,KAAEC,EAAS,KAgBxB,OAfA,eAAgB,WACd,IAAMC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAU1B,OARC,yC,8DAEkB,OADjBC,QAAQC,IAAI,kBACK,GAAMC,MAAMT,EAAW,CAAEM,OAAM,K,OAC9B,SADD,SACgBI,Q,cAA3BC,EAAY,SAClBR,EAAUQ,GACVJ,QAAQC,IAAI,sBAAuBG,G,WAG9B,WAAM,OAAAP,EAAWQ,WACvB,CAACZ,IAGF,kBAACH,EAAcgB,SAAQ,CAACC,MAAOZ,GAC5BD,ICxCMc,EAAgB,SAAOC,EAAiBC,EAAkBC,GAAa,6BAAGC,SAAO,W,kEACxFF,EAASG,SAAS,QAAlB,YACIC,EAASL,EAAO,IAAIC,E,iBAEP,O,sBAAA,GAAMR,MAAMY,I,OACtB,SADU,SACKX,OAAOY,MAAK,SAAAZ,GAAQ,OAAAA,KAAeY,MAAK,SAAAC,GAAW,OAAAA,EAAQL,MAAQI,MAAK,SAAAE,GAAK,OAAAA,EAAEC,MAAM,MAAIH,MAAK,SAAAI,GAClH,OAAIA,EAAKC,WAAWX,GACXU,EAECV,EAAO,IAAIU,M,OAJvB,MAAO,CAAP,EAAO,U,OAOP,O,SAAO,CAAP,OAAO5B,G,0BAGT,MAAO,CAAP,EAAUkB,EAAO,IAAIC,G,yBCfnBW,EAAyB,kBAAiD,IAEnEC,EAAmD,SAAC,G,IACE5B,EAAQ,WAGnEC,GAAS,IAAA4B,YAAWjC,GAE1B,YAAeC,IAAXI,EACK,kBAACR,EAAO,MAIf,kBAACkC,EAAuBf,SAAQ,CAACC,MAAOZ,EAAO6B,kBAC5C9B,IAmBP,ICiCY+B,EAWAC,EAuGAC,EAWAC,EA8iBAC,EAOAC,EAoGAC,EAOAC,EAgpCAC,EA6NAC,EAgCAC,EA03CAC,EAoFAC,EA4FAC,EA4DAC,EAWAC,EAmCAC,EASAC,EA2IAC,EAkEAC,GAkVAC,GAWAC,GA2FAC,GAWAC,GA6BAC,GASAC,GAiZAC,GASAC,GAQAC,GAWAC,GAQAC,GAyNAC,GASAC,GAQAC,GAWAC,GAQAC,GAiDAC,GAOAC,GA4MAC,GASAC,GAQAC,GAWAC,GAQAC,GAkSAC,GDtuLCC,GAAiE,SAAC,G,IAAE1D,EAAK,QAAElD,EAAM,SAAE6G,EAAM,SAAEC,EAAQ,WAExGC,EAAyB,eAAiBnD,GAC1C,GAAgB,IAAAoD,YAAf3D,EAAG,KAAE4D,EAAM,MAElB,IAAAC,YAAU,YACS,yC,8DACI,SAAMnE,EAAcgE,EAAuB7D,GAAOiE,SAAUJ,EAAuB7D,GAAOkE,WAAYlE,I,cAAnHkE,EAAa,SACnBH,EAAOG,G,aAGR,CAAClE,EAAO6D,IAEL,MAjEiB,SAAC,G,IAAE1D,EAAG,MAEvB,EAAoB,cAAe,GAAlCgE,EAAK,KAAEC,EAAQ,KAChB,EAAsB,cAAe,GAApCC,EAAM,KAAEC,EAAS,KAoCxB,OAlCA,eAAgB,WACd,GAAKnE,EAAL,CAKA,IAAMoE,EAAU7G,SAAS8G,cAAc,UAsBvC,OApBAD,EAAQE,IAAMtE,EACdoE,EAAQG,KAAO,kBACfH,EAAQI,OAAQ,EAEhBP,GAAS,GACTE,GAAU,GAEVC,EAAQK,OAAS,WACfvF,QAAQC,IAAI,oCAAoCa,GAChDiE,GAAS,IAGXG,EAAQM,QAAU,WAChBxF,QAAQyF,MAAM,mCAAmC3E,GACjDiE,GAAS,GACTE,GAAU,IAGZ5G,SAASqH,KAAKC,YAAYT,GAEnB,WACLlF,QAAQC,IAAI,qCAAqCa,GACjDzC,SAASqH,KAAKE,YAAYV,IA5B1BD,GAAU,KA8BX,CAACnE,IAEG,CACLgE,MAAK,EACLE,OAAM,GAwBkBa,CAAiB,CAAE/E,IAAG,IAAxCgE,EAAK,QAAEE,EAAM,SAErB,IAAKF,GAASE,EACZ,OAAIA,GAAUT,EACLA,EAEF,KAGT,IAAMuB,EAAY,SAxFpB,SAAuBnF,EAAOlD,GAA9B,WACE,OAAO,sD,gEAEL,SAAM,IAAyB,Y,OAG/B,OAHA,SAGA,GAFkBsI,OAAOpF,GAET/C,KAAK,IAAyBoI,U,OAC9B,OADhB,SACgB,GAAMD,OAAOpF,GAAOsF,IAAIxI,I,OAGxC,OAHMyI,EAAU,SACVC,EAASD,IACflG,QAAQC,IAAOkG,EAAM,WAAW1I,EAAM,SAASkD,GACxC,CAAP,EAAOwF,WA+EPC,CAAczF,EAAOlD,IAGvB,OACE,kBAAC,aAAc,CAAC8G,SAAU,kBAACpF,EAAO,OAC/BmF,EAAOwB,K,uBExGDO,GAAY,4BAA4BC,QAAQ,OAAQ,IA4BrE,GAGI,SAAYC,EAAyC3B,EAAwC4B,QAAxC,IAAA5B,MAAA,SAAwC,IAAA4B,MAAA,MAAxC,KAAA5B,WAAwC,KAAA4B,QACrFD,IACAE,KAAKF,cAAgBA,EACrBE,KAAK7B,SAAW2B,EAAc3B,UAAY6B,KAAK7B,WAW3D,eAEI,WAAmB8B,EAAeC,GAAlC,MACI,YAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAE,KAAwB,gB,EAI5B,OALmC,aAKnC,EALA,CAAmC/I,OC1CtBgJ,GAAiB,sBAOjBC,GAAoB,SAAUC,EAAsBC,EAAmBC,GAChF,GAAIA,QACA,MAAM,IAAIC,GAAcF,EAAW,sBAAsBA,EAAS,uCAAuCD,EAAY,MA+BhHI,GAAwB,SAAgBC,EAAab,G,qHAC1DA,GAAiBA,EAAcc,YAC0B,mBAA9Bd,EAAcc,YAArB,MACd,GAAMd,EAAcc,eAF1B,M,cAEM,W,aACA,SAAMd,EAAcc,a,OAApB,W,iBAFAA,EAAc,EAGpBD,EAAsB,cAAI,UAAYC,E,mCAqBjCC,GAAkB,SAAUxG,G,IAAU,wDAE/C,IADA,IAAMyG,EAAe,IAAIC,gBAAgB1G,EAAI2G,QACxB,MAAAC,EAAA,eAAS,CAAzB,IAAMN,EAAM,KACb,IAAK,IAAMO,KAAOP,EACd,GAAIQ,MAAMC,QAAQT,EAAOO,IAAO,CAC5BJ,EAAaO,OAAOH,GACpB,IAAmB,UAAAP,EAAOO,GAAP,eAAa,CAA3B,IAAMI,EAAI,KACXR,EAAaS,OAAOL,EAAKI,SAG7BR,EAAaU,IAAIN,EAAKP,EAAOO,IAIzC7G,EAAI2G,OAASF,EAAaW,YAOjBC,GAAwB,SAAU5H,EAAY6H,EAAqB7B,GAC5E,IAAM8B,EAA6B,iBAAV9H,EAIzB,OAH2B8H,GAAa9B,GAAiBA,EAAc+B,WACjE/B,EAAc+B,WAAWF,EAAeG,QAAQ,iBAChDF,GAEAG,KAAKC,eAAoBlJ,IAAVgB,EAAsBA,EAAQ,IAC5CA,GAAS,IAOPmI,GAAe,SAAU5H,GAClC,OAAOA,EAAI6H,SAAW7H,EAAI2G,OAAS3G,EAAI8H,MAO9BC,GAAwB,SAAUC,EAAwBC,EAA4B1C,EAAmBE,GAClH,OAAO,SAACC,EAAoC5B,QAApC,IAAA4B,MAAA,QAAoC,IAAA5B,MAAA,GACxC,IAAMoE,GAAmB,oBAAIF,EAAU9K,SAAO,CAAE8C,MAAMyF,aAAa,EAAbA,EAAe3B,WAAYA,GAAYkE,EAAUhI,MACvG,OAAO0F,EAAMyC,QAAQD,MF1D7B,SAAYvH,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAAsB,KAWlC,SAAYC,GACR,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCJ,CAAYA,MAA4B,KAuGxC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAA8B,KAW1C,SAAYC,GACR,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCJ,CAAYA,MAAoC,KA8iBhD,SAAYC,GACR,4CADJ,CAAYA,MAAqC,KAOjD,SAAYC,GACR,oBADJ,CAAYA,MAA+B,KAoG3C,SAAYC,GACR,oCADJ,CAAYA,MAA8C,KAO1D,SAAYC,GACR,YACA,YACA,sBACA,YACA,cALJ,CAAYA,MAAwC,KAgpCpD,SAAYC,GACR,oBACA,wBACA,oBAHJ,CAAYA,MAAwB,KA6NpC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAAoB,KAgChC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAAyB,KA03CrC,SAAYC,GACR,kBACA,kBACA,8BAHJ,CAAYA,MAAqB,KAoFjC,SAAYC,GACR,kBACA,kBACA,8BAHJ,CAAYA,MAA0B,KA4FtC,SAAYC,GACR,kBACA,kBACA,8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","file":"76.17b64ce8a556936e1a69.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_variables.scss\",\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_helpers.scss\"],\"names\":[],\"mappings\":\"AAAA,MACI,4BAAA,CCDJ,aACI,YAAA\",\"sourcesContent\":[\":root {\\n    --ins-color--orange: #ec7a08;\\n}\\n\\n// Spacing\\n$ins-padding: var(--pf-global--spacer--lg);\\n$ins-margin: var(--pf-global--spacer--xl);\\n$ins-gutter: var(--pf-global--gutter);\\n\\n// Font Size\\n$ins-fontSize: var(--pf-global--FontSize--md);\\n$ins-fontSize--sm: var(--pf-global--FontSize--sm);\\n$ins-fontSize--lg: var(--pf-global--FontSize--lg);\\n$ins-fontSize--xl: var(--pf-global--FontSize--xl);\\n\\n// Borders\\n$ins-borderRadius: var(--pf-global--BorderRadius--sm);\\n$ins-borderRadius--round: var(--pf-global--BorderRadius--lg);\\n\\n// Grid breakpoints\\n$ins-break--xs: var(--pf-global--breakpoint--xs);\\n$ins-break--sm: var(--pf-global--breakpoint--sm);\\n$ins-break--md: var(--pf-global--breakpoint--md);\\n$ins-break--lg: var(--pf-global--breakpoint--lg);\\n$ins-break--xl: var(--pf-global--breakpoint--xl);\\n\\n// Colors\\n$ins-color--red: var(--pf-global--danger-color--100);\\n$ins-color--critical: $ins-color--red;\\n\\n$ins-color--orange: var(--ins-color--orange);\\n$ins-color--high: $ins-color--orange;\\n\\n$ins-color--yellow: var(--pf-global--warning-color--100);\\n$ins-color--medium: $ins-color--yellow;\\n\\n$ins-color--green: var(--pf-global--success-color--100);\\n$ins-color--low: $ins-color--green;\\n\\n$ins-color--blue: var(--pf-global--info-color--100);\\n\\n$ins-color--gray: var(--pf-global--disabled-color--200);\",\"button:focus {\\n    outline:none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".mas-quickstart-drawer{height:calc(100vh - 76px) !important}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/ResourcesPage/QuickStartDrawerFederated.scss\"],\"names\":[],\"mappings\":\"AAAA,uBAEI,oCAAA\",\"sourcesContent\":[\".mas-quickstart-drawer {\\n    // subtract the header height\\n    height: calc(100vh - 76px) !important;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    //If you want to register all of your reducers, this is good place.\n    /*\n     *  registry.register({\n     *    someName: (state, action) => ({...state})\n     *  });\n     */\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\n\nexport type InsightsType = {\n  chrome: {\n    init: () => void;\n    identifyApp: (appId: string) => Promise<void>;\n    getApp: () => string;\n    getBundle: () => string;\n    getEnvironment: () => 'ci' | 'qa' | 'prod' | 'stage';\n    on: (type: string, callback: ((event: any) => void)) => void;\n    auth: {\n      getToken(): Promise<string>;\n      getUser(): Promise<UserType>;\n    };\n    isProd: boolean;\n    isBeta: () => boolean;\n    isPenTest: () => boolean;\n  };\n};\n\nexport type UserType = {\n  entitlements: {\n    [key: string]: {\n      is_entitled: boolean;\n      is_trial: boolean;\n    }\n  },\n  identity: IdentityType;\n};\n\nexport type IdentityType = {\n  account_number: string;\n  type: string;\n  internal: {\n    org_id: string;\n    account_id: string;\n  }\n  user: {\n    username: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n    is_active: boolean;\n  }\n};\n\nexport const InsightsContext = React.createContext({} as InsightsType);\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFound: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFound };\n","import React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner/>\n  </Bullseye>\n);\n","import React from \"react\";\n\nexport type Config = {\n  controlPlane: {\n    serviceApiBasePath: string,\n    amsBasePath: string\n  }\n  dataPlane: {\n    keycloak: {\n      authServerUrl: string,\n      clientId: string,\n      realm: string\n    }\n  }\n  federatedModules: {\n    strimziUI: FederatedModuleConfig\n    mkUiFrontend: FederatedModuleConfig\n    guides: FederatedModuleConfig\n  }\n};\n\nexport type FederatedModuleConfig = {\n  basePath: string\n  entryPoint: string\n}\n\nexport const ConfigContext = React.createContext<Config | undefined>(undefined);\n\nexport type ConfigProviderProps = {\n  configUrl: string\n}\n\nexport const ConfigProvider: React.FunctionComponent<ConfigProviderProps> = ({ configUrl, children }) => {\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  React.useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async () => {\n      console.log('Loading config');\n      const response = await fetch(configUrl, { signal });\n      const newConfig = await response.json();\n      setConfig(newConfig);\n      console.log('Done loading config', newConfig);\n    })();\n\n    return () => controller.abort();\n  }, [configUrl]);\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import React from \"react\";\nimport {file} from \"@babel/types\";\n\nexport type Utils = {\n  [key: string]: {\n    entry: string[],\n    modules: string[]\n  };\n};\n\n\nexport const getEntryPoint = async (baseUrl: string, fileName: string, scope: string): Promise<string | undefined> => {\n  if (fileName.endsWith(\"json\") ){\n    const url = `${baseUrl}/${fileName}`;\n    try {\n      const response = await fetch(url);\n      return await response.json().then(json => json as Utils).then(fedMods => fedMods[scope]).then(s => s.entry[0]).then(path => {\n        if (path.startsWith(baseUrl)) {\n          return path;\n        }\n        return `${baseUrl}/${path}`\n      });\n    } catch (error) {\n      return undefined;\n    }\n  } else {\n    return `${baseUrl}/${fileName}`;\n  }\n}\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, {ReactNode, useContext, useEffect, useState} from 'react';\nimport { Loading } from '../Loading/Loading';\nimport { ConfigContext, FederatedModuleConfig } from \"@app/Config/Config\";\nimport {getEntryPoint} from \"@app/Components/FederatedModule/utils\";\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nconst FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({\n                                                                   children\n                                                                 }) => {\n\n  const config = useContext(ConfigContext);\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope]; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await window[scope].get(module);\n    const Module = factory();\n    console.log(`${Module} loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = ({ url }) => {\n\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!url) {\n      setFailed(true);\n      return;\n    }\n\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    setReady(false);\n    setFailed(false);\n\n    element.onload = () => {\n      console.log(`Dynamic federated module Loaded: ${url}`);\n      setReady(true);\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      setReady(false);\n      setFailed(true);\n    };\n\n    document.head.appendChild(element);\n\n    return () => {\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: any;\n}\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    const fetchUrl = async () => {\n      const entryPoint = await getEntryPoint(federatedModuleContext[scope].basePath, federatedModuleContext[scope].entryPoint, scope);\n      setUrl(entryPoint);\n    }\n    fetchUrl();\n  }, [scope, federatedModuleContext]);\n\n  const { ready, failed } = useDynamicScript({ url });\n\n  if (!ready || failed) {\n    if (failed && fallback) {\n      return fallback;\n    }\n    return null;\n  }\n\n  const Component = React.lazy(\n    loadComponent(scope, module)\n  );\n\n  return (\n    <React.Suspense fallback={<Loading/>}>\n      {render(Component)}\n    </React.Suspense>\n  );\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AccessReview\n */\nexport interface AccessReview {\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    action: AccessReviewActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    resource_type: AccessReviewResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface AccessReviewResponse\n */\nexport interface AccessReviewResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    action?: AccessReviewResponseActionEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccessReviewResponse\n     */\n    allowed: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    resource_type?: AccessReviewResponseResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResponseActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResponseResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface AccessTokenCfg\n */\nexport interface AccessTokenCfg {\n    /**\n     * \n     * @type {{ [key: string]: object; }}\n     * @memberof AccessTokenCfg\n     */\n    auths: { [key: string]: object; };\n}\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Account\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Account\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Account\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {Organization}\n     * @memberof Account\n     */\n    organization?: Organization;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Account\n     */\n    service_account?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    username: string;\n}\n/**\n * \n * @export\n * @interface AccountAllOf\n */\nexport interface AccountAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountAllOf\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof AccountAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof AccountAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {Organization}\n     * @memberof AccountAllOf\n     */\n    organization?: Organization;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountAllOf\n     */\n    service_account?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    username: string;\n}\n/**\n * \n * @export\n * @interface AccountList\n */\nexport interface AccountList {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof AccountList\n     */\n    items: Array<Account>;\n}\n/**\n * \n * @export\n * @interface AccountListAllOf\n */\nexport interface AccountListAllOf {\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof AccountListAllOf\n     */\n    items?: Array<Account>;\n}\n/**\n * \n * @export\n * @interface AccountPatchRequest\n */\nexport interface AccountPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountPatchRequest\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountPatchRequest\n     */\n    service_account?: boolean;\n}\n/**\n * \n * @export\n * @interface AccountReference\n */\nexport interface AccountReference {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface AccountReferenceAllOf\n */\nexport interface AccountReferenceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface Capability\n */\nexport interface Capability {\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Capability\n     */\n    inherited: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface CapabilityAllOf\n */\nexport interface CapabilityAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof CapabilityAllOf\n     */\n    inherited: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityAllOf\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityAllOf\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface CapabilityReview\n */\nexport interface CapabilityReview {\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReview\n     */\n    result: string;\n}\n/**\n * \n * @export\n * @interface CapabilityReviewRequest\n */\nexport interface CapabilityReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    capability: CapabilityReviewRequestCapabilityEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    type: CapabilityReviewRequestTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CapabilityReviewRequestCapabilityEnum {\n    ManageClusterAdmin = 'manage_cluster_admin'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CapabilityReviewRequestTypeEnum {\n    Cluster = 'Cluster'\n}\n\n/**\n * \n * @export\n * @interface ClusterAuthorizationRequest\n */\nexport interface ClusterAuthorizationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    availability_zone?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    byoc?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cluster_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    disconnected?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    product_category?: ClusterAuthorizationRequestProductCategoryEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    product_id?: ClusterAuthorizationRequestProductIdEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    reserve?: boolean;\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ClusterAuthorizationRequest\n     */\n    resources?: Array<ReservedResource>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ClusterAuthorizationRequestProductCategoryEnum {\n    AssistedInstall = 'assistedInstall'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ClusterAuthorizationRequestProductIdEnum {\n    Ocp = 'ocp',\n    Osd = 'osd',\n    Osdtrial = 'osdtrial',\n    Moa = 'moa',\n    Rhmi = 'rhmi'\n}\n\n/**\n * \n * @export\n * @interface ClusterAuthorizationResponse\n */\nexport interface ClusterAuthorizationResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationResponse\n     */\n    allowed: boolean;\n    /**\n     * \n     * @type {Array<ExcessResource>}\n     * @memberof ClusterAuthorizationResponse\n     */\n    excess_resources: Array<ExcessResource>;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationResponse\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ClusterAuthorizationResponse\n     */\n    subscription?: ObjectReference;\n}\n/**\n * \n * @export\n * @interface ClusterMetricsNodes\n */\nexport interface ClusterMetricsNodes {\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    compute?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    infra?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    master?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface ClusterRegistrationRequest\n */\nexport interface ClusterRegistrationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationRequest\n     */\n    authorization_token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationRequest\n     */\n    cluster_id?: string;\n}\n/**\n * \n * @export\n * @interface ClusterRegistrationResponse\n */\nexport interface ClusterRegistrationResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    authorization_token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    cluster_id?: string;\n    /**\n     * Cluster Registration expiration in Unix time\n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    expires_at?: string;\n}\n/**\n * \n * @export\n * @interface ClusterResource\n */\nexport interface ClusterResource {\n    /**\n     * \n     * @type {ClusterResourceTotal}\n     * @memberof ClusterResource\n     */\n    total: ClusterResourceTotal;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterResource\n     */\n    updated_timestamp: string;\n    /**\n     * \n     * @type {ClusterResourceTotal}\n     * @memberof ClusterResource\n     */\n    used: ClusterResourceTotal;\n}\n/**\n * \n * @export\n * @interface ClusterResourceTotal\n */\nexport interface ClusterResourceTotal {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterResourceTotal\n     */\n    unit: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterResourceTotal\n     */\n    value: number;\n}\n/**\n * \n * @export\n * @interface ClusterUpgrade\n */\nexport interface ClusterUpgrade {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterUpgrade\n     */\n    available?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    updated_timestamp?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface EphemeralResourceQuota\n */\nexport interface EphemeralResourceQuota {\n    /**\n     * \n     * @type {number}\n     * @memberof EphemeralResourceQuota\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof EphemeralResourceQuota\n     */\n    byoc?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof EphemeralResourceQuota\n     */\n    sku_count?: number;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ExcessResource\n */\nexport interface ExcessResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExcessResource\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ExcessResource\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    resource_type?: string;\n}\n/**\n * \n * @export\n * @interface ExcessResourceAllOf\n */\nexport interface ExcessResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExcessResourceAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ExcessResourceAllOf\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    resource_type?: string;\n}\n/**\n * \n * @export\n * @interface ExportControlReview\n */\nexport interface ExportControlReview {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExportControlReview\n     */\n    restricted: boolean;\n}\n/**\n * \n * @export\n * @interface ExportControlReviewRequest\n */\nexport interface ExportControlReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ExportControlReviewRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExportControlReviewRequest\n     */\n    ignore_cache?: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggle\n */\nexport interface FeatureToggle {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureToggle\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggleAllOf\n */\nexport interface FeatureToggleAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureToggleAllOf\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggleQueryRequest\n */\nexport interface FeatureToggleQueryRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggleQueryRequest\n     */\n    organization_id: string;\n}\n/**\n * \n * @export\n * @interface FeatureToggleQueryRequestAllOf\n */\nexport interface FeatureToggleQueryRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggleQueryRequestAllOf\n     */\n    organization_id: string;\n}\n/**\n * \n * @export\n * @interface Label\n */\nexport interface Label {\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Label\n     */\n    internal: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface LabelAllOf\n */\nexport interface LabelAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof LabelAllOf\n     */\n    internal: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface LabelList\n */\nexport interface LabelList {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof LabelList\n     */\n    items: Array<Label>;\n}\n/**\n * \n * @export\n * @interface LabelListAllOf\n */\nexport interface LabelListAllOf {\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof LabelListAllOf\n     */\n    items?: Array<Label>;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    health_state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    metrics?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    query_timestamp?: string;\n}\n/**\n * \n * @export\n * @interface MetricAllOf\n */\nexport interface MetricAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    health_state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    metrics?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    query_timestamp?: string;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsList\n     */\n    items: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n}\n/**\n * \n * @export\n * @interface NotificationContactCreateRequest\n */\nexport interface NotificationContactCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationContactCreateRequest\n     */\n    account_identifier?: string;\n}\n/**\n * \n * @export\n * @interface NotificationRequest\n */\nexport interface NotificationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    bcc_address?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NotificationRequest\n     */\n    include_red_hat_associates?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    subject: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    template_name: string;\n    /**\n     * \n     * @type {Array<TemplateParameter>}\n     * @memberof NotificationRequest\n     */\n    template_parameters?: Array<TemplateParameter>;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n}\n/**\n * \n * @export\n * @interface OneMetric\n */\nexport interface OneMetric {\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    cluster_type: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_cpu: ClusterResource;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_memory: ClusterResource;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_sockets: ClusterResource;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    console_url: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    cpu: ClusterResource;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    critical_alerts_firing: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    health_state?: OneMetricHealthStateEnum;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    memory: ClusterResource;\n    /**\n     * \n     * @type {ClusterMetricsNodes}\n     * @memberof OneMetric\n     */\n    nodes: ClusterMetricsNodes;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    openshift_version: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    operating_system: string;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    operators_condition_failing: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    region: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    sockets: ClusterResource;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    state: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    state_description: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    storage: ClusterResource;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_cpu_total: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_obligation_exists: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_socket_total: number;\n    /**\n     * \n     * @type {ClusterUpgrade}\n     * @memberof OneMetric\n     */\n    upgrade: ClusterUpgrade;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum OneMetricHealthStateEnum {\n    Healthy = 'healthy',\n    Unhealthy = 'unhealthy',\n    Unknown = 'unknown'\n}\n\n/**\n * \n * @export\n * @interface Organization\n */\nexport interface Organization {\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Organization\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Organization\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface OrganizationAllOf\n */\nexport interface OrganizationAllOf {\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof OrganizationAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof OrganizationAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface OrganizationList\n */\nexport interface OrganizationList {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Organization>}\n     * @memberof OrganizationList\n     */\n    items: Array<Organization>;\n}\n/**\n * \n * @export\n * @interface OrganizationListAllOf\n */\nexport interface OrganizationListAllOf {\n    /**\n     * \n     * @type {Array<Organization>}\n     * @memberof OrganizationListAllOf\n     */\n    items?: Array<Organization>;\n}\n/**\n * \n * @export\n * @interface OrganizationPatchRequest\n */\nexport interface OrganizationPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface Permission\n */\nexport interface Permission {\n    /**\n     * \n     * @type {string}\n     * @memberof Permission\n     */\n    action?: PermissionActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Permission\n     */\n    resource?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PermissionActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n\n/**\n * \n * @export\n * @interface PermissionAllOf\n */\nexport interface PermissionAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionAllOf\n     */\n    action?: PermissionAllOfActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionAllOf\n     */\n    resource?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PermissionAllOfActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n\n/**\n * \n * @export\n * @interface PermissionList\n */\nexport interface PermissionList {\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof PermissionList\n     */\n    items: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface PermissionListAllOf\n */\nexport interface PermissionListAllOf {\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof PermissionListAllOf\n     */\n    items?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface Plan\n */\nexport interface Plan {\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface PlanAllOf\n */\nexport interface PlanAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface PlanList\n */\nexport interface PlanList {\n    /**\n     * \n     * @type {string}\n     * @memberof PlanList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Plan>}\n     * @memberof PlanList\n     */\n    items: Array<Plan>;\n}\n/**\n * \n * @export\n * @interface PlanListAllOf\n */\nexport interface PlanListAllOf {\n    /**\n     * \n     * @type {Array<Plan>}\n     * @memberof PlanListAllOf\n     */\n    items?: Array<Plan>;\n}\n/**\n * \n * @export\n * @interface PullSecretRequest\n */\nexport interface PullSecretRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof PullSecretRequest\n     */\n    external_resource_id: string;\n}\n/**\n * \n * @export\n * @interface QuotaCost\n */\nexport interface QuotaCost {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCost\n     */\n    allowed: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCost\n     */\n    consumed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    quota_id: string;\n    /**\n     * \n     * @type {Array<RelatedResource>}\n     * @memberof QuotaCost\n     */\n    related_resources?: Array<RelatedResource>;\n}\n/**\n * \n * @export\n * @interface QuotaCostAllOf\n */\nexport interface QuotaCostAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostAllOf\n     */\n    consumed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostAllOf\n     */\n    quota_id: string;\n    /**\n     * \n     * @type {Array<RelatedResource>}\n     * @memberof QuotaCostAllOf\n     */\n    related_resources?: Array<RelatedResource>;\n}\n/**\n * \n * @export\n * @interface QuotaCostList\n */\nexport interface QuotaCostList {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<QuotaCost>}\n     * @memberof QuotaCostList\n     */\n    items: Array<QuotaCost>;\n}\n/**\n * \n * @export\n * @interface QuotaCostListAllOf\n */\nexport interface QuotaCostListAllOf {\n    /**\n     * \n     * @type {Array<QuotaCost>}\n     * @memberof QuotaCostListAllOf\n     */\n    items?: Array<QuotaCost>;\n}\n/**\n * \n * @export\n * @interface QuotaSummary\n */\nexport interface QuotaSummary {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummary\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof QuotaSummary\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummary\n     */\n    reserved: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryAllOf\n */\nexport interface QuotaSummaryAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof QuotaSummaryAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryAllOf\n     */\n    reserved: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryList\n */\nexport interface QuotaSummaryList {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<QuotaSummary>}\n     * @memberof QuotaSummaryList\n     */\n    items: Array<QuotaSummary>;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryListAllOf\n */\nexport interface QuotaSummaryListAllOf {\n    /**\n     * \n     * @type {Array<QuotaSummary>}\n     * @memberof QuotaSummaryListAllOf\n     */\n    items?: Array<QuotaSummary>;\n}\n/**\n * \n * @export\n * @interface Registry\n */\nexport interface Registry {\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Registry\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RegistryAllOf\n */\nexport interface RegistryAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryAllOf\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCreateRequest\n */\nexport interface RegistryCreateRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryCreateRequest\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredential\n */\nexport interface RegistryCredential {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    kind?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredential\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredential\n     */\n    registry?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialAllOf\n */\nexport interface RegistryCredentialAllOf {\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredentialAllOf\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredentialAllOf\n     */\n    registry?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialList\n */\nexport interface RegistryCredentialList {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<RegistryCredential>}\n     * @memberof RegistryCredentialList\n     */\n    items: Array<RegistryCredential>;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialListAllOf\n */\nexport interface RegistryCredentialListAllOf {\n    /**\n     * \n     * @type {Array<RegistryCredential>}\n     * @memberof RegistryCredentialListAllOf\n     */\n    items?: Array<RegistryCredential>;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialPatchRequest\n */\nexport interface RegistryCredentialPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    registry_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryList\n */\nexport interface RegistryList {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Registry>}\n     * @memberof RegistryList\n     */\n    items: Array<Registry>;\n}\n/**\n * \n * @export\n * @interface RegistryListAllOf\n */\nexport interface RegistryListAllOf {\n    /**\n     * \n     * @type {Array<Registry>}\n     * @memberof RegistryListAllOf\n     */\n    items?: Array<Registry>;\n}\n/**\n * \n * @export\n * @interface RegistryRequest\n */\nexport interface RegistryRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryRequest\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RelatedResource\n */\nexport interface RelatedResource {\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    billing_model: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    byoc: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RelatedResource\n     */\n    cost: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    product: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    product_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface RelatedResourceAllOf\n */\nexport interface RelatedResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    billing_model: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    byoc: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RelatedResourceAllOf\n     */\n    cost: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    product: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    product_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface ReservedResource\n */\nexport interface ReservedResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResource\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResource\n     */\n    cluster?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResource\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ReservedResource\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface ReservedResourceAllOf\n */\nexport interface ReservedResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResourceAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResourceAllOf\n     */\n    cluster?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceAllOf\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ReservedResourceAllOf\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface ReservedResourceList\n */\nexport interface ReservedResourceList {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ReservedResourceList\n     */\n    items: Array<ReservedResource>;\n}\n/**\n * \n * @export\n * @interface ReservedResourceListAllOf\n */\nexport interface ReservedResourceListAllOf {\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ReservedResourceListAllOf\n     */\n    items?: Array<ReservedResource>;\n}\n/**\n * \n * @export\n * @interface ResourceQuota\n */\nexport interface ResourceQuota {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuota\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResourceQuota\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    resource_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuota\n     */\n    sku_count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    type?: ResourceQuotaTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceQuotaAllOf\n */\nexport interface ResourceQuotaAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResourceQuotaAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    resource_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaAllOf\n     */\n    sku_count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    type?: ResourceQuotaAllOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaAllOfTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceQuotaList\n */\nexport interface ResourceQuotaList {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<ResourceQuota>}\n     * @memberof ResourceQuotaList\n     */\n    items: Array<ResourceQuota>;\n}\n/**\n * \n * @export\n * @interface ResourceQuotaListAllOf\n */\nexport interface ResourceQuotaListAllOf {\n    /**\n     * \n     * @type {Array<ResourceQuota>}\n     * @memberof ResourceQuotaListAllOf\n     */\n    items?: Array<ResourceQuota>;\n}\n/**\n * \n * @export\n * @interface ResourceQuotaRequest\n */\nexport interface ResourceQuotaRequest {\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaRequest\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaRequest\n     */\n    sku: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaRequest\n     */\n    sku_count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaRequest\n     */\n    type?: ResourceQuotaRequestTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaRequestTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceReview\n */\nexport interface ResourceReview {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    action: ResourceReviewActionEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    cluster_ids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    cluster_uuids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    organization_ids: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    resource_type: ResourceReviewResourceTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    subscription_ids: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceReviewRequest\n */\nexport interface ResourceReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    account_username?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    action?: ResourceReviewRequestActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    resource_type?: ResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewRequestActionEnum {\n    Get = 'get',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewRequestResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface Role\n */\nexport interface Role {\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof Role\n     */\n    permissions?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface RoleAllOf\n */\nexport interface RoleAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof RoleAllOf\n     */\n    permissions?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface RoleBinding\n */\nexport interface RoleBinding {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    kind?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBinding\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    organization?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    role?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    type?: RoleBindingTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum RoleBindingTypeEnum {\n    Application = 'Application',\n    Subscription = 'Subscription',\n    Organization = 'Organization'\n}\n\n/**\n * \n * @export\n * @interface RoleBindingAllOf\n */\nexport interface RoleBindingAllOf {\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingAllOf\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    organization?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    role?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    type?: RoleBindingAllOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum RoleBindingAllOfTypeEnum {\n    Application = 'Application',\n    Subscription = 'Subscription',\n    Organization = 'Organization'\n}\n\n/**\n * \n * @export\n * @interface RoleBindingCreateRequest\n */\nexport interface RoleBindingCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    account_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingCreateRequest\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    role_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    type: string;\n}\n/**\n * \n * @export\n * @interface RoleBindingList\n */\nexport interface RoleBindingList {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<RoleBinding>}\n     * @memberof RoleBindingList\n     */\n    items: Array<RoleBinding>;\n}\n/**\n * \n * @export\n * @interface RoleBindingListAllOf\n */\nexport interface RoleBindingListAllOf {\n    /**\n     * \n     * @type {Array<RoleBinding>}\n     * @memberof RoleBindingListAllOf\n     */\n    items?: Array<RoleBinding>;\n}\n/**\n * \n * @export\n * @interface RoleBindingRequest\n */\nexport interface RoleBindingRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingRequest\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    role_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface RoleList\n */\nexport interface RoleList {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Role>}\n     * @memberof RoleList\n     */\n    items: Array<Role>;\n}\n/**\n * \n * @export\n * @interface RoleListAllOf\n */\nexport interface RoleListAllOf {\n    /**\n     * \n     * @type {Array<Role>}\n     * @memberof RoleListAllOf\n     */\n    items?: Array<Role>;\n}\n/**\n * \n * @export\n * @interface SKU\n */\nexport interface SKU {\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SKU\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {Array<EphemeralResourceQuota>}\n     * @memberof SKU\n     */\n    resources?: Array<EphemeralResourceQuota>;\n}\n/**\n * \n * @export\n * @interface SKUAllOf\n */\nexport interface SKUAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SKUAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {Array<EphemeralResourceQuota>}\n     * @memberof SKUAllOf\n     */\n    resources?: Array<EphemeralResourceQuota>;\n}\n/**\n * \n * @export\n * @interface SelfAccessReview\n */\nexport interface SelfAccessReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    action: SelfAccessReviewActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    resource_type: SelfAccessReviewResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfAccessReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfAccessReviewResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface SelfResourceReview\n */\nexport interface SelfResourceReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReview\n     */\n    action: SelfResourceReviewActionEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    cluster_ids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    cluster_uuids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    organization_ids: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReview\n     */\n    resource_type: SelfResourceReviewResourceTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    subscription_ids: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface SelfResourceReviewRequest\n */\nexport interface SelfResourceReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReviewRequest\n     */\n    action?: SelfResourceReviewRequestActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReviewRequest\n     */\n    resource_type?: SelfResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewRequestActionEnum {\n    Get = 'get',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewRequestResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface SkuList\n */\nexport interface SkuList {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<SKU>}\n     * @memberof SkuList\n     */\n    items: Array<SKU>;\n}\n/**\n * \n * @export\n * @interface SkuListAllOf\n */\nexport interface SkuListAllOf {\n    /**\n     * \n     * @type {Array<SKU>}\n     * @memberof SkuListAllOf\n     */\n    items?: Array<SKU>;\n}\n/**\n * \n * @export\n * @interface SkuRules\n */\nexport interface SkuRules {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRules\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    quota_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    sku?: string;\n}\n/**\n * \n * @export\n * @interface SkuRulesAllOf\n */\nexport interface SkuRulesAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesAllOf\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesAllOf\n     */\n    quota_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesAllOf\n     */\n    sku?: string;\n}\n/**\n * \n * @export\n * @interface SkuRulesList\n */\nexport interface SkuRulesList {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<SkuRules>}\n     * @memberof SkuRulesList\n     */\n    items: Array<SkuRules>;\n}\n/**\n * \n * @export\n * @interface SkuRulesListAllOf\n */\nexport interface SkuRulesListAllOf {\n    /**\n     * \n     * @type {Array<SkuRules>}\n     * @memberof SkuRulesListAllOf\n     */\n    items?: Array<SkuRules>;\n}\n/**\n * \n * @export\n * @interface Subscription\n */\nexport interface Subscription {\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Subscription\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cluster_billing_model?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Subscription\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {AccountReference}\n     * @memberof Subscription\n     */\n    creator?: AccountReference;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Subscription\n     */\n    labels?: Array<Label>;\n    /**\n     * Last time this subscription were reconciled about cluster usage\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_reconcile_date?: string;\n    /**\n     * Last time status was set to Released for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_released_at?: string;\n    /**\n     * Last telemetry authorization request for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_telemetry_date?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    managed: boolean;\n    /**\n     * \n     * @type {Array<OneMetric>}\n     * @memberof Subscription\n     */\n    metrics?: Array<OneMetric>;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof Subscription\n     */\n    notification_contacts?: Array<Account>;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {Plan}\n     * @memberof Subscription\n     */\n    plan?: Plan;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    product_bundle?: SubscriptionProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    service_level?: SubscriptionServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Subscription\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    support_level?: SubscriptionSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    system_units?: SubscriptionSystemUnitsEnum;\n    /**\n     * If the subscription is a trial, date the trial ends\n     * @type {string}\n     * @memberof Subscription\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    usage?: SubscriptionUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionAllOf\n */\nexport interface SubscriptionAllOf {\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof SubscriptionAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cluster_billing_model?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionAllOf\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {AccountReference}\n     * @memberof SubscriptionAllOf\n     */\n    creator?: AccountReference;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof SubscriptionAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * Last time this subscription were reconciled about cluster usage\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_reconcile_date?: string;\n    /**\n     * Last time status was set to Released for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_released_at?: string;\n    /**\n     * Last telemetry authorization request for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_telemetry_date?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionAllOf\n     */\n    managed: boolean;\n    /**\n     * \n     * @type {Array<OneMetric>}\n     * @memberof SubscriptionAllOf\n     */\n    metrics?: Array<OneMetric>;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof SubscriptionAllOf\n     */\n    notification_contacts?: Array<Account>;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {Plan}\n     * @memberof SubscriptionAllOf\n     */\n    plan?: Plan;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    product_bundle?: SubscriptionAllOfProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionAllOf\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    service_level?: SubscriptionAllOfServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionAllOf\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    support_level?: SubscriptionAllOfSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    system_units?: SubscriptionAllOfSystemUnitsEnum;\n    /**\n     * If the subscription is a trial, date the trial ends\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    usage?: SubscriptionAllOfUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionCreateRequest\n */\nexport interface SubscriptionCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    cluster_uuid: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    plan_id: SubscriptionCreateRequestPlanIdEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    status: SubscriptionCreateRequestStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionCreateRequestPlanIdEnum {\n    Ocp = 'OCP'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionCreateRequestStatusEnum {\n    Disconnected = 'Disconnected'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionList\n */\nexport interface SubscriptionList {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Subscription>}\n     * @memberof SubscriptionList\n     */\n    items: Array<Subscription>;\n}\n/**\n * \n * @export\n * @interface SubscriptionListAllOf\n */\nexport interface SubscriptionListAllOf {\n    /**\n     * \n     * @type {Array<Subscription>}\n     * @memberof SubscriptionListAllOf\n     */\n    items?: Array<Subscription>;\n}\n/**\n * \n * @export\n * @interface SubscriptionPatchRequest\n */\nexport interface SubscriptionPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionPatchRequest\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    creator_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionPatchRequest\n     */\n    managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    plan_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    product_bundle?: SubscriptionPatchRequestProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionPatchRequest\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    service_level?: SubscriptionPatchRequestServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionPatchRequest\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    support_level?: SubscriptionPatchRequestSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    system_units?: SubscriptionPatchRequestSystemUnitsEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    usage?: SubscriptionPatchRequestUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface Summary\n */\nexport interface Summary {\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<SummaryMetrics>}\n     * @memberof Summary\n     */\n    metrics: Array<SummaryMetrics>;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface SummaryAllOf\n */\nexport interface SummaryAllOf {\n    /**\n     * \n     * @type {Array<SummaryMetrics>}\n     * @memberof SummaryAllOf\n     */\n    metrics: Array<SummaryMetrics>;\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryAllOf\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface SummaryMetrics\n */\nexport interface SummaryMetrics {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryMetrics\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<SummaryVector>}\n     * @memberof SummaryMetrics\n     */\n    vector?: Array<SummaryVector>;\n}\n/**\n * \n * @export\n * @interface SummaryMetricsAllOf\n */\nexport interface SummaryMetricsAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryMetricsAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<SummaryVector>}\n     * @memberof SummaryMetricsAllOf\n     */\n    vector?: Array<SummaryVector>;\n}\n/**\n * \n * @export\n * @interface SummaryVector\n */\nexport interface SummaryVector {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryVector\n     */\n    time?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SummaryVector\n     */\n    value?: number;\n}\n/**\n * \n * @export\n * @interface SummaryVectorAllOf\n */\nexport interface SummaryVectorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryVectorAllOf\n     */\n    time?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SummaryVectorAllOf\n     */\n    value?: number;\n}\n/**\n * \n * @export\n * @interface SupportCasesCreatedResponse\n */\nexport interface SupportCasesCreatedResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    caseNumber?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    severity?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    summary?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface SupportCasesRequest\n */\nexport interface SupportCasesRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    account_number?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    case_language?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    contact_sso_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    event_stream_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    openshift_cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    product?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    severity: SupportCasesRequestSeverityEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    summary: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    version?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SupportCasesRequestSeverityEnum {\n    _1Urgent = '1 (Urgent)',\n    _2High = '2 (High)',\n    _3Normal = '3 (Normal)',\n    _4Low = '4 (Low)'\n}\n\n/**\n * \n * @export\n * @interface TemplateParameter\n */\nexport interface TemplateParameter {\n    /**\n     * \n     * @type {string}\n     * @memberof TemplateParameter\n     */\n    content: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemplateParameter\n     */\n    name: string;\n}\n/**\n * \n * @export\n * @interface TermsReview\n */\nexport interface TermsReview {\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    account_username: string;\n}\n/**\n * \n * @export\n * @interface TermsReviewResponse\n */\nexport interface TermsReviewResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    account_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    organization_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    redirect_url?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TermsReviewResponse\n     */\n    terms_available: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TermsReviewResponse\n     */\n    terms_required: boolean;\n}\n/**\n * \n * @export\n * @interface TokenAuthorizationRequest\n */\nexport interface TokenAuthorizationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenAuthorizationRequest\n     */\n    authorization_token?: string;\n}\n/**\n * \n * @export\n * @interface TokenAuthorizationResponse\n */\nexport interface TokenAuthorizationResponse {\n    /**\n     * \n     * @type {Account}\n     * @memberof TokenAuthorizationResponse\n     */\n    account?: Account;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccessTokenPost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/access_token`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdPatch: async (id: string, accountPatchRequest: AccountPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id)\n            // verify required parameter 'accountPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsPost: async (account: Account, dryRun?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'account' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (dryRun !== undefined) {\n                localVarQueryParameter['dryRun'] = dryRun;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterAuthorizationsPost: async (clusterAuthorizationRequest: ClusterAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'clusterAuthorizationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ClusterAuthorizationsPost', 'clusterAuthorizationRequest', clusterAuthorizationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(clusterAuthorizationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterRegistrationsPost: async (clusterRegistrationRequest: ClusterRegistrationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'clusterRegistrationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ClusterRegistrationsPost', 'clusterRegistrationRequest', clusterRegistrationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(clusterRegistrationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1CurrentAccountGet: async (fetchLabels?: boolean, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/current_account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/errors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id)\n            // verify required parameter 'featureToggleQueryRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'featureToggleQueryRequest', featureToggleQueryRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(featureToggleQueryRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1LabelsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/labels`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1MetricsGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1NotifyPost: async (notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'notificationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/notify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdPatch: async (id: string, organizationPatchRequest: OrganizationPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id)\n            // verify required parameter 'organizationPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(organizationPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: async (orgId: string, search?: string, fetchRelatedResources?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fetchRelatedResources !== undefined) {\n                localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet: async (orgId: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_summary`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId)\n            // verify required parameter 'resourceQuotaRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'resourceQuotaRequest', resourceQuotaRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId)\n            // verify required parameter 'resourceQuotaRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'resourceQuotaRequest', resourceQuotaRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'organization' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/plans`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (externalResourceId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'externalResourceId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PullSecretsExternalResourceIdDelete', 'externalResourceId', externalResourceId)\n            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`\n                .replace(`{${\"externalResourceId\"}}`, encodeURIComponent(String(externalResourceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsPost: async (pullSecretRequest: PullSecretRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pullSecretRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/registries`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdPatch: async (id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id)\n            // verify required parameter 'registryCredentialPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'registryCredentialPatchRequest', registryCredentialPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(registryCredentialPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsPost: async (registryCredential: RegistryCredential, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'registryCredential' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ReservedResourcesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ResourceQuotaGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdPatch: async (id: string, roleBindingRequest: RoleBindingRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id)\n            // verify required parameter 'roleBindingRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsPost: async (roleBindingCreateRequest: RoleBindingCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roleBindingCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/roles`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/skus`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsGet: async (page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fetchAccounts !== undefined) {\n                localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (labels !== undefined) {\n                localVarQueryParameter['labels'] = labels;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdGet: async (id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchAccounts !== undefined) {\n                localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fetchCpuAndSocket !== undefined) {\n                localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (id: string, notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id)\n            // verify required parameter 'notificationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdPatch: async (id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id)\n            // verify required parameter 'subscriptionPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (id: string, page?: number, size?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsPost: async (subscriptionCreateRequest: SubscriptionCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subscriptionCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (subId: string, accountId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId)\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'accountId', accountId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)))\n                .replace(`{${\"accountId\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId)\n            // verify required parameter 'notificationContactCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'notificationContactCreateRequest', notificationContactCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationContactCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (subId: string, reservedResourceId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId)\n            // verify required parameter 'reservedResourceId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'reservedResourceId', reservedResourceId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)))\n                .replace(`{${\"reservedResourceId\"}}`, encodeURIComponent(String(reservedResourceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'caseId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId)\n            const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`\n                .replace(`{${\"caseId\"}}`, encodeURIComponent(String(caseId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesPost: async (supportCasesRequest: SupportCasesRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'supportCasesRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/support_cases`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1TokenAuthorizationPost: async (tokenAuthorizationRequest: TokenAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'tokenAuthorizationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1TokenAuthorizationPost', 'tokenAuthorizationRequest', tokenAuthorizationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(tokenAuthorizationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1AccessReviewPost: async (accessReview: AccessReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accessReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview)\n            const localVarPath = `/api/authorizations/v1/access_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1CapabilityReviewPost: async (capabilityReviewRequest: CapabilityReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'capabilityReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest)\n            const localVarPath = `/api/authorizations/v1/capability_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(capabilityReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ExportControlReviewPost: async (exportControlReviewRequest: ExportControlReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'exportControlReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1ExportControlReviewPost', 'exportControlReviewRequest', exportControlReviewRequest)\n            const localVarPath = `/api/authorizations/v1/export_control_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(exportControlReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ResourceReviewPost: async (resourceReviewRequest: ResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'resourceReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest)\n            const localVarPath = `/api/authorizations/v1/resource_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfAccessReviewPost: async (selfAccessReview: SelfAccessReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfAccessReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfAccessReviewPost', 'selfAccessReview', selfAccessReview)\n            const localVarPath = `/api/authorizations/v1/self_access_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfAccessReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfResourceReviewPost: async (selfResourceReviewRequest: SelfResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfResourceReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfResourceReviewPost', 'selfResourceReviewRequest', selfResourceReviewRequest)\n            const localVarPath = `/api/authorizations/v1/self_resource_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfResourceReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfTermsReviewPost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/authorizations/v1/self_terms_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'termsReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview)\n            const localVarPath = `/api/authorizations/v1/terms_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccessTokenPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1MetricsGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(notificationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaSummaryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(organization, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PlansIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RolesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkusGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkusIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(accessReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfTermsReviewPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(termsReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg> {\n            return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList> {\n            return localVarFp.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse> {\n            return localVarFp.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse> {\n            return localVarFp.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {\n            return localVarFp.apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {\n            return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle> {\n            return localVarFp.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {\n            return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): AxiosPromise<QuotaCostList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {\n            return localVarFp.apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {\n            return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg> {\n            return localVarFp.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList> {\n            return localVarFp.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {\n            return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {\n            return localVarFp.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {\n            return localVarFp.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {\n            return localVarFp.apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {\n            return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {\n            return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {\n            return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {\n            return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {\n            return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse> {\n            return localVarFp.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse> {\n            return localVarFp.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n            return localVarFp.apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview> {\n            return localVarFp.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview> {\n            return localVarFp.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview> {\n            return localVarFp.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview> {\n            return localVarFp.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfTermsReviewPost(options?: any): AxiosPromise<TermsReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfTermsReviewPost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n            return localVarFp.apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg>;\n\n    /**\n     * \n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList>;\n\n    /**\n     * \n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse>;\n\n    /**\n     * \n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse>;\n\n    /**\n     * \n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList>;\n\n    /**\n     * \n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList>;\n\n    /**\n     * \n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary>;\n\n    /**\n     * \n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): AxiosPromise<QuotaCostList>;\n\n    /**\n     * \n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList>;\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;\n\n    /**\n     * \n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList>;\n\n    /**\n     * \n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan>;\n\n    /**\n     * \n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg>;\n\n    /**\n     * \n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList>;\n\n    /**\n     * \n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry>;\n\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList>;\n\n    /**\n     * \n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;\n\n    /**\n     * \n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList>;\n\n    /**\n     * \n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList>;\n\n    /**\n     * \n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role>;\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList>;\n\n    /**\n     * \n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules>;\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList>;\n\n    /**\n     * \n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU>;\n\n    /**\n     * \n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList>;\n\n    /**\n     * \n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;\n\n    /**\n     * \n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList>;\n\n    /**\n     * \n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource>;\n\n    /**\n     * \n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse>;\n\n    /**\n     * \n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview>;\n\n    /**\n     * \n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview>;\n\n    /**\n     * \n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview>;\n\n    /**\n     * \n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n    /**\n     * \n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview>;\n\n    /**\n     * \n     * @summary Review your status of Terms\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfTermsReviewPost(options?: any): AxiosPromise<TermsReviewResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccessTokenPost(options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1MetricsGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PlansIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RolesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkusGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkusIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your status of Terms\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfTermsReviewPost(options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfTermsReviewPost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = params => Object.keys(params)\n  .map(key => `${key}=${encodeURIComponent(params[key])}`)\n  .join('&');\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n    getToken: () => Promise.resolve('')\n  }\n);\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface InstantQuery\n */\nexport interface InstantQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof InstantQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryList\n */\nexport interface MetricsInstantQueryList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryList\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryList\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryList\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryListAllOf\n */\nexport interface MetricsInstantQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryList\n */\nexport interface MetricsRangeQueryList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryList\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryList\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryList\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryListAllOf\n */\nexport interface MetricsRangeQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface RangeQuery\n */\nexport interface RangeQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof RangeQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof RangeQuery\n     */\n    values?: Array<Values>;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountList\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountList\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {any}\n     * @memberof ServiceAccountListItem\n     */\n    description?: any | null;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {any}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: any | null;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            assertParamExists('createKafka', 'async', async)\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            assertParamExists('createKafka', 'kafkaRequestPayload', kafkaRequestPayload)\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(kafkaRequestPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            assertParamExists('createServiceAccount', 'serviceAccountRequest', serviceAccountRequest)\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteKafkaById', 'id', id)\n            // verify required parameter 'async' is not null or undefined\n            assertParamExists('deleteKafkaById', 'async', async)\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteServiceAccount', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getKafkaById', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery: async (id: string, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMetricsByInstantQuery', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'id', id)\n            // verify required parameter 'duration' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'duration', duration)\n            // verify required parameter 'interval' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'interval', interval)\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics/query_range`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getServiceAccountById', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listCloudProviderRegions', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('resetServiceAccountCreds', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createKafka(async, kafkaRequestPayload, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceAccount(serviceAccountRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKafkaById(id, async, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteServiceAccount(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getKafkaById(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsByInstantQuery(id, filters, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsByRangeQuery(id, duration, interval, filters, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServiceAccountById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceAccountById(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudProviderRegions(id, page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudProviders(page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listKafkas(page, size, orderBy, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceAccounts(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.resetServiceAccountCreds(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return localVarFp.createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return localVarFp.deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return localVarFp.deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return localVarFp.getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList> {\n            return localVarFp.getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList> {\n            return localVarFp.getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.getServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return localVarFp.listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return localVarFp.listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return localVarFp.listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return localVarFp.listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getServiceAccountById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./QuickStartDrawerFederated.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { FederatedModule } from \"@app/Components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent, useContext } from \"react\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport \"./QuickStartDrawerFederated.scss\";\n\nexport const QuickStartDrawerFederated: FunctionComponent = ({ children }) => {\n\n  const config = useContext(ConfigContext);\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"guides\"\n      module=\"./QuickStartDrawer\"\n      fallback={children}\n      render={(QuickStartDrawerFederated) => (\n        <QuickStartDrawerFederated basePath={config?.federatedModules.guides.basePath} className=\"mas-quickstart-drawer\">\n          {children}\n        </QuickStartDrawerFederated>\n      )}/>)\n};\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { NotFound } from '@app/NotFound/NotFound';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { KasPage } from '@app/KasPage/KasPage';\nimport { KafkaPage } from '@app/KafkaPage/KafkaPage';\nimport { QuickStartDrawerFederated } from '@app/ResourcesPage/QuickStartDrawerFederated';\nimport { ResourcesPage } from '@app/ResourcesPage/ResourcesPage';\nimport { OverviewPage } from '@app/Overview/OverviewPage';\nimport { APIManagementPage } from '@app/APIManagement/APIManagementPage';\nimport { DataSciencePage } from '@app/DataScience/DataSciencePage';\nimport { ServiceAccountsPage } from '@app/ServiceAccountsPage/ServiceAccountsPage';\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: KafkaPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n  },\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return (\n      <QuickStartDrawerFederated>\n        <Component {...rest} {...routeProps} />\n      </QuickStartDrawerFederated>\n    );\n  }\n\n  return <Route render={routeWithTitle} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFound} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <Switch>\n      {flattenedRoutes.map(({ path, exact, component, title, isAsync }, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n        />\n      ))}\n      <PageNotFound title=\"404 Page Not Found\" />\n    </Switch>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { InsightsContext } from \"@app/utils\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { FederatedModule } from \"../Components/FederatedModule/FederatedModule\";\nimport { AuthContext } from \"@app/utils/auth/AuthContext\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport { Configuration, DefaultApi } from \"../../openapi/kas\";\n\nexport const KafkaPage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n  const { getToken } = useContext(AuthContext);\n  const [showCreateTopic, setShowCreateTopic] = useState(false);\n  const [adminServerUrl, setAdminServerUrl] = useState<undefined | string>();\n\n  // TODO useParams is not working?\n  const pathname = window.location.pathname.endsWith(\"/\") ? window.location.pathname : `${window.location.pathname}/`;\n  const parts = pathname.split(\"/\");\n  const id = parts[parts.length - 2];\n\n  const getAdminApiUrl = async () => {\n    const accessToken = await insights.chrome.auth.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath: config?.controlPlane.serviceApiBasePath || '',\n    } as Configuration);\n\n    const kafka = await apisService.getKafkaById(id);\n    setAdminServerUrl(`https://admin-server-${kafka.data.bootstrapServerHost}/rest`);\n  }\n\n  useEffect(() => {\n    getAdminApiUrl();\n  },[insights, config]);\n\n  if (config === undefined || adminServerUrl === undefined) {\n    return <Loading/>\n  }\n\n  const onCreateTopic = () => {\n    setShowCreateTopic(true);\n  }\n\n  const onCloseCreateTopic = () => {\n    console.log(\"on close\");\n    setShowCreateTopic(false);\n  }\n\n  const createTopicPage = <FederatedModule\n    scope=\"kafka\"\n    module=\"./Panels/CreateTopic\"\n    render={(FederatedTopics) => <FederatedTopics\n      getToken={getToken}\n      apiBasePath={adminServerUrl}\n      onCloseCreateTopic={onCloseCreateTopic}\n    />}\n  />;\n\n  const topicListPage = <FederatedModule\n    scope=\"kafka\"\n    module=\"./Panels/Topics\"\n    render={(FederatedTopics) => <FederatedTopics\n      getToken={getToken}\n      apiBasePath={adminServerUrl}\n      onCreateTopic={onCreateTopic}\n    />}\n  />;\n\n  if (showCreateTopic) {\n    return createTopicPage;\n  } else {\n    return topicListPage;\n  }\n}\n","import React, {useContext, useEffect, useState} from 'react';\nimport {useHistory, useLocation} from 'react-router';\nimport {InsightsContext} from \"@app/utils/insights\";\nimport {useDispatch} from 'react-redux';\nimport {addNotification} from '@redhat-cloud-services/frontend-components-notifications/';\nimport {AlertVariant} from \"@patternfly/react-core\";\nimport {FederatedModule} from \"../Components/FederatedModule/FederatedModule\";\nimport {ConfigContext} from \"@app/Config/Config\";\nimport {Loading} from \"@app/Components/Loading/Loading\";\nimport {Configuration, DefaultApi,TermsReviewResponse} from \"../../openapi/ams\";\nimport {getTermsAppURL} from \"@app/utils/termsApp\";\nimport queryString from 'query-string';\n\nexport const KasPage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const [create, setCreate] = useState<boolean>(false);\n  const [termsReview, setTermsReview] = useState<TermsReviewResponse | undefined>();\n\n  // Handle being passed ?create=true by setting the create state, then removing it from the search params\n  const handleCreateParam = () => {\n    const parsed = queryString.parse(location.search);\n    const c = parsed['create'] === 'true';\n    if (c) {\n      setCreate(true);\n    }\n  };\n  useEffect(() => {\n    handleCreateParam();\n  }, [create]);\n\n  // Load the terms review state asynchronously, to avoid the user waiting when they press the Create Kafka Instance button\n  const selfTermsReview = async() => {\n    const accessToken = await insights.chrome.auth.getToken();\n    const ams = new DefaultApi({\n      accessToken,\n      basePath: config?.controlPlane.amsBasePath || '',\n    } as Configuration);\n    setTermsReview(await ams.apiAuthorizationsV1SelfTermsReviewPost().then(resp => resp.data));\n  }\n  useEffect(() => {\n    selfTermsReview();\n  },[]);\n\n  const onConnectInstance = async (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n    history.push(`/streams/kafkas/${event.id}`);\n  };\n\n  const getConnectToInstancePath = (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n    return history.createHref({pathname: `/streams/kafkas/${event.id}`});\n  }\n\n  const preCreateInstance = async (open: boolean) => {\n    // if termsReview is set, we can proceed, otherwise wait for the effect to complete - the state update will cause the page to rerender\n    if (termsReview) {\n      if (termsReview.terms_available || termsReview.terms_required) {\n        if (termsReview.redirect_url === undefined) {\n          throw new Error(\"terms must be signed but there is no terms url\");\n        }\n        const redirectURL = queryString.stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n        const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n        window.location.href = url;\n        return false;\n      }\n      return open;\n    }\n    return false;\n\n  }\n\n  const createDialogOpen = () => {\n    return create;\n  }\n\n  const dispatch = useDispatch();\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n\n  };\n\n  if (config === undefined || termsReview === undefined) {\n    return <Loading/>\n  }\n\n  const getUsername = () => insights.chrome.auth.getUser().then(user => user.identity.user.username);\n\n  const osStreams = (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      render={(OpenshiftStreamsFederated) => {\n        return (\n          <OpenshiftStreamsFederated\n            getToken={insights.chrome.auth.getToken}\n            getUsername={getUsername}\n            onConnectToInstance={onConnectInstance}\n            getConnectToInstancePath={getConnectToInstancePath}\n            preCreateInstance={preCreateInstance}\n            createDialogOpen={createDialogOpen}\n            addAlert={addAlert}\n            basePath={config?.controlPlane.serviceApiBasePath}\n          />\n        );\n      }}\n    />\n  );\n\n  return osStreams;\n};\n","import React, { useContext } from 'react';\nimport { InsightsContext } from '@app/utils/insights';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { FederatedModule } from '../Components/FederatedModule/FederatedModule';\nimport { ConfigContext } from '@app/Config/Config';\nimport { Loading } from '@app/Components/Loading/Loading';\n\nexport const ServiceAccountsPage: React.FunctionComponent = () => {\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n  const dispatch = useDispatch();\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message,\n      })\n    );\n  };\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  const getUsername = () => insights.chrome.auth.getUser().then((user) => user.identity.user.username);\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      render={(ServiceAccountsFederated) => {\n        return (\n          <ServiceAccountsFederated\n            getToken={insights.chrome.auth.getToken}\n            getUsername={getUsername}\n            addAlert={addAlert}\n            basePath={config?.controlPlane.serviceApiBasePath}            \n          />\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport LoremIpsum from \"react-lorem-ipsum\";\nimport {PageSection, PageSectionVariants} from \"@patternfly/react-core\";\n\nexport const OverviewPage: React.FunctionComponent = () => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <h1>Overview</h1>\n      <LoremIpsum p={2}/>\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport LoremIpsum from \"react-lorem-ipsum\";\nimport {PageSection, PageSectionVariants} from \"@patternfly/react-core\";\n\nexport const APIManagementPage: React.FunctionComponent = () => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <h1>API Management</h1>\n      <LoremIpsum p={2}/>\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport LoremIpsum from \"react-lorem-ipsum\";\nimport {PageSection, PageSectionVariants} from \"@patternfly/react-core\";\n\nexport const DataSciencePage: React.FunctionComponent = () => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <h1>Data Science</h1>\n      <LoremIpsum p={2}/>\n    </PageSection>\n  );\n};\n","import { FederatedModule } from \"@app/Components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent } from 'react';\n\nexport const ResourcesPage: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux';\nimport './App.scss';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { notifications, NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { AppRoutes } from \"@app/Routes\";\nimport { FederatedModuleProvider } from \"./Components/FederatedModule/FederatedModule\";\n\nconst registry = getRegistry();\nregistry.register({ notifications });\n\nexport const App: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const history = useHistory();\n\n  const getAppId = () => {\n\n    const defaultAppId = \"overview\";\n\n    const parts = history.location.pathname.split(\"/\");\n    if (parts.length > 1) {\n      if (parts[1] === \"\") {\n        return defaultAppId\n      } else {\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  }\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    insights.chrome.on('APP_NAVIGATION', event => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n  });\n\n  return (\n    <Provider store={registry.getStore()}>\n      <FederatedModuleProvider>\n        <NotificationsPortal/>\n        <AppRoutes/>\n      </FederatedModuleProvider>\n    </Provider>\n  );\n}\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\n\nlet keycloak: KeycloakInstance | undefined;\n\nconst REFRESH_TOKEN_COOKIE_NAME = \"masSSORefreshToken\";\nconst MIN_VALIDITY = 50;\n\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig) => {\n  if (!keycloak) {\n    keycloak = await init(config);\n  }\n  return keycloak;\n}\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (config: KeycloakConfig): Promise<KeycloakInstance | undefined> => {\n  const k = Keycloak(config);\n\n  const initOptions = {\n    responseMode: \"query\",\n  } as KeycloakInitOptions;\n\n  const storedRefreshToken = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  if (storedRefreshToken) {\n    try {\n      refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken);\n    } catch {\n      console.log(\"unable to parse refresh token from cookie\")\n      Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n    }\n  }\n\n  if (refreshJWT && refreshJWT.exp) {\n    // if the JWT exists, and has an expiry\n    const now = getUnixTime(new Date());\n    if (now < refreshJWT.exp + MIN_VALIDITY) {\n      // Use the refresh token if it's still valid (make sure it's valid for at least MIN_VALIDITY)\n      try {\n        // Perform a keycloak init without a login\n        await k.init(initOptions);\n        // Set the saved refresh token into Keycloak\n        k.refreshToken = storedRefreshToken\n        // Then force a token refresh to check if the refresh token is actually valid\n        k.updateToken(-1);\n        if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n          // If we get back a refresh token that has changed, then save it\n          Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n        }\n        return k;\n      } catch {\n        // If any of the methods above error, then perform a login\n        console.log(\"refresh token is not valid, performing full login\");\n        Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n      }\n    }\n  }\n\n  initOptions.onLoad = \"login-required\";\n  await k.init(initOptions);\n  if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n  }\n  return k;\n\n}\n\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getValidAccessToken = async (): Promise<string> => {\n  await keycloak?.updateToken(MIN_VALIDITY);\n  if (!keycloak?.token) {\n    throw new Error(\"No token from keycloak!\");\n  }\n  if (keycloak?.refreshToken) {\n    // Save the most recent refresh token\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, keycloak?.refreshToken);\n  }\n  return keycloak?.token;\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (keycloak: Keycloak.KeycloakInstance | undefined) => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n}\n","import React, { useContext, useState } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { Loading } from \"./app/Components/Loading/Loading\";\nimport { ConfigContext, ConfigProvider } from \"@app/Config/Config\";\nimport { KeycloakInstance } from \"keycloak-js\";\nimport { AuthContext, IAuthContext } from \"@app/utils/auth/AuthContext\";\nimport { getKeycloakInstance, getValidAccessToken } from \"@app/utils/keycloakAuth\";\n\ndeclare const __webpack_public_path__: string;\n\nconst AppWithKeycloak: React.FunctionComponent = () => {\n\n  const config = useContext(ConfigContext)\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadToken = async () => {\n        const keycloak = await getKeycloakInstance ({\n          url: config.dataPlane.keycloak.authServerUrl,\n          clientId: config.dataPlane.keycloak.clientId,\n          realm: config.dataPlane.keycloak.realm\n        });\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      }\n      loadToken();\n    }\n  }, [config]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading/>;\n  }\n\n  const getToken = () => {\n    return getValidAccessToken();\n\n  }\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={{\n      getToken\n    } as IAuthContext}>\n      <Router basename={baseName}>\n        <App/>\n      </Router>\n    </AuthContext.Provider>\n  )\n}\n\n\nconst AppEntry: React.FunctionComponent = () => (\n  <Provider store={init(logger).getStore()}>\n    <ConfigProvider configUrl={`${__webpack_public_path__}config.json`}>\n      <InsightsContext.Provider value={window[\"insights\"]}>\n        <AppWithKeycloak/>\n      </InsightsContext.Provider>\n    </ConfigProvider>\n  </Provider>\n);\nexport default AppEntry;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root);\n"],"sourceRoot":""}