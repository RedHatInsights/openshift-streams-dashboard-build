{"version":3,"file":"608.ba5b187ef73f6dca239c.js","mappings":"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AApC,IAAAwO,IAAAA,EAAA,QAAoC,IAAAxO,IAAAA,EAAA,GAC1C,IAAM4Q,GAAmB,gCAAKF,EAAUG,SAAO,CAAEpT,MAAM8Q,MAAAA,OAAa,EAAbA,EAAevO,WAAYA,GAAY0Q,EAAUjT,MACxG,OAAO+Q,EAAMsC,QAAQF,MF9DzB,SAAYpF,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAAsB,KAWlC,SAAYC,GACV,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCF,CAAYA,IAAAA,EAA4B,KAuGxC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAA8B,KAW1C,SAAYC,GACV,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCF,CAAYA,IAAAA,EAAoC,KA8iBhD,SAAYC,GACV,4CADF,CAAYA,IAAAA,EAAqC,KAOjD,SAAYC,GACV,oBADF,CAAYA,IAAAA,EAA+B,KAoG3C,SAAYC,GACV,oCADF,CAAYA,IAAAA,EAA8C,KAO1D,SAAYC,GACV,YACA,YACA,sBACA,YACA,cALF,CAAYA,IAAAA,EAAwC,KAsrCpD,SAAYC,GACV,oBACA,wBACA,oBAHF,CAAYA,IAAAA,EAAwB,KA6NpC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAAoB,KAgChC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAAyB,KAw3CrC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,IAAAA,EAAqB,KAkFjC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,IAAAA,EAA0B,KAsFtC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,IAAAA,EAA4B,KA4DxC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAAwB,KAWpC,SAAYC,GACV,oBACA,8BAFF,CAAYA,IAAAA,EAA8B,KAmC1C,SAAYC,GACV,YACA,kBACA,kBAHF,CAAYA,IAAAA,EAA+B,KAS3C,SAAYC,GACV,oBACA,8BAFF,CAAYA,IAAAA,EAAqC,KA2IjD,SAAYC,GACV,4BACA,8BACA,8BAHF,CAAYA,IAAAA,EAAmB,KAkE/B,SAAYC,GACV,4BACA,8BACA,8BAHF,CAAYA,IAAAA,EAAwB,KAkVpC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAA0B,KAWtC,SAAYC,GACV,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCF,CAAYA,IAAAA,EAAgC,KAwG5C,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAA4B,KAWxC,SAAYC,GACV,oBACA,8BAFF,CAAYA,IAAAA,EAAkC,KA6B9C,SAAYC,GACV,YACA,kBACA,kBAHF,CAAYA,IAAAA,EAAmC,KAS/C,SAAYC,GACV,oBACA,8BAFF,CAAYA,IAAAA,EAAyC,KA0arD,SAAYC,GACV,wBACA,qCACA,6BAHF,CAAYA,IAAAA,EAA6B,KASzC,SAAYC,GACV,eACA,mBAFF,CAAYA,IAAAA,EAA4B,KAQxC,SAAYC,GACV,cACA,sBACA,oBACA,6BACA,cALF,CAAYA,IAAAA,EAA4B,KAWxC,SAAYC,GACV,yBACA,oBAFF,CAAYA,IAAAA,EAA2B,KAQvC,SAAYC,GACV,0BACA,qCACA,uCACA,sBAJF,CAAYA,IAAAA,EAAqB,KA+NjC,SAAYC,GACV,wBACA,qCACA,6BAHF,CAAYA,IAAAA,EAAkC,KAS9C,SAAYC,GACV,eACA,mBAFF,CAAYA,IAAAA,EAAiC,KAQ7C,SAAYC,GACV,cACA,sBACA,oBACA,6BACA,cALF,CAAYA,IAAAA,EAAiC,KAW7C,SAAYC,GACV,yBACA,oBAFF,CAAYA,IAAAA,EAAgC,KAQ5C,SAAYC,GACV,0BACA,qCACA,uCACA,sBAJF,CAAYA,IAAAA,EAA0B,KAiDtC,SAAYC,GACV,YADF,CAAYA,IAAAA,EAAmC,KAO/C,SAAYC,GACV,8BADF,CAAYA,IAAAA,EAAmC,KAwN/C,SAAYC,GACV,sBACA,4BAFF,CAAYA,IAAAA,EAA+C,KAQ3D,SAAYC,GACV,wBACA,qCACA,6BAHF,CAAYA,IAAAA,EAAyC,KASrD,SAAYC,GACV,eACA,mBAFF,CAAYA,IAAAA,EAAwC,KAQpD,SAAYC,GACV,cACA,sBACA,oBACA,6BACA,cALF,CAAYA,IAAAA,EAAwC,KAWpD,SAAYC,GACV,yBACA,oBAFF,CAAYA,IAAAA,EAAuC,KAQnD,SAAYC,GACV,0BACA,qCACA,uCACA,sBAJF,CAAYA,IAAAA,EAAiC,KAkS7C,SAAYC,GACV,wBACA,oBACA,wBACA,kBAJF,CAAYA,IAAAA,EAA+B,KAuHpC,IG1hMK2C,GH6wUCC,GAAe,SAAUzC,GACpC,IAAM0C,EApvImC,SAAU1C,GAAV,WACzC,MAAO,CAOL2C,iCAAkC,SAAOL,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,iFAelE,OAZMC,EAAiB,IAAIC,IAFN,qCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAgBbM,6BAA8B,SAC5BC,EACAC,EACAxC,EACAyC,EACAC,EACAC,EACAC,EACAtB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,iCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAkCrD,OAlCA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,QAGvBlV,IAAXmV,IACFR,EAA+B,OAAIQ,QAGjBnV,IAAhBoV,IACFT,EAAoC,YAAIS,QAGhBpV,IAAtBqV,IACFV,EAA0C,kBAAIU,GAGhD/C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYba,+BAAgC,SAC9B3S,EACAyS,EACAC,EACAtB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAiBR,OAfAtC,GAAkB,iCAAkC,KAAMpP,GACpD4S,EAAe,sCAAsC/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAEpG2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAcrD,OAdA,cAEoBzR,IAAhBoV,IACFT,EAAoC,YAAIS,QAGhBpV,IAAtBqV,IACFV,EAA0C,kBAAIU,GAGhD/C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAcbiB,qCAAsC,SACpC/S,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,uCAAwC,KAAMpP,GAC1D4S,EAAe,6CAA6C/D,QAChE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWbkB,2CAA4C,SAC1ChT,EACAsD,EACA8N,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAqBR,OAnBAtC,GAAkB,6CAA8C,KAAMpP,GAEtEoP,GAAkB,6CAA8C,MAAO9L,GACjEsP,EAAe,mDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWbmB,wCAAyC,SACvCjT,EACAsD,EACA8N,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAqBR,OAnBAtC,GAAkB,0CAA2C,KAAMpP,GAEnEoP,GAAkB,0CAA2C,MAAO9L,GAC9DsP,EAAe,mDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYboB,0CAA2C,SACzClT,EACAsD,EACA5F,EACA0T,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAuBR,OArBAtC,GAAkB,4CAA6C,KAAMpP,GAErEoP,GAAkB,4CAA6C,MAAO9L,GAEtE8L,GAAkB,4CAA6C,QAAS1R,GAClEkV,EAAe,mDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB7S,EAAOoU,EAAwBhD,GAE5E,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWbqB,sCAAuC,SACrCnT,EACAtC,EACA0T,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAsBR,OApBAtC,GAAkB,wCAAyC,KAAMpP,GAEjEoP,GAAkB,wCAAyC,QAAS1R,GAC9DkV,EAAe,6CAA6C/D,QAChE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB7S,EAAOoU,EAAwBhD,GAE5E,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWbsB,iCAAkC,SAChCpT,EACAqT,EACAjC,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAmBR,OAjBAtC,GAAkB,mCAAoC,KAAMpP,GAE5DoP,GAAkB,mCAAoC,sBAAuBiE,GACvET,EAAe,sCAAsC/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAEpG2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB8C,EAAqBvB,EAAwBhD,GAE1F,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWbwB,8BAA+B,SAC7BC,EACAC,EACApC,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,gCAAiC,UAAWmE,GAGxD5B,EAAiB,IAAIC,IAFN,iCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,cAEezR,IAAXmW,IACFxB,EAA+B,OAAIwB,GAGrCvB,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsBgD,EAASzB,EAAwBhD,GAE9E,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb2B,2CAA4C,SAC1CC,EACAtC,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAqBR,OAnBAtC,GACE,6CACA,8BACAsE,GAII/B,EAAiB,IAAIC,IAFN,+CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BmD,EACA5B,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb6B,0CAA2C,SACzCC,EACAxC,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAqBR,OAnBAtC,GACE,4CACA,6BACAwE,GAIIjC,EAAiB,IAAIC,IAFN,8CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BqD,EACA9B,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb+B,mCAAoC,SAAOpB,EAAuBrB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,iFAe3F,OAZMC,EAAiB,IAAIC,IAFN,wCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAUrD,OAVA,cAEoBzR,IAAhBoV,IACFT,EAAoC,YAAIS,GAG1C9C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYbgC,2BAA4B,SAC1BzB,EACAC,EACAxC,EACAsB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,0DA6BR,OA1BMC,EAAiB,IAAIC,IAFN,+BAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAC7Da,EAA0B,GAC1BD,EAAyB,QAElB3U,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,GAGrCH,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,WAUbiC,6BAA8B,SAAO/T,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,0DAmB1E,OAjBAtC,GAAkB,+BAAgC,KAAMpP,GAClD4S,EAAe,oCAAoC/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAElG2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAC7Da,EAA0B,GAGhCtC,GAAgBgC,EAFe,GAEyBP,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,WAWbkC,2CAA4C,SAC1ChU,EACAiU,EACA7C,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFA0BR,OAxBAtC,GAAkB,6CAA8C,KAAMpP,GAEtEoP,GACE,6CACA,4BACA6E,GAEIrB,EAAe,mDAAmD/D,QACtE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5B0D,EACAnC,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAaboC,2BAA4B,SAC1B7B,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,+BAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbqC,4BAA6B,SAAOrE,EAAiBsB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,iFAe9E,OAZMC,EAAiB,IAAIC,IAFN,gCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAUrD,OAVA,cAEezR,IAAXyS,IACFkC,EAA+B,OAAIlC,GAGrCH,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbsC,4BAA6B,SAC3BC,EACAjD,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,8BAA+B,sBAAuBiF,GAGlE1C,EAAiB,IAAIC,IAFN,+BAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB8D,EAAqBvC,EAAwBhD,GAE1F,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAgBbwC,kCAAmC,SACjCjC,EACAC,EACAxC,EACAyC,EACAE,EACAC,EACAF,EACApB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,sCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAkCrD,OAlCA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,QAGlBlV,IAAhBoV,IACFT,EAAoC,YAAIS,QAGhBpV,IAAtBqV,IACFV,EAA0C,kBAAIU,QAGjCrV,IAAXmV,IACFR,EAA+B,OAAIQ,GAGrC7C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYbyC,oCAAqC,SACnCvU,EACAyS,EACAC,EACAtB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,sCAAuC,KAAMpP,GACzD4S,EAAe,2CAA2C/D,QAC9D,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAcrD,OAdA,cAEoBzR,IAAhBoV,IACFT,EAAoC,YAAIS,QAGhBpV,IAAtBqV,IACFV,EAA0C,kBAAIU,GAGhD/C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAcb0C,0CAA2C,SACzCxU,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,4CAA6C,KAAMpP,GAC/D4S,EAAe,kDAAkD/D,QACrE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWb2C,gDAAiD,SAC/CzU,EACAsD,EACA8N,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAqBR,OAnBAtC,GAAkB,kDAAmD,KAAMpP,GAE3EoP,GAAkB,kDAAmD,MAAO9L,GACtEsP,EAAe,wDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWb4C,6CAA8C,SAC5C1U,EACAsD,EACA8N,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAqBR,OAnBAtC,GAAkB,+CAAgD,KAAMpP,GAExEoP,GAAkB,+CAAgD,MAAO9L,GACnEsP,EAAe,wDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYb6C,+CAAgD,SAC9C3U,EACAsD,EACA5F,EACA0T,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAuBR,OArBAtC,GAAkB,iDAAkD,KAAMpP,GAE1EoP,GAAkB,iDAAkD,MAAO9L,GAE3E8L,GAAkB,iDAAkD,QAAS1R,GACvEkV,EAAe,wDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB7S,EAAOoU,EAAwBhD,GAE5E,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWb8C,2CAA4C,SAC1C5U,EACAtC,EACA0T,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAsBR,OApBAtC,GAAkB,6CAA8C,KAAMpP,GAEtEoP,GAAkB,6CAA8C,QAAS1R,GACnEkV,EAAe,kDAAkD/D,QACrE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB7S,EAAOoU,EAAwBhD,GAE5E,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWb+C,sCAAuC,SACrC7U,EACA8U,EACA1D,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAsBR,OApBAtC,GAAkB,wCAAyC,KAAMpP,GAEjEoP,GAAkB,wCAAyC,2BAA4B0F,GACjFlC,EAAe,2CAA2C/D,QAC9D,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BuE,EACAhD,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUbiD,oDAAqD,SACnD/U,EACAoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,sDAAuD,KAAMpP,GACzE4S,EAAe,6DAA6D/D,QAChF,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYbkD,gDAAiD,SAC/CC,EACAnF,EACAoF,EACA9D,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,kDAAmD,QAAS6F,GACxErC,EAAe,yDAAyD/D,QAC5E,WAAI,QAAO,KACXgE,mBAAmBC,OAAOmC,KAGtBtD,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAcrD,OAdA,cAEezR,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGPzS,IAA1B6X,IACFlD,EAA8C,sBAAIkD,GAGpDvF,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWbqD,mDAAoD,SAClDF,EACAnF,EACAsB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,qDAAsD,QAAS6F,GAC3ErC,EAAe,4DAA4D/D,QAC/E,WAAI,QAAO,KACXgE,mBAAmBC,OAAOmC,KAGtBtD,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAUrD,OAVA,cAEezR,IAAXyS,IACFkC,EAA+B,OAAIlC,GAGrCH,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAcbsD,oDAAqD,SACnDH,EACA5C,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,sDAAuD,QAAS6F,GAC5ErC,EAAe,6DAA6D/D,QAChF,WAAI,QAAO,KACXgE,mBAAmBC,OAAOmC,KAGtBtD,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWbuD,qDAAsD,SACpDJ,EACAK,EACAlE,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFA0BR,OAxBAtC,GAAkB,uDAAwD,QAAS6F,GAEnF7F,GACE,uDACA,uBACAkG,GAEI1C,EAAe,6DAA6D/D,QAChF,WAAI,QAAO,KACXgE,mBAAmBC,OAAOmC,KAGtBtD,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB+E,EAAsBxD,EAAwBhD,GAE3F,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWbyD,8DAA+D,SAC7DN,EACAO,EACApE,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAqBR,OAnBAtC,GAAkB,gEAAiE,QAAS6F,GAE5F7F,GAAkB,gEAAiE,UAAWoG,GACxF5C,EAAe,uEAClB/D,QAAQ,WAAI,QAAO,KAAKgE,mBAAmBC,OAAOmC,KAClDpG,QAAQ,WAAI,UAAS,KAAKgE,mBAAmBC,OAAO0C,KAEjD7D,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWb2D,2DAA4D,SAC1DR,EACAO,EACApE,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAqBR,OAnBAtC,GAAkB,6DAA8D,QAAS6F,GAEzF7F,GAAkB,6DAA8D,UAAWoG,GACrF5C,EAAe,uEAClB/D,QAAQ,WAAI,QAAO,KAAKgE,mBAAmBC,OAAOmC,KAClDpG,QAAQ,WAAI,UAAS,KAAKgE,mBAAmBC,OAAO0C,KAEjD7D,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYb4D,6DAA8D,SAC5DT,EACAO,EACAF,EACAlE,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFA2BR,OAzBAtC,GAAkB,+DAAgE,QAAS6F,GAE3F7F,GAAkB,+DAAgE,UAAWoG,GAE7FpG,GACE,+DACA,uBACAkG,GAEI1C,EAAe,uEAClB/D,QAAQ,WAAI,QAAO,KAAKgE,mBAAmBC,OAAOmC,KAClDpG,QAAQ,WAAI,UAAS,KAAKgE,mBAAmBC,OAAO0C,KAEjD7D,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB+E,EAAsBxD,EAAwBhD,GAE3F,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb6D,mCAAoC,SAAOC,EAA4BxE,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,iFAiBhG,OAfAtC,GAAkB,qCAAsC,eAAgBwG,GAGlEjE,EAAiB,IAAIC,IAFN,sCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsBqF,EAAc9D,EAAwBhD,GAEnF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAYb+D,0BAA2B,SACzBxD,EACAC,EACAxC,EACAsB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,8BAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAkBrD,OAlBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,GAGrCH,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbgE,4BAA6B,SAAO9V,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAiBzE,OAfAtC,GAAkB,8BAA+B,KAAMpP,GACjD4S,EAAe,mCAAmC/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAEjG2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbiE,qDAAsD,SACpDC,EACA5E,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAwBR,OAtBAtC,GACE,uDACA,qBACA4G,GAEIpD,EAAe,0DAA0D/D,QAC7E,WAAI,qBAAoB,KACxBgE,mBAAmBC,OAAOkD,KAGtBrE,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbmE,iCAAkC,SAChCC,EACA9E,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,mCAAoC,oBAAqB8G,GAGrEvE,EAAiB,IAAIC,IAFN,qCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB2F,EAAmBpE,EAAwBhD,GAExF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAabqE,+BAAgC,SAC9B9D,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,mCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbsE,iCAAkC,SAAOpW,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAiB9E,OAfAtC,GAAkB,mCAAoC,KAAMpP,GACtD4S,EAAe,wCAAwC/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAEtG2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYbuE,wCAAyC,SACvChE,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,0DAiCR,OA9BMC,EAAiB,IAAIC,IAFN,6CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAC7Da,EAA0B,GAC1BD,EAAyB,QAElB3U,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,WAUbwE,6CAA8C,SAAOtW,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAoB1F,OAlBAtC,GAAkB,+CAAgD,KAAMpP,GAClE4S,EAAe,kDAAkD/D,QACrE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbyE,0CAA2C,SAAOvW,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAoBvF,OAlBAtC,GAAkB,4CAA6C,KAAMpP,GAC/D4S,EAAe,kDAAkD/D,QACrE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWb0E,4CAA6C,SAC3CxW,EACAyW,EACArF,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFA0BR,OAxBAtC,GAAkB,8CAA+C,KAAMpP,GAEvEoP,GACE,8CACA,iCACAqH,GAEI7D,EAAe,kDAAkD/D,QACrE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BkG,EACA3E,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb4E,yCAA0C,SACxCC,EACAvF,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,2CAA4C,qBAAsBuH,GAG9EhF,EAAiB,IAAIC,IAFN,6CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsBoG,EAAoB7E,EAAwBhD,GAEzF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAab8E,sCAAuC,SACrCvE,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,2CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAab+E,kCAAmC,SACjCxE,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,uCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAabgF,iCAAkC,SAChCzE,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,sCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbiF,sCAAuC,SAAO/W,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAoBnF,OAlBAtC,GAAkB,wCAAyC,KAAMpP,GAC3D4S,EAAe,2CAA2C/D,QAC9D,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbkF,mCAAoC,SAAOhX,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAoBhF,OAlBAtC,GAAkB,qCAAsC,KAAMpP,GACxD4S,EAAe,2CAA2C/D,QAC9D,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWbmF,qCAAsC,SACpCjX,EACAkX,EACA9F,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAsBR,OApBAtC,GAAkB,uCAAwC,KAAMpP,GAEhEoP,GAAkB,uCAAwC,qBAAsB8H,GAC1EtE,EAAe,2CAA2C/D,QAC9D,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB2G,EAAoBpF,EAAwBhD,GAEzF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUbqF,kCAAmC,SACjCC,EACAhG,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,oCAAqC,2BAA4BgI,GAG7EzF,EAAiB,IAAIC,IAFN,sCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5B6G,EACAtF,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAYbuF,0BAA2B,SACzBhF,EACAC,EACAxC,EACAsB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,8BAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAkBrD,OAlBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,GAGrCH,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbwF,4BAA6B,SAAOtX,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAiBzE,OAfAtC,GAAkB,8BAA+B,KAAMpP,GACjD4S,EAAe,mCAAmC/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAEjG2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbyF,6BAA8B,SAAOzH,EAAiBsB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,iFAe/E,OAZMC,EAAiB,IAAIC,IAFN,kCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAUrD,OAVA,cAEezR,IAAXyS,IACFkC,EAA+B,OAAIlC,GAGrCH,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUb0F,+BAAgC,SAAOxX,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAiB5E,OAfAtC,GAAkB,iCAAkC,KAAMpP,GACpD4S,EAAe,uCAAuC/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAErG2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUb2F,yBAA0B,SAAO3H,EAAiBsB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,iFAe3E,OAZMC,EAAiB,IAAIC,IAFN,6BAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAUrD,OAVA,cAEezR,IAAXyS,IACFkC,EAA+B,OAAIlC,GAGrCH,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUb4F,2BAA4B,SAAO1X,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAiBxE,OAfAtC,GAAkB,6BAA8B,KAAMpP,GAChD4S,EAAe,kCAAkC/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAEhG2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAkBb6F,kCAAmC,SACjCtF,EACAC,EACAxC,EACA8H,EACAnF,EACAC,EACAF,EACAD,EACAsF,EACAzG,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAeR,OAZMC,EAAiB,IAAIC,IAFN,sCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OA0CrD,OA1CA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGfzS,IAAlBua,IACF5F,EAAsC,cAAI4F,QAGxBva,IAAhBoV,IACFT,EAAoC,YAAIS,QAGhBpV,IAAtBqV,IACFV,EAA0C,kBAAIU,QAGjCrV,IAAXmV,IACFR,EAA+B,OAAIQ,QAGrBnV,IAAZkV,IACFP,EAAgC,QAAIO,QAGvBlV,IAAXwa,IACF7F,EAA+B,OAAI6F,GAGrClI,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbgG,uCAAwC,SAAO9X,EAAYoR,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAoBpF,OAlBAtC,GAAkB,yCAA0C,KAAMpP,GAC5D4S,EAAe,2CAA2C/D,QAC9D,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAcbiG,oCAAqC,SACnC/X,EACA4X,EACAnF,EACAC,EACAsF,EACA5G,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,sCAAuC,KAAMpP,GACzD4S,EAAe,2CAA2C/D,QAC9D,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEsBzR,IAAlBua,IACF5F,EAAsC,cAAI4F,QAGxBva,IAAhBoV,IACFT,EAAoC,YAAIS,QAGhBpV,IAAtBqV,IACFV,EAA0C,kBAAIU,QAGtBrV,IAAtB2a,IACFhG,EAA0C,kBAAIgG,GAGhDrI,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAcbmG,0CAA2C,SACzCjY,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,4CAA6C,KAAMpP,GAC/D4S,EAAe,kDAAkD/D,QACrE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWboG,gDAAiD,SAC/ClY,EACAsD,EACA8N,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAqBR,OAnBAtC,GAAkB,kDAAmD,KAAMpP,GAE3EoP,GAAkB,kDAAmD,MAAO9L,GACtEsP,EAAe,wDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWbqG,6CAA8C,SAC5CnY,EACAsD,EACA8N,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAqBR,OAnBAtC,GAAkB,+CAAgD,KAAMpP,GAExEoP,GAAkB,+CAAgD,MAAO9L,GACnEsP,EAAe,wDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYbsG,+CAAgD,SAC9CpY,EACAsD,EACA5F,EACA0T,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAuBR,OArBAtC,GAAkB,iDAAkD,KAAMpP,GAE1EoP,GAAkB,iDAAkD,MAAO9L,GAE3E8L,GAAkB,iDAAkD,QAAS1R,GACvEkV,EAAe,wDAClB/D,QAAQ,WAAI,KAAI,KAAKgE,mBAAmBC,OAAO9S,KAC/C6O,QAAQ,WAAI,MAAK,KAAKgE,mBAAmBC,OAAOxP,KAE7CqO,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB7S,EAAOoU,EAAwBhD,GAE5E,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWbuG,2CAA4C,SAC1CrY,EACAtC,EACA0T,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAsBR,OApBAtC,GAAkB,6CAA8C,KAAMpP,GAEtEoP,GAAkB,6CAA8C,QAAS1R,GACnEkV,EAAe,kDAAkD/D,QACrE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB7S,EAAOoU,EAAwBhD,GAE5E,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWbwG,2CAA4C,SAC1CtY,EACAqU,EACAjD,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAsBR,OApBAtC,GAAkB,6CAA8C,KAAMpP,GAEtEoP,GAAkB,6CAA8C,sBAAuBiF,GACjFzB,EAAe,kDAAkD/D,QACrE,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB8D,EAAqBvC,EAAwBhD,GAE1F,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWbyG,sCAAuC,SACrCvY,EACAwY,EACApH,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAsBR,OApBAtC,GAAkB,wCAAyC,KAAMpP,GAEjEoP,GAAkB,wCAAyC,2BAA4BoJ,GACjF5F,EAAe,2CAA2C/D,QAC9D,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBT,GAE/DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BiI,EACA1G,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAcb2G,qDAAsD,SACpDzY,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,uDAAwD,KAAMpP,GAC1E4S,EAAe,8DAA8D/D,QACjF,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAsBrD,OAtBA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGrBzS,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAYb4G,gDAAiD,SAC/C1Y,EACAqS,EACAC,EACAlB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,kDAAmD,KAAMpP,GACrE4S,EAAe,yDAAyD/D,QAC5E,WAAI,KAAI,KACRgE,mBAAmBC,OAAO9S,KAGtB2R,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAcrD,OAdA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,GAGnC3C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUb6G,mCAAoC,SAClCC,EACAxH,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,qCAAsC,4BAA6BwJ,GAG/EjH,EAAiB,IAAIC,IAFN,sCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BqI,EACA9G,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWb+G,uEAAwE,SACtEC,EACAC,EACA3H,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAyBR,OAvBAtC,GAAkB,yEAA0E,QAAS0J,GAErG1J,GACE,yEACA,YACA2J,GAEInG,EAAe,gFAClB/D,QAAQ,WAAI,QAAO,KAAKgE,mBAAmBC,OAAOgG,KAClDjK,QAAQ,WAAI,YAAW,KAAKgE,mBAAmBC,OAAOiG,KAEnDpH,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAebkH,2DAA4D,SAC1DF,EACAzG,EACAC,EACAxC,EACA0C,EACAD,EACAnB,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAoBR,OAlBAtC,GAAkB,6DAA8D,QAAS0J,GACnFlG,EAAe,oEAAoE/D,QACvF,WAAI,QAAO,KACXgE,mBAAmBC,OAAOgG,KAGtBnH,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OA0BrD,OA1BA,cAEazR,IAATgV,IACFL,EAA6B,KAAIK,QAGtBhV,IAATiV,IACFN,EAA6B,KAAIM,QAGpBjV,IAAXyS,IACFkC,EAA+B,OAAIlC,QAGtBzS,IAAXmV,IACFR,EAA+B,OAAIQ,QAGrBnV,IAAZkV,IACFP,EAAgC,QAAIO,GAGtC5C,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAWbmH,4DAA6D,SAC3DH,EACAI,EACA9H,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFA0BR,OAxBAtC,GAAkB,8DAA+D,QAAS0J,GAE1F1J,GACE,8DACA,mCACA8J,GAEItG,EAAe,oEAAoE/D,QACvF,WAAI,QAAO,KACXgE,mBAAmBC,OAAOgG,KAGtBnH,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5B2I,EACApH,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAWbqH,0EAA2E,SACzEL,EACAM,EACAhI,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,mFAyBR,OAvBAtC,GAAkB,4EAA6E,QAAS0J,GAExG1J,GACE,4EACA,qBACAgK,GAEIxG,EAAe,sFAClB/D,QAAQ,WAAI,QAAO,KAAKgE,mBAAmBC,OAAOgG,KAClDjK,QAAQ,WAAI,qBAAoB,KAAKgE,mBAAmBC,OAAOsG,KAE5DzH,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBT,GAE7DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbuH,0CAA2C,SAAOC,EAAgBlI,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,mFAoB3F,OAlBAtC,GAAkB,4CAA6C,SAAUkK,GACnE1G,EAAe,+CAA+C/D,QAClE,WAAI,SAAQ,KACZgE,mBAAmBC,OAAOwG,KAGtB3H,EAAiB,IAAIC,IAAIgB,EAAczD,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBT,GAEhEY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAMrD,OANA,SAEAa,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SAE9F,CAAP,EAAO,CACL3S,IAAK8S,GAAaa,GAClBP,QAASU,YAUbyH,kCAAmC,SACjCC,EACApI,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,oCAAqC,sBAAuBoK,GAGxE7H,EAAiB,IAAIC,IAFN,sCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsBiJ,EAAqB1H,EAAwBhD,GAE1F,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb2H,wCAAyC,SACvCC,EACAtI,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAqBR,OAnBAtC,GACE,0CACA,4BACAsK,GAII/H,EAAiB,IAAIC,IAFN,4CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BmJ,EACA5H,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb6H,oCAAqC,SACnCC,EACAxI,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,sCAAuC,eAAgBwK,GAGnEjI,EAAiB,IAAIC,IAFN,uCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsBqJ,EAAc9H,EAAwBhD,GAEnF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb+H,wCAAyC,SACvCC,EACA1I,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,0CAA2C,0BAA2B0K,GAGlFnI,EAAiB,IAAIC,IAFN,2CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BuJ,EACAhI,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUbiI,2CAA4C,SAC1CC,EACA5I,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAqBR,OAnBAtC,GACE,6CACA,6BACA4K,GAIIrI,EAAiB,IAAIC,IAFN,+CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5ByJ,EACAlI,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUbmI,qCAAsC,SACpCC,EACA9I,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,uCAAwC,gBAAiB8K,GAGrEvI,EAAiB,IAAIC,IAFN,wCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB2J,EAAepI,EAAwBhD,GAEpF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUbqI,sCAAuC,SACrCC,EACAhJ,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,wCAAyC,wBAAyBgL,GAG9EzI,EAAiB,IAAIC,IAFN,yCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB6J,EAAuBtI,EAAwBhD,GAE5F,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUbuI,wCAAyC,SACvCC,EACAlJ,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,0CAA2C,mBAAoBkL,GAG3E3I,EAAiB,IAAIC,IAFN,4CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsB+J,EAAkBxI,EAAwBhD,GAEvF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUbyI,yCAA0C,SACxCC,EACApJ,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,2CAA4C,oBAAqBoL,GAG7E7I,EAAiB,IAAIC,IAFN,6CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsBiK,EAAmB1I,EAAwBhD,GAExF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb2I,0CAA2C,SACzCC,EACAtJ,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAqBR,OAnBAtC,GACE,4CACA,4BACAsL,GAII/I,EAAiB,IAAIC,IAFN,8CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OAarD,OAbA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAC5BmK,EACA5I,EACAhD,GAGK,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb6I,uCAAwC,SACtCC,EACAxJ,G,YAAA,IAAAA,IAAAA,EAAA,K,wBACCM,SAAO,W,iFAiBR,OAfAtC,GAAkB,yCAA0C,kBAAmBwL,GAGzEjJ,EAAiB,IAAIC,IAFN,2CAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsBqK,EAAiB9I,EAAwBhD,GAEtF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,YAUb+I,mCAAoC,SAAOC,EAA0B1J,G,YAAA,IAAAA,IAAAA,EAAA,K,wBAAoBM,SAAO,W,iFAiB9F,OAfAtC,GAAkB,qCAAsC,cAAe0L,GAGjEnJ,EAAiB,IAAIC,IAFN,sCAEwBzC,IAEzCL,IACF+C,EAAc/C,EAAc+C,aAGxBC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBT,GAE9DY,EAAyB,GAI/B,GAAMvC,GALAwC,EAA0B,GAKqBnD,I,OASrD,OATA,SAEAmD,EAAwB,gBAAkB,mBAE1CtC,GAAgBgC,EAAgBK,EAAwBZ,EAAQc,OAC5DC,EAAyBN,GAAeA,EAAYlB,QAAUkB,EAAYlB,QAAU,GACxFmB,EAAuBnB,SAAU,+CAAKsB,GAA4BE,GAA2Bf,EAAQT,SACrGmB,EAAuBnR,KAAO4P,GAAsBuK,EAAahJ,EAAwBhD,GAElF,CAAP,EAAO,CACL9Q,IAAK8S,GAAaa,GAClBP,QAASU,aAWmBiJ,CAA4BjM,GAC9D,MAAO,CAOC2C,iCAAN,SACEL,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BC,iCAAiCL,I,OAC3F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAepEsD,6BAAN,SACEC,EACAC,EACAxC,EACAyC,EACAC,EACAC,EACAC,EACAtB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BY,6BACxDC,EACAC,EACAxC,EACAyC,EACAC,EACAC,EACAC,EACAtB,I,OAEF,OAVM4J,EAAoB,SAUnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpE6D,+BAAN,SACE3S,EACAyS,EACAC,EACAtB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BmB,+BACxD3S,EACAyS,EACAC,EACAtB,I,OAEF,OANM4J,EAAoB,SAMnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAapEiE,qCAAN,SACE/S,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BuB,qCACxD/S,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OARM4J,EAAoB,SAQnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEkE,2CAAN,SACEhT,EACAsD,EACA8N,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BwB,2CACxDhT,EACAsD,EACA8N,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEmE,wCAAN,SACEjT,EACAsD,EACA8N,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0ByB,wCACxDjT,EACAsD,EACA8N,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpEoE,0CAAN,SACElT,EACAsD,EACA5F,EACA0T,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B0B,0CACxDlT,EACAsD,EACA5F,EACA0T,I,OAEF,OANM4J,EAAoB,SAMnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEqE,sCAAN,SACEnT,EACAtC,EACA0T,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B2B,sCACxDnT,EACAtC,EACA0T,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEsE,iCAAN,SACEpT,EACAqT,EACAjC,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B4B,iCACxDpT,EACAqT,EACAjC,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEwE,8BAAN,SACEC,EACAC,EACApC,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B8B,8BAA8BC,EAASC,EAAQpC,I,OACzG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE2E,2CAAN,SACEC,EACAtC,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BiC,2CACxDC,EACAtC,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE6E,0CAAN,SACEC,EACAxC,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BmC,0CACxDC,EACAxC,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE+E,mCAAN,SACEpB,EACArB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BqC,mCACxDpB,EACArB,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpEgF,2BAAN,SACEzB,EACAC,EACAxC,EACAsB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BsC,2BAA2BzB,EAAMC,EAAMxC,EAAQsB,I,OACzG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEiF,6BAAN,SACE/T,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BuC,6BAA6B/T,EAAIoR,I,OAC3F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEkF,2CAAN,SACEhU,EACAiU,EACA7C,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BwC,2CACxDhU,EACAiU,EACA7C,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAYpEoF,2BAAN,SACE7B,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B0C,2BACxD7B,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OAPM4J,EAAoB,SAOnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEqF,4BAAN,SACErE,EACAsB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B2C,4BAA4BrE,EAAQsB,I,OAC9F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEsF,4BAAN,SACEC,EACAjD,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B4C,4BACxDC,EACAjD,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAepEwF,kCAAN,SACEjC,EACAC,EACAxC,EACAyC,EACAE,EACAC,EACAF,EACApB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B8C,kCACxDjC,EACAC,EACAxC,EACAyC,EACAE,EACAC,EACAF,EACApB,I,OAEF,OAVM4J,EAAoB,SAUnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpEyF,oCAAN,SACEvU,EACAyS,EACAC,EACAtB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B+C,oCACxDvU,EACAyS,EACAC,EACAtB,I,OAEF,OANM4J,EAAoB,SAMnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAapE0F,0CAAN,SACExU,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BgD,0CACxDxU,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OARM4J,EAAoB,SAQnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpE2F,gDAAN,SACEzU,EACAsD,EACA8N,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BiD,gDACxDzU,EACAsD,EACA8N,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpE4F,6CAAN,SACE1U,EACAsD,EACA8N,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BkD,6CACxD1U,EACAsD,EACA8N,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpE6F,+CAAN,SACE3U,EACAsD,EACA5F,EACA0T,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BmD,+CACxD3U,EACAsD,EACA5F,EACA0T,I,OAEF,OANM4J,EAAoB,SAMnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpE8F,2CAAN,SACE5U,EACAtC,EACA0T,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BoD,2CACxD5U,EACAtC,EACA0T,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpE+F,sCAAN,SACE7U,EACA8U,EACA1D,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BqD,sCACxD7U,EACA8U,EACA1D,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEiG,oDAAN,SACE/U,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BuD,oDACxD/U,EACAoR,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpEkG,gDAAN,SACEC,EACAnF,EACAoF,EACA9D,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BwD,gDACxDC,EACAnF,EACAoF,EACA9D,I,OAEF,OANM4J,EAAoB,SAMnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEqG,mDAAN,SACEF,EACAnF,EACAsB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B2D,mDACxDF,EACAnF,EACAsB,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAapEsG,oDAAN,SACEH,EACA5C,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B4D,oDACxDH,EACA5C,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OARM4J,EAAoB,SAQnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEuG,qDAAN,SACEJ,EACAK,EACAlE,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B6D,qDACxDJ,EACAK,EACAlE,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEyG,8DAAN,SACEN,EACAO,EACApE,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B+D,8DACxDN,EACAO,EACApE,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpE2G,2DAAN,SACER,EACAO,EACApE,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BiE,2DACxDR,EACAO,EACApE,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpE4G,6DAAN,SACET,EACAO,EACAF,EACAlE,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BkE,6DACxDT,EACAO,EACAF,EACAlE,I,OAEF,OANM4J,EAAoB,SAMnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE6G,mCAAN,SACEC,EACAxE,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BmE,mCACxDC,EACAxE,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpE+G,0BAAN,SACExD,EACAC,EACAxC,EACAsB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BqE,0BAA0BxD,EAAMC,EAAMxC,EAAQsB,I,OACxG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEgH,4BAAN,SACE9V,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BsE,4BAA4B9V,EAAIoR,I,OAC1F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEiH,qDAAN,SACEC,EACA5E,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BuE,qDACxDC,EACA5E,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEmH,iCAAN,SACEC,EACA9E,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0ByE,iCACxDC,EACA9E,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAYpEqH,+BAAN,SACE9D,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B2E,+BACxD9D,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OAPM4J,EAAoB,SAOnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEsH,iCAAN,SACEpW,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B4E,iCAAiCpW,EAAIoR,I,OAC/F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpEuH,wCAAN,SACEhE,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B6E,wCACxDhE,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OAPM4J,EAAoB,SAOnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEwH,6CAAN,SACEtW,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B8E,6CACxDtW,EACAoR,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEyH,0CAAN,SACEvW,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B+E,0CAA0CvW,EAAIoR,I,OACxG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpE0H,4CAAN,SACExW,EACAyW,EACArF,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BgF,4CACxDxW,EACAyW,EACArF,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE4H,yCAAN,SACEC,EACAvF,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BkF,yCACxDC,EACAvF,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAYpE8H,sCAAN,SACEvE,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BoF,sCACxDvE,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OAPM4J,EAAoB,SAOnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAYpE+H,kCAAN,SACExE,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BqF,kCACxDxE,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OAPM4J,EAAoB,SAOnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAYpEgI,iCAAN,SACEzE,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BsF,iCACxDzE,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OAPM4J,EAAoB,SAOnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEiI,sCAAN,SACE/W,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BuF,sCAAsC/W,EAAIoR,I,OACpG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEkI,mCAAN,SACEhX,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BwF,mCAAmChX,EAAIoR,I,OACjG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEmI,qCAAN,SACEjX,EACAkX,EACA9F,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0ByF,qCACxDjX,EACAkX,EACA9F,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEqI,kCAAN,SACEC,EACAhG,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B2F,kCACxDC,EACAhG,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpEuI,0BAAN,SACEhF,EACAC,EACAxC,EACAsB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B6F,0BAA0BhF,EAAMC,EAAMxC,EAAQsB,I,OACxG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEwI,4BAAN,SACEtX,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B8F,4BAA4BtX,EAAIoR,I,OAC1F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEyI,6BAAN,SACEzH,EACAsB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B+F,6BAA6BzH,EAAQsB,I,OAC/F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE0I,+BAAN,SACExX,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BgG,+BAA+BxX,EAAIoR,I,OAC7F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE2I,yBAAN,SACE3H,EACAsB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BiG,yBAAyB3H,EAAQsB,I,OAC3F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE4I,2BAAN,SACE1X,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BkG,2BAA2B1X,EAAIoR,I,OACzF,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAiBpE6I,kCAAN,SACEtF,EACAC,EACAxC,EACA8H,EACAnF,EACAC,EACAF,EACAD,EACAsF,EACAzG,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BmG,kCACxDtF,EACAC,EACAxC,EACA8H,EACAnF,EACAC,EACAF,EACAD,EACAsF,EACAzG,I,OAEF,OAZM4J,EAAoB,SAYnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEgJ,uCAAN,SACE9X,EACAoR,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BsG,uCAAuC9X,EAAIoR,I,OACrG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAapEiJ,oCAAN,SACE/X,EACA4X,EACAnF,EACAC,EACAsF,EACA5G,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BuG,oCACxD/X,EACA4X,EACAnF,EACAC,EACAsF,EACA5G,I,OAEF,OARM4J,EAAoB,SAQnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAapEmJ,0CAAN,SACEjY,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0ByG,0CACxDjY,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OARM4J,EAAoB,SAQnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEoJ,gDAAN,SACElY,EACAsD,EACA8N,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B0G,gDACxDlY,EACAsD,EACA8N,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEqJ,6CAAN,SACEnY,EACAsD,EACA8N,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B2G,6CACxDnY,EACAsD,EACA8N,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpEsJ,+CAAN,SACEpY,EACAsD,EACA5F,EACA0T,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B4G,+CACxDpY,EACAsD,EACA5F,EACA0T,I,OAEF,OANM4J,EAAoB,SAMnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEuJ,2CAAN,SACErY,EACAtC,EACA0T,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B6G,2CACxDrY,EACAtC,EACA0T,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEwJ,2CAAN,SACEtY,EACAqU,EACAjD,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B8G,2CACxDtY,EACAqU,EACAjD,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEyJ,sCAAN,SACEvY,EACAwY,EACApH,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B+G,sCACxDvY,EACAwY,EACApH,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAapE2J,qDAAN,SACEzY,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BiH,qDACxDzY,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,I,OAEF,OARM4J,EAAoB,SAQnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAWpE4J,gDAAN,SACE1Y,EACAqS,EACAC,EACAlB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BkH,gDACxD1Y,EACAqS,EACAC,EACAlB,I,OAEF,OANM4J,EAAoB,SAMnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE6J,mCAAN,SACEC,EACAxH,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BmH,mCACxDC,EACAxH,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpE+J,uEAAN,SACEC,EACAC,EACA3H,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BqH,uEACxDC,EACAC,EACA3H,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAcpEkK,2DAAN,SACEF,EACAzG,EACAC,EACAxC,EACA0C,EACAD,EACAnB,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BwH,2DACxDF,EACAzG,EACAC,EACAxC,EACA0C,EACAD,EACAnB,I,OAEF,OATM4J,EAAoB,SASnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEmK,4DAAN,SACEH,EACAI,EACA9H,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0ByH,4DACxDH,EACAI,EACA9H,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YAUpEqK,0EAAN,SACEL,EACAM,EACAhI,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B2H,0EACxDL,EACAM,EACAhI,I,OAEF,OALM4J,EAAoB,SAKnB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEuK,0CAAN,SACEC,EACAlI,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B6H,0CACxDC,EACAlI,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEyK,kCAAN,SACEC,EACApI,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B+H,kCACxDC,EACApI,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE2K,wCAAN,SACEC,EACAtI,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BiI,wCACxDC,EACAtI,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE6K,oCAAN,SACEC,EACAxI,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BmI,oCACxDC,EACAxI,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE+K,wCAAN,SACEC,EACA1I,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BqI,wCACxDC,EACA1I,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEiL,2CAAN,SACEC,EACA5I,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BuI,2CACxDC,EACA5I,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEmL,qCAAN,SACEC,EACA9I,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0ByI,qCACxDC,EACA9I,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEqL,sCAAN,SACEC,EACAhJ,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B2I,sCACxDC,EACAhJ,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEuL,wCAAN,SACEC,EACAlJ,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B6I,wCACxDC,EACAlJ,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpEyL,yCAAN,SACEC,EACApJ,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0B+I,yCACxDC,EACApJ,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE2L,0CAAN,SACEC,EACAtJ,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BiJ,0CACxDC,EACAtJ,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE6L,uCAAN,SACEC,EACAxJ,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BmJ,uCACxDC,EACAxJ,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,YASpE+L,mCAAN,SACEC,EACA1J,G,kCACCM,SAAO,W,uEACkB,SAAMF,EAA0BqJ,mCACxDC,EACA1J,I,OAEF,OAJM4J,EAAoB,SAInB,CAAP,EAAOhK,GAAsBgK,EAAmB,IAAapM,EAAWE,cA+qF9E,4B,+CAyhDA,OAzhDgC,oBAQvB,YAAA2C,iCAAP,SAAwCL,GAAxC,WACE,OAAOG,GAAavC,KAAKF,eACtB2C,iCAAiCL,GACjCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAiBzC,YAAA6R,6BAAP,SACEC,EACAC,EACAxC,EACAyC,EACAC,EACAC,EACAC,EACAtB,GARF,WAUE,OAAOG,GAAavC,KAAKF,eACtBsD,6BAA6BC,EAAMC,EAAMxC,EAAQyC,EAASC,EAAQC,EAAaC,EAAmBtB,GAClGtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAAoS,+BAAP,SAAsC3S,EAAYyS,EAAuBC,EAA6BtB,GAAtG,WACE,OAAOG,GAAavC,KAAKF,eACtB6D,+BAA+B3S,EAAIyS,EAAaC,EAAmBtB,GACnEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAezC,YAAAwS,qCAAP,SACE/S,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,GANF,WAQE,OAAOG,GAAavC,KAAKF,eACtBiE,qCAAqC/S,EAAIqS,EAAMC,EAAMxC,EAAQyC,EAASnB,GACtEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAyS,2CAAP,SAAkDhT,EAAYsD,EAAa8N,GAA3E,WACE,OAAOG,GAAavC,KAAKF,eACtBkE,2CAA2ChT,EAAIsD,EAAK8N,GACpDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA0S,wCAAP,SAA+CjT,EAAYsD,EAAa8N,GAAxE,WACE,OAAOG,GAAavC,KAAKF,eACtBmE,wCAAwCjT,EAAIsD,EAAK8N,GACjDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAA2S,0CAAP,SAAiDlT,EAAYsD,EAAa5F,EAAc0T,GAAxF,WACE,OAAOG,GAAavC,KAAKF,eACtBoE,0CAA0ClT,EAAIsD,EAAK5F,EAAO0T,GAC1DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA4S,sCAAP,SAA6CnT,EAAYtC,EAAc0T,GAAvE,WACE,OAAOG,GAAavC,KAAKF,eACtBqE,sCAAsCnT,EAAItC,EAAO0T,GACjDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA6S,iCAAP,SAAwCpT,EAAYqT,EAA0CjC,GAA9F,WACE,OAAOG,GAAavC,KAAKF,eACtBsE,iCAAiCpT,EAAIqT,EAAqBjC,GAC1DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA+S,8BAAP,SAAqCC,EAAkBC,EAAkBpC,GAAzE,WACE,OAAOG,GAAavC,KAAKF,eACtBwE,8BAA8BC,EAASC,EAAQpC,GAC/CtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAkT,2CAAP,SACEC,EACAtC,GAFF,WAIE,OAAOG,GAAavC,KAAKF,eACtB2E,2CAA2CC,EAA6BtC,GACxEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAoT,0CAAP,SACEC,EACAxC,GAFF,WAIE,OAAOG,GAAavC,KAAKF,eACtB6E,0CAA0CC,EAA4BxC,GACtEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAsT,mCAAP,SAA0CpB,EAAuBrB,GAAjE,WACE,OAAOG,GAAavC,KAAKF,eACtB+E,mCAAmCpB,EAAarB,GAChDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAAuT,2BAAP,SAAkCzB,EAAeC,EAAexC,EAAiBsB,GAAjF,WACE,OAAOG,GAAavC,KAAKF,eACtBgF,2BAA2BzB,EAAMC,EAAMxC,EAAQsB,GAC/CtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAwT,6BAAP,SAAoC/T,EAAYoR,GAAhD,WACE,OAAOG,GAAavC,KAAKF,eACtBiF,6BAA6B/T,EAAIoR,GACjCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAyT,2CAAP,SACEhU,EACAiU,EACA7C,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtBkF,2CAA2ChU,EAAIiU,EAA2B7C,GAC1EtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAczC,YAAA2T,2BAAP,SAAkC7B,EAAeC,EAAexC,EAAiByC,EAAkBnB,GAAnG,WACE,OAAOG,GAAavC,KAAKF,eACtBoF,2BAA2B7B,EAAMC,EAAMxC,EAAQyC,EAASnB,GACxDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA4T,4BAAP,SAAmCrE,EAAiBsB,GAApD,WACE,OAAOG,GAAavC,KAAKF,eACtBqF,4BAA4BrE,EAAQsB,GACpCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA6T,4BAAP,SAAmCC,EAA0CjD,GAA7E,WACE,OAAOG,GAAavC,KAAKF,eACtBsF,4BAA4BC,EAAqBjD,GACjDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAiBzC,YAAA+T,kCAAP,SACEjC,EACAC,EACAxC,EACAyC,EACAE,EACAC,EACAF,EACApB,GARF,WAUE,OAAOG,GAAavC,KAAKF,eACtBwF,kCAAkCjC,EAAMC,EAAMxC,EAAQyC,EAASE,EAAaC,EAAmBF,EAAQpB,GACvGtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAAgU,oCAAP,SACEvU,EACAyS,EACAC,EACAtB,GAJF,WAME,OAAOG,GAAavC,KAAKF,eACtByF,oCAAoCvU,EAAIyS,EAAaC,EAAmBtB,GACxEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAezC,YAAAiU,0CAAP,SACExU,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,GANF,WAQE,OAAOG,GAAavC,KAAKF,eACtB0F,0CAA0CxU,EAAIqS,EAAMC,EAAMxC,EAAQyC,EAASnB,GAC3EtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAkU,gDAAP,SAAuDzU,EAAYsD,EAAa8N,GAAhF,WACE,OAAOG,GAAavC,KAAKF,eACtB2F,gDAAgDzU,EAAIsD,EAAK8N,GACzDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAmU,6CAAP,SAAoD1U,EAAYsD,EAAa8N,GAA7E,WACE,OAAOG,GAAavC,KAAKF,eACtB4F,6CAA6C1U,EAAIsD,EAAK8N,GACtDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAAoU,+CAAP,SAAsD3U,EAAYsD,EAAa5F,EAAc0T,GAA7F,WACE,OAAOG,GAAavC,KAAKF,eACtB6F,+CAA+C3U,EAAIsD,EAAK5F,EAAO0T,GAC/DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAqU,2CAAP,SAAkD5U,EAAYtC,EAAc0T,GAA5E,WACE,OAAOG,GAAavC,KAAKF,eACtB8F,2CAA2C5U,EAAItC,EAAO0T,GACtDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAsU,sCAAP,SACE7U,EACA8U,EACA1D,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtB+F,sCAAsC7U,EAAI8U,EAA0B1D,GACpEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAwU,oDAAP,SAA2D/U,EAAYoR,GAAvE,WACE,OAAOG,GAAavC,KAAKF,eACtBiG,oDAAoD/U,EAAIoR,GACxDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAAyU,gDAAP,SACEC,EACAnF,EACAoF,EACA9D,GAJF,WAME,OAAOG,GAAavC,KAAKF,eACtBkG,gDAAgDC,EAAOnF,EAAQoF,EAAuB9D,GACtFtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA4U,mDAAP,SAA0DF,EAAenF,EAAiBsB,GAA1F,WACE,OAAOG,GAAavC,KAAKF,eACtBqG,mDAAmDF,EAAOnF,EAAQsB,GAClEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAezC,YAAA6U,oDAAP,SACEH,EACA5C,EACAC,EACAxC,EACAyC,EACAnB,GANF,WAQE,OAAOG,GAAavC,KAAKF,eACtBsG,oDAAoDH,EAAO5C,EAAMC,EAAMxC,EAAQyC,EAASnB,GACxFtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA8U,qDAAP,SACEJ,EACAK,EACAlE,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtBuG,qDAAqDJ,EAAOK,EAAsBlE,GAClFtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAgV,8DAAP,SAAqEN,EAAeO,EAAiBpE,GAArG,WACE,OAAOG,GAAavC,KAAKF,eACtByG,8DAA8DN,EAAOO,EAASpE,GAC9EtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAkV,2DAAP,SAAkER,EAAeO,EAAiBpE,GAAlG,WACE,OAAOG,GAAavC,KAAKF,eACtB2G,2DAA2DR,EAAOO,EAASpE,GAC3EtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAAmV,6DAAP,SACET,EACAO,EACAF,EACAlE,GAJF,WAME,OAAOG,GAAavC,KAAKF,eACtB4G,6DAA6DT,EAAOO,EAASF,EAAsBlE,GACnGtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAoV,mCAAP,SAA0CC,EAA4BxE,GAAtE,WACE,OAAOG,GAAavC,KAAKF,eACtB6G,mCAAmCC,EAAcxE,GACjDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAAsV,0BAAP,SAAiCxD,EAAeC,EAAexC,EAAiBsB,GAAhF,WACE,OAAOG,GAAavC,KAAKF,eACtB+G,0BAA0BxD,EAAMC,EAAMxC,EAAQsB,GAC9CtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAuV,4BAAP,SAAmC9V,EAAYoR,GAA/C,WACE,OAAOG,GAAavC,KAAKF,eACtBgH,4BAA4B9V,EAAIoR,GAChCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAwV,qDAAP,SAA4DC,EAA4B5E,GAAxF,WACE,OAAOG,GAAavC,KAAKF,eACtBiH,qDAAqDC,EAAoB5E,GACzEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA0V,iCAAP,SAAwCC,EAAsC9E,GAA9E,WACE,OAAOG,GAAavC,KAAKF,eACtBmH,iCAAiCC,EAAmB9E,GACpDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAczC,YAAA4V,+BAAP,SACE9D,EACAC,EACAxC,EACAyC,EACAnB,GALF,WAOE,OAAOG,GAAavC,KAAKF,eACtBqH,+BAA+B9D,EAAMC,EAAMxC,EAAQyC,EAASnB,GAC5DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA6V,iCAAP,SAAwCpW,EAAYoR,GAApD,WACE,OAAOG,GAAavC,KAAKF,eACtBsH,iCAAiCpW,EAAIoR,GACrCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAA8V,wCAAP,SACEhE,EACAC,EACAxC,EACAyC,EACAnB,GALF,WAOE,OAAOG,GAAavC,KAAKF,eACtBuH,wCAAwChE,EAAMC,EAAMxC,EAAQyC,EAASnB,GACrEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA+V,6CAAP,SAAoDtW,EAAYoR,GAAhE,WACE,OAAOG,GAAavC,KAAKF,eACtBwH,6CAA6CtW,EAAIoR,GACjDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAgW,0CAAP,SAAiDvW,EAAYoR,GAA7D,WACE,OAAOG,GAAavC,KAAKF,eACtByH,0CAA0CvW,EAAIoR,GAC9CtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAiW,4CAAP,SACExW,EACAyW,EACArF,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtB0H,4CAA4CxW,EAAIyW,EAAgCrF,GAChFtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAmW,yCAAP,SAAgDC,EAAwCvF,GAAxF,WACE,OAAOG,GAAavC,KAAKF,eACtB4H,yCAAyCC,EAAoBvF,GAC7DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAczC,YAAAqW,sCAAP,SACEvE,EACAC,EACAxC,EACAyC,EACAnB,GALF,WAOE,OAAOG,GAAavC,KAAKF,eACtB8H,sCAAsCvE,EAAMC,EAAMxC,EAAQyC,EAASnB,GACnEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAczC,YAAAsW,kCAAP,SACExE,EACAC,EACAxC,EACAyC,EACAnB,GALF,WAOE,OAAOG,GAAavC,KAAKF,eACtB+H,kCAAkCxE,EAAMC,EAAMxC,EAAQyC,EAASnB,GAC/DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAczC,YAAAuW,iCAAP,SACEzE,EACAC,EACAxC,EACAyC,EACAnB,GALF,WAOE,OAAOG,GAAavC,KAAKF,eACtBgI,iCAAiCzE,EAAMC,EAAMxC,EAAQyC,EAASnB,GAC9DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAwW,sCAAP,SAA6C/W,EAAYoR,GAAzD,WACE,OAAOG,GAAavC,KAAKF,eACtBiI,sCAAsC/W,EAAIoR,GAC1CtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAyW,mCAAP,SAA0ChX,EAAYoR,GAAtD,WACE,OAAOG,GAAavC,KAAKF,eACtBkI,mCAAmChX,EAAIoR,GACvCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA0W,qCAAP,SAA4CjX,EAAYkX,EAAwC9F,GAAhG,WACE,OAAOG,GAAavC,KAAKF,eACtBmI,qCAAqCjX,EAAIkX,EAAoB9F,GAC7DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA4W,kCAAP,SAAyCC,EAAoDhG,GAA7F,WACE,OAAOG,GAAavC,KAAKF,eACtBqI,kCAAkCC,EAA0BhG,GAC5DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAA8W,0BAAP,SAAiChF,EAAeC,EAAexC,EAAiBsB,GAAhF,WACE,OAAOG,GAAavC,KAAKF,eACtBuI,0BAA0BhF,EAAMC,EAAMxC,EAAQsB,GAC9CtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA+W,4BAAP,SAAmCtX,EAAYoR,GAA/C,WACE,OAAOG,GAAavC,KAAKF,eACtBwI,4BAA4BtX,EAAIoR,GAChCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAgX,6BAAP,SAAoCzH,EAAiBsB,GAArD,WACE,OAAOG,GAAavC,KAAKF,eACtByI,6BAA6BzH,EAAQsB,GACrCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAiX,+BAAP,SAAsCxX,EAAYoR,GAAlD,WACE,OAAOG,GAAavC,KAAKF,eACtB0I,+BAA+BxX,EAAIoR,GACnCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAkX,yBAAP,SAAgC3H,EAAiBsB,GAAjD,WACE,OAAOG,GAAavC,KAAKF,eACtB2I,yBAAyB3H,EAAQsB,GACjCtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAmX,2BAAP,SAAkC1X,EAAYoR,GAA9C,WACE,OAAOG,GAAavC,KAAKF,eACtB4I,2BAA2B1X,EAAIoR,GAC/BtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAmBzC,YAAAoX,kCAAP,SACEtF,EACAC,EACAxC,EACA8H,EACAnF,EACAC,EACAF,EACAD,EACAsF,EACAzG,GAVF,WAYE,OAAOG,GAAavC,KAAKF,eACtB6I,kCACCtF,EACAC,EACAxC,EACA8H,EACAnF,EACAC,EACAF,EACAD,EACAsF,EACAzG,GAEDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAuX,uCAAP,SAA8C9X,EAAYoR,GAA1D,WACE,OAAOG,GAAavC,KAAKF,eACtBgJ,uCAAuC9X,EAAIoR,GAC3CtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAezC,YAAAwX,oCAAP,SACE/X,EACA4X,EACAnF,EACAC,EACAsF,EACA5G,GANF,WAQE,OAAOG,GAAavC,KAAKF,eACtBiJ,oCACC/X,EACA4X,EACAnF,EACAC,EACAsF,EACA5G,GAEDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAezC,YAAA0X,0CAAP,SACEjY,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,GANF,WAQE,OAAOG,GAAavC,KAAKF,eACtBmJ,0CAA0CjY,EAAIqS,EAAMC,EAAMxC,EAAQyC,EAASnB,GAC3EtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA2X,gDAAP,SAAuDlY,EAAYsD,EAAa8N,GAAhF,WACE,OAAOG,GAAavC,KAAKF,eACtBoJ,gDAAgDlY,EAAIsD,EAAK8N,GACzDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA4X,6CAAP,SAAoDnY,EAAYsD,EAAa8N,GAA7E,WACE,OAAOG,GAAavC,KAAKF,eACtBqJ,6CAA6CnY,EAAIsD,EAAK8N,GACtDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAA6X,+CAAP,SAAsDpY,EAAYsD,EAAa5F,EAAc0T,GAA7F,WACE,OAAOG,GAAavC,KAAKF,eACtBsJ,+CAA+CpY,EAAIsD,EAAK5F,EAAO0T,GAC/DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA8X,2CAAP,SAAkDrY,EAAYtC,EAAc0T,GAA5E,WACE,OAAOG,GAAavC,KAAKF,eACtBuJ,2CAA2CrY,EAAItC,EAAO0T,GACtDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA+X,2CAAP,SACEtY,EACAqU,EACAjD,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtBwJ,2CAA2CtY,EAAIqU,EAAqBjD,GACpEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAgY,sCAAP,SACEvY,EACAwY,EACApH,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtByJ,sCAAsCvY,EAAIwY,EAA0BpH,GACpEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAezC,YAAAkY,qDAAP,SACEzY,EACAqS,EACAC,EACAxC,EACAyC,EACAnB,GANF,WAQE,OAAOG,GAAavC,KAAKF,eACtB2J,qDAAqDzY,EAAIqS,EAAMC,EAAMxC,EAAQyC,EAASnB,GACtFtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAazC,YAAAmY,gDAAP,SAAuD1Y,EAAYqS,EAAeC,EAAelB,GAAjG,WACE,OAAOG,GAAavC,KAAKF,eACtB4J,gDAAgD1Y,EAAIqS,EAAMC,EAAMlB,GAChEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAoY,mCAAP,SAA0CC,EAAsDxH,GAAhG,WACE,OAAOG,GAAavC,KAAKF,eACtB6J,mCAAmCC,EAA2BxH,GAC9DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAAsY,uEAAP,SACEC,EACAC,EACA3H,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtB+J,uEAAuEC,EAAOC,EAAW3H,GACzFtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAgBzC,YAAAyY,2DAAP,SACEF,EACAzG,EACAC,EACAxC,EACA0C,EACAD,EACAnB,GAPF,WASE,OAAOG,GAAavC,KAAKF,eACtBkK,2DAA2DF,EAAOzG,EAAMC,EAAMxC,EAAQ0C,EAAQD,EAASnB,GACvGtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA0Y,4DAAP,SACEH,EACAI,EACA9H,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtBmK,4DAA4DH,EAAOI,EAAkC9H,GACrGtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAYzC,YAAA4Y,0EAAP,SACEL,EACAM,EACAhI,GAHF,WAKE,OAAOG,GAAavC,KAAKF,eACtBqK,0EAA0EL,EAAOM,EAAoBhI,GACrGtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA8Y,0CAAP,SAAiDC,EAAgBlI,GAAjE,WACE,OAAOG,GAAavC,KAAKF,eACtBuK,0CAA0CC,EAAQlI,GAClDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAgZ,kCAAP,SAAyCC,EAA0CpI,GAAnF,WACE,OAAOG,GAAavC,KAAKF,eACtByK,kCAAkCC,EAAqBpI,GACvDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAkZ,wCAAP,SAA+CC,EAAsDtI,GAArG,WACE,OAAOG,GAAavC,KAAKF,eACtB2K,wCAAwCC,EAA2BtI,GACnEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAoZ,oCAAP,SAA2CC,EAA4BxI,GAAvE,WACE,OAAOG,GAAavC,KAAKF,eACtB6K,oCAAoCC,EAAcxI,GAClDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAsZ,wCAAP,SAA+CC,EAAkD1I,GAAjG,WACE,OAAOG,GAAavC,KAAKF,eACtB+K,wCAAwCC,EAAyB1I,GACjEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAwZ,2CAAP,SACEC,EACA5I,GAFF,WAIE,OAAOG,GAAavC,KAAKF,eACtBiL,2CAA2CC,EAA4B5I,GACvEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA0Z,qCAAP,SAA4CC,EAA8B9I,GAA1E,WACE,OAAOG,GAAavC,KAAKF,eACtBmL,qCAAqCC,EAAe9I,GACpDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA4Z,sCAAP,SAA6CC,EAA8ChJ,GAA3F,WACE,OAAOG,GAAavC,KAAKF,eACtBqL,sCAAsCC,EAAuBhJ,GAC7DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAA8Z,wCAAP,SAA+CC,EAAoClJ,GAAnF,WACE,OAAOG,GAAavC,KAAKF,eACtBuL,wCAAwCC,EAAkBlJ,GAC1DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAga,yCAAP,SAAgDC,EAAsCpJ,GAAtF,WACE,OAAOG,GAAavC,KAAKF,eACtByL,yCAAyCC,EAAmBpJ,GAC5DtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAka,0CAAP,SACEC,EACAtJ,GAFF,WAIE,OAAOG,GAAavC,KAAKF,eACtB2L,0CAA0CC,EAA2BtJ,GACrEtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAoa,uCAAP,SAA8CC,EAAkCxJ,GAAhF,WACE,OAAOG,GAAavC,KAAKF,eACtB6L,uCAAuCC,EAAiBxJ,GACxDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAWzC,YAAAsa,mCAAP,SAA0CC,EAA0B1J,GAApE,WACE,OAAOG,GAAavC,KAAKF,eACtB+L,mCAAmCC,EAAa1J,GAChDtJ,MAAK,SAACuJ,GAAY,OAAAA,EAAQ,EAAKtC,MAAO,EAAKxO,cAElD,EAzhDA,CAAgC0a,II/sdnBC,ICwBb,WAuDE,WAAYC,QAAA,IAAAA,IAAAA,EAAA,IACVnM,KAAKoM,OAASD,EAAMC,OACpBpM,KAAK/G,SAAWkT,EAAMlT,SACtB+G,KAAKqM,SAAWF,EAAME,SACtBrM,KAAK3O,YAAc8a,EAAM9a,YACzB2O,KAAKzO,SAAW4a,EAAM5a,SACtByO,KAAK6C,YAAcsJ,EAAMtJ,YACzB7C,KAAKsM,aAAeH,EAAMG,aAarB,YAAA5K,WAAP,SAAkB6K,GAChB,IAAMC,EAAmB,IAAIC,OAAO,8DAA+D,KACnG,OAAgB,OAATF,IAAkBC,EAASE,KAAKH,IAAgC,gCAAvBA,EAAKI,gBA7EzD,GDxBwB,SAACC,GACrB,IAAMhc,GAAS,IAAAC,aACTL,GAAO,IAAAC,WAEP,GAAoB,IAAAK,YAAnBmV,EAAK,KAAE4G,EAAQ,MAEtB,IAAA3b,YAAU,YACoB,gD,8EACjB+U,EAAD,MACoB,GAAMzV,MAAAA,OAAI,EAAJA,EAAMsc,IAAI1b,Y,OAMpC,OANMC,EAAc,SAMpB,GALY,IAAIC,GAAW,CACvBD,YAAW,EACXE,UAAUX,MAAAA,OAAM,EAANA,EAAQkc,IAAItb,cAAe,KAG/BqT,qCAAqC/L,MAAK,SAACyL,G,QAC3CwI,EAAmC,QAA3B,EAAa,QAAb,EAAAxI,MAAAA,OAAO,EAAPA,EAAS5S,YAAI,eAAEiV,oBAAY,eAAE5V,GAC3C6b,EAASE,O,OAFb,S,oCAQT,CAACnc,MAAAA,OAAM,EAANA,EAAQkc,IAAItb,YAAahB,IAE7B,IAYMwc,EAAW,kE,0FACTC,EAAuB,CAAEC,SAAS,EAAMC,eAAe,EAAOxb,UAAMtD,GAEpE4X,GACM,EAhBmB,WAEzB,IAEE,GADFrV,GAAU,IAAE,KACkE,GAA1Ewc,EAAU,aAAEC,EAAe,kBAAEC,EAAU,aAAEC,EAAe,kBAChE,OAAIX,IAAc,EAAAY,YAAA,IACP,CAAEhH,QAAS4G,EAAYK,aAAcJ,EAAiBK,SAAU,EAAAC,UAAA,IAAeC,cAAe,EAAAD,UAAA,UAC9Ff,IAAc,EAAAY,YAAA,IACd,CAAEhH,QAAS8G,EAAYG,aAAcF,EAAiBG,SAAU,EAAAC,UAAA,IAAeC,cAAe,EAAAD,UAAA,eADlG,EASwDE,IAA8B,GAAjF,IAAArH,QAAS,IAAAiH,aAAc,IAAAC,SAAU,IAAAE,cAErB,GAAMpd,MAAAA,OAAI,EAAJA,EAAMsc,IAAI1b,aAHpC,M,OASA,OANMC,EAAc,SAMpB,GALY,IAAIC,GAAW,CACvBD,YAAW,EACXE,UAAUX,MAAAA,OAAM,EAANA,EAAQkc,IAAItb,cAAe,KAIpCwU,gDAAgDC,OAAO5X,GAAW,GAClEyK,MAAK,SAACgV,G,YACGC,EAAY,IAAIC,IAChBC,EAAwB,QAAhB,EAAS,QAAT,EAAAH,MAAAA,OAAG,EAAHA,EAAKnc,YAAI,eAAEiI,aAAK,eAAEsU,QAC5B,SAACC,GAAM,OAAAA,EAAEC,SAASC,SAAW,KAC/B,GAEIC,EAA6B,QAAhB,EAAS,QAAT,EAAAR,MAAAA,OAAG,EAAHA,EAAKnc,YAAI,eAAEiI,aAAK,eAAEsU,QACjC,SAACC,GAAM,OAAAA,EAAEC,SAASC,SAAW,KAC/B,GAEF,GAAIJ,GAASA,EAAMM,QAAU,EAAG,CAC5B,IAAMC,GAAYP,MAAAA,OAAK,EAALA,EAAOM,UAAUN,MAAAA,OAAK,EAALA,EAAOQ,UAC1CV,MAAAA,GAAAA,EAAW1M,IAAI,EAAU,CACrBkN,QAASN,MAAAA,OAAK,EAALA,EAAOM,QAChBE,SAAUR,MAAAA,OAAK,EAALA,EAAOQ,SACjBD,UAAWA,EAAY,EAAI,EAAIA,IAInCF,IACAP,MAAAA,GAAAA,EAAW1M,IAAI,EAAe,CAC1BkN,QAASD,MAAAA,OAAU,EAAVA,EAAYC,QACrBE,SAAUH,MAAAA,OAAU,EAAVA,EAAYG,SACtBD,WAAWF,MAAAA,OAAU,EAAVA,EAAYC,UAAUD,MAAAA,OAAU,EAAVA,EAAYG,aAIrDxB,EAAcC,SAAU,EACxBD,EAActb,KAAOoc,KAExBW,OAAM,SAACzc,GACJgb,EAAcC,SAAU,EACxBD,EAAcE,eAAgB,M,OAlCtC,S,iBAqCJ,MAAO,CAAP,EAAOF,WAOX,OAJqB,IAAA0B,UAAQ,WACzB,MAAO,CAAE1I,MAAK,EAAE+G,SAAQ,KACzB,CAAC/G,EAAO+G,M,yBDtFf,SAAY1K,GACV,mBACA,2BACA,yBACA,iCAJF,CAAYA,KAAAA,GAAM,KAYX,IGmBDsM,GAA0B,SAAChe,EAAgBJ,EAAYqe,GAC3D,MAAO,CACLva,IAAK,kBACL2G,MAAO,kE,uEACe,SAAMzK,MAAAA,OAAI,EAAJA,EAAMsc,IAAI1b,Y,OAK7B,OALDC,EAAc,SAKb,GAJY,IAAIC,GAAW,CAChCD,YAAW,EACXE,UAAUX,MAAAA,OAAM,EAANA,EAAQkc,IAAItb,cAAe,KAEfma,uCAAuC,CAC7DmD,WAAYD,EAAYE,UACxBC,UAAWH,EAAYI,Y,OAFzB,MAAO,CAAP,EAAO,oBClCAC,GAAiB,SAACC,GAC7B,OAAAC,OAAOC,KAAKF,GACTlb,KAAI,SAACK,GAAQ,gBAAGA,EAAG,YAAIuP,mBAAmBsL,EAAO7a,QACjDgb,KAAK,MCbGC,GAAkB,SAACV,GAC5B,IAAMW,EFWyB,SAACX,GAClC,IAAMje,GAAS,IAAAC,aACTL,GAAO,IAAAC,WACPgf,GAAM,IAAAzZ,UAGN0Z,EAAO,+CAAUhN,SAAO,W,uEAC5B,YAAoBrU,IAAhBohB,EAAIxZ,QAEC,CAAP,EAAOwZ,EAAIxZ,SAEE,GAAM2Y,GAAwBhe,EAAQJ,EAAMqe,GAAa5T,QAAQnC,MAAK,SAAA6W,GAAK,OAAAA,EAAEhe,S,OAE5F,OAFMsI,EAAS,SACfwV,EAAIxZ,QAAUgE,EACP,CAAP,EAAOA,WAOT,OAJA,IAAA/I,YAAU,WAERwe,MACC,CAAC9e,EAAQJ,IACLkf,EE/BmBE,CAAoBf,GACtCpa,GAAW,KAAAob,eA4BjB,MAAO,CAAEC,sBA1BqB,kE,8EACpBC,GAAS,KAAAC,OAAiBvb,EAASqM,QACV,SAArBiP,EAAe,OAED,GAAMP,KAD1B,M,OAEA,IADoB,SACHS,eACb,MAAO,CAAP,GAAO,G,iBAGf,MAAO,CAAP,GAAO,WAiBqBC,kBAdN,SAAOC,GAAa,uD,2EACtB,SAAMX,K,OAC1B,IADM1D,EAAc,UACJsE,iBAAmBtE,EAAYmE,eAAgB,CAC3D,QAAiC5hB,IAA7Byd,EAAYuE,aACZ,MAAM,IAAI/hB,MAAM,kDAKpB,OAHMgiB,GAAc,KAAAC,cAAa,CAAEvhB,IAAKxB,OAAOiH,SAAS+b,KAAMtN,MAAO,CAAEuN,OAAQ,UACzEzhB,EDtBY,SAAC0hB,EAAiBJ,EAAqBK,GACnE,IAAMxB,EAAS,CACbyB,SAAUN,EACVO,eAAgBF,GAGlB,MAAO,UAAGD,EAAO,YAAIxB,GAAeC,ICgBd2B,CAAehF,EAAYuE,aAAcC,EAAa9iB,OAAOiH,SAAS+b,MAClFhjB,OAAOiH,SAAS+b,KAAOxhB,EAChB,CAAP,GAAO,GAEX,MAAO,CAAP,EAAOmhB,aC9BFY,GAAc,WACzB,IAAMhc,EAAWvH,OAAiB,SAClC,QAAiBa,IAAb0G,EACF,MAAM,IAAIzG,MAAM,uDAElB,OAAOyG,G,YCDHO,GAAO,SAAO1E,EAAgBogB,GAA6C,uD,uEAMxE,OALDC,EAAiB,CACrBjiB,IAAK4B,EAAO4J,OAAOC,cACnByW,SAAUtgB,EAAO4J,OAAO0W,SACxBxW,MAAO9J,EAAO4J,OAAOE,OAEhB,IAAM,SAAauW,EAAgBD,I,OAA1C,MAAO,CAAP,EAAO,kBAGI,GAAU,WACrB,IAAMG,GAAmB,IAAAnb,UACnBpF,GAAS,IAAAC,aACTkE,EAAWgc,KAEjB,QAAe1iB,IAAXuC,QAAiDvC,IAAzB0G,EAASM,OAAO7E,KAC1C,MAAM,IAAIlC,MAAM,oEAGlB,IAAM8iB,EAAqBrc,EAASM,OAAO7E,KAErC6gB,EAAsB,kE,qFAEThjB,KADXijB,EAAWH,EAAiBlb,SAC9B,MACa,GAAMX,GAAK1E,EAAQwgB,EAAmBhgB,W,OAErD,OAFM6I,EAAS,SACfkX,EAAiBlb,QAAUgE,EACpB,CAAP,EAAOA,G,OAET,MAAO,CAAP,EAAOqX,YAGT,IAAApgB,YAAU,WAERmgB,MACC,CAACzgB,EAAQwgB,IAEZ,IAAMG,EAAiB,kE,uEACI,SAAMF,K,OAC/B,OADMF,EAAmB,SAClB,CAAP,GAAO,SAAeA,EAAkBC,EAAmBhgB,mBAavDA,EAAWggB,EAAmBhgB,SAEpC,MAAO,CACLogB,YAbkB,kE,iEACL,SAAMJ,EAAmBK,W,OACtC,MAAO,CAAP,EADa,SACDC,SAASC,KAAK1Y,kBAY1B2Y,WATiB,kE,iEACJ,SAAMR,EAAmBK,W,OACtC,MAAO,CAAP,EADa,SACDC,SAASC,KAAKE,sBAQ1BngB,MAAO,CACLN,SAAUmgB,GAEZpgB,IAAK,CACHC,SAAQ,GAEV0b,IAAK,CACH1b,SAAQ,GAEV0gB,IAAK,CACH1gB,SAAQ,GAEV2gB,kBAAmB,CACjB3gB,SAAUmgB,KCvEHS,GAAc,WACvB,IAAMphB,GAAS,IAAAC,aAQf,MAAO,CAAEohB,oBAPmB,WACxB,GAAIrhB,EACA,MAAO,UAAGA,EAAO4J,OAAOC,cAAa,mBAAW7J,EAAO4J,OAAOE,MAAK,sC,sFCLxE,IAAMwX,EAAY,CACvBC,GAAI,CACFC,Y,gmLCIEC,EAAkB,qBAExBA,EAEGC,IAAI,EAAAC,kBACJD,IAAI,KAGJhd,KAAK,CACJkd,UAAW,CACTC,MAAO,CAAC,UAAW,aACnBC,OAAQ,IAEVC,YAAa,KACb1a,OAAO,EAEP2a,cAAe,CACbC,aAAa,GAEfX,UAAS,IAGb,W,0ICFa1iB,EAA6C,WAChD,IAAAsM,GAAM,IAAAC,kBAAgB,EAE9B,OACE,oCACE,kBAAC,EAAA+W,YAAW,CACVnf,UAAU,yDACVyI,QAAS,EAAA2W,oBAAA,OAET,kBAAC,EAAAC,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAK7P,KAAK,OAC3BxH,EAAE,8BAEL,kBAAC,EAAAoX,MAAK,CAACC,aAAa,KAAK7P,KAAK,KAAK3P,UAAU,mDAC1CmI,EAAE,gCAEL,kBAAC,EAAAsX,KAAI,CAACvlB,UAAW,EAAAwlB,aAAA,GAAiBvX,EAAE,sCAIxC,kBAAC,EAAAgX,YAAW,CAACnf,UAAU,2CAA2C2f,gBAAc,GAC9E,kBAAC,EAAAC,KAAI,CAACN,WAAS,EAACO,GAAI,GAClB,kBAAC,EAAAC,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAV,MAAK,CAACC,aAAa,MAAMrX,EAAE,4CAIlC,kBAAC,EAAA+X,SAAQ,KAAE/X,EAAE,4CACb,kBAAC,EAAAgY,WAAU,KACT,kBAAC,EAAAd,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAc,UAAS,KACR,kBAAC,EAAAnX,OAAM,eACO,4BACZR,QAAS,EAAA4X,cAAA,UACTnmB,UAAU,IACV2iB,KAAK,uCAEJ1U,EAAE,uDAGP,kBAAC,EAAAiY,UAAS,KACR,kBAAC,EAAAnX,OAAM,eACO,6BACZR,QAAS,EAAA4X,cAAA,KACTnmB,UAAU,IACV2iB,KAAK,sEACLyD,OAAO,UAENnY,EAAE,qC,IAAsC,kBAAC,KAAmB,CAACnI,UAAU,kBAGrE,MAGb,kBAAC,EAAA8f,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAE,UAAS,KACR,kBAAC,EAAAV,MAAK,CAACC,aAAa,MAAMrX,EAAE,yCAGhC,kBAAC,EAAA+X,SAAQ,KAAE/X,EAAE,0CACb,kBAAC,EAAAgY,WAAU,KACT,kBAAC,EAAAd,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAc,UAAS,KACR,kBAAC,EAAAnX,OAAM,eACO,gCACZR,QAAS,EAAA4X,cAAA,UACTnmB,UAAU,IACV2iB,KAAK,+DACLyD,OAAO,UAENnY,EAAE,mDACH,kBAAC,KAAmB,CAACnI,UAAU,iBAGnC,kBAAC,EAAAogB,UAAS,KACR,kBAAC,EAAAnX,OAAM,eACO,4BACZR,QAAS,EAAA4X,cAAA,KACTnmB,UAAU,IACV2iB,KAAK,sEACLyD,OAAO,UAENnY,EAAE,qC,IAAsC,kBAAC,KAAmB,CAACnI,UAAU,sBAStF,kBAAC,EAAAmf,YAAW,CAAC1W,QAAS,EAAA2W,oBAAA,MAA2Bpf,UAAU,2CAA2C2f,gBAAc,GAClH,kBAAC,EAAAJ,MAAK,CAAC5P,KAAM,EAAA4Q,WAAA,GAAef,aAAa,KAAKxf,UAAU,cACrDmI,EAAE,sCAEL,kBAAC,EAAAyX,KAAI,CAACN,WAAS,GACb,kBAAC,EAAAkB,SAAQ,CAACC,GAAI,GACZ,kBAAC,EAAAX,KAAI,CAAC9f,UAAU,gCACd,yBAAKA,UAAU,kCACb,4BACEuD,IAAI,4CACJvJ,MAAOmO,EAAE,qCACTuY,YAAY,IACZC,MAAM,2FACNC,iBAAe,OAKvB,kBAAC,EAAAJ,SAAQ,CAACC,GAAI,GACZ,kBAAC,EAAAI,YAAW,KACV,kBAAC,EAAApB,KAAI,CAACzf,UAAU,6BAA6BmI,EAAE,4CAC/C,kBAAC,EAAA2Y,KAAI,CAAC9gB,UAAU,8BACd,kBAAC,EAAA+gB,SAAQ,KAAE5Y,EAAE,4CACb,kBAAC,EAAA4Y,SAAQ,KAAE5Y,EAAE,6CACb,kBAAC,EAAA4Y,SAAQ,KAAE5Y,EAAE,iDAU7B,W,+HCtJa3L,EAAmC,WAC9C,IAAMS,GAAS,IAAAC,aAEf,OAAID,MAAAA,OAAM,EAANA,EAAQ2B,aACH,kBAAC,IAAe,MAIvB,kBAAC,KAAe,CACd4D,MAAM,MACNtB,SAAU,kBAAC,EAAArC,mBAAkB,MAC7B4D,OAAO,+BACPjH,OAAQ,SAACwlB,GAA+B,yBAACA,EAA0B,UAKzE,W,6HCHa/kB,EAA2C,WAC9C,IAAAkM,GAAM,IAAAC,kBAAgB,EAE9B,OACE,oCACE,kBAAC,EAAA+W,YAAW,CACVnf,UAAU,yDACVyI,QAAS,EAAA2W,oBAAA,OAET,kBAAC,EAAAC,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAK7P,KAAK,OAC3BxH,EAAE,kCAEL,kBAAC,EAAAoX,MAAK,CAACC,aAAa,KAAK7P,KAAK,KAAK3P,UAAU,mDAC1CmI,EAAE,oCAEL,kBAAC,EAAAsX,KAAI,CAACvlB,UAAW,EAAAwlB,aAAA,GAAiBvX,EAAE,wCACpC,kBAAC,EAAAiY,UAAS,KACR,kBAAC,EAAAnX,OAAM,eACO,uBACZR,QAAS,EAAA4X,cAAA,UACTnmB,UAAU,IACV2iB,KAAK,0FACLyD,OAAO,UAENnY,EAAE,8C,IAA+C,kBAAC,KAAmB,CAACnI,UAAU,mBAMzF,kBAAC,EAAAmf,YAAW,CAACnf,UAAU,2CAA2C2f,gBAAc,GAC9E,kBAAC,EAAAC,KAAI,CAACN,WAAS,GACb,kBAAC,EAAAkB,SAAQ,CAACC,GAAI,GACZ,kBAAC,EAAApB,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAc,UAAS,KACR,kBAAC,EAAAS,YAAW,KACV,kBAAC,EAAAtB,MAAK,CAAC5P,KAAM,EAAA4Q,WAAA,GAAef,aAAa,KAAKxf,UAAU,cACrDmI,EAAE,0CAEL,kBAAC,EAAAsX,KAAI,CAACzf,UAAU,cAAcmI,EAAE,kDAGpC,kBAAC,EAAAiY,UAAS,KACR,kBAAC,EAAAnX,OAAM,eACO,qBACZR,QAAS,EAAA4X,cAAA,UACTnmB,UAAU,IACV2iB,KAAK,gDACLyD,OAAO,UAENnY,EAAE,oC,IAAqC,kBAAC,KAAmB,CAACnI,UAAU,mBAK/E,kBAAC,EAAAwgB,SAAQ,CAACC,GAAI,GACZ,kBAAC,EAAAX,KAAI,CAAC9f,UAAU,gCACZ,yBAAKA,UAAU,kCACb,4BACEuD,IAAI,4CACJvJ,MAAOmO,EAAE,yCACTuY,YAAY,IACZC,MAAM,2FACNC,iBAAe,WAWnC,W,sICpDA,QAnC0B,WACxB,IAAM3jB,GAAS,IAAAC,aACPmc,GAAa,QAAoB,OAAX,EAAAQ,kBAAW,IAAX,EAAAA,iBAAW,EAAX,EAAAA,YAAA,KAAiB,SACzC,GAA+C,QAAgB,CACnEuB,UAAW,MACXE,SAAU,QAFJiB,EAAiB,oBAAEJ,EAAqB,wBAIxCmC,GAAwB,UAAa,oBACrC9X,GAAuB,UAAc,mBAE7C,OACE,kBAAC,KAAe,CACdhE,MAAM,MACNC,OAAO,qBACPvB,SAAU,kBAAC,EAAArC,mBAAkB,MAC7BrD,OAAQ,SAACylB,GACP,OAAIhkB,MAAAA,OAAM,EAANA,EAAQ2B,aACH,kBAAC,IAAe,MAIvB,kBAAC,EAAAsiB,aAAA,SAAqB,CAACvlB,MAAO,CAAE0d,SAAQ,IACtC,kBAAC4H,EAAyB,CACxB1E,kBAAmBA,EACnBJ,sBAAuBA,EACvBnV,iBAAkBsX,IAClB9X,mBAAoBA,U,iHCvB5BhN,EAAwC,WAW5C,OACE,gBAAC,EAAA2lB,YAAW,KACZ,gBAAC,EAAAgC,WAAU,CAAC1Y,QAAQ,QAClB,gBAAC,EAAA2Y,eAAc,CAACC,KAAM,OACtB,gBAAC,EAAA9B,MAAK,CAACC,aAAa,KAAK7P,KAAK,MAAI,sBAGlC,gBAAC,EAAA2R,eAAc,yEAGf,iBApBJ,WACE,IAAMvkB,GAAU,IAAAC,cAIhB,OACE,gBAAC,EAAAiM,OAAM,CAACsY,QAJV,WACExkB,EAAQgD,KAAK,OAGe,kBAclB,SAQhB,W,+GCzCA,QAAe,IAA0B,eCAzC,EAAe,IAA0B,eCAzC,EAAe,IAA0B,eCAzC,EAAe,IAA0B,eCAzC,EAAe,IAA0B,e,qCCkC5B5D,EAAwC,WAE3C,IAAAgM,GAAM,IAAAC,kBAAgB,EAExBrL,GAAU,IAAAC,cAEV4D,GAAWrF,IADO,IAAAimB,gBAAiB,CAAEjmB,YAAa,WAAM,YAAI,eAG5DkmB,EAAO3gB,SAAS7B,SAAS0I,WAAW,SAEpC+Z,EAAuB,SAAC1f,GAC5BA,EAAM2f,iBACN5kB,EAAQgD,KAAK,UAAGa,EAAQ,qBAGpBghB,EAAe,WACnB,OAAO7kB,EAAQiC,WAAW,CACxBC,SAAU,qBAoBd,OACE,oCAEE,kBAAC,EAAAkgB,YAAW,CAACnf,UAAU,4GAA4GyI,QAAS,EAAA2W,oBAAA,MAC1I,kBAAC,EAAAC,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAK7P,KAAK,OAC3BxH,EAAE,uBAEL,kBAAC,EAAAsX,KAAI,CAACzf,UAAU,oCAAoCmI,EAAE,yBACtD,kBAAC,EAAAsX,KAAI,CAACvlB,UAAW,EAAAwlB,aAAA,GACdvX,EAAE,6BAEL,kBAAC,EAAAsX,KAAI,CAACvlB,UAAW,EAAAwlB,aAAA,EAAgB1f,UAAU,cACxCmI,EAAE,8BAEL,kBAAC,EAAAiY,UAAS,KACR,kBAAC,EAAAnX,OAAM,CAACR,QAAS,EAAA4X,cAAA,QAAuBwB,SAAO,EAAC3nB,UAAU,IAAG,cAAa,sBAAsB2iB,KAAM+E,IAAgBL,QAASG,GAC5HvZ,EAAE,uCAOX,kBAAC,EAAAgX,YAAW,CAAC1W,QAAS,EAAA2W,oBAAA,MAA2Bpf,UAAU,4CACzD,kBAAC,EAAA0I,SAAQ,KACP,kBAAC,EAAA+W,KAAI,CAACvlB,UAAW,EAAAwlB,aAAA,EAAgB1f,UAAU,sCACxCmI,EAAE,sBAMT,kBAAC,EAAAgX,YAAW,CAACQ,gBAAc,EAAC3f,UAAU,4CACpC,kBAAC,EAAA4f,KAAI,CAACa,GAAI,EAAGZ,GAAI,EAAGP,WAAS,GAG3B,kBAAC,EAAAQ,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,yBACEzc,IAAK,EACLue,IAAI,wCACJzZ,MAAO,CAAEC,OAAQ,YAIvB,kBAAC,EAAA2X,UAAS,KACR,kBAAC,EAAAV,MAAK,CAACC,aAAa,KAAK7P,KAAK,MAC3BxH,EAAE,yBAGP,kBAAC,EAAA+X,SAAQ,KACP,kBAAC,EAAAb,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAc,UAAS,KACPjY,EAAE,2BAEL,kBAAC,EAAAiY,UAAS,CAACpgB,UAAU,kBAClBmI,EAAE,+B,IAAgC,kBAAC,EAAAc,OAAM,eAAa,0BAA0B8Y,UAAQ,EAACtZ,QAAS,EAAA4X,cAAA,KAAoBnmB,UAAU,IAAIomB,OAAO,SAASzD,KAAK,wB,YACxJ,kBAAC,KAAmB,CAAC7c,UAAU,gB,OAIvC,kBAAC,EAAAmgB,WAAU,KACT,kBAAC,EAAAlX,OAAM,CAACR,QAAS,EAAA4X,cAAA,UAAuB,cAAc,sBAAsBnmB,UAAU,IAAIomB,OAAO,SAASzD,KAAK,gEAC5G1U,EAAE,uB,IAAwB,kBAAC,KAAmB,CAACnI,UAAU,kBAMhE,kBAAC,EAAA8f,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,yBACEzc,IAAK,EACLue,IAAI,sCACJzZ,MAAO,CAAEC,OAAQ,YAIvB,kBAAC,EAAA2X,UAAS,KACR,kBAAC,EAAAV,MAAK,CAACC,aAAa,KAAK7P,KAAK,MAC3BxH,EAAE,yBAGP,kBAAC,EAAA+X,SAAQ,KACP,kBAAC,EAAAb,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAc,UAAS,CAACpgB,UAAU,cACnB,kBAAC,EAAAgiB,MAAK,KAAE7Z,EAAE,mBAEZ,kBAAC,EAAAiY,UAAS,KACPjY,EAAE,2BAEL,kBAAC,EAAAiY,UAAS,CAACpgB,UAAU,kBAClBmI,EAAE,+B,IAAgC,kBAAC,EAAAc,OAAM,eAAa,0BAA0B8Y,UAAQ,EAACtZ,QAAS,EAAA4X,cAAA,KAAoBnmB,UAAU,IAAIomB,OAAO,SAASzD,KAAK,wB,aACxJ,kBAAC,KAAmB,CAAC7c,UAAU,gB,OAIvC,kBAAC,EAAAmgB,WAAU,KACT,kBAAC,EAAAlX,OAAM,eAAa,sBAAsBR,QAAS,EAAA4X,cAAA,UAAyBnmB,UAAU,IAAIomB,OAAO,SAASzD,KAAK,2FAC5G1U,EAAE,sB,IAAuB,kBAAC,KAAmB,CAACnI,UAAU,kBAM/D,kBAAC,EAAA8f,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,yBACEzc,IAAK,EACLue,IAAI,0CACJzZ,MAAO,CAAEC,OAAQ,YAIvB,kBAAC,EAAA2X,UAAS,KACR,kBAAC,EAAAV,MAAK,CAACC,aAAa,KAAK7P,KAAK,MAC3BxH,EAAE,yBAGP,kBAAC,EAAA+X,SAAQ,KACP,kBAAC,EAAAb,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAc,UAAS,CAACpgB,UAAU,cACnB,kBAAC,EAAAgiB,MAAK,KAAE7Z,EAAE,iCAEZ,kBAAC,EAAAiY,UAAS,KACPjY,EAAE,2BAEL,kBAAC,EAAAiY,UAAS,CAACpgB,UAAU,kBAClBmI,EAAE,kCAIT,kBAAC,EAAAgY,WAAU,KACT,kBAAC,EAAAlX,OAAM,eAAa,sBAAsBR,QAAS,EAAA4X,cAAA,UAAyBnmB,UAAU,IAAI2iB,MAjJhG4E,GACF1kB,EAAQiC,WAAW,CACjBC,SAAU,sBAGP,+CA4I6HsiB,QAzJvG,SAACvf,GAC1Byf,IACFzf,EAAM2f,iBACN5kB,EAAQgD,KAAK,UAAGa,EAAQ,yBAsJ4IuH,EAAE,uCAKlK,kBAAC,EAAA2X,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,yBACEzc,IAAK,EACLue,IAAI,kDACJzZ,MAAO,CAAEC,OAAQ,YAIvB,kBAAC,EAAA2X,UAAS,KACR,kBAAC,EAAAV,MAAK,CAACC,aAAa,KAAK7P,KAAK,MAC3BxH,EAAE,0BAGP,kBAAC,EAAA+X,SAAQ,KACP,kBAAC,EAAAb,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAc,UAAS,KACPjY,EAAE,4BAEL,kBAAC,EAAAiY,UAAS,CAACpgB,UAAU,kBAClBmI,EAAE,mCAIT,kBAAC,EAAAgY,WAAU,KACT,kBAAC,EAAAlX,OAAM,eAAa,+BAA+BR,QAAS,EAAA4X,cAAA,UAAyBnmB,UAAU,IAAI2iB,KAAM+E,IAAgBL,QAASG,GAAwBvZ,EAAE,wCAKhK,kBAAC,EAAA2X,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,yBACEzc,IAAK,EACLue,IAAI,sCACJzZ,MAAO,CAAEC,OAAQ,YAIvB,kBAAC,EAAA2X,UAAS,KACR,kBAAC,EAAAV,MAAK,CAACC,aAAa,KAAK7P,KAAK,MAC7BxH,EAAE,yBAGL,kBAAC,EAAA+X,SAAQ,KACP,kBAAC,EAAAb,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAc,UAAS,CAACpgB,UAAU,cACnB,kBAAC,EAAAgiB,MAAK,KAAE7Z,EAAE,oBAEZ,kBAAC,EAAAiY,UAAS,KACTjY,EAAE,2BAEH,kBAAC,EAAAiY,UAAS,CAACpgB,UAAU,kBACpBmI,EAAE,+B,IAAgC,kBAAC,EAAAc,OAAM,eAAa,0BAA0B8Y,UAAQ,EAACtZ,QAAS,EAAA4X,cAAA,KAAoBnmB,UAAU,IAAIomB,OAAO,SAASzD,KAAK,wB,aACxJ,kBAAC,KAAmB,CAAC7c,UAAU,gB,OAIrC,kBAAC,EAAAmgB,WAAU,KACT,kBAAC,EAAAlX,OAAM,eAAa,sBAAsBR,QAAS,EAAA4X,cAAA,UAAyBnmB,UAAU,IAAIomB,OAAO,SAASzD,KAAK,yHAC5G1U,EAAE,sB,IAAuB,kBAAC,KAAmB,CAACnI,UAAU,sBAUzE,W,+GCzRa5D,EAAmC,WAAM,OACpD,kBAAC,KAAe,CACdoG,MAAM,SACNC,OAAO,sBACPvB,SAAU,kBAAC,EAAArC,mBAAkB,MAC7BrD,OAAQ,SAACymB,GAA+B,yBAACA,EAA0B,UAIvE,W,2ICPa1lB,EAA+C,WAC1D,IAAMU,GAAS,IAAAC,aACf,OACE,kBAAC,KAAe,CACdsF,MAAM,MACNC,OAAO,oBACPvB,SAAU,kBAAC,EAAArC,mBAAkB,MAC7BrD,OAAQ,SAAC0mB,GAGP,OAAIjlB,MAAAA,OAAM,EAANA,EAAQ2B,aACH,kBAAC,IAAe,MAElB,kBAACsjB,EAAwB,UAMxC,W,yFCbaC,EAA2C,WAC9C,IAAAha,GAAM,IAAAC,kBAAgB,EAC9B,OACE,kBAAC,EAAA+W,YAAW,KACV,kBAAC,EAAAgC,WAAU,CAAC1Y,QAAQ,QAClB,kBAAC,EAAA2Y,eAAc,CAACC,KAAM,OACtB,kBAAC,EAAA9B,MAAK,CAACC,aAAa,KAAK7P,KAAK,MAC3BxH,EAAE,iCAEL,kBAAC,EAAAmZ,eAAc,KACZnZ,EAAE,mCAEL,kBAAC,EAAAc,OAAM,CAACR,QAAQ,UAAU8Y,QAAS,WAAO1nB,OAAOiH,SAAS+b,KAAO,0CAA2C1U,EAAE,sC,0JCjBzGnM,EAAkD,WAC7D,IAAMiB,GAAS,IAAAC,aAEf,OAAID,MAAAA,OAAM,EAANA,EAAQ2B,aACH,kBAAC,KAAe,MAGlB,kBAACwjB,EAA+B,OAGnCA,EAA2D,WACvD,IAAAC,GAAa,IAAA/kB,aAAgC,WAErD,OACE,kBAAC,IAAS,CAACglB,aAAa,wBAAwBD,WAAYA,EAAY7mB,OAAQ,SAAA+mB,GAAY,OAC1F,kBAAC,IAA0B,CAACA,SAAUA,EAAU9f,OAAO,uCAK7D,W,kICrBa1G,EAAqC,WAChD,IAAMkB,GAAS,IAAAC,aAEf,OAAID,MAAAA,OAAM,EAANA,EAAQ2B,aACH,kBAAC,KAAe,MAGlB,kBAAC4jB,EAAkB,OAGtBA,EAA8C,WAClD,OACE,kBAAC,IAAS,CACRF,aAAa,gBACb9mB,OAAQ,SAAC+mB,GAAa,yBAAC,IAA0B,CAAC9f,OAAO,2BAA2B8f,SAAUA,QAKpG,W,yICnBazmB,EAA4C,WACvD,IAAMmB,GAAS,IAAAC,aAEf,OAAID,MAAAA,OAAM,EAANA,EAAQ2B,aACH,kBAAC,KAAe,MAGlB,kBAAC6jB,EAAyB,OAG7BA,EAAqD,WACzD,OACE,kBAAC,IAAS,CAACjnB,OAAQ,SAAA+mB,GAAY,OAC7B,kBAAC,IAA0B,CAACA,SAAUA,EAAU9f,OAAO,wCAK7D,W,+GCAaigB,EAAwE,SAAC,G,MAKhFC,EAJJlgB,EAAM,SACN8f,EAAQ,WACLjnB,GAAI,cAH6E,uBAM9EuB,GAAO,IAAAC,WACPG,GAAS,IAAAC,aACTH,GAAU,IAAAC,cACV4D,GAAW,IAAA4gB,eACX/jB,EAAWZ,MAAAA,OAAI,EAAJA,EAAMuhB,kBAAkB3gB,SACnCmlB,GAAwB/lB,MAAAA,OAAI,EAAJA,EAAMghB,gBAAiB,GAE/C,GAAmC,IAAAvgB,aAAjCulB,EAAO,UAAER,EAAU,aAAES,EAAO,UAC5Bzc,GAAqB,UAAc,iBAE3C,QAAe3L,IAAXuC,QAAqCvC,IAAb6nB,EAC1B,OAAO,kBAAC,EAAA1jB,mBAAkB,MAG5B,IAAMkkB,EAA+B,QAAlB,EAAA1c,WAAkB,eAAEkU,QAAO,SAAClV,GAAM,OAAAA,EAAEhI,KAAOulB,GAAyBvd,EAAEhI,MAAOklB,MAAAA,OAAQ,EAARA,EAAUS,UAY1G,OAVIvlB,GAAYmD,IACd+hB,ECPyB,SAAC1lB,EAAgBgmB,EAAgBC,EAC5DzlB,EAA6CslB,GAqB7C,MApBmC,CACjCI,UAAW,CACT9nB,IAAK,UAAG4nB,EAAM,mBAEhBpmB,KAAM,CACJ2G,KAAM,WACN/F,SAAQ,GAEV2lB,SAAU,CACRC,UAAU,EACVC,aAAa,EACbC,eAA0C,mCAA1BtmB,EAAOkhB,IAAItgB,YAC3B2lB,aAAa,GAEfC,GAAI,CACFC,cAAeR,GAEjBH,WAAU,GDZOY,CACf1mB,EACAslB,EAASqB,YACT,UAAGhjB,EAASrF,cAAa,cAAMgnB,MAAAA,OAAQ,EAARA,EAAUllB,IACzCI,EACAslB,IAKF,kBAAC,KAAe,CACdvgB,MAAM,oBACNC,OAAQA,EACRvB,SAAU,kBAAC,EAAArC,mBAAkB,MAC7BrD,OAAQ,SAACqoB,GACP,OACE,kBAACA,GAAwB,eACvB5mB,OAAQ0lB,EACRmB,SAAUvB,EAASllB,GACnBwlB,QAASA,EACTR,WAAYA,EACZS,QAASA,EACT/lB,QAASA,GACLzB,S,kIEhEHe,EAAqC,WAChD,IAAMY,GAAS,IAAAC,aAEf,OAAID,MAAAA,OAAM,EAANA,EAAQ2B,aACH,kBAAC,KAAe,MAGlB,kBAACmlB,EAAkB,OAGtBA,EAA8C,WAClD,OACE,kBAAC,IAAS,CAACzB,aAAa,mBAAmB9mB,OAAQ,SAAA+mB,GAAY,OAC7D,kBAAC,IAA0B,CAACA,SAAUA,EAAU9f,OAAO,6BAK7D,W,mMCdauhB,EAA+C,WAC1D,IAAM/mB,GAAS,IAAAC,aAEf,OAAID,MAAAA,OAAM,EAANA,EAAQ2B,aACH,kBAAC,KAAe,MAGlB,kBAACqlB,EAA4B,OAGzBA,EAAyC,WACpD,IAAMhnB,GAAS,IAAAC,aACPmc,GAAa,QAAS,EAAAQ,YAAA,KAAgB,SACxC,GAA+C,QAAgB,CACnEuB,UAAW,MACXE,SAAU,QAFJiB,EAAiB,oBAAEJ,EAAqB,wBAIxCmC,GAAwB,UAAa,oBAG7C,YAAe5jB,IAAXuC,EACK,kBAAC,EAAA4B,mBAAkB,MAI1B,kBAAC,KAAkB,KACjB,kBAAC,KAAe,CACd2D,MAAM,MACNC,OAAO,oBACPvB,SAAU,kBAAC,EAAArC,mBAAkB,MAC7BrD,OAAQ,SAACqoB,GACP,OACE,kBAAC,EAAA3C,aAAA,SAAqB,CAACvlB,MAAO,CAAE0d,SAAQ,IACtC,kBAAC,KAAc,KACb,kBAACwK,EAAwB,CACvBtH,kBAAmBA,EACnBJ,sBAAuBA,EACvBnV,iBAAkBsX,aAWpC,W,yFC9Ca4F,EAAsC,SAAC,G,IAAE1oB,EAAM,SAAE8mB,EAAY,eAAED,EAAU,aAC5E/D,GAAwB,UAAa,oBAC7C,OACE,kBAAC,KAAe,CACd9b,MAAM,MACNC,OAAO,qBACPvB,SAAU,kBAAC,EAAArC,mBAAkB,MAC7BrD,OAAQ,SAACqoB,GACP,OACE,kBAACA,EAAwB,CACvBroB,OAAQA,EACR8mB,aAAcA,EACdtb,iBAAkBsX,IAClB+D,WAAYA,S,kJClBX8B,EAAyC,WAC5C,IAAAC,GAAc,IAAA9mB,aAAkC,UAClDsD,EAAW,oBAEjB,OACE,oCACE,kBAAC,KAAe,CACd4B,MAAM,MACNC,OAAO,2BACPvB,SAAU,kBAAC,EAAArC,mBAAkB,MAC7BrD,OAAQ,SAACqoB,GACP,OACE,kBAACA,EAAwB,CACvBjjB,SAAUA,EACVwjB,UAAWA,EACXC,aAAc,SAAC9B,GAAuB,OACpC,kBAACG,EAAA,EAA0B,CACzBjgB,OAAO,2BACP8f,SAAUA,EACV6B,UAAWA,EACXvB,QAAS,KACTC,QAAS,SACTwB,WAAY/B,MAAAA,OAAQ,EAARA,EAAUllB,GACtBuD,SAAUA,a,mJCnBtB2jB,EAAiD,SAAC,G,IAAE1H,EAAI,OAAEnW,EAAQ,WAAO,yBAAC,EAAA8d,KAAI,CAAC7nB,GAAIkgB,GAAQ,IAAKnW,IAEzF+d,EAA4C,WAC/C,IAAAtc,GAAM,IAAAC,kBAAgB,EAExBsc,EACJ,kBAAC,EAAAC,MAAK,CACJC,QAAQ,uCACRzc,EAAGA,EACH0c,WAAY,CAAC,kBAACN,EAAO,CAAC5jB,IAAI,SAASkc,KAAK,uBAI5C,OACE,kBAAC,EAAAiI,KAAI,KACH,kBAAC,EAAAC,cAAa,CACZ/qB,MAAOmO,EAAE,kCACT6c,YAAaN,EACbO,mBAAoB9c,EAAE,uCACtB+c,kBAAkB,M,mDCNbC,EAAiF,SAAC,GAAE,IAAA1iB,EAAM,SAAKnH,GAAI,cAAjB,YAC7F,OACE,kBAAC,KAAe,oBACG,oBACjBkH,MAAM,QACNC,OAAQA,EACRjH,OAAQ,SAAC4pB,GAAmB,yBAACA,GAAc,iBAAK9pB,QC1BzC+pB,EAAmD,SAACvmB,GAAU,OACzE,kBAAC,KAAc,KACb,kBAACqmB,GAAuB,eAAC1iB,OAAO,mBAAsB3D,MCH7CwmB,EAAyD,SAACxmB,GAAU,OAC/E,kBAACqmB,GAAuB,eACtB1iB,OAAO,kBACH3D,KCHKymB,EAAwD,SAACzmB,GAAU,OAC9E,kBAACqmB,GAAuB,eACtB1iB,OAAO,iBACH3D,KCHK0mB,EAAwD,SAAC1mB,GAAU,OAC9E,kBAACqmB,GAAuB,eACtB1iB,OAAO,iBACH3D,K,gCCIK2mB,EAAkC,SAAC,G,IAAErmB,EAAO,UACjDrC,GAAU,IAAAC,cACVC,GAAS,IAAAC,aACP3B,IAAgB,IAAAimB,gBAAiB,IAAE,YACrC5gB,EAAWrF,GAAeA,IAEhC,QAAeb,IAAXuC,EACF,OAAO,kBAAC,EAAA4B,mBAAkB,MAG5B,IAAM6mB,EAAgB,WACpB3oB,EAAQgD,KAAK,UAAGa,EAAQ,mBAG1B,OACE,kBAAC,KAAe,CACd4B,MAAM,MACNC,OAAO,YACPjH,OAAQ,SAACmqB,GAAqB,yBAACA,EAAgB,CAACvmB,QAASA,EAASsmB,cAAeA,Q,s2KC1BvF,IAaaE,EAA0B,SAACC,GACtC,IAAMC,EAAWjsB,OAAOiH,SAASglB,SACjCrlB,QAAQC,IAAI,4BAAqBolB,IACjC,IAAMC,EAAkBF,EAAkBtL,QAAO,SAAC7S,GAAU,OAAAA,EAAMse,UAAU/jB,SAAS6jB,MACrF,GAAIC,EAAgBtkB,OAAS,EAC3B,MAAM,IAAI9G,MAAM,oCAA6BmrB,EAAQ,0CAAkCC,IAClF,GAAIA,EAAgBtkB,OAAS,EAAG,CAErC,IAAMwkB,EAAyBJ,EAAkBtL,QAAO,SAAC7S,GAAU,OAAAA,EAAMse,UAAU/jB,SArB/D,yBAsBpB,GAAIgkB,EAAuBxkB,OAAS,EAClC,MAAM,IAAI9G,MAAM,sEAA+DorB,IAC1E,GAAIE,EAAuBxkB,OAAS,EACzC,MAAM,IAAI9G,MAAM,qDAEhB,OAAOsrB,EAAuB,GAGlC,OAAOF,EAAgB,IAGZG,EAA8B,SACzCL,EACAM,EACA1E,GAEA,IAAMzZ,EAAmB,GAsBzB,OArBAyT,OAAO2K,QAAQD,GAAwBE,SAAQ,SAAC,G,IAACC,EAAC,KAAEC,EAAC,KAC7C3oB,EAAa2oB,EAAC,SAChBzjB,OAAuCpI,EACZ,UAA3BmrB,EAAkBriB,KACpB5F,EAAW2oB,EAAEzjB,iBAEbA,EAAmByjB,EAAEzjB,iBAElB2e,IACC7jB,EAAS+J,WAAW,WACtB/J,EAAWA,EAAS4oB,UAAU,KAE5B1jB,MAAAA,OAAgB,EAAhBA,EAAkB6E,WAAW,YAC/B7E,EAAmBA,EAAiB0jB,UAAU,KAGlDxe,EAAiBse,GAAK,CACpB1oB,SAAQ,EACRkF,iBAAgB,OAGb,gCACF+iB,EAAkB5oB,QAAM,CAC3B+K,iBAAgB,K,WCxDPye,EAAkD,SAAC,G,IAAE/f,EAAQ,WAEhE+a,GAAS,UAAiB,KAE5B,EAAoB,cAAmC,WAC3D,IAAMoE,EAAoBD,EAAwB,KAClD,IAAIC,EAAkBa,YAAtB,CAGA,IAAMzpB,EAASipB,EAA4BL,EAAmB,IAA0BpE,GAExF,OADAhhB,QAAQC,IAAI,sBAAuBzD,GAC5BA,MAPFtB,EAAK,KAAEgrB,EAAQ,KAsBtB,OAZA,eAAgB,YACb,gD,uFACejsB,IAAViB,EAAA,MACe,GAAM2L,MAAM,UAAG,IAAuB,iB,OACpC,SADF,SACiBC,Q,OAA5Bqf,EAAa,SACbf,EAAoBD,EAAwBgB,EAAW3pB,QACvDA,EAASipB,EAA4BL,EAAmBe,EAAW5e,iBAAkByZ,GAC3FhhB,QAAQC,IAAI,sBAAuBzD,GACnC0pB,EAAS1pB,G,oCAGZ,IACI,kBAAC,EAAA4pB,cAAA,SAAsB,CAAClrB,MAAOA,GAAQ+K,K,mEC3BnCogB,EAAsB,uBAA8CpsB,GAEpEqsB,EAAkB,WAC7B,IAAMzgB,GAAS,IAAA0gB,YAAWF,GAC1B,QAAepsB,IAAX4L,EACF,MAAM,IAAI3L,MAAM,qEAElB,OAAO2L,GAGI2gB,EAA+C,SAAC,G,IACEvgB,EAAQ,WAE/D/K,EAAQ,CACZ8lB,KAAM5nB,OAAOiH,SAAS7B,SAAS0I,WAAW,UAE5C,OACE,kBAACmf,EAAoB/e,SAAQ,CAACpM,MAAOA,GAClC+K,K,sCCrBH6b,E,qDAEG,SAAS5gB,I,IAAK,sDAWnB,OAVK4gB,IACHA,EAAW,IAAI,KAAgB,IAAI,oBAAC,KAAsB2E,GAAU,KAI3DC,SAAS,CAChBC,cAAe,OAIZ7E,I,iCCHT,QAdA,SAAqBtjB,GACnB,IAAIooB,EAAU,IACRC,EAAWroB,EAASuC,MAAM,KAShC,OAPA8lB,EAASC,QAEW,SAAhBD,EAAS,KACXA,EAASC,QACTF,EAAU,UAGL,UAAGA,GAAO,OAAGC,EAAS,M,gBCX/B,SAASE,IACP,OAAO3tB,OAAO4tB,YAAW,WACvB,IAAMC,EAAgBrkB,SAASskB,eAAe,yBAC1CD,GACFA,EAAcE,UAEf,I,4DCHE,SAASC,EAAiB7tB,GAC/B,aAAgB,WACd,IAAM8tB,EAAgBzkB,SAASrJ,MAG/B,OAFAqJ,SAASrJ,MAAQA,EAEV,WACLqJ,SAASrJ,MAAQ8tB,KAElB,CAAC9tB,I,iGCFA+tB,EAA4B,MAcrBC,EAAe,SAC1B/qB,EACAogB,GAA6C,oCAC5CtO,SAAO,W,6EAKa,OAJfkZ,EAAc,CAClBC,aAAc,SAGK,GAAMC,EAAqB9K,I,YAA1C+K,EAAe,UAEjB,YACIC,EAAK,IAASprB,G,iBAIlB,O,sBAAA,GAAMorB,EAAG1mB,KAAKsmB,I,OAId,OAJA,SAEAI,EAAGD,aAAeA,EAElB,GAAMC,EAAGC,aAAa,I,OACtB,OADA,SACO,CAAP,EAAOD,G,OAGP,O,SADAE,IACA,GAAMC,EAAOH,I,cAAb,S,aAKJ,OAFMI,EAAK,IAASxrB,GACpBgrB,EAAYS,OAAS,iBACrB,GAAMD,EAAG9mB,KAAKsmB,I,cAAd,SACIQ,EAAGL,aACL,GAAMO,EAAkBF,EAAGL,aAAc/K,IADvC,O,OACF,S,mBAEF,MAAO,CAAP,EAAOoL,WAGHN,EAAuB,SAAO9K,GAA6C,oCAAGtO,SAAO,W,+EAEzF,QAAgBrU,KADVkuB,EAAU,QAAYb,IAE1B,MAAO,CAAP,OAAOrtB,GAEHmuB,EAAc,EAAAC,OAAA,OAAcF,GAC5BG,EAAsB9a,KAAKoO,MAAMwM,GAGvC,IACEG,EAAa,IAAsBD,EAAmBX,cACtD,SAEA,OADAG,IACO,CAAP,OAAO7tB,GAIT,YAAmBA,IAAfsuB,QAA+CtuB,IAAnBsuB,EAAWC,MAI/B,EAAAC,EAAA,GAAY,IAAIC,MAClBH,EAAWC,IAtEF,IAkEjBV,IACO,CAAP,OAAO7tB,IAQa,GAAM2iB,K,OAE5B,OAFM+L,EAAgB,SACF,IAAsBA,GACd,aAAML,EAAmBM,UACnDd,IACO,CAAP,OAAO7tB,IAEF,CAAP,EAAOquB,EAAmBX,sBAGtBG,EAAoB,WACxB9nB,QAAQ6D,MAAM,iCACd,WAAeyjB,IAGXY,EAAoB,SAAOP,EAAsB/K,GAA6C,uD,+EAC5E,SAAMA,K,cAAtB+L,EAAgB,SAChBE,EAAc,IAAsBF,GACpCC,EAAWC,EAAwB,WACnCT,EAAc5a,KAAKC,UAAU,CACjCka,aAAY,EACZiB,SAAQ,IAEJT,EAAU,EAAAE,OAAA,OAAcD,GAC9BpoB,QAAQ6D,MAAM,yBACd,QAAYyjB,EAA2Ba,G,YAgB5BW,EAAiB,SAAOC,EAA4BnM,GAA6C,oCAAGtO,SAAO,W,uEACtH,SAAMya,EAASlB,YApHI,K,OAqHnB,GADA,UACKkB,EAASC,QAAUD,EAASE,YAC/B,MAAM,IAAI/uB,MAAM,2BAEI,SAAM0iB,K,cAAtB+L,EAAgB,SACF,IAAsBA,GACd,aAAMI,EAASE,YAAY,cAAnD,MACF,GAAMlB,EAAOgB,I,OACb,OADA,SACO,CAAP,EAAO,I,cAELA,EAASpB,aAEX,GAAMO,EAAkBa,EAASpB,aAAc/K,IAF7C,M,OAEF,S,iBAEF,MAAO,CAAP,EAAOmM,EAASC,eAWLjB,EAAS,SAAOlC,GAAwC,uD,wEAC/DA,GACF7lB,QAAQkpB,KAAK,yBACb,GAAMrD,EAAEkC,WAFN,M,OAEF,S","sources":["webpack://application-services-ui/./src/app/utils/Routing.tsx","webpack://application-services-ui/./src/app/pages/Kafka/kafka-instance.ts","webpack://application-services-ui/./src/app/pages/Kafka/KafkaRoutes.tsx","webpack://application-services-ui/./src/app/AppRoutes.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/PrincipalsProvider/PrincipalsProvider.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/components/DevelopmentPreview/DevelopmentPreview.tsx","webpack://application-services-ui/./src/app/components/KasModalLoader/KasModalLoader.tsx","webpack://application-services-ui/./src/openapi/ams/api.ts","webpack://application-services-ui/./src/openapi/ams/base.ts","webpack://application-services-ui/./src/openapi/ams/common.ts","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/openapi/ams/configuration.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/hooks/modal.ts","webpack://application-services-ui/./src/app/hooks/insights.ts","webpack://application-services-ui/./src/app/hooks/keycloak.ts","webpack://application-services-ui/./src/app/hooks/useMASToken.ts","webpack://application-services-ui/./src/app/i18n/locale/index.ts","webpack://application-services-ui/./src/app/i18n/index.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/CosPage/CosPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift_Service_Registry-A-Standard-RGB.png","webpack://application-services-ui/./static/images/Logo-Red_Hat-Data_Services-A-Standard-RGB.png","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactVersion.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/Artifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactsRedirect.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/RulesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/SrsLayout.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistrySchemaMapping.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederatedComponent.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kas/Metrics.tsx","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/providers/featureflags/FeatureFlags.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/utils/keycloak/keycloakUtils.ts"],"sourcesContent":["import React from 'react';\nimport { Route, RouteComponentProps } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { useLastLocation } from 'react-router-last-location';\n\nconst NotFoundPage = React.lazy(() => import('@app/pages/NotFound/NotFoundPage'));\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute<T> {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps> | React.ComponentType<T>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup<T> {\n  label: string;\n  routes: IAppRoute<T>[];\n}\n\nexport type AppRouteConfig<T> = IAppRoute<T> | IAppRouteGroup<T>;\n\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nexport const useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nexport const PageNotFoundRoute: React.FunctionComponent<{ title: string }> = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage}/>;\n};\n\nexport const flattenedRoutes = <T, >(routes: AppRouteConfig<T>[]) => routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute<T>[]\n);\n","import { useEffect, useState } from \"react\";\nimport { Configuration, DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport { useParams } from \"react-router-dom\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\n\nexport const getAdminServerUrl = (kafkaRequest?: KafkaRequest): string => {\n  if (kafkaRequest === undefined) {\n    throw new Error('kafkaRequest cannot be undefined');\n  }\n  return `https://admin-server-${kafkaRequest?.bootstrap_server_host}/rest`;\n}\n\nexport type KafkaInstance = {\n  kafkaDetail?: KafkaRequest\n  adminServerUrl?: string\n}\n\nexport const useKafkaInstance = (): KafkaInstance | undefined => {\n  const config = useConfig();\n  const auth = useAuth();\n  const [kafkaRequest, setKafkaRequest] = useState<KafkaRequest | undefined>();\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    const getAdminApiUrl = async () => {\n      if (auth === undefined || config === undefined) {\n        return;\n      }\n      const accessToken = await auth.kas.getToken();\n      const kasService = new DefaultApi({\n        accessToken,\n        basePath: config.kas.apiBasePath || '',\n      } as Configuration);\n\n      const kafka = await kasService.getKafkaById(id);\n      setKafkaRequest(kafka.data);\n    };\n\n    getAdminApiUrl();\n  }, [auth, config, id]);\n\n  return kafkaRequest === undefined ? undefined : {\n    kafkaDetail: kafkaRequest,\n    adminServerUrl: getAdminServerUrl(kafkaRequest),\n  }\n}\n","import React, { useState } from 'react';\nimport { Route, Switch, useHistory, useRouteMatch } from 'react-router-dom';\nimport { InstanceDrawer } from '@app/components';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange } from '@app/utils/Routing';\nimport { useDocumentTitle } from '@app/utils';\nimport { AccessDeniedPage, CreateTopic, Metrics, ServiceDownPage, TopicDetails, Topics, UpdateTopic } from '@app/pages';\nimport { useKafkaInstance } from '@app/pages/Kafka/kafka-instance';\nimport { UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\nimport { PrincipalsProvider } from '@app/components/PrincipalsProvider/PrincipalsProvider';\nimport { BasenameContext, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ServiceRegistrySchemaMapping } from '@app/pages/ServiceRegistry';\n\nconst kafkaRoutes: AppRouteConfig<UnderlyingProps>[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/create',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/update/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n];\n\ntype WrappedRouteProps = IAppRoute<UnderlyingProps> & {\n  underlyingProps: UnderlyingProps;\n  url: string;\n};\n\n/**\n * The wrapped route allows us to apply the basename, document title and accessible route change for all components\n * without having to add these to each component. They must happen inside the route.\n */\nconst WrappedRoute: React.FunctionComponent<WrappedRouteProps> = ({\n  component: Component,\n  isAsync = false,\n  title,\n  underlyingProps,\n  url,\n  ...rest\n}) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  const getBasename = () => {\n    return url;\n  };\n\n  return (\n    <Route\n      render={(routeProps) => {\n        return (\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...underlyingProps} {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        );\n      }}\n      {...rest}\n    />\n  );\n};\n\nconst KafkaRoutes = (): React.ReactElement => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const { adminServerUrl, kafkaDetail } = useKafkaInstance() || {};\n  const routeMatch = useRouteMatch();\n\n  const [error, setError] = useState<undefined | number>();\n  const [isInstanceDrawerOpen, setIsInstanceDrawerOpen] = useState<boolean | undefined>();\n  const [activeDrawerTab, setActiveDrawerTab] = useState<string>('');\n\n  const handleInstanceDrawer = (isOpen: boolean, activeTab?: string) => {\n    activeTab && setActiveDrawerTab(activeTab);\n    setIsInstanceDrawerOpen(isOpen);\n  };\n\n  const onCloseInstanceDrawer = () => {\n    setIsInstanceDrawerOpen(false);\n  };\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  if (kafkaDetail === undefined || kafkaDetail.id === undefined || adminServerUrl === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const redirectAfterDeleteInstance = () => {\n    history.push('/streams/kafkas');\n  };\n\n  const props = {\n    kafkaPageLink: history.createHref({\n      pathname: '/streams/kafkas',\n    }),\n    kafkaInstanceLink: history.createHref({\n      pathname: `/streams/kafkas/${kafkaDetail.id}`,\n    }),\n    showMetrics: <Metrics kafkaId={kafkaDetail.id} />,\n    onError: (code: number) => {\n      setError(code);\n    },\n    kafkaName: kafkaDetail.name,\n    apiBasePath: adminServerUrl,\n    getToken: auth?.kafka.getToken,\n    handleInstanceDrawer,\n    showSchemas: <ServiceRegistrySchemaMapping />,\n    kafka: kafkaDetail,\n    redirectAfterDeleteInstance,\n  } as UnderlyingProps;\n\n  if (error === 401) {\n    return <AccessDeniedPage />;\n  }\n\n  return (\n    <div className=\"app-services-ui--u-display-contents\" data-ouia-app-id=\"dataPlane-streams\">\n      <PrincipalsProvider kafkaInstance={kafkaDetail}>\n        <InstanceDrawer\n          isExpanded={isInstanceDrawerOpen}\n          onClose={onCloseInstanceDrawer}\n          kafkaDetail={kafkaDetail}\n          activeTab={activeDrawerTab}\n        >\n          <Switch>\n            {flattenedRoutes(kafkaRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => {\n              const routePath = `${routeMatch.path}${path}`;\n              console.log(`Creating route for ${routePath}`);\n              return (\n                <WrappedRoute\n                  path={routePath}\n                  exact={exact}\n                  component={component}\n                  key={idx}\n                  title={title}\n                  isAsync={isAsync}\n                  underlyingProps={props}\n                  url={routeMatch.url}\n                  {...rest}\n                />\n              );\n            })}\n            <PageNotFoundRoute title=\"404 Page Not Found\" />\n          </Switch>\n        </InstanceDrawer>\n      </PrincipalsProvider>\n    </div>\n  );\n};\n\nexport { KafkaRoutes, kafkaRoutes };\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { LastLocationProvider } from 'react-router-last-location';\nimport getBaseName from './utils/getBaseName';\nimport { DevelopmentPreview } from '@app/components';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange, } from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport { KafkaRoutes } from \"@app/pages/Kafka/KafkaRoutes\";\nimport { BasenameContext } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nconst QuickStartLoaderFederated = React.lazy(() => import('@app/pages/Resources/QuickStartLoaderFederated'));\n\nconst APIManagementPage = React.lazy(() => import('@app/pages/APIManagement/APIManagementPage'));\nconst ArtifactRedirect = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactsRedirect'));\nconst Artifacts = React.lazy(() => import('@app/pages/ServiceRegistry/Artifacts'));\nconst ArtifactVersionDetails = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactVersion'));\nconst DataSciencePage = React.lazy(() => import('@app/pages/DataScience/DataSciencePage'));\n\nconst KasPage = React.lazy(() => import('@app/pages/Kas/KasPage'));\nconst OverviewPage = React.lazy(() => import('@app/pages/Overview/OverviewPage'));\nconst ResourcesPage = React.lazy(() => import('@app/pages/Resources/ResourcesPage'));\nconst RulesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RulesPage'));\nconst RolesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RolesPage'))\nconst ServiceAccountsPage = React.lazy(() => import('@app/pages/ServiceAccounts/ServiceAccountsPage'));\nconst CosPage = React.lazy(() => import('@app/pages/CosPage/CosPage'));\nconst ServiceRegistryPage = React.lazy(() => import('@app/pages/ServiceRegistry/ServiceRegistryPage'));\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\nconst RedirectToServiceAccounts: React.FunctionComponent = () => <Redirect to=\"/service-accounts\" />;\nconst RedirectToResources: React.FunctionComponent = () => <Redirect to=\"/learning-resources\" />;\n\nconst appRoutes: AppRouteConfig<any>[] = [\n  {\n    component: KafkaRoutes,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas/:id',\n    devPreview: false,\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas',\n    devPreview: false,\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/rules',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: RolesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/roles',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: CosPage,\n    exact: false,\n    label: 'COS',\n    path: '/cos',\n    title: 'COS',\n    basename: `${getBaseName(window.location.pathname)}/cos`,\n    devPreview: true,\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: false,\n  },\n  {\n    component: RedirectToServiceAccounts,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: false,\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    // Handle the redirect for the old url application-services/streams/resources to application-services/learning-resources\n    component: RedirectToResources,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n    devPreview: true,\n\n\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'Learning Resources | Red Hat OpenShift Application Services',\n    path: '/learning-resources',\n    title: 'Learning Resources | Red Hat OpenShift Application Services',\n    devPreview: false,\n  },\n];\n\nconst WrappedRoute: React.FunctionComponent<IAppRoute<any>> = ({\n  component: Component,\n  isAsync = false,\n  title,\n  basename,\n  devPreview,\n  ...rest\n}) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const getBasename = () => {\n    return basename || '';\n  };\n\n  function wrapRoute(routeProps: RouteComponentProps) {\n    return (\n      <DevelopmentPreview show={devPreview}>\n        <BasenameContext.Provider value={{ getBasename }}>\n          <Component {...rest} {...routeProps} />\n        </BasenameContext.Provider>\n      </DevelopmentPreview>\n    );\n  }\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst AppRoutes = (): React.ReactElement => (\n  <>\n    <LastLocationProvider>\n      <React.Suspense fallback={<AppServicesLoading />}>\n        <Switch>\n          {flattenedRoutes(appRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n            <WrappedRoute\n              path={path}\n              exact={exact}\n              component={component}\n              key={idx}\n              title={title}\n              isAsync={isAsync}\n              {...rest}\n            />\n          ))}\n          <PageNotFoundRoute title=\"404 Page Not Found\" />\n        </Switch>\n      </React.Suspense>\n    </LastLocationProvider>\n    <QuickStartLoaderFederated />\n  </>\n);\n\nexport { AppRoutes, appRoutes };\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport './App.scss';\nimport { AppRoutes } from '@app/AppRoutes';\nimport { FederatedModuleProvider } from \"@app/components\";\nimport { useInsights } from \"@app/hooks\";\n\nexport const App: React.FunctionComponent = () => {\n  const insights = useInsights();\n  const history = useHistory();\n\n  const getAppId = () => {\n    const defaultAppId = 'overview';\n\n    const parts = history.location.pathname.split('/');\n    if (parts.length > 1) {\n      if (parts[1] === '') {\n        return defaultAppId;\n      } else {\n        if (parts[1] === 'openshift-streams') {\n          return 'streams';\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal/>\n      <AppRoutes/>\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ComponentType, ReactNode, useEffect, useRef, useState } from 'react';\nimport { AssetsContext } from \"@rhoas/app-services-ui-shared\";\nimport { ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\nimport { useFederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\ndeclare function __webpack_init_sharing__(shareScope: string);\n\ndeclare const __webpack_share_scopes__: {\n  default: unknown;\n};\n\ntype Container = {\n  init: (shareScopes: unknown) => Promise<void>;\n  get: (module: string) => Promise<{ (): { default: ComponentType<any> } }>;\n};\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope] as unknown as Container; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await container.get(module);\n    const Module = factory();\n    console.debug(`loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = (url: string) => {\n  const isMounted = useIsMounted();\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    let element;\n    if (isMounted.current) {\n      if (!url) {\n        setFailed(true);\n        return;\n      }\n\n      element = document.createElement('script');\n\n      element.src = url;\n      element.type = 'text/javascript';\n      element.async = true;\n\n      setReady(false);\n      setFailed(false);\n\n      element.onload = () => {\n        console.log(`Dynamic federated module Loaded: ${url}`);\n        setReady(true);\n      };\n\n      element.onerror = () => {\n        console.error(`Dynamic federated module Error: ${url}`);\n        setReady(false);\n        setFailed(true);\n      };\n\n      document.head.appendChild(element);\n    }\n\n    return () => {\n      if (element) {\n        console.log(`Dynamic federated module Removed: ${url}`);\n        document.head.removeChild(element);\n      }\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed,\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: React.ReactNode;\n};\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n  const isMounted = useIsMounted();\n\n  const { getModuleInfo, modules } = useFederatedModule();\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(\n        modules[scope].basePath,\n        scope,\n        modules[scope].fallbackBasePath\n      );\n      if (isMounted.current) {\n        setModuleInfo(moduleInfo);\n      }\n    };\n    fetchModuleInfo();\n  }, [scope, modules]);\n\n  if (moduleInfo !== undefined) {\n    return <DynamicFederatedModule scope={scope} module={module} render={render} moduleInfo={moduleInfo} />;\n  }\n  if (fallback !== undefined) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n\ntype DynamicFederatedModuleProps = FederatedModuleProps & {\n  moduleInfo: ModuleInfo;\n};\n\nconst DynamicFederatedModule: React.FunctionComponent<DynamicFederatedModuleProps> = ({\n  moduleInfo,\n  fallback,\n  scope,\n  render,\n  module,\n}) => {\n  const { ready, failed } = useDynamicScript(moduleInfo.entryPoint);\n\n  if (ready && !failed) {\n    const Component = React.lazy(loadComponent(scope, module));\n\n    const getPath = () => {\n      return moduleInfo.basePath;\n    };\n\n    return (\n      <AssetsContext.Provider value={{ getPath }}>\n        <React.Suspense fallback={<AppServicesLoading />}>{render(Component)}</React.Suspense>\n      </AssetsContext.Provider>\n    );\n  }\n\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n","import React, { useEffect, useState } from 'react';\nimport { Configuration, KafkaRequest, SecurityApi } from '@rhoas/kafka-management-sdk';\nimport { Principal, PrincipalsContext, PrincipalType, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { PrincipalApi } from '@redhat-cloud-services/rbac-client';\n\nexport type PrincipalsProviderProps = {\n  kafkaInstance?: KafkaRequest;\n};\n\nexport const usePrincipal = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [serviceAccountPrincipals, setServiceAccountPrincipals] = useState<Principal[] | undefined>();\n  const [userAcountPrincipals, setUserAccountPrincipals] = useState<Principal[] | undefined>();\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      if (config !== undefined && auth !== undefined && config.rbac.basePath !== undefined) {\n        const accessToken = await auth.kas.getToken();\n        const principalApi = new PrincipalApi({\n          accessToken,\n          basePath: config?.rbac.basePath,\n        });\n\n        try {\n          const userAccounts = await principalApi.listPrincipals(-1).then((response) =>\n            response.data.data.map((p) => {\n              return {\n                id: p.username,\n                principalType: PrincipalType.UserAccount,\n                displayName: `${p.first_name} ${p.last_name}`,\n                emailAddress: p.email,\n              } as Principal;\n            })\n          );\n          setUserAccountPrincipals(userAccounts);\n        } catch (e) {\n          // temp fix - this API is only available to org admins\n          // needs a proper approach longer term\n        }\n      }\n    };\n    fetchUserAccounts();\n  }, [auth, config]);\n\n  useEffect(() => {\n    const fetchServiceAccounts = async () => {\n      if (config !== undefined && auth !== undefined && config.rbac.basePath !== undefined) {\n        const accessToken = await auth.kas.getToken();\n        const securityApi = new SecurityApi({\n          accessToken,\n          basePath: config.kas.apiBasePath,\n        } as Configuration);\n        const serviceAccounts = await securityApi.getServiceAccounts().then((response) =>\n          response.data.items.map((sa) => {\n            return {\n              id: sa.client_id,\n              displayName: sa.name,\n              principalType: PrincipalType.ServiceAccount,\n            } as Principal;\n          })\n        );\n\n        setServiceAccountPrincipals(serviceAccounts);\n      }\n    };\n    fetchServiceAccounts();\n  }, [auth, config]);\n\n  const value = {\n    getAllPrincipals: () => {\n      let answer: Principal[] = [];\n      if (userAcountPrincipals !== undefined && serviceAccountPrincipals !== undefined) {\n        answer = answer.concat(userAcountPrincipals);\n      }\n      if (serviceAccountPrincipals !== undefined) {\n        answer = answer.concat(serviceAccountPrincipals);\n      }\n      return answer;\n    },\n    getAllUserAccounts: () => {\n      return userAcountPrincipals;\n    },\n    getAllServiceAccounts: () => {\n      return serviceAccountPrincipals;\n    },\n  };\n\n  return value;\n};\n\nexport const PrincipalsProvider: React.FunctionComponent<PrincipalsProviderProps> = ({ children }) => {\n  const { getAllPrincipals } = usePrincipal();\n  return <PrincipalsContext.Provider value={{ getAllPrincipals }}>{children}</PrincipalsContext.Provider>;\n};\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useHistory } from 'react-router-dom';\n\ntype InstanceDrawerProps = {\n  kafkaDetail: KafkaRequest | undefined;\n  isExpanded: boolean | undefined;\n  activeTab: string;\n  onClose: () => void;\n};\n\nexport const InstanceDrawer: React.FC<InstanceDrawerProps> = ({\n  isExpanded,\n  onClose,\n  kafkaDetail,\n  activeTab,\n  children,\n}) => {\n  const config = useConfig();\n  const history = useHistory();\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  const onDeleteInstance = () => {\n    history.push('/streams/kafkas');\n  };\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={children}\n      render={(InstanceDrawerFederated) => {\n        return (\n          <InstanceDrawerFederated\n            tokenEndPointUrl={tokenEndPointUrl}\n            isExpanded={isExpanded}\n            onClose={onClose}\n            instanceDetail={kafkaDetail}\n            activeTab={activeTab}\n            onDeleteInstance={onDeleteInstance}\n          >\n            {children}\n          </InstanceDrawerFederated>\n        );\n      }}\n    />\n  );\n};\n","export type ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nexport type FetchModuleInfoFunction = {\n  (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined>\n}\n\nexport const fetchModuleInfo: FetchModuleInfoFunction = async (baseUrl, scope, fallbackBasePath) => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n","import React, { useRef } from \"react\";\nimport { FederatedModuleConfig, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { fetchModuleInfo, FetchModuleInfoFunction, ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\n\nexport type FederatedModuleContextProps = {\n  modules: {\n    [module: string]: FederatedModuleConfig\n  };\n  getModuleInfo: FetchModuleInfoFunction;\n}\n\nexport const FederatedModuleContext = React.createContext<FederatedModuleContextProps | undefined>(undefined);\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  type ModuleInfoCache = {\n    [key:string]: ModuleInfo\n  }\n\n  const moduleInfoCache = useRef<ModuleInfoCache>({} as ModuleInfoCache );\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <AppServicesLoading/>;\n  }\n\n  const getModuleInfo: FetchModuleInfoFunction = async ( baseUrl,scope, fallbackBasePath) => {\n    if (moduleInfoCache.current[scope] !== undefined) {\n      return moduleInfoCache.current[scope];\n    }\n    const answer = await fetchModuleInfo(baseUrl, scope, fallbackBasePath);\n    if (answer !== undefined) {\n      moduleInfoCache.current[scope] = answer;\n    }\n    return answer;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={{\n      modules: config.federatedModules,\n      getModuleInfo\n    }}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nexport const useFederatedModule = (): FederatedModuleContextProps => {\n  const answer = React.useContext(FederatedModuleContext);\n  if (answer === undefined) {\n    throw new Error('must be used inside FederatedModuleContext provider');\n  }\n  return answer;\n}\n","import React from 'react';\nimport { Banner, Bullseye, Button, Popover } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type DevelopmentPreviewProps = {\n  show?: boolean\n}\n\nexport const DevelopmentPreview: React.FunctionComponent<DevelopmentPreviewProps> = ({ children, show }) => {\n  const { t } = useTranslation();\n  if (show) {\n    return <div id='scrollablePageMain' className='pf-c-page__main' style={{ height: '100%' }}>\n      <Banner isSticky variant=\"info\">\n        <Bullseye>\n          <Popover\n            aria-label=\"Development Preview Button\"\n            hasAutoWidth\n            bodyContent={\n              <div>{t('common.developmentPreviewTooltip')}</div>\n            }\n            position='bottom'\n            minWidth='300px'\n            maxWidth='25%'>\n            <Button className='app-services-ui--button--dev-preview' variant='link'>{t('common.developmentPreview')}</Button>\n          </Popover>\n        </Bullseye>\n      </Banner>\n      {children}\n    </div>\n  }\n  return (\n    <>{children}</>\n  )\n}\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\n\nexport const KasModalLoader: React.FC = ({ children }) => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./KasModalLoader\"\n      fallback={null}\n      render={(KasModalLoaderFederated) => {\n        return <KasModalLoaderFederated>{children}</KasModalLoaderFederated>;\n      }}\n    />\n  );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n *\n * @export\n * @interface AccessReview\n */\nexport interface AccessReview {\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  action: AccessReviewActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  resource_type: AccessReviewResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface AccessReviewResponse\n */\nexport interface AccessReviewResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  action?: AccessReviewResponseActionEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccessReviewResponse\n   */\n  allowed: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  resource_type?: AccessReviewResponseResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResponseActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResponseResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface AccessTokenCfg\n */\nexport interface AccessTokenCfg {\n  /**\n   *\n   * @type {{ [key: string]: object; }}\n   * @memberof AccessTokenCfg\n   */\n  auths: { [key: string]: object };\n}\n/**\n *\n * @export\n * @interface Account\n */\nexport interface Account {\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Account\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Account\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Account\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {Organization}\n   * @memberof Account\n   */\n  organization?: Organization;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Account\n   */\n  service_account?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  username: string;\n}\n/**\n *\n * @export\n * @interface AccountAllOf\n */\nexport interface AccountAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountAllOf\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof AccountAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof AccountAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {Organization}\n   * @memberof AccountAllOf\n   */\n  organization?: Organization;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountAllOf\n   */\n  service_account?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  username: string;\n}\n/**\n *\n * @export\n * @interface AccountList\n */\nexport interface AccountList {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof AccountList\n   */\n  items: Array<Account>;\n}\n/**\n *\n * @export\n * @interface AccountListAllOf\n */\nexport interface AccountListAllOf {\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof AccountListAllOf\n   */\n  items?: Array<Account>;\n}\n/**\n *\n * @export\n * @interface AccountPatchRequest\n */\nexport interface AccountPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountPatchRequest\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountPatchRequest\n   */\n  service_account?: boolean;\n}\n/**\n *\n * @export\n * @interface AccountReference\n */\nexport interface AccountReference {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface AccountReferenceAllOf\n */\nexport interface AccountReferenceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface Capability\n */\nexport interface Capability {\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Capability\n   */\n  inherited: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface CapabilityAllOf\n */\nexport interface CapabilityAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof CapabilityAllOf\n   */\n  inherited: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityAllOf\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityAllOf\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface CapabilityReview\n */\nexport interface CapabilityReview {\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReview\n   */\n  result: string;\n}\n/**\n *\n * @export\n * @interface CapabilityReviewRequest\n */\nexport interface CapabilityReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  capability: CapabilityReviewRequestCapabilityEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  type: CapabilityReviewRequestTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum CapabilityReviewRequestCapabilityEnum {\n  ManageClusterAdmin = 'manage_cluster_admin',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum CapabilityReviewRequestTypeEnum {\n  Cluster = 'Cluster',\n}\n\n/**\n *\n * @export\n * @interface ClusterAuthorizationRequest\n */\nexport interface ClusterAuthorizationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  availability_zone?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  byoc?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cluster_id: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  disconnected?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  product_category?: ClusterAuthorizationRequestProductCategoryEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  product_id?: ClusterAuthorizationRequestProductIdEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  reserve?: boolean;\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ClusterAuthorizationRequest\n   */\n  resources?: Array<ReservedResource>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ClusterAuthorizationRequestProductCategoryEnum {\n  AssistedInstall = 'assistedInstall',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ClusterAuthorizationRequestProductIdEnum {\n  Ocp = 'ocp',\n  Osd = 'osd',\n  Osdtrial = 'osdtrial',\n  Moa = 'moa',\n  Rhmi = 'rhmi',\n}\n\n/**\n *\n * @export\n * @interface ClusterAuthorizationResponse\n */\nexport interface ClusterAuthorizationResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationResponse\n   */\n  allowed: boolean;\n  /**\n   *\n   * @type {Array<ExcessResource>}\n   * @memberof ClusterAuthorizationResponse\n   */\n  excess_resources: Array<ExcessResource>;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationResponse\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ClusterAuthorizationResponse\n   */\n  subscription?: ObjectReference;\n}\n/**\n *\n * @export\n * @interface ClusterMetricsNodes\n */\nexport interface ClusterMetricsNodes {\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  compute?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  infra?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  master?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  total?: number;\n}\n/**\n *\n * @export\n * @interface ClusterRegistrationRequest\n */\nexport interface ClusterRegistrationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationRequest\n   */\n  authorization_token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationRequest\n   */\n  cluster_id?: string;\n}\n/**\n *\n * @export\n * @interface ClusterRegistrationResponse\n */\nexport interface ClusterRegistrationResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  authorization_token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  cluster_id?: string;\n  /**\n   * Cluster Registration expiration in Unix time\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  expires_at?: string;\n}\n/**\n *\n * @export\n * @interface ClusterResource\n */\nexport interface ClusterResource {\n  /**\n   *\n   * @type {ClusterResourceTotal}\n   * @memberof ClusterResource\n   */\n  total: ClusterResourceTotal;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterResource\n   */\n  updated_timestamp: string;\n  /**\n   *\n   * @type {ClusterResourceTotal}\n   * @memberof ClusterResource\n   */\n  used: ClusterResourceTotal;\n}\n/**\n *\n * @export\n * @interface ClusterResourceTotal\n */\nexport interface ClusterResourceTotal {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterResourceTotal\n   */\n  unit: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterResourceTotal\n   */\n  value: number;\n}\n/**\n *\n * @export\n * @interface ClusterUpgrade\n */\nexport interface ClusterUpgrade {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterUpgrade\n   */\n  available?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  updated_timestamp?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  version?: string;\n}\n/**\n *\n * @export\n * @interface EphemeralResourceQuota\n */\nexport interface EphemeralResourceQuota {\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof EphemeralResourceQuota\n   */\n  byoc?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EphemeralResourceQuota\n   */\n  sku_count?: number;\n}\n/**\n *\n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  operation_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  reason?: string;\n}\n/**\n *\n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Error>}\n   * @memberof ErrorList\n   */\n  items: Array<Error>;\n}\n/**\n *\n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n  /**\n   *\n   * @type {Array<Error>}\n   * @memberof ErrorListAllOf\n   */\n  items?: Array<Error>;\n}\n/**\n *\n * @export\n * @interface ExcessResource\n */\nexport interface ExcessResource {\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExcessResource\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ExcessResource\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  resource_type?: string;\n}\n/**\n *\n * @export\n * @interface ExcessResourceAllOf\n */\nexport interface ExcessResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExcessResourceAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ExcessResourceAllOf\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  resource_type?: string;\n}\n/**\n *\n * @export\n * @interface ExportControlReview\n */\nexport interface ExportControlReview {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExportControlReview\n   */\n  restricted: boolean;\n}\n/**\n *\n * @export\n * @interface ExportControlReviewRequest\n */\nexport interface ExportControlReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ExportControlReviewRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExportControlReviewRequest\n   */\n  ignore_cache?: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureReview\n */\nexport interface FeatureReview {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReview\n   */\n  feature: string;\n}\n/**\n *\n * @export\n * @interface FeatureReviewResponse\n */\nexport interface FeatureReviewResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureReviewResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReviewResponse\n   */\n  feature_id: string;\n}\n/**\n *\n * @export\n * @interface FeatureToggle\n */\nexport interface FeatureToggle {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureToggle\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureToggleAllOf\n */\nexport interface FeatureToggleAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureToggleAllOf\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureToggleQueryRequest\n */\nexport interface FeatureToggleQueryRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggleQueryRequest\n   */\n  organization_id: string;\n}\n/**\n *\n * @export\n * @interface FeatureToggleQueryRequestAllOf\n */\nexport interface FeatureToggleQueryRequestAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggleQueryRequestAllOf\n   */\n  organization_id: string;\n}\n/**\n *\n * @export\n * @interface Label\n */\nexport interface Label {\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Label\n   */\n  internal: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  key: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface LabelAllOf\n */\nexport interface LabelAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof LabelAllOf\n   */\n  internal: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  key: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface LabelList\n */\nexport interface LabelList {\n  /**\n   *\n   * @type {string}\n   * @memberof LabelList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof LabelList\n   */\n  items: Array<Label>;\n}\n/**\n *\n * @export\n * @interface LabelListAllOf\n */\nexport interface LabelListAllOf {\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof LabelListAllOf\n   */\n  items?: Array<Label>;\n}\n/**\n *\n * @export\n * @interface List\n */\nexport interface List {\n  /**\n   *\n   * @type {string}\n   * @memberof List\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  total: number;\n}\n/**\n *\n * @export\n * @interface Metric\n */\nexport interface Metric {\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  health_state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  metrics?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  query_timestamp?: string;\n}\n/**\n *\n * @export\n * @interface MetricAllOf\n */\nexport interface MetricAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  health_state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  metrics?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  query_timestamp?: string;\n}\n/**\n *\n * @export\n * @interface MetricsList\n */\nexport interface MetricsList {\n  /**\n   *\n   * @type {string}\n   * @memberof MetricsList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Metric>}\n   * @memberof MetricsList\n   */\n  items: Array<Metric>;\n}\n/**\n *\n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n  /**\n   *\n   * @type {Array<Metric>}\n   * @memberof MetricsListAllOf\n   */\n  items?: Array<Metric>;\n}\n/**\n *\n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  operation_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  reason?: string;\n}\n/**\n *\n * @export\n * @interface NotificationContactCreateRequest\n */\nexport interface NotificationContactCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationContactCreateRequest\n   */\n  account_identifier?: string;\n}\n/**\n *\n * @export\n * @interface NotificationRequest\n */\nexport interface NotificationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  bcc_address?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof NotificationRequest\n   */\n  include_red_hat_associates?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  subject?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  template_name: string;\n  /**\n   *\n   * @type {Array<TemplateParameter>}\n   * @memberof NotificationRequest\n   */\n  template_parameters?: Array<TemplateParameter>;\n}\n/**\n *\n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  kind?: string;\n}\n/**\n *\n * @export\n * @interface OneMetric\n */\nexport interface OneMetric {\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  cluster_type: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_cpu: ClusterResource;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_memory: ClusterResource;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_sockets: ClusterResource;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  console_url: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  cpu: ClusterResource;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  critical_alerts_firing: number;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  health_state?: OneMetricHealthStateEnum;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  memory: ClusterResource;\n  /**\n   *\n   * @type {ClusterMetricsNodes}\n   * @memberof OneMetric\n   */\n  nodes: ClusterMetricsNodes;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  openshift_version: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  operating_system: string;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  operators_condition_failing: number;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  query_timestamp?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  region: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  sockets: ClusterResource;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  state: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  state_description: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  storage: ClusterResource;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_cpu_total: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_obligation_exists: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_socket_total: number;\n  /**\n   *\n   * @type {ClusterUpgrade}\n   * @memberof OneMetric\n   */\n  upgrade: ClusterUpgrade;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum OneMetricHealthStateEnum {\n  Healthy = 'healthy',\n  Unhealthy = 'unhealthy',\n  Unknown = 'unknown',\n}\n\n/**\n *\n * @export\n * @interface Organization\n */\nexport interface Organization {\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  kind?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Organization\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Organization\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface OrganizationAllOf\n */\nexport interface OrganizationAllOf {\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof OrganizationAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof OrganizationAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface OrganizationList\n */\nexport interface OrganizationList {\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Organization>}\n   * @memberof OrganizationList\n   */\n  items: Array<Organization>;\n}\n/**\n *\n * @export\n * @interface OrganizationListAllOf\n */\nexport interface OrganizationListAllOf {\n  /**\n   *\n   * @type {Array<Organization>}\n   * @memberof OrganizationListAllOf\n   */\n  items?: Array<Organization>;\n}\n/**\n *\n * @export\n * @interface OrganizationPatchRequest\n */\nexport interface OrganizationPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface Permission\n */\nexport interface Permission {\n  /**\n   *\n   * @type {string}\n   * @memberof Permission\n   */\n  action?: PermissionActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Permission\n   */\n  resource?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum PermissionActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n\n/**\n *\n * @export\n * @interface PermissionAllOf\n */\nexport interface PermissionAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionAllOf\n   */\n  action?: PermissionAllOfActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionAllOf\n   */\n  resource?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum PermissionAllOfActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n\n/**\n *\n * @export\n * @interface PermissionList\n */\nexport interface PermissionList {\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof PermissionList\n   */\n  items: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface PermissionListAllOf\n */\nexport interface PermissionListAllOf {\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof PermissionListAllOf\n   */\n  items?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface Plan\n */\nexport interface Plan {\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  category?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface PlanAllOf\n */\nexport interface PlanAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  category?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface PlanList\n */\nexport interface PlanList {\n  /**\n   *\n   * @type {string}\n   * @memberof PlanList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Plan>}\n   * @memberof PlanList\n   */\n  items: Array<Plan>;\n}\n/**\n *\n * @export\n * @interface PlanListAllOf\n */\nexport interface PlanListAllOf {\n  /**\n   *\n   * @type {Array<Plan>}\n   * @memberof PlanListAllOf\n   */\n  items?: Array<Plan>;\n}\n/**\n *\n * @export\n * @interface PullSecretRequest\n */\nexport interface PullSecretRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof PullSecretRequest\n   */\n  external_resource_id: string;\n}\n/**\n *\n * @export\n * @interface QuotaCost\n */\nexport interface QuotaCost {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCost\n   */\n  allowed: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCost\n   */\n  consumed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  quota_id: string;\n  /**\n   *\n   * @type {Array<RelatedResource>}\n   * @memberof QuotaCost\n   */\n  related_resources?: Array<RelatedResource>;\n}\n/**\n *\n * @export\n * @interface QuotaCostAllOf\n */\nexport interface QuotaCostAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostAllOf\n   */\n  allowed: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostAllOf\n   */\n  consumed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostAllOf\n   */\n  quota_id: string;\n  /**\n   *\n   * @type {Array<RelatedResource>}\n   * @memberof QuotaCostAllOf\n   */\n  related_resources?: Array<RelatedResource>;\n}\n/**\n *\n * @export\n * @interface QuotaCostList\n */\nexport interface QuotaCostList {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<QuotaCost>}\n   * @memberof QuotaCostList\n   */\n  items: Array<QuotaCost>;\n}\n/**\n *\n * @export\n * @interface QuotaCostListAllOf\n */\nexport interface QuotaCostListAllOf {\n  /**\n   *\n   * @type {Array<QuotaCost>}\n   * @memberof QuotaCostListAllOf\n   */\n  items?: Array<QuotaCost>;\n}\n/**\n *\n * @export\n * @interface QuotaSummary\n */\nexport interface QuotaSummary {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummary\n   */\n  allowed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof QuotaSummary\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummary\n   */\n  reserved: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryAllOf\n */\nexport interface QuotaSummaryAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryAllOf\n   */\n  allowed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof QuotaSummaryAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryAllOf\n   */\n  reserved: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryList\n */\nexport interface QuotaSummaryList {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<QuotaSummary>}\n   * @memberof QuotaSummaryList\n   */\n  items: Array<QuotaSummary>;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryListAllOf\n */\nexport interface QuotaSummaryListAllOf {\n  /**\n   *\n   * @type {Array<QuotaSummary>}\n   * @memberof QuotaSummaryListAllOf\n   */\n  items?: Array<QuotaSummary>;\n}\n/**\n *\n * @export\n * @interface Registry\n */\nexport interface Registry {\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Registry\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RegistryAllOf\n */\nexport interface RegistryAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryAllOf\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCreateRequest\n */\nexport interface RegistryCreateRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryCreateRequest\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  url: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredential\n */\nexport interface RegistryCredential {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  kind?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredential\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredential\n   */\n  registry?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialAllOf\n */\nexport interface RegistryCredentialAllOf {\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredentialAllOf\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredentialAllOf\n   */\n  registry?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialList\n */\nexport interface RegistryCredentialList {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<RegistryCredential>}\n   * @memberof RegistryCredentialList\n   */\n  items: Array<RegistryCredential>;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialListAllOf\n */\nexport interface RegistryCredentialListAllOf {\n  /**\n   *\n   * @type {Array<RegistryCredential>}\n   * @memberof RegistryCredentialListAllOf\n   */\n  items?: Array<RegistryCredential>;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialPatchRequest\n */\nexport interface RegistryCredentialPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  registry_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryList\n */\nexport interface RegistryList {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Registry>}\n   * @memberof RegistryList\n   */\n  items: Array<Registry>;\n}\n/**\n *\n * @export\n * @interface RegistryListAllOf\n */\nexport interface RegistryListAllOf {\n  /**\n   *\n   * @type {Array<Registry>}\n   * @memberof RegistryListAllOf\n   */\n  items?: Array<Registry>;\n}\n/**\n *\n * @export\n * @interface RegistryRequest\n */\nexport interface RegistryRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryRequest\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RelatedResource\n */\nexport interface RelatedResource {\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  billing_model: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  byoc: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RelatedResource\n   */\n  cost: number;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  product: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  product_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface RelatedResourceAllOf\n */\nexport interface RelatedResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  billing_model: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  byoc: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RelatedResourceAllOf\n   */\n  cost: number;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  product: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  product_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface ReservedResource\n */\nexport interface ReservedResource {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResource\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResource\n   */\n  cluster?: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResource\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ReservedResource\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface ReservedResourceAllOf\n */\nexport interface ReservedResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResourceAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResourceAllOf\n   */\n  cluster?: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceAllOf\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ReservedResourceAllOf\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface ReservedResourceList\n */\nexport interface ReservedResourceList {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ReservedResourceList\n   */\n  items: Array<ReservedResource>;\n}\n/**\n *\n * @export\n * @interface ReservedResourceListAllOf\n */\nexport interface ReservedResourceListAllOf {\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ReservedResourceListAllOf\n   */\n  items?: Array<ReservedResource>;\n}\n/**\n *\n * @export\n * @interface ResourceQuota\n */\nexport interface ResourceQuota {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  resource_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuota\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  type?: ResourceQuotaTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceQuotaAllOf\n */\nexport interface ResourceQuotaAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  resource_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaAllOf\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  type?: ResourceQuotaAllOfTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaAllOfTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceQuotaList\n */\nexport interface ResourceQuotaList {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<ResourceQuota>}\n   * @memberof ResourceQuotaList\n   */\n  items: Array<ResourceQuota>;\n}\n/**\n *\n * @export\n * @interface ResourceQuotaListAllOf\n */\nexport interface ResourceQuotaListAllOf {\n  /**\n   *\n   * @type {Array<ResourceQuota>}\n   * @memberof ResourceQuotaListAllOf\n   */\n  items?: Array<ResourceQuota>;\n}\n/**\n *\n * @export\n * @interface ResourceQuotaRequest\n */\nexport interface ResourceQuotaRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaRequest\n   */\n  sku: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaRequest\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaRequest\n   */\n  type?: ResourceQuotaRequestTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaRequestTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceReview\n */\nexport interface ResourceReview {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  action: ResourceReviewActionEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  cluster_ids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  cluster_uuids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  organization_ids: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  resource_type: ResourceReviewResourceTypeEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  subscription_ids: Array<string>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceReviewRequest\n */\nexport interface ResourceReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  account_username?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  action?: ResourceReviewRequestActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  resource_type?: ResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewRequestActionEnum {\n  Get = 'get',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewRequestResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface Role\n */\nexport interface Role {\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof Role\n   */\n  permissions?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface RoleAllOf\n */\nexport interface RoleAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof RoleAllOf\n   */\n  permissions?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface RoleBinding\n */\nexport interface RoleBinding {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  kind?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBinding\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  organization?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  role?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  type?: RoleBindingTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum RoleBindingTypeEnum {\n  Application = 'Application',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n}\n\n/**\n *\n * @export\n * @interface RoleBindingAllOf\n */\nexport interface RoleBindingAllOf {\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingAllOf\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  organization?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  role?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  type?: RoleBindingAllOfTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum RoleBindingAllOfTypeEnum {\n  Application = 'Application',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n}\n\n/**\n *\n * @export\n * @interface RoleBindingCreateRequest\n */\nexport interface RoleBindingCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  account_id: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingCreateRequest\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  role_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface RoleBindingList\n */\nexport interface RoleBindingList {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<RoleBinding>}\n   * @memberof RoleBindingList\n   */\n  items: Array<RoleBinding>;\n}\n/**\n *\n * @export\n * @interface RoleBindingListAllOf\n */\nexport interface RoleBindingListAllOf {\n  /**\n   *\n   * @type {Array<RoleBinding>}\n   * @memberof RoleBindingListAllOf\n   */\n  items?: Array<RoleBinding>;\n}\n/**\n *\n * @export\n * @interface RoleBindingRequest\n */\nexport interface RoleBindingRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingRequest\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  role_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface RoleList\n */\nexport interface RoleList {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Role>}\n   * @memberof RoleList\n   */\n  items: Array<Role>;\n}\n/**\n *\n * @export\n * @interface RoleListAllOf\n */\nexport interface RoleListAllOf {\n  /**\n   *\n   * @type {Array<Role>}\n   * @memberof RoleListAllOf\n   */\n  items?: Array<Role>;\n}\n/**\n *\n * @export\n * @interface SKU\n */\nexport interface SKU {\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SKU\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {Array<EphemeralResourceQuota>}\n   * @memberof SKU\n   */\n  resources?: Array<EphemeralResourceQuota>;\n}\n/**\n *\n * @export\n * @interface SKUAllOf\n */\nexport interface SKUAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SKUAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {Array<EphemeralResourceQuota>}\n   * @memberof SKUAllOf\n   */\n  resources?: Array<EphemeralResourceQuota>;\n}\n/**\n *\n * @export\n * @interface SelfAccessReview\n */\nexport interface SelfAccessReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  action: SelfAccessReviewActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  resource_type: SelfAccessReviewResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfAccessReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfAccessReviewResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface SelfFeatureReview\n */\nexport interface SelfFeatureReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfFeatureReview\n   */\n  feature: string;\n}\n/**\n *\n * @export\n * @interface SelfResourceReview\n */\nexport interface SelfResourceReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReview\n   */\n  action: SelfResourceReviewActionEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  cluster_ids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  cluster_uuids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  organization_ids: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReview\n   */\n  resource_type: SelfResourceReviewResourceTypeEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  subscription_ids: Array<string>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface SelfResourceReviewRequest\n */\nexport interface SelfResourceReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReviewRequest\n   */\n  action?: SelfResourceReviewRequestActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReviewRequest\n   */\n  resource_type?: SelfResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewRequestActionEnum {\n  Get = 'get',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewRequestResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface SelfTermsReview\n */\nexport interface SelfTermsReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfTermsReview\n   */\n  event_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfTermsReview\n   */\n  site_code?: string;\n}\n/**\n *\n * @export\n * @interface SkuList\n */\nexport interface SkuList {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<SKU>}\n   * @memberof SkuList\n   */\n  items: Array<SKU>;\n}\n/**\n *\n * @export\n * @interface SkuListAllOf\n */\nexport interface SkuListAllOf {\n  /**\n   *\n   * @type {Array<SKU>}\n   * @memberof SkuListAllOf\n   */\n  items?: Array<SKU>;\n}\n/**\n *\n * @export\n * @interface SkuRules\n */\nexport interface SkuRules {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRules\n   */\n  allowed?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  quota_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  sku?: string;\n}\n/**\n *\n * @export\n * @interface SkuRulesAllOf\n */\nexport interface SkuRulesAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesAllOf\n   */\n  allowed?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesAllOf\n   */\n  quota_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesAllOf\n   */\n  sku?: string;\n}\n/**\n *\n * @export\n * @interface SkuRulesList\n */\nexport interface SkuRulesList {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<SkuRules>}\n   * @memberof SkuRulesList\n   */\n  items: Array<SkuRules>;\n}\n/**\n *\n * @export\n * @interface SkuRulesListAllOf\n */\nexport interface SkuRulesListAllOf {\n  /**\n   *\n   * @type {Array<SkuRules>}\n   * @memberof SkuRulesListAllOf\n   */\n  items?: Array<SkuRules>;\n}\n/**\n *\n * @export\n * @interface Subscription\n */\nexport interface Subscription {\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  kind?: string;\n  /**\n   * If set, the date the subscription expires based on the billing model\n   * @type {string}\n   * @memberof Subscription\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Subscription\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cluster_billing_model?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof Subscription\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {AccountReference}\n   * @memberof Subscription\n   */\n  creator?: AccountReference;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Subscription\n   */\n  labels?: Array<Label>;\n  /**\n   * Last time this subscription were reconciled about cluster usage\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_reconcile_date?: string;\n  /**\n   * Last time status was set to Released for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_released_at?: string;\n  /**\n   * Last telemetry authorization request for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_telemetry_date?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Subscription\n   */\n  managed: boolean;\n  /**\n   *\n   * @type {Array<OneMetric>}\n   * @memberof Subscription\n   */\n  metrics?: Array<OneMetric>;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof Subscription\n   */\n  notification_contacts?: Array<Account>;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {Plan}\n   * @memberof Subscription\n   */\n  plan?: Plan;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  product_bundle?: SubscriptionProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Subscription\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  service_level?: SubscriptionServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof Subscription\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  support_level?: SubscriptionSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  system_units?: SubscriptionSystemUnitsEnum;\n  /**\n   * If the subscription is a trial, date the trial ends\n   * @type {string}\n   * @memberof Subscription\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  usage?: SubscriptionUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionAllOf\n */\nexport interface SubscriptionAllOf {\n  /**\n   * If set, the date the subscription expires based on the billing model\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof SubscriptionAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cluster_billing_model?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionAllOf\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {AccountReference}\n   * @memberof SubscriptionAllOf\n   */\n  creator?: AccountReference;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof SubscriptionAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   * Last time this subscription were reconciled about cluster usage\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_reconcile_date?: string;\n  /**\n   * Last time status was set to Released for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_released_at?: string;\n  /**\n   * Last telemetry authorization request for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_telemetry_date?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionAllOf\n   */\n  managed: boolean;\n  /**\n   *\n   * @type {Array<OneMetric>}\n   * @memberof SubscriptionAllOf\n   */\n  metrics?: Array<OneMetric>;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof SubscriptionAllOf\n   */\n  notification_contacts?: Array<Account>;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {Plan}\n   * @memberof SubscriptionAllOf\n   */\n  plan?: Plan;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  product_bundle?: SubscriptionAllOfProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionAllOf\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  service_level?: SubscriptionAllOfServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionAllOf\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  support_level?: SubscriptionAllOfSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  system_units?: SubscriptionAllOfSystemUnitsEnum;\n  /**\n   * If the subscription is a trial, date the trial ends\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  usage?: SubscriptionAllOfUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionCreateRequest\n */\nexport interface SubscriptionCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  cluster_uuid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  plan_id: SubscriptionCreateRequestPlanIdEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  status: SubscriptionCreateRequestStatusEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionCreateRequestPlanIdEnum {\n  Ocp = 'OCP',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionCreateRequestStatusEnum {\n  Disconnected = 'Disconnected',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionList\n */\nexport interface SubscriptionList {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Subscription>}\n   * @memberof SubscriptionList\n   */\n  items: Array<Subscription>;\n}\n/**\n *\n * @export\n * @interface SubscriptionListAllOf\n */\nexport interface SubscriptionListAllOf {\n  /**\n   *\n   * @type {Array<Subscription>}\n   * @memberof SubscriptionListAllOf\n   */\n  items?: Array<Subscription>;\n}\n/**\n *\n * @export\n * @interface SubscriptionPatchRequest\n */\nexport interface SubscriptionPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cluster_billing_model?: SubscriptionPatchRequestClusterBillingModelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionPatchRequest\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  creator_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionPatchRequest\n   */\n  managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  plan_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  product_bundle?: SubscriptionPatchRequestProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionPatchRequest\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  service_level?: SubscriptionPatchRequestServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionPatchRequest\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  support_level?: SubscriptionPatchRequestSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  system_units?: SubscriptionPatchRequestSystemUnitsEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  usage?: SubscriptionPatchRequestUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestClusterBillingModelEnum {\n  Standard = 'standard',\n  Marketplace = 'marketplace',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface Summary\n */\nexport interface Summary {\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  kind?: string;\n  /**\n   *\n   * @type {Array<SummaryMetrics>}\n   * @memberof Summary\n   */\n  metrics: Array<SummaryMetrics>;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface SummaryAllOf\n */\nexport interface SummaryAllOf {\n  /**\n   *\n   * @type {Array<SummaryMetrics>}\n   * @memberof SummaryAllOf\n   */\n  metrics: Array<SummaryMetrics>;\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryAllOf\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface SummaryMetrics\n */\nexport interface SummaryMetrics {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryMetrics\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<SummaryVector>}\n   * @memberof SummaryMetrics\n   */\n  vector?: Array<SummaryVector>;\n}\n/**\n *\n * @export\n * @interface SummaryMetricsAllOf\n */\nexport interface SummaryMetricsAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryMetricsAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<SummaryVector>}\n   * @memberof SummaryMetricsAllOf\n   */\n  vector?: Array<SummaryVector>;\n}\n/**\n *\n * @export\n * @interface SummaryVector\n */\nexport interface SummaryVector {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryVector\n   */\n  time?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SummaryVector\n   */\n  value?: number;\n}\n/**\n *\n * @export\n * @interface SummaryVectorAllOf\n */\nexport interface SummaryVectorAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryVectorAllOf\n   */\n  time?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SummaryVectorAllOf\n   */\n  value?: number;\n}\n/**\n *\n * @export\n * @interface SupportCasesCreatedResponse\n */\nexport interface SupportCasesCreatedResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  caseNumber?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  description?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  severity?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  summary?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  uri?: string;\n}\n/**\n *\n * @export\n * @interface SupportCasesRequest\n */\nexport interface SupportCasesRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  account_number?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  case_language?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  contact_sso_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  description: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  event_stream_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  openshift_cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  product?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  severity: SupportCasesRequestSeverityEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  summary: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  version?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SupportCasesRequestSeverityEnum {\n  _1Urgent = '1 (Urgent)',\n  _2High = '2 (High)',\n  _3Normal = '3 (Normal)',\n  _4Low = '4 (Low)',\n}\n\n/**\n *\n * @export\n * @interface TemplateParameter\n */\nexport interface TemplateParameter {\n  /**\n   *\n   * @type {string}\n   * @memberof TemplateParameter\n   */\n  content: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TemplateParameter\n   */\n  name: string;\n}\n/**\n *\n * @export\n * @interface TermsReview\n */\nexport interface TermsReview {\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  event_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  site_code?: string;\n}\n/**\n *\n * @export\n * @interface TermsReviewResponse\n */\nexport interface TermsReviewResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  account_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  organization_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  redirect_url?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof TermsReviewResponse\n   */\n  terms_available: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof TermsReviewResponse\n   */\n  terms_required: boolean;\n}\n/**\n *\n * @export\n * @interface TokenAuthorizationRequest\n */\nexport interface TokenAuthorizationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof TokenAuthorizationRequest\n   */\n  authorization_token?: string;\n}\n/**\n *\n * @export\n * @interface TokenAuthorizationResponse\n */\nexport interface TokenAuthorizationResponse {\n  /**\n   *\n   * @type {Account}\n   * @memberof TokenAuthorizationResponse\n   */\n  account?: Account;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccessTokenPost: async (options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/access_token`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdGet: async (\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdPatch: async (\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id);\n      // verify required parameter 'accountPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsPost: async (\n      account: Account,\n      dryRun?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'account' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (dryRun !== undefined) {\n        localVarQueryParameter['dryRun'] = dryRun;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost: async (\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'clusterAuthorizationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1ClusterAuthorizationsPost',\n        'clusterAuthorizationRequest',\n        clusterAuthorizationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        clusterAuthorizationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost: async (\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'clusterRegistrationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1ClusterRegistrationsPost',\n        'clusterRegistrationRequest',\n        clusterRegistrationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        clusterRegistrationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1CurrentAccountGet: async (fetchLabels?: boolean, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/current_account`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/errors`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id);\n      // verify required parameter 'featureToggleQueryRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1FeatureTogglesIdQueryPost',\n        'featureToggleQueryRequest',\n        featureToggleQueryRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        featureToggleQueryRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1LabelsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/labels`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1MetricsGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/metrics`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1NotifyPost: async (\n      notificationRequest: NotificationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'notificationRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/notify`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdGet: async (\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch: async (\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id);\n      // verify required parameter 'organizationPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        organizationPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (\n      id: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: async (\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fetchRelatedResources !== undefined) {\n        localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet: async (\n      orgId: string,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_summary`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId);\n      // verify required parameter 'resourceQuotaRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost',\n        'resourceQuotaRequest',\n        resourceQuotaRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (\n      orgId: string,\n      quotaId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (\n      orgId: string,\n      quotaId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId);\n      // verify required parameter 'resourceQuotaRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch',\n        'resourceQuotaRequest',\n        resourceQuotaRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'organization' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/plans`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (\n      externalResourceId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'externalResourceId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1PullSecretsExternalResourceIdDelete',\n        'externalResourceId',\n        externalResourceId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`.replace(\n        `{${'externalResourceId'}}`,\n        encodeURIComponent(String(externalResourceId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsPost: async (\n      pullSecretRequest: PullSecretRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'pullSecretRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/registries`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch: async (\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id);\n      // verify required parameter 'registryCredentialPatchRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1RegistryCredentialsIdPatch',\n        'registryCredentialPatchRequest',\n        registryCredentialPatchRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        registryCredentialPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost: async (\n      registryCredential: RegistryCredential,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'registryCredential' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ReservedResourcesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ResourceQuotaGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch: async (\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id);\n      // verify required parameter 'roleBindingRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsPost: async (\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'roleBindingCreateRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleBindingCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/roles`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/skus`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fetchAccounts !== undefined) {\n        localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (labels !== undefined) {\n        localVarQueryParameter['labels'] = labels;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet: async (\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchAccounts !== undefined) {\n        localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fetchCpuAndSocket !== undefined) {\n        localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (\n      id: string,\n      notificationRequest: NotificationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id);\n      // verify required parameter 'notificationRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch: async (\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id);\n      // verify required parameter 'subscriptionPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        subscriptionPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsPost: async (\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subscriptionCreateRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        subscriptionCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (\n      subId: string,\n      accountId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId);\n      // verify required parameter 'accountId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete',\n        'accountId',\n        accountId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`\n        .replace(`{${'subId'}}`, encodeURIComponent(String(subId)))\n        .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`.replace(\n        `{${'subId'}}`,\n        encodeURIComponent(String(subId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId);\n      // verify required parameter 'notificationContactCreateRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost',\n        'notificationContactCreateRequest',\n        notificationContactCreateRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`.replace(\n        `{${'subId'}}`,\n        encodeURIComponent(String(subId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        notificationContactCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (\n      subId: string,\n      reservedResourceId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId);\n      // verify required parameter 'reservedResourceId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet',\n        'reservedResourceId',\n        reservedResourceId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`\n        .replace(`{${'subId'}}`, encodeURIComponent(String(subId)))\n        .replace(`{${'reservedResourceId'}}`, encodeURIComponent(String(reservedResourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'caseId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId);\n      const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`.replace(\n        `{${'caseId'}}`,\n        encodeURIComponent(String(caseId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesPost: async (\n      supportCasesRequest: SupportCasesRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'supportCasesRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/support_cases`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost: async (\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'tokenAuthorizationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1TokenAuthorizationPost',\n        'tokenAuthorizationRequest',\n        tokenAuthorizationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        tokenAuthorizationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1AccessReviewPost: async (\n      accessReview: AccessReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'accessReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview);\n      const localVarPath = `/api/authorizations/v1/access_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1CapabilityReviewPost: async (\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'capabilityReviewRequest' is not null or undefined\n      assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest);\n      const localVarPath = `/api/authorizations/v1/capability_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        capabilityReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ExportControlReviewPost: async (\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'exportControlReviewRequest' is not null or undefined\n      assertParamExists(\n        'apiAuthorizationsV1ExportControlReviewPost',\n        'exportControlReviewRequest',\n        exportControlReviewRequest\n      );\n      const localVarPath = `/api/authorizations/v1/export_control_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        exportControlReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1FeatureReviewPost: async (\n      featureReview: FeatureReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'featureReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1FeatureReviewPost', 'featureReview', featureReview);\n      const localVarPath = `/api/authorizations/v1/feature_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(featureReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ResourceReviewPost: async (\n      resourceReviewRequest: ResourceReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'resourceReviewRequest' is not null or undefined\n      assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest);\n      const localVarPath = `/api/authorizations/v1/resource_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfAccessReviewPost: async (\n      selfAccessReview: SelfAccessReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfAccessReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfAccessReviewPost', 'selfAccessReview', selfAccessReview);\n      const localVarPath = `/api/authorizations/v1/self_access_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfAccessReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfFeatureReviewPost: async (\n      selfFeatureReview: SelfFeatureReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfFeatureReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfFeatureReviewPost', 'selfFeatureReview', selfFeatureReview);\n      const localVarPath = `/api/authorizations/v1/self_feature_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfFeatureReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfResourceReviewPost: async (\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfResourceReviewRequest' is not null or undefined\n      assertParamExists(\n        'apiAuthorizationsV1SelfResourceReviewPost',\n        'selfResourceReviewRequest',\n        selfResourceReviewRequest\n      );\n      const localVarPath = `/api/authorizations/v1/self_resource_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        selfResourceReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfTermsReviewPost: async (\n      selfTermsReview: SelfTermsReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfTermsReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview);\n      const localVarPath = `/api/authorizations/v1/self_terms_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfTermsReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'termsReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview);\n      const localVarPath = `/api/authorizations/v1/terms_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccessTokenPost(\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        fields,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(\n        id,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdPatch(\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(\n        id,\n        accountPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsPost(\n      account: Account,\n      dryRun?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ClusterAuthorizationsPost(\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(\n        clusterAuthorizationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ClusterRegistrationsPost(\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(\n        clusterRegistrationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1CurrentAccountGet(\n      fetchLabels?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(\n        fetchLabels,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ErrorsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ErrorsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n        id,\n        featureToggleQueryRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1LabelsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1MetricsGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1NotifyPost(\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(\n        notificationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(\n        id,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdPatch(\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(\n        id,\n        organizationPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(\n        id,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n        orgId,\n        search,\n        fetchRelatedResources,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n      orgId: string,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaSummaryList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n        orgId,\n        search,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n        orgId,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n        orgId,\n        resourceQuotaRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n        orgId,\n        quotaId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n        orgId,\n        quotaId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n        orgId,\n        quotaId,\n        resourceQuotaRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsPost(\n      organization: Organization,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(\n        organization,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PlansGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PlansIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n      externalResourceId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n        externalResourceId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PullSecretsPost(\n      pullSecretRequest: PullSecretRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(\n        pullSecretRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistriesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistriesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(\n        id,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdPatch(\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(\n        id,\n        registryCredentialPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsPost(\n      registryCredential: RegistryCredential,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(\n        registryCredential,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ReservedResourcesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ResourceQuotaGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdPatch(\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(\n        id,\n        roleBindingRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsPost(\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(\n        roleBindingCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RolesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RolesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkuRulesGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkuRulesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkusGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkusIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(\n        page,\n        size,\n        search,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        orderBy,\n        labels,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdGet(\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(\n        id,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fetchCpuAndSocket,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n      id: string,\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n        id,\n        notificationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdPatch(\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(\n        id,\n        subscriptionPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n        id,\n        page,\n        size,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsPost(\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(\n        subscriptionCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n      subId: string,\n      accountId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n        subId,\n        accountId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n        subId,\n        page,\n        size,\n        search,\n        fields,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n        subId,\n        notificationContactCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n      subId: string,\n      reservedResourceId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n        subId,\n        reservedResourceId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SupportCasesCaseIdDelete(\n      caseId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(\n        caseId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SupportCasesPost(\n      supportCasesRequest: SupportCasesRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(\n        supportCasesRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1TokenAuthorizationPost(\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(\n        tokenAuthorizationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1AccessReviewPost(\n      accessReview: AccessReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(\n        accessReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1CapabilityReviewPost(\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(\n        capabilityReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1ExportControlReviewPost(\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(\n        exportControlReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1FeatureReviewPost(\n      featureReview: FeatureReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1FeatureReviewPost(\n        featureReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1ResourceReviewPost(\n      resourceReviewRequest: ResourceReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(\n        resourceReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfAccessReviewPost(\n      selfAccessReview: SelfAccessReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfAccessReviewPost(\n        selfAccessReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfFeatureReviewPost(\n      selfFeatureReview: SelfFeatureReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfFeatureReviewPost(\n        selfFeatureReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfResourceReviewPost(\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(\n        selfResourceReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfTermsReviewPost(\n      selfTermsReview: SelfTermsReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(\n        selfTermsReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1TermsReviewPost(\n      termsReview: TermsReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(\n        termsReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n  const localVarFp = DefaultApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg> {\n      return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<AccountList> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdPatch(\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsPost(account, dryRun, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost(\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options?: any\n    ): AxiosPromise<ClusterAuthorizationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost(\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options?: any\n    ): AxiosPromise<ClusterRegistrationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {\n      return localVarFp\n        .apiAccountsMgmtV1ErrorsGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {\n      return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options?: any\n    ): AxiosPromise<FeatureToggle> {\n      return localVarFp\n        .apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1LabelsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {\n      return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1NotifyPost(notificationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options?: any\n    ): AxiosPromise<OrganizationList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch(\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options?: any\n    ): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options?: any\n    ): AxiosPromise<QuotaCostList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n      orgId: string,\n      search?: string,\n      options?: any\n    ): AxiosPromise<QuotaSummaryList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ResourceQuotaList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsPost(organization, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {\n      return localVarFp\n        .apiAccountsMgmtV1PlansGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {\n      return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n      externalResourceId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsPost(\n      pullSecretRequest: PullSecretRequest,\n      options?: any\n    ): AxiosPromise<AccessTokenCfg> {\n      return localVarFp\n        .apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RegistryList> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {\n      return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RegistryCredentialList> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdGet(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch(\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options?: any\n    ): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost(\n      registryCredential: RegistryCredential,\n      options?: any\n    ): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ReservedResourcesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ReservedResourceList> {\n      return localVarFp\n        .apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ResourceQuotaGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ResourceQuotaList> {\n      return localVarFp\n        .apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RoleBindingList> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {\n      return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch(\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options?: any\n    ): AxiosPromise<RoleBinding> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsPost(\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options?: any\n    ): AxiosPromise<RoleBinding> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {\n      return localVarFp\n        .apiAccountsMgmtV1RolesGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {\n      return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {\n      return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {\n      return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {\n      return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {\n      return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options?: any\n    ): AxiosPromise<SubscriptionList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsGet(\n          page,\n          size,\n          search,\n          fetchAccounts,\n          fetchLabels,\n          fetchCapabilities,\n          fields,\n          orderBy,\n          labels,\n          options\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet(\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdGet(\n          id,\n          fetchAccounts,\n          fetchLabels,\n          fetchCapabilities,\n          fetchCpuAndSocket,\n          options\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n      id: string,\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch(\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ReservedResourceList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsPost(\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n      subId: string,\n      accountId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<AccountList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n      subId: string,\n      reservedResourceId: string,\n      options?: any\n    ): AxiosPromise<ReservedResource> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesPost(\n      supportCasesRequest: SupportCasesRequest,\n      options?: any\n    ): AxiosPromise<SupportCasesCreatedResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost(\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options?: any\n    ): AxiosPromise<TokenAuthorizationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1AccessReviewPost(accessReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1CapabilityReviewPost(\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options?: any\n    ): AxiosPromise<CapabilityReview> {\n      return localVarFp\n        .apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ExportControlReviewPost(\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options?: any\n    ): AxiosPromise<ExportControlReview> {\n      return localVarFp\n        .apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1FeatureReviewPost(\n      featureReview: FeatureReview,\n      options?: any\n    ): AxiosPromise<FeatureReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1FeatureReviewPost(featureReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ResourceReviewPost(\n      resourceReviewRequest: ResourceReviewRequest,\n      options?: any\n    ): AxiosPromise<ResourceReview> {\n      return localVarFp\n        .apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfAccessReviewPost(\n      selfAccessReview: SelfAccessReview,\n      options?: any\n    ): AxiosPromise<AccessReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfFeatureReviewPost(\n      selfFeatureReview: SelfFeatureReview,\n      options?: any\n    ): AxiosPromise<FeatureReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfResourceReviewPost(\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options?: any\n    ): AxiosPromise<SelfResourceReview> {\n      return localVarFp\n        .apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfTermsReviewPost(\n      selfTermsReview: SelfTermsReview,\n      options?: any\n    ): AxiosPromise<TermsReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1TermsReviewPost(termsReview, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg>;\n\n  /**\n   *\n   * @summary Returns a list of accounts\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fields?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<AccountList>;\n\n  /**\n   *\n   * @summary Get an account by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Update an account\n   * @param {string} id The id of record\n   * @param {AccountPatchRequest} accountPatchRequest Updated account data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdPatch(\n    id: string,\n    accountPatchRequest: AccountPatchRequest,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Create a new account\n   * @param {Account} account Account data\n   * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n   * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ClusterAuthorizationsPost(\n    clusterAuthorizationRequest: ClusterAuthorizationRequest,\n    options?: any\n  ): AxiosPromise<ClusterAuthorizationResponse>;\n\n  /**\n   *\n   * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n   * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ClusterRegistrationsPost(\n    clusterRegistrationRequest: ClusterRegistrationRequest,\n    options?: any\n  ): AxiosPromise<ClusterRegistrationResponse>;\n\n  /**\n   *\n   * @summary Get the authenticated account\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Returns a list of errors\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList>;\n\n  /**\n   *\n   * @summary Get an error by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error>;\n\n  /**\n   *\n   * @summary Query a feature toggle by id\n   * @param {string} id The id of record\n   * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n    id: string,\n    featureToggleQueryRequest: FeatureToggleQueryRequest,\n    options?: any\n  ): AxiosPromise<FeatureToggle>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1LabelsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Returns a list of metrics\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList>;\n\n  /**\n   *\n   * @summary Notify the owner of cluster/subscription\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Returns a list of organizations\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    options?: any\n  ): AxiosPromise<OrganizationList>;\n\n  /**\n   *\n   * @summary Get an organization by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n    id: string,\n    key: string,\n    label: Label,\n    options?: any\n  ): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Update an organization\n   * @param {string} id The id of record\n   * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdPatch(\n    id: string,\n    organizationPatchRequest: OrganizationPatchRequest,\n    options?: any\n  ): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Returns a summary of organizations clusters based on metrics\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary>;\n\n  /**\n   *\n   * @summary Returns a summary of quota cost\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n    orgId: string,\n    search?: string,\n    fetchRelatedResources?: boolean,\n    options?: any\n  ): AxiosPromise<QuotaCostList>;\n\n  /**\n   *\n   * @summary Returns a summary of resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n    orgId: string,\n    search?: string,\n    options?: any\n  ): AxiosPromise<QuotaSummaryList>;\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {string} orgId The id of organization\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n    orgId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ResourceQuotaList>;\n\n  /**\n   *\n   * @summary Create a new resource quota\n   * @param {string} orgId The id of organization\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n    orgId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Delete a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n    orgId: string,\n    quotaId: string,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a resource quota by id\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n    orgId: string,\n    quotaId: string,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Update a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n    orgId: string,\n    quotaId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Create a new organization\n   * @param {Organization} organization Organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Get all plans\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList>;\n\n  /**\n   *\n   * @summary Get a plan by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan>;\n\n  /**\n   *\n   * @summary Delete a pull secret\n   * @param {string} externalResourceId The external resource id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg>;\n\n  /**\n   *\n   * @summary Returns a list of registries\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistriesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RegistryList>;\n\n  /**\n   *\n   * @summary Get an registry by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry>;\n\n  /**\n   * List Registry Credentials\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RegistryCredentialList>;\n\n  /**\n   *\n   * @summary Delete a registry credential by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a registry credentials by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Update a registry credential\n   * @param {string} id The id of record\n   * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdPatch(\n    id: string,\n    registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n    options?: any\n  ): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Request the creation of a registry credential\n   * @param {RegistryCredential} registryCredential Registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsPost(\n    registryCredential: RegistryCredential,\n    options?: any\n  ): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ReservedResourcesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ReservedResourceList>;\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ResourceQuotaGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ResourceQuotaList>;\n\n  /**\n   *\n   * @summary Returns a list of role bindings\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RoleBindingList>;\n\n  /**\n   *\n   * @summary Delete a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Update a role binding\n   * @param {string} id The id of record\n   * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdPatch(\n    id: string,\n    roleBindingRequest: RoleBindingRequest,\n    options?: any\n  ): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Create a new role binding\n   * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsPost(\n    roleBindingCreateRequest: RoleBindingCreateRequest,\n    options?: any\n  ): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Returns a list of roles\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList>;\n\n  /**\n   *\n   * @summary Get a role by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role>;\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKU Rules\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList>;\n\n  /**\n   *\n   * @summary Get a sku rules by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules>;\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKUs\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList>;\n\n  /**\n   *\n   * @summary Get a sku by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU>;\n\n  /**\n   *\n   * @summary Returns a list of subscriptions\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    orderBy?: string,\n    labels?: string,\n    options?: any\n  ): AxiosPromise<SubscriptionList>;\n\n  /**\n   *\n   * @summary Deletes a subscription by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a subscription by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdGet(\n    id: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fetchCpuAndSocket?: boolean,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n    id: string,\n    key: string,\n    label: Label,\n    options?: any\n  ): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Notify the owner of a subscription\n   * @param {string} id The id of record\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n    id: string,\n    notificationRequest: NotificationRequest,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Update a subscription\n   * @param {string} id The id of record\n   * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdPatch(\n    id: string,\n    subscriptionPatchRequest: SubscriptionPatchRequest,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ReservedResourceList>;\n\n  /**\n   *\n   * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Create a new subscription\n   * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsPost(\n    subscriptionCreateRequest: SubscriptionCreateRequest,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Deletes a notification contact by subscription and account id\n   * @param {string} subId The id of subscription\n   * @param {string} accountId The id of account\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n    subId: string,\n    accountId: string,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Returns a list of notification contacts for the given subscription\n   * @param {string} subId The id of subscription\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n    subId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    fields?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<AccountList>;\n\n  /**\n   *\n   * @summary Add an account as a notification contact to this subscription\n   * @param {string} subId The id of subscription\n   * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n    subId: string,\n    notificationContactCreateRequest: NotificationContactCreateRequest,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Get reserved resources by id\n   * @param {string} subId The id of subscription\n   * @param {string} reservedResourceId The id of reserved resource\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n    subId: string,\n    reservedResourceId: string,\n    options?: any\n  ): AxiosPromise<ReservedResource>;\n\n  /**\n   *\n   * @summary Delete a support case\n   * @param {string} caseId The id of a support case\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary create a support case for the subscription\n   * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SupportCasesPost(\n    supportCasesRequest: SupportCasesRequest,\n    options?: any\n  ): AxiosPromise<SupportCasesCreatedResponse>;\n\n  /**\n   *\n   * @summary Finds the account owner of the provided token\n   * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1TokenAuthorizationPost(\n    tokenAuthorizationRequest: TokenAuthorizationRequest,\n    options?: any\n  ): AxiosPromise<TokenAuthorizationResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n   * @param {AccessReview} accessReview Access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s capabilities\n   * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1CapabilityReviewPost(\n    capabilityReviewRequest: CapabilityReviewRequest,\n    options?: any\n  ): AxiosPromise<CapabilityReview>;\n\n  /**\n   *\n   * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n   * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1ExportControlReviewPost(\n    exportControlReviewRequest: ExportControlReviewRequest,\n    options?: any\n  ): AxiosPromise<ExportControlReview>;\n\n  /**\n   *\n   * @summary Review feature to perform an action on it such as toggle a feature on/off\n   * @param {FeatureReview} featureReview Feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1FeatureReviewPost(\n    featureReview: FeatureReview,\n    options?: any\n  ): AxiosPromise<FeatureReviewResponse>;\n\n  /**\n   *\n   * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1ResourceReviewPost(\n    resourceReviewRequest: ResourceReviewRequest,\n    options?: any\n  ): AxiosPromise<ResourceReview>;\n\n  /**\n   *\n   * @summary Review your ability to perform an action on a particular resource or resource type\n   * @param {SelfAccessReview} selfAccessReview Self access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfAccessReviewPost(\n    selfAccessReview: SelfAccessReview,\n    options?: any\n  ): AxiosPromise<AccessReviewResponse>;\n\n  /**\n   *\n   * @summary Review your ability to toggle a feature\n   * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfFeatureReviewPost(\n    selfFeatureReview: SelfFeatureReview,\n    options?: any\n  ): AxiosPromise<FeatureReviewResponse>;\n\n  /**\n   *\n   * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfResourceReviewPost(\n    selfResourceReviewRequest: SelfResourceReviewRequest,\n    options?: any\n  ): AxiosPromise<SelfResourceReview>;\n\n  /**\n   *\n   * @summary Review your status of Terms\n   * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfTermsReviewPost(\n    selfTermsReview: SelfTermsReview,\n    options?: any\n  ): AxiosPromise<TermsReviewResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s status of Terms\n   * @param {TermsReview} termsReview Data to check terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccessTokenPost(options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccessTokenPost(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of accounts\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fields?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an account by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update an account\n   * @param {string} id The id of record\n   * @param {AccountPatchRequest} accountPatchRequest Updated account data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new account\n   * @param {Account} account Account data\n   * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsPost(account, dryRun, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n   * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ClusterAuthorizationsPost(\n    clusterAuthorizationRequest: ClusterAuthorizationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n   * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ClusterRegistrationsPost(\n    clusterRegistrationRequest: ClusterRegistrationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get the authenticated account\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of errors\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ErrorsGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an error by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ErrorsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Query a feature toggle by id\n   * @param {string} id The id of record\n   * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n    id: string,\n    featureToggleQueryRequest: FeatureToggleQueryRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of metrics\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1MetricsGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1MetricsGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Notify the owner of cluster/subscription\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1NotifyPost(notificationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of organizations\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an organization by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update an organization\n   * @param {string} id The id of record\n   * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdPatch(\n    id: string,\n    organizationPatchRequest: OrganizationPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of organizations clusters based on metrics\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of quota cost\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n    orgId: string,\n    search?: string,\n    fetchRelatedResources?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {string} orgId The id of organization\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n    orgId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new resource quota\n   * @param {string} orgId The id of organization\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n    orgId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a resource quota by id\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n    orgId: string,\n    quotaId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new organization\n   * @param {Organization} organization Organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsPost(organization, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get all plans\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PlansGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a plan by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PlansIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PlansIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a pull secret\n   * @param {string} externalResourceId The external resource id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of registries\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistriesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an registry by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistriesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * List Registry Credentials\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a registry credential by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a registry credentials by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a registry credential\n   * @param {string} id The id of record\n   * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdPatch(\n    id: string,\n    registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Request the creation of a registry credential\n   * @param {RegistryCredential} registryCredential Registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ReservedResourcesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ResourceQuotaGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of role bindings\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a role binding\n   * @param {string} id The id of record\n   * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new role binding\n   * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of roles\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RolesGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a role by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RolesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RolesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKU Rules\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkuRulesGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a sku rules by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkuRulesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKUs\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkusGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkusGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a sku by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkusIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkusIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of subscriptions\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    orderBy?: string,\n    labels?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsGet(\n        page,\n        size,\n        search,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        orderBy,\n        labels,\n        options\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Deletes a subscription by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a subscription by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdGet(\n    id: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fetchCpuAndSocket?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdGet(\n        id,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fetchCpuAndSocket,\n        options\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Notify the owner of a subscription\n   * @param {string} id The id of record\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n    id: string,\n    notificationRequest: NotificationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a subscription\n   * @param {string} id The id of record\n   * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdPatch(\n    id: string,\n    subscriptionPatchRequest: SubscriptionPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new subscription\n   * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Deletes a notification contact by subscription and account id\n   * @param {string} subId The id of subscription\n   * @param {string} accountId The id of account\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n    subId: string,\n    accountId: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of notification contacts for the given subscription\n   * @param {string} subId The id of subscription\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n    subId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    fields?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Add an account as a notification contact to this subscription\n   * @param {string} subId The id of subscription\n   * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n    subId: string,\n    notificationContactCreateRequest: NotificationContactCreateRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get reserved resources by id\n   * @param {string} subId The id of subscription\n   * @param {string} reservedResourceId The id of reserved resource\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n    subId: string,\n    reservedResourceId: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a support case\n   * @param {string} caseId The id of a support case\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary create a support case for the subscription\n   * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Finds the account owner of the provided token\n   * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n   * @param {AccessReview} accessReview Access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1AccessReviewPost(accessReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s capabilities\n   * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n   * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1ExportControlReviewPost(\n    exportControlReviewRequest: ExportControlReviewRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review feature to perform an action on it such as toggle a feature on/off\n   * @param {FeatureReview} featureReview Feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1FeatureReviewPost(featureReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your ability to perform an action on a particular resource or resource type\n   * @param {SelfAccessReview} selfAccessReview Self access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your ability to toggle a feature\n   * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfResourceReviewPost(\n    selfResourceReviewRequest: SelfResourceReviewRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your status of Terms\n   * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s status of Terms\n   * @param {TermsReview} termsReview Data to check terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1TermsReviewPost(termsReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = 'https://api.openshift.com'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  for (const object of objects) {\n    for (const key in object) {\n      if (Array.isArray(object[key])) {\n        searchParams.delete(key);\n        for (const item of object[key]) {\n          searchParams.append(key, item);\n        }\n      } else {\n        searchParams.set(key, object[key]);\n      }\n    }\n  }\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration\n) {\n  return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n    const axiosRequestArgs = { ...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url };\n    return axios.request(axiosRequestArgs);\n  };\n};\n","import { Reducer, useEffect, useReducer, useRef } from 'react';\nimport { AxiosResponse } from 'axios';\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<AxiosResponse<T>>;\n  key: string;\n};\n\nexport const useFetch = <T extends any>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>((states, action: Action<T>) => {\n    switch (action.type) {\n      case Status.FETCHING:\n        return { ...initialState, status: Status.FETCHING };\n      case Status.FETCHED:\n        return { ...initialState, status: Status.FETCHED, data: action.payload };\n      case Status.FETCH_ERROR:\n        return { ...initialState, status: Status.FETCH_ERROR, error: action.error };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response.data;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response.data });\n        } catch (error) {\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCH_ERROR, payload: error.message });\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, []);\n\n  return state;\n};\n","import { useEffect, useState, useMemo } from 'react';\nimport { useAuth, useConfig, Quota, QuotaValue, QuotaType, ProductType } from '@rhoas/app-services-ui-shared';\nimport { Configuration, DefaultApi } from '@openapi/ams';\n\nexport const useQuota = (productId: ProductType) => {\n    const config = useConfig();\n    const auth = useAuth();\n\n    const [orgId, setOrgId] = useState();\n\n    useEffect(() => {\n        const getCurrentAccount = async () => {\n            if (!orgId) {\n                const accessToken = await auth?.ams.getToken();\n                const ams = new DefaultApi({\n                    accessToken,\n                    basePath: config?.ams.apiBasePath || '',\n                } as Configuration);\n\n                await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n                    const orgID = account?.data?.organization?.id;\n                    setOrgId(orgID);\n                });\n            }\n        };\n\n        getCurrentAccount();\n    }, [config?.ams.apiBasePath, auth]);\n\n    const getQuotaTypesByProductId = () => {\n        const {\n            ams: amsConfig\n        } = config || {};\n        const { kasQuotaId, kasTrialQuotaId, srsQuotaId, srsTrialQuotaId } = amsConfig || {};\n        if (productId === ProductType.kas) {\n            return { quotaId: kasQuotaId, trialQuotaId: kasTrialQuotaId, quotaKey: QuotaType.kas, trialQuotaKey: QuotaType.kasTrial };\n        } else if (productId === ProductType.srs) {\n            return { quotaId: srsQuotaId, trialQuotaId: srsTrialQuotaId, quotaKey: QuotaType.srs, trialQuotaKey: QuotaType.srsTrial };\n        }\n    }\n\n    const getQuota = async () => {\n        let filteredQuota: Quota = { loading: true, isServiceDown: false, data: undefined };\n\n        if (orgId) {\n            const { quotaId, trialQuotaId, quotaKey, trialQuotaKey } = getQuotaTypesByProductId() || {};\n\n            const accessToken = await auth?.ams.getToken();\n            const ams = new DefaultApi({\n                accessToken,\n                basePath: config?.ams.apiBasePath || '',\n            } as Configuration);\n\n            await ams\n                .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, undefined, true)\n                .then((res) => {\n                    const quotaData = new Map<QuotaType, QuotaValue>();\n                    const quota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === quotaId\n                    )[0];\n\n                    const trialQuota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === trialQuotaId\n                    )[0];\n\n                    if (quota && quota.allowed > 0) {\n                        const remaining = quota?.allowed - quota?.consumed;\n                        quotaData?.set(quotaKey, {\n                            allowed: quota?.allowed,\n                            consumed: quota?.consumed,\n                            remaining: remaining < 0 ? 0 : remaining\n                        });\n                    }\n\n                    if (trialQuota) {\n                        quotaData?.set(trialQuotaKey, {\n                            allowed: trialQuota?.allowed,\n                            consumed: trialQuota?.consumed,\n                            remaining: trialQuota?.allowed - trialQuota?.consumed\n                        });\n                    }\n\n                    filteredQuota.loading = false;\n                    filteredQuota.data = quotaData;\n                })\n                .catch((error) => {\n                    filteredQuota.loading = false;\n                    filteredQuota.isServiceDown = true;\n                });\n        }\n        return filteredQuota;\n    };\n\n    const contextValue = useMemo(() => {\n        return { orgId, getQuota };\n    }, [orgId, getQuota]);\n\n    return contextValue;\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n  apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n  username?: string;\n  password?: string;\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  basePath?: string;\n  baseOptions?: any;\n  formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  username?: string;\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  password?: string;\n  /**\n   * parameter for oauth2 security\n   * @param name security name\n   * @param scopes oauth2 scope\n   * @memberof Configuration\n   */\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  /**\n   * override base path\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string;\n  /**\n   * base options for axios calls\n   *\n   * @type {any}\n   * @memberof Configuration\n   */\n  baseOptions?: any;\n  /**\n   * The FormData constructor that will be used to create multipart form data\n   * requests. You can inject this here so that execution environments that\n   * do not support the FormData class can still run the generated client.\n   *\n   * @type {new () => FormData}\n   */\n  formDataCtor?: new () => any;\n\n  constructor(param: ConfigurationParameters = {}) {\n    this.apiKey = param.apiKey;\n    this.username = param.username;\n    this.password = param.password;\n    this.accessToken = param.accessToken;\n    this.basePath = param.basePath;\n    this.baseOptions = param.baseOptions;\n    this.formDataCtor = param.formDataCtor;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n    const jsonMime: RegExp = new RegExp('^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n}\n","import { Auth, Config, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { Configuration, DefaultApi, TermsReviewResponse } from '@openapi/ams';\nimport { useFetch } from '@app/services/fetch';\nimport { useEffect, useRef } from \"react\";\n\nexport type ITermsConfig = {\n  eventCode: string;\n  siteCode: string;\n}\n\nexport const useTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  return useFetch(fetchTermsReviewFactory(config, auth, termsConfig));\n};\n\nexport const useAsyncTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth, termsConfig).fetch().then(r => r.data);\n    ref.current = answer;\n    return answer;\n  }\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth]);\n  return load;\n}\n\nconst fetchTermsReviewFactory = (config: Config, auth: Auth, termsConfig: ITermsConfig) => {\n  return {\n    key: 'selfTermsReview',\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new DefaultApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || '',\n      } as Configuration);\n      return await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: termsConfig.eventCode,\n        site_code: termsConfig.siteCode,\n      });\n    },\n  }\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join('&');\n","import { useLocation } from 'react-router-dom';\nimport { parse as parseQueryString, stringifyUrl } from 'query-string';\nimport { useAsyncTermsReview, ITermsConfig } from '@app/services/termsReview';\nimport { getTermsAppURL } from '@app/utils/termsApp';\n\nexport const useModalControl = (termsConfig: ITermsConfig) => {\n    const loadTermsReview = useAsyncTermsReview(termsConfig);\n    const location = useLocation();\n\n    const shouldOpenCreateModal = async () => {\n        const parsed = parseQueryString(location.search);\n        const c = parsed['create'] === 'true';\n        if (c) {\n            const termsReview = await loadTermsReview();\n            if (!termsReview.terms_required) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const preCreateInstance = async (open: boolean) => {\n        const termsReview = await loadTermsReview();\n        if (termsReview.terms_available || termsReview.terms_required) {\n            if (termsReview.redirect_url === undefined) {\n                throw new Error('terms must be signed but there is no terms url');\n            }\n            const redirectURL = stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n            const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n            window.location.href = url;\n            return false;\n        }\n        return open;\n    };\n\n    return { shouldOpenCreateModal, preCreateInstance };\n};","import { InsightsType } from \"@app/utils\";\n\nexport const useInsights = () => {\n  const insights = window['insights'] as InsightsType;\n  if (insights === undefined) {\n    throw new Error(\"must be used inside an initialized insights context\");\n  }\n  return insights;\n}\n","import { KeycloakConfig, KeycloakInstance } from \"keycloak-js\";\nimport { Auth, Config, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { getAccessToken, initKeycloak } from \"@app/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { useInsights } from \"@app/hooks/insights\";\n\nconst init = async (config: Config, getInsightsAccessToken: () => Promise<string>) => {\n  const keycloakConfig = {\n    url: config.masSso.authServerUrl,\n    clientId: config.masSso.clientId,\n    realm: config.masSso.realm,\n  } as KeycloakConfig;\n  return await initKeycloak(keycloakConfig, getInsightsAccessToken);\n}\n\nexport const useAuth = (): Auth => {\n  const keycloakInstance = useRef<KeycloakInstance>();\n  const config = useConfig();\n  const insights = useInsights();\n\n  if (config === undefined || insights.chrome.auth === undefined) {\n    throw new Error(\"useAuth must be used inside a config provider, and insights auth\");\n  }\n\n  const insightsChromeAuth = insights.chrome.auth;\n\n  const getKeycloakInstance = async () => {\n    const instance = keycloakInstance.current;\n    if (instance === undefined) {\n      const answer = await init(config, insightsChromeAuth.getToken);\n      keycloakInstance.current = answer;\n      return answer;\n    }\n    return instance;\n  }\n\n  useEffect(() => {\n    // Start loading keycloak immediately\n    getKeycloakInstance();\n  }, [config, insightsChromeAuth]);\n\n  const getMASSSOToken = async () => {\n    const keycloakInstance = await getKeycloakInstance();\n    return getAccessToken(keycloakInstance, insightsChromeAuth.getToken)\n  };\n\n  const getUsername = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.username;\n  }\n\n  const isOrgAdmin = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.is_org_admin;\n  }\n\n  const getToken = insightsChromeAuth.getToken;\n\n  return {\n    getUsername,\n    isOrgAdmin,\n    kafka: {\n      getToken: getMASSSOToken,\n    },\n    kas: {\n      getToken,\n    },\n    ams: {\n      getToken,\n    },\n    srs: {\n      getToken,\n    },\n    apicurio_registry: {\n      getToken: getMASSSOToken,\n    },\n  };\n\n}\n","import { } from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\n\nexport const useMASToken = () => {\n    const config = useConfig();\n    const getTokenEndPointUrl = () => {\n        if (config) {\n            return `${config.masSso.authServerUrl}/realms/${config.masSso.realm}/protocol/openid-connect/token`;\n        }\n        return undefined;\n    };\n\n    return { getTokenEndPointUrl };\n}","import en from './en.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst appServicesi18n = i18n.createInstance();\n\nappServicesi18n\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    detection: {\n      order: ['htmlTag', 'navigator'],\n      caches: [],\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    resources,\n  });\n\nexport default appServicesi18n;\n","import React from 'react';\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  Card,\n  CardBody,\n  CardHeader,\n  CardFooter,\n  CardHeaderMain,\n  CardTitle,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  TitleSizes,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport '../../App.scss';\nimport { useTranslation } from 'react-i18next';\n\nexport const APIManagementPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhoam\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('apimgmtoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('apimgmtoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('apimgmtoverview.heroDescription')}</Text>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Grid hasGutter lg={6}>\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h3\">{t('apimgmtoverview.alreadyHaveCardTitle')}</Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t('apimgmtoverview.alreadyHaveCardMainText')}</CardBody>\n            <CardFooter>\n              <Stack hasGutter>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardHaveRHOAM-buttonGoOCM\"\n                    variant={ButtonVariant.secondary}\n                    component=\"a\"\n                    href=\"https://cloud.redhat.com/openshift/\"\n                  >\n                    {t('apimgmtoverview.alreadyHaveCardCallToActionButton')}\n                  </Button>\n                </StackItem>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardHaveRHOAM-linkViewDocs\"\n                    variant={ButtonVariant.link}\n                    component=\"a\"\n                    href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                  </Button>\n                </StackItem>\n              </Stack>{' '}\n            </CardFooter>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h3\">{t('apimgmtoverview.wantToTryCardTitle')}</Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t('apimgmtoverview.wantToTryCardMainText')}</CardBody>\n            <CardFooter>\n              <Stack hasGutter>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardTryRHOAM-buttonGetStarted\"\n                    variant={ButtonVariant.secondary}\n                    component=\"a\"\n                    href=\"https://developers.redhat.com/products/rhoam/getting-started\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.wantToTryCardCallToActionButton')}\n                    <ExternalLinkAltIcon className=\"pf-u-ml-md\" />\n                  </Button>\n                </StackItem>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardTryRHOAM-linkViewDocs\"\n                    variant={ButtonVariant.link}\n                    component=\"a\"\n                    href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                  </Button>\n                </StackItem>\n              </Stack>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </PageSection>\n\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n          {t('apimgmtoverview.videoSectionTitle')}\n        </Title>\n        <Grid hasGutter>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n              <div className=\"app-services-ui--video-wrapper\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/NzNgc0f75pc\"\n                  title={t('apimgmtoverview.videoSectionTitle')}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </div>\n            </Card>\n          </GridItem>\n          <GridItem md={5}>\n            <TextContent>\n              <Text className=\"pf-u-color-200 pf-u-ml-md\">{t('apimgmtoverview.videoSectionInThisVideo')}</Text>\n              <List className=\"app-services-ui--icon-list\">\n                <ListItem>{t('apimgmtoverview.videoSectionBulletBuild')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletImport')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletAdd')}</ListItem>\n              </List>\n            </TextContent>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default APIManagementPage;\n","import { FederatedModule } from '@app/components';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport React from 'react';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\n\nexport const CosPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage/>;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"cos\"\n      fallback={<AppServicesLoading/>}\n      module=\"./OpenshiftManagedConnectors\"\n      render={(OpenshiftManagedConnectors) => <OpenshiftManagedConnectors/>}\n    />\n  )\n};\n\nexport default CosPage;\n","import React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Card,\n  Grid,\n  GridItem,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport { useTranslation } from 'react-i18next';\n\nexport const DataSciencePage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhods\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('datascienceoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('datascienceoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('datascienceoverview.heroDescription')}</Text>\n          <StackItem>\n            <Button\n              data-testid=\"hero-buttonLearnMore\"\n              variant={ButtonVariant.secondary}\n              component=\"a\"\n              href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\"\n              target=\"_blank\"\n            >\n              {t('datascienceoverview.heroCallToActionButton')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Grid hasGutter>\n          <GridItem md={5}>\n            <Stack hasGutter>\n              <StackItem>\n                <TextContent>\n                  <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n                    {t('datascienceoverview.videoSectionTitle')}\n                  </Title>\n                  <Text className=\"pf-u-mr-md\">{t('datascienceoverview.videoSectionInThisVideo')}</Text>\n                </TextContent>\n              </StackItem>\n              <StackItem>\n                <Button\n                  data-testid=\"CTA-videoRHODSDemo\"\n                  variant={ButtonVariant.secondary}\n                  component=\"a\"\n                  href=\"http://www.openshift.com/DataScienceVideoDemo\"\n                  target=\"_blank\"\n                >\n                  {t('datascienceoverview.heroViewDemo')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                </Button>\n              </StackItem>\n            </Stack>\n          </GridItem>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n                <div className=\"app-services-ui--video-wrapper\">\n                  <iframe\n                    src=\"https://www.youtube.com/embed/joK89xYeuUY\"\n                    title={t('datascienceoverview.videoSectionTitle')}\n                    frameBorder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                  ></iframe>\n                </div>\n              </Card>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default DataSciencePage;\n","import React from 'react';\nimport { ProductType, QuotaContext, useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { FederatedModule, usePrincipal } from '@app/components';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ITermsConfig } from '@app/services';\nimport termsConfig from '../../../../static/configs/terms-conditions-spec.json';\n\nconst KasPage: React.FC = () => {\n  const config = useConfig();\n  const { getQuota } = useQuota(ProductType?.kas);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: termsConfig.kafka.EventCode,\n    siteCode: termsConfig.kafka.SiteCode,\n  } as ITermsConfig);\n  const { getTokenEndPointUrl } = useMASToken();\n  const { getAllUserAccounts } = usePrincipal();\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      fallback={<AppServicesLoading />}\n      render={(OpenshiftStreamsFederated) => {\n        if (config?.serviceDown) {\n          return <ServiceDownPage />;\n        }\n\n        return (\n          <QuotaContext.Provider value={{ getQuota }}>\n            <OpenshiftStreamsFederated\n              preCreateInstance={preCreateInstance}\n              shouldOpenCreateModal={shouldOpenCreateModal}\n              tokenEndPointUrl={getTokenEndPointUrl()}\n              getAllUserAccounts={getAllUserAccounts}\n            />\n          </QuotaContext.Provider>\n        );\n      }}\n    />\n  );\n};\n\nexport default KasPage;\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFoundPage: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n\n","export default __webpack_public_path__ + \"d0f2bb14.svg\";","export default __webpack_public_path__ + \"61fdfbf5.svg\";","export default __webpack_public_path__ + \"485bae8d.svg\";","export default __webpack_public_path__ + \"98789eae.png\";","export default __webpack_public_path__ + \"ec818793.png\";","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  Grid,\n  Label,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport ApacheKafkaLogo from \"/static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg\";\nimport APIMgmtLogo from \"/static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg\";\nimport DataScienceLogo from \"static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg\";\nimport ServiceRegistryLogo from \"static/images/Logo-Red_Hat-OpenShift_Service_Registry-A-Standard-RGB.png\"\nimport DataServicesLogo from 'static/images/Logo-Red_Hat-Data_Services-A-Standard-RGB.png';\n\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useHistory } from 'react-router-dom';\nimport { useBasename } from \"@rhoas/app-services-ui-shared\";\n\nexport const OverviewPage: React.FunctionComponent = () => {\n\n  const { t } = useTranslation();\n\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const beta = location.pathname.startsWith('/beta');\n\n  const onClickKafkainstance = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    event.preventDefault();\n    history.push(`${basename}/streams/kafkas`);\n  }\n\n  const getKafkaHref = () => {\n    return history.createHref({\n      pathname: '/streams/kafkas'\n    })\n  }\n\n  const onClickServiceRegistry = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (beta) {\n      event.preventDefault();\n      history.push(`${basename}/service-registry`);\n    }\n  }\n\n  const getServiceRegistryHref = () => {\n    if (beta) {\n      history.createHref({\n        pathname: '/service-registry'\n      })\n    }\n    return '/beta/application-services/service-registry'\n  }\n\n  return (\n    <>\n      {/* Hero banner with graphic */}\n      <PageSection className=\"app-services-ui--page-section--marketing app-services-ui--banner pf-t-dark pf-u-background-color-dark-100\" variant={PageSectionVariants.dark}>\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('overview.heroTitle')}\n          </Title>\n          <Text className=\"app-services-ui--banner__tagline\">{t('overview.heroTagline')}</Text>\n          <Text component={TextVariants.p}>\n            {t('overview.heroDescription')}\n          </Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('overview.heroDescription2')}\n          </Text>\n          <StackItem>\n            <Button variant={ButtonVariant.primary} isLarge component=\"a\" data-testid=\"hero-buttonTryKafka\" href={getKafkaHref()} onClick={onClickKafkainstance}>\n              {t('overview.heroCallToActionButton')}\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      {/* Banner with just text */}\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\">\n        <Bullseye>\n          <Text component={TextVariants.p} className=\"app-services-ui--banner--text-only\">\n            {t('overview.banner')}\n          </Text>\n        </Bullseye>\n      </PageSection>\n\n      {/* Cards */}\n      <PageSection isWidthLimited className=\"app-services-ui--page-section--marketing\">\n        <Grid md={6} lg={3} hasGutter>\n\n          {/* API Management card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={APIMgmtLogo}\n                  alt=\"Red Hat OpenShift API Management logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhoamTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem>\n                  {t('overview.rhoamMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhoamSecondaryText')} <Button data-testid=\"cardRHOAM-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\">OpenShift\n                    <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button variant={ButtonVariant.secondary} data-testid=\"cardRHOAM-buttonCTA\" component=\"a\" target=\"_blank\" href=\"https://developers.redhat.com/products/rhoam/getting-started\">\n                {t('overview.getStarted')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Data science card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={DataScienceLogo}\n                  alt=\"Red Hat OpenShift Data Science logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhodsTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.beta')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhodsMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhodsSecondaryText')} <Button data-testid=\"cardRHODS-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\"> OpenShift\n                    <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHODS-buttonCTA\" variant={ButtonVariant.secondary} component=\"a\" target=\"_blank\" href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\">\n                {t('overview.learnMore')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Service Registry card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={ServiceRegistryLogo}\n                  alt=\"Red Hat OpenShift Service Registry logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhosrTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.developmentPreview')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhosrMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhosrSecondaryText')}\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHOSR-buttonCTA\" variant={ButtonVariant.secondary} component=\"a\" href={getServiceRegistryHref()} onClick={onClickServiceRegistry}>{t('overview.rhosrCallToActionButton')}</Button>\n            </CardFooter>\n          </Card>\n\n          {/* Kafka card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={ApacheKafkaLogo}\n                  alt=\"Red Hat OpenShift Streams for Apache Kafka logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhosakTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem>\n                  {t('overview.rhosakMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhosakSecondaryText')}\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHOSAK-buttonCreateKafka\" variant={ButtonVariant.secondary} component=\"a\" href={getKafkaHref()} onClick={onClickKafkainstance} >{t('overview.rhosakCallToActionButton')}</Button>\n            </CardFooter>\n          </Card>\n\n          {/* Database access card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={DataServicesLogo}\n                  alt=\"Red Hat OpenShift Data Science logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n              {t('overview.dbaasTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.alpha')}</Label>\n                </StackItem>\n                <StackItem>\n                {t('overview.dbaasMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                {t('overview.dbaasSecondaryText')} <Button data-testid=\"cardRHODS-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\"> OpenShift\n                  <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHODS-buttonCTA\" variant={ButtonVariant.secondary} component=\"a\" target=\"_blank\" href=\"https://access.redhat.com/documentation/en-us/red_hat_openshift_database_access/1/html-single/quick_start_guide/index\">\n                {t('overview.learnMore')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default OverviewPage;\n","import React, { FunctionComponent } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ResourcesPage: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<AppServicesLoading/>}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated/>}\n  />\n);\n\nexport default ResourcesPage;\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceAccountsPage: React.FunctionComponent = () => {\n  const config = useConfig();\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<AppServicesLoading/>}\n      render={(ServiceAccountsFederated) => {\n\n\n        if (config?.serviceDown) {\n          return <ServiceDownPage/>;\n        }\n        return <ServiceAccountsFederated/>;\n      }}\n    />\n  );\n};\n\nexport default ServiceAccountsPage;\n","import React from 'react';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const ServiceDownPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t('serviceDown.serviceDownTitle')}\n        </Title>\n        <EmptyStateBody>\n          {t('serviceDown.serviceDownMessage')}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={() => {window.location.href = \"https://status.starter.openshift.com/\"}}>{t('serviceDown.serviceDownButton')}</Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactVersionDetails: React.FunctionComponent = () => {\n  const config = useConfig();  \n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactVersionDetailsConnected />;\n};\n\nconst ArtifactVersionDetailsConnected: React.FunctionComponent = () => {\n  const { artifactId }=useParams<{artifactId:string}>();\n  \n  return (\n    <SrsLayout breadcrumbId=\"srs.artifacts_details\" artifactId={artifactId} render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactVersionPage\" />\n    )}/>\n  );\n};\n\nexport default ArtifactVersionDetails;\n","import { FederatedApicurioComponent } from '@app/pages/ServiceRegistry/FederatedApicurioComponent';\nimport React from 'react';\nimport { SrsLayout } from '@app/pages/ServiceRegistry/SrsLayout';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages';\n\nexport const Artifacts: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactsConnected />;\n};\n\nconst ArtifactsConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts\"\n      render={(registry) => <FederatedApicurioComponent module=\"./FederatedArtifactsPage\" registry={registry} />}\n    />\n  );\n};\n\nexport default Artifacts;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactRedirect: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactRedirectConnected />;\n};\n\nconst ArtifactRedirectConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactRedirectPage\" />\n    )} />\n  );\n};\n\nexport default ArtifactRedirect;\n","import React from 'react';\nimport { ConfigType, createApicurioConfig } from '@app/pages/ServiceRegistry/utils';\nimport { FederatedModule, usePrincipal } from '@app/components';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { useAuth, useBasename, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: Registry | undefined;\n  topicName?: string;\n  groupId?: string | null | undefined;\n  version?: string;\n  registryId?: string;\n  basename?: string;\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: React.FC<FederatedApicurioComponentProps> = ({\n  module,\n  registry,\n  ...rest\n}) => {\n  let federateConfig: ConfigType;\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const getToken = auth?.apicurio_registry.getToken;\n  const currentlyLoggedInuser = auth?.getUsername() || '';\n\n  const { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n  const { getAllPrincipals } = usePrincipal();\n\n  if (config === undefined || registry === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const principals = getAllPrincipals()?.filter((p) => p.id !== currentlyLoggedInuser && p.id !== registry?.owner);\n\n  if (getToken && basename) {\n    federateConfig = createApicurioConfig(\n      config,\n      registry.registryUrl as string,\n      `${basename.getBasename()}/t/${registry?.id}`,\n      getToken,\n      principals\n    );\n  }\n\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<AppServicesLoading />}\n      render={(ServiceRegistryFederated) => {\n        return (\n          <ServiceRegistryFederated\n            config={federateConfig}\n            tenantId={registry.id}\n            groupId={groupId}\n            artifactId={artifactId}\n            version={version}\n            history={history}\n            {...rest}\n          />\n        );\n      }}\n    />\n  );\n};\n","import { Principal } from '@rhoas/app-services-ui-shared';\nimport { Config } from \"@rhoas/app-services-ui-shared\";\n\n\nexport interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport interface NoneAuthConfig extends AuthConfig { }\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n  principals?: Principal[] | undefined;\n}\n\nconst createApicurioConfig = (config: Config, apiUrl: string, navPathPrefix: string,\n  getToken: () => Promise<string> | undefined, principals?: Principal[] | undefined) => {\n  const apicurioConfig: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: 'gettoken',\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      roleManagement: config.srs.apiBasePath == \"https://api.stage.openshift.com\",\n      multiTenant: true,\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n    principals\n  } as ConfigType;\n\n  return apicurioConfig;\n};\n\nexport { createApicurioConfig };\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const RulesPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RulesPageConnected />;\n};\n\nconst RulesPageConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout breadcrumbId=\"srs.global_rules\" render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedRulesPage\"/>\n    )}/>\n  );\n};\n\nexport default RulesPage;\n","import React from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { DevelopmentPreview, FederatedModule, KasModalLoader } from '@app/components';\nimport { ServiceDownPage } from '@app/pages';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ProductType, QuotaContext } from '@rhoas/app-services-ui-shared';\nimport { ITermsConfig } from '@app/services';\nimport termsConfig from '../../../../static/configs/terms-conditions-spec.json';\n\nexport const ServiceRegistryPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ServiceRegistryPageConnected />;\n};\n\nexport const ServiceRegistryPageConnected: React.FC = () => {\n  const config = useConfig();\n  const { getQuota } = useQuota(ProductType.srs);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: termsConfig['service-registry'].EventCode,\n    siteCode: termsConfig['service-registry'].SiteCode,\n  } as ITermsConfig);\n  const { getTokenEndPointUrl } = useMASToken();\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <DevelopmentPreview>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistry\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <QuotaContext.Provider value={{ getQuota }}>\n              <KasModalLoader>\n                <ServiceRegistryFederated\n                  preCreateInstance={preCreateInstance}\n                  shouldOpenCreateModal={shouldOpenCreateModal}\n                  tokenEndPointUrl={getTokenEndPointUrl()}\n                />\n              </KasModalLoader>\n            </QuotaContext.Provider>\n          );\n        }}\n      />\n    </DevelopmentPreview>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useMASToken } from '@app/hooks';\n\ntype SrsLayoutProps = {\n  render: (registry: Registry) => JSX.Element;\n  breadcrumbId?: string;\n  artifactId?: string;\n};\n\nexport const SrsLayout: React.FC<SrsLayoutProps> = ({ render, breadcrumbId, artifactId }) => {\n  const { getTokenEndPointUrl } = useMASToken();\n  return (\n    <FederatedModule\n      scope=\"srs\"\n      module=\"./ApicurioRegistry\"\n      fallback={<AppServicesLoading />}\n      render={(ServiceRegistryFederated) => {\n        return (\n          <ServiceRegistryFederated\n            render={render}\n            breadcrumbId={breadcrumbId}\n            tokenEndPointUrl={getTokenEndPointUrl()}\n            artifactId={artifactId}\n          />\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { FederatedApicurioComponent } from './FederatedApicurioComponent';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ServiceRegistrySchemaMapping: React.FC = () => {\n  const { topicName } = useParams<{ topicName: string }>();\n  const basename = '/service-registry';\n\n  return (\n    <>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistryMapping\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <ServiceRegistryFederated\n              basename={basename}\n              topicName={topicName}\n              renderSchema={(registry: Registry) => (\n                <FederatedApicurioComponent\n                  module=\"./FederatedSchemaMapping\"\n                  registry={registry}\n                  topicName={topicName}\n                  groupId={null}\n                  version={'latest'}\n                  registryId={registry?.id}\n                  basename={basename}\n                />\n              )}\n            />\n          );\n        }}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Main, NotAuthorized } from '@redhat-cloud-services/frontend-components';\n\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: React.FunctionComponent<GetLinkProps> = ({ href, children }) => <Link to={href || ''}>{children}</Link>;\n\nexport const AccessDeniedPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t('accessdenied.accessDeniedTitle')}\n        description={accessDeniedDetails}\n        prevPageButtonText={t('accessdenied.accessDeniedButtonText')}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type KafkaFederatedComponentProps = UnderlyingProps & {\n  module: string;\n};\n\nexport type UnderlyingProps = {\n  activeTab?: number;\n  getToken?: () => Promise<string>;\n  apiBasePath: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  showMetrics?: JSX.Element;\n  showSchemas?: JSX.Element;\n  kafka?: KafkaRequest;\n  redirectAfterDeleteInstance?: () => void;\n};\n\n// Provides properties for component path and it's underlying properties\nexport const KafkaFederatedComponent: React.FunctionComponent<KafkaFederatedComponentProps> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => <FederatedKafka {...rest} />}\n    />\n  );\n};\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\nimport { KasModalLoader } from '@app/components';\n\nexport const Topics: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KasModalLoader>\n    <KafkaFederatedComponent module=\"./KafkaMainView\" {...props} />\n  </KasModalLoader>\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const TopicDetails: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./TopicDetails\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const CreateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./CreateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const UpdateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./UpdateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\ntype MetricsProps = {\n  kafkaId: string;\n};\n\nexport const Metrics: React.FC<MetricsProps> = ({ kafkaId }) => {\n  const history = useHistory();\n  const config = useConfig();\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n\n  if (config === undefined) {\n    return <AppServicesLoading/>;\n  }\n\n  const onCreateTopic = () => {\n    history.push(`${basename}/topic/create`);\n  };\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./Metrics\"\n      render={(MetricsFederated) => <MetricsFederated kafkaId={kafkaId} onCreateTopic={onCreateTopic}/>}\n    />\n  );\n};\n","import { Config } from '@rhoas/app-services-ui-shared';\n\nconst defaultHostname = 'console.redhat.com';\n\ntype FederatedModulesConfig = Config['federatedModules'];\n\ntype EnvironmentConfig = {\n  hostnames: string[];\n  fetchConfig?: boolean;\n  type?: string;\n  config: Omit<Config, 'federatedModules'>;\n};\n\nexport type EnvironmentConfigs = Array<EnvironmentConfig>;\n\nexport const filterEnvironmentConfig = (environmentConfig: EnvironmentConfigs): EnvironmentConfig => {\n  const hostname = window.location.hostname;\n  console.log(`Filter config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(hostname));\n  if (possibleConfigs.length > 1) {\n    throw new Error(`Unable to find config for ${hostname}, more than one config matched ${possibleConfigs}`);\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(defaultHostname));\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      return possibleDefaultConfigs[0];\n    }\n  }\n  return possibleConfigs[0];\n};\n\nexport const addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfig,\n  federatedModulesConfig: FederatedModulesConfig,\n  beta: boolean\n): Config => {\n  const federatedModules = {} as FederatedModulesConfig;\n  Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n    let { basePath } = v;\n    let fallbackBasePath: string | undefined = undefined;\n    if (environmentConfig.type !== 'proxy') {\n      basePath = v.fallbackBasePath;\n    } else {\n      fallbackBasePath = v.fallbackBasePath;\n    }\n    if (!beta) {\n      if (basePath.startsWith('/beta')) {\n        basePath = basePath.substring(5);\n      }\n      if (fallbackBasePath?.startsWith('/beta')) {\n        fallbackBasePath = fallbackBasePath.substring(5);\n      }\n    }\n    federatedModules[k] = {\n      basePath,\n      fallbackBasePath\n    };\n  });\n  return {\n    ...environmentConfig.config,\n    federatedModules,\n  };\n};\n","import React from 'react';\nimport { Config, ConfigContext } from '@rhoas/app-services-ui-shared';\nimport configs from '../../../../config/config.json';\nimport { addFederatedModulesToConfig, EnvironmentConfigs, filterEnvironmentConfig } from '@app/providers/config/utils';\nimport { useFeatureFlags } from \"@app/providers/featureflags/FeatureFlags\";\n\ndeclare const __webpack_public_path__: string;\n\nexport const EmbeddedConfigProvider: React.FunctionComponent = ({ children }) => {\n\n  const { beta } = useFeatureFlags();\n\n  const [value, setValue] = React.useState<Config | undefined>(() => {\n    const environmentConfig = filterEnvironmentConfig(configs.config as EnvironmentConfigs);\n    if (environmentConfig.fetchConfig) {\n      return undefined;\n    }\n    const config = addFederatedModulesToConfig(environmentConfig, configs.federatedModules, beta);\n    console.log('Done loading config', config);\n    return config;\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      if (value === undefined) {\n        const response = await fetch(`${__webpack_public_path__}config.json`);\n        const jsonConfig = await response.json();\n        const environmentConfig = filterEnvironmentConfig(jsonConfig.config);\n        const config = addFederatedModulesToConfig(environmentConfig, jsonConfig.federatedModules, beta);\n        console.log('Done loading config', config);\n        setValue(config);\n      }\n    })();\n  }, []);\n  return <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>;\n};\n","import React, { useContext } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport type FeatureFlags = {\n  beta: boolean\n}\n\nexport const FeatureFlagsContext = React.createContext<FeatureFlags | undefined>(undefined);\n\nexport const useFeatureFlags = (): FeatureFlags => {\n  const answer = useContext(FeatureFlagsContext);\n  if (answer === undefined) {\n    throw new Error('useFeatureFlags must be used inside a FeatureFlagContext provider');\n  }\n  return answer;\n};\n\nexport const FeatureFlagProvider: React.FunctionComponent = ({\n                                                               children\n                                                             }) => {\n  const value = {\n    beta: window.location.pathname.startsWith('/beta')\n  } as FeatureFlags;\n  return (\n    <FeatureFlagsContext.Provider value={value}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  )\n}\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (!registry) {\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport { accessibleRouteChangeHandler };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from \"keycloak-js\";\nimport Cookies from \"js-cookie\";\nimport { Base64 } from \"js-base64\";\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\n\n\n\n\nconst REFRESH_TOKEN_COOKIE_NAME = 'mrt';\nconst MIN_VALIDITY = 50;\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n};\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const initKeycloak = async (\n  config: KeycloakConfig,\n  getInsightsAccessToken: () => Promise<string>\n): Promise<KeycloakInstance> => {\n  const initOptions = {\n    responseMode: 'query',\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken) {\n    const rk = Keycloak(config);\n    // Use the refresh token\n    try {\n      // Perform a keycloak init without a login\n      await rk.init(initOptions);\n      // Set the saved refresh token into Keycloak\n      rk.refreshToken = refreshToken;\n      // Then force a token refresh to check if the refresh token is actually valid\n      await rk.updateToken(-1);\n      return rk;\n    } catch {\n      clearRefreshToken();\n      await logout(rk);\n    }\n  }\n  const lk = Keycloak(config);\n  initOptions.onLoad = 'login-required';\n  await lk.init(initOptions);\n  if (lk.refreshToken) {\n    await storeRefreshToken(lk.refreshToken, getInsightsAccessToken);\n  }\n  return lk;\n};\n\nconst retrieveRefreshToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = (JSON.parse(storedToken) as unknown) as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n};\n\nconst clearRefreshToken = () => {\n  console.debug('clearing stored refresh token');\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n};\n\nconst storeRefreshToken = async (refreshToken: string, getInsightsAccessToken: () => Promise<string>) => {\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const rhUserId = insightsJWT['account_id'];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId,\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug('storing refresh token');\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n};\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getAccessToken = async (keycloak: KeycloakInstance, getInsightsAccessToken: () => Promise<string>): Promise<string> => {\n  await keycloak.updateToken(MIN_VALIDITY);\n  if (!keycloak.token || !keycloak.tokenParsed) {\n    throw new Error('No token from keycloak!');\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== keycloak.tokenParsed['rh-user-id']) {\n    await logout(keycloak);\n    return '';\n  }\n  if (keycloak.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak.token;\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.info('Trigger MASSSO logout');\n    await k.logout();\n  }\n};\n"],"names":["routeFocusTimer","NotFoundPage","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","window","clearTimeout","PageNotFoundRoute","title","Route","component","flattenedRoutes","routes","reduce","flattened","route","getAdminServerUrl","kafkaRequest","undefined","Error","bootstrap_server_host","kafkaRoutes","exact","label","path","devPreview","WrappedRoute","Component","underlyingProps","url","rest","getBasename","render","routeProps","BasenameContext","value","QuickStartLoaderFederated","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","KasPage","OverviewPage","ResourcesPage","RulesPage","RolesPage","ServiceAccountsPage","CosPage","RedirectToStreamsKafkas","Redirect","to","appRoutes","auth","useAuth","history","useHistory","config","useConfig","useState","setKafkaRequest","id","useParams","useEffect","kas","getToken","accessToken","DefaultApi","basePath","apiBasePath","getKafkaById","kafka","data","kafkaDetail","adminServerUrl","useKafkaInstance","routeMatch","useRouteMatch","error","setError","isInstanceDrawerOpen","setIsInstanceDrawerOpen","activeDrawerTab","setActiveDrawerTab","serviceDown","AppServicesLoading","props","kafkaPageLink","createHref","pathname","kafkaInstanceLink","showMetrics","kafkaId","onError","code","kafkaName","name","handleInstanceDrawer","isOpen","activeTab","showSchemas","ServiceRegistry","redirectAfterDeleteInstance","push","className","PrincipalsProvider","kafkaInstance","isExpanded","onClose","Switch","map","idx","routePath","console","log","key","basename","getBaseName","location","show","AppRoutes","LastLocationProvider","fallback","connect","insights","getAppId","defaultAppId","parts","split","length","chrome","init","appId","identifyApp","unregister","on","event","includes","navId","useIsMounted","isMounted","useRef","current","FederatedModule","scope","module","getModuleInfo","modules","moduleInfo","setModuleInfo","fallbackBasePath","DynamicFederatedModule","ready","setReady","failed","setFailed","element","document","createElement","src","type","async","onload","onerror","head","appendChild","removeChild","useDynamicScript","entryPoint","container","default","get","factory","Module","debug","loadComponent","AssetsContext","getPath","usePrincipal","serviceAccountPrincipals","setServiceAccountPrincipals","userAcountPrincipals","setUserAccountPrincipals","rbac","principalApi","PrincipalApi","listPrincipals","then","response","p","username","principalType","PrincipalType","displayName","first_name","last_name","emailAddress","email","userAccounts","SecurityApi","getServiceAccounts","items","sa","client_id","serviceAccounts","getAllPrincipals","answer","concat","getAllUserAccounts","getAllServiceAccounts","children","PrincipalsContext","InstanceDrawer","masSso","authServerUrl","realm","tokenEndPointUrl","onDeleteInstance","InstanceDrawerFederated","instanceDetail","fetchModuleInfo","baseUrl","fetch","json","fedMods","s","entry","startsWith","FederatedModuleContext","FederatedModuleProvider","moduleInfoCache","Provider","federatedModules","useFederatedModule","DevelopmentPreview","t","useTranslation","style","height","Banner","isSticky","variant","Bullseye","Popover","hasAutoWidth","bodyContent","position","minWidth","maxWidth","Button","KasModalLoader","KasModalLoaderFederated","AccessReviewActionEnum","AccessReviewResourceTypeEnum","AccessReviewResponseActionEnum","AccessReviewResponseResourceTypeEnum","CapabilityReviewRequestCapabilityEnum","CapabilityReviewRequestTypeEnum","ClusterAuthorizationRequestProductCategoryEnum","ClusterAuthorizationRequestProductIdEnum","OneMetricHealthStateEnum","PermissionActionEnum","PermissionAllOfActionEnum","ResourceQuotaTypeEnum","ResourceQuotaAllOfTypeEnum","ResourceQuotaRequestTypeEnum","ResourceReviewActionEnum","ResourceReviewResourceTypeEnum","ResourceReviewRequestActionEnum","ResourceReviewRequestResourceTypeEnum","RoleBindingTypeEnum","RoleBindingAllOfTypeEnum","SelfAccessReviewActionEnum","SelfAccessReviewResourceTypeEnum","SelfResourceReviewActionEnum","SelfResourceReviewResourceTypeEnum","SelfResourceReviewRequestActionEnum","SelfResourceReviewRequestResourceTypeEnum","SubscriptionProductBundleEnum","SubscriptionServiceLevelEnum","SubscriptionSupportLevelEnum","SubscriptionSystemUnitsEnum","SubscriptionUsageEnum","SubscriptionAllOfProductBundleEnum","SubscriptionAllOfServiceLevelEnum","SubscriptionAllOfSupportLevelEnum","SubscriptionAllOfSystemUnitsEnum","SubscriptionAllOfUsageEnum","SubscriptionCreateRequestPlanIdEnum","SubscriptionCreateRequestStatusEnum","SubscriptionPatchRequestClusterBillingModelEnum","SubscriptionPatchRequestProductBundleEnum","SubscriptionPatchRequestServiceLevelEnum","SubscriptionPatchRequestSupportLevelEnum","SubscriptionPatchRequestSystemUnitsEnum","SubscriptionPatchRequestUsageEnum","SupportCasesRequestSeverityEnum","BASE_PATH","replace","configuration","axios","this","field","msg","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","RequiredError","setBearerAuthToObject","object","setSearchParams","searchParams","URLSearchParams","search","objects","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","hash","createRequestFunction","axiosArgs","globalAxios","axiosRequestArgs","options","request","Status","DefaultApiFp","localVarAxiosParamCreator","apiAccountsMgmtV1AccessTokenPost","Promise","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","apiAccountsMgmtV1AccountsGet","page","size","orderBy","fields","fetchLabels","fetchCapabilities","apiAccountsMgmtV1AccountsIdGet","localVarPath","encodeURIComponent","String","apiAccountsMgmtV1AccountsIdLabelsGet","apiAccountsMgmtV1AccountsIdLabelsKeyDelete","apiAccountsMgmtV1AccountsIdLabelsKeyGet","apiAccountsMgmtV1AccountsIdLabelsKeyPatch","apiAccountsMgmtV1AccountsIdLabelsPost","apiAccountsMgmtV1AccountsIdPatch","accountPatchRequest","apiAccountsMgmtV1AccountsPost","account","dryRun","apiAccountsMgmtV1ClusterAuthorizationsPost","clusterAuthorizationRequest","apiAccountsMgmtV1ClusterRegistrationsPost","clusterRegistrationRequest","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1ErrorsGet","apiAccountsMgmtV1ErrorsIdGet","apiAccountsMgmtV1FeatureTogglesIdQueryPost","featureToggleQueryRequest","apiAccountsMgmtV1LabelsGet","apiAccountsMgmtV1MetricsGet","apiAccountsMgmtV1NotifyPost","notificationRequest","apiAccountsMgmtV1OrganizationsGet","apiAccountsMgmtV1OrganizationsIdGet","apiAccountsMgmtV1OrganizationsIdLabelsGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete","apiAccountsMgmtV1OrganizationsIdLabelsKeyGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch","apiAccountsMgmtV1OrganizationsIdLabelsPost","apiAccountsMgmtV1OrganizationsIdPatch","organizationPatchRequest","apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","orgId","fetchRelatedResources","apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost","resourceQuotaRequest","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete","quotaId","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch","apiAccountsMgmtV1OrganizationsPost","organization","apiAccountsMgmtV1PlansGet","apiAccountsMgmtV1PlansIdGet","apiAccountsMgmtV1PullSecretsExternalResourceIdDelete","externalResourceId","apiAccountsMgmtV1PullSecretsPost","pullSecretRequest","apiAccountsMgmtV1RegistriesGet","apiAccountsMgmtV1RegistriesIdGet","apiAccountsMgmtV1RegistryCredentialsGet","apiAccountsMgmtV1RegistryCredentialsIdDelete","apiAccountsMgmtV1RegistryCredentialsIdGet","apiAccountsMgmtV1RegistryCredentialsIdPatch","registryCredentialPatchRequest","apiAccountsMgmtV1RegistryCredentialsPost","registryCredential","apiAccountsMgmtV1ReservedResourcesGet","apiAccountsMgmtV1ResourceQuotaGet","apiAccountsMgmtV1RoleBindingsGet","apiAccountsMgmtV1RoleBindingsIdDelete","apiAccountsMgmtV1RoleBindingsIdGet","apiAccountsMgmtV1RoleBindingsIdPatch","roleBindingRequest","apiAccountsMgmtV1RoleBindingsPost","roleBindingCreateRequest","apiAccountsMgmtV1RolesGet","apiAccountsMgmtV1RolesIdGet","apiAccountsMgmtV1SkuRulesGet","apiAccountsMgmtV1SkuRulesIdGet","apiAccountsMgmtV1SkusGet","apiAccountsMgmtV1SkusIdGet","apiAccountsMgmtV1SubscriptionsGet","fetchAccounts","labels","apiAccountsMgmtV1SubscriptionsIdDelete","apiAccountsMgmtV1SubscriptionsIdGet","fetchCpuAndSocket","apiAccountsMgmtV1SubscriptionsIdLabelsGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete","apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch","apiAccountsMgmtV1SubscriptionsIdLabelsPost","apiAccountsMgmtV1SubscriptionsIdNotifyPost","apiAccountsMgmtV1SubscriptionsIdPatch","subscriptionPatchRequest","apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet","apiAccountsMgmtV1SubscriptionsIdSupportCasesGet","apiAccountsMgmtV1SubscriptionsPost","subscriptionCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete","subId","accountId","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost","notificationContactCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet","reservedResourceId","apiAccountsMgmtV1SupportCasesCaseIdDelete","caseId","apiAccountsMgmtV1SupportCasesPost","supportCasesRequest","apiAccountsMgmtV1TokenAuthorizationPost","tokenAuthorizationRequest","apiAuthorizationsV1AccessReviewPost","accessReview","apiAuthorizationsV1CapabilityReviewPost","capabilityReviewRequest","apiAuthorizationsV1ExportControlReviewPost","exportControlReviewRequest","apiAuthorizationsV1FeatureReviewPost","featureReview","apiAuthorizationsV1ResourceReviewPost","resourceReviewRequest","apiAuthorizationsV1SelfAccessReviewPost","selfAccessReview","apiAuthorizationsV1SelfFeatureReviewPost","selfFeatureReview","apiAuthorizationsV1SelfResourceReviewPost","selfResourceReviewRequest","apiAuthorizationsV1SelfTermsReviewPost","selfTermsReview","apiAuthorizationsV1TermsReviewPost","termsReview","DefaultApiAxiosParamCreator","localVarAxiosArgs","BaseAPI","useQuota","param","apiKey","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","productId","setOrgId","ams","orgID","getQuota","filteredQuota","loading","isServiceDown","kasQuotaId","kasTrialQuotaId","srsQuotaId","srsTrialQuotaId","ProductType","trialQuotaId","quotaKey","QuotaType","trialQuotaKey","getQuotaTypesByProductId","res","quotaData","Map","quota","filter","q","quota_id","trim","trialQuota","allowed","remaining","consumed","catch","useMemo","fetchTermsReviewFactory","termsConfig","event_code","eventCode","site_code","siteCode","buildUrlParams","params","Object","keys","join","useModalControl","loadTermsReview","ref","load","r","useAsyncTermsReview","useLocation","shouldOpenCreateModal","parsed","parse","terms_required","preCreateInstance","open","terms_available","redirect_url","redirectURL","stringifyUrl","href","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","useInsights","getInsightsAccessToken","keycloakConfig","clientId","keycloakInstance","insightsChromeAuth","getKeycloakInstance","instance","getMASSSOToken","getUsername","getUser","identity","user","isOrgAdmin","is_org_admin","srs","apicurio_registry","useMASToken","getTokenEndPointUrl","resources","en","translation","appServicesi18n","use","initReactI18next","detection","order","caches","fallbackLng","interpolation","escapeValue","PageSection","PageSectionVariants","Stack","hasGutter","Title","headingLevel","Text","TextVariants","isWidthLimited","Grid","lg","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","StackItem","ButtonVariant","target","TitleSizes","GridItem","md","frameBorder","allow","allowFullScreen","TextContent","List","ListItem","OpenshiftManagedConnectors","OpenshiftStreamsFederated","QuotaContext","EmptyState","EmptyStateIcon","icon","EmptyStateBody","onClick","useBasename","beta","onClickKafkainstance","preventDefault","getKafkaHref","isLarge","alt","isInline","Label","QuickStartCatalogFederated","ServiceAccountsFederated","ServiceDownPage","ArtifactVersionDetailsConnected","artifactId","breadcrumbId","registry","ArtifactsConnected","ArtifactRedirectConnected","FederatedApicurioComponent","federateConfig","currentlyLoggedInuser","groupId","version","principals","owner","apiUrl","navPathPrefix","artifacts","features","readOnly","breadcrumbs","roleManagement","multiTenant","ui","navPrefixPath","createApicurioConfig","registryUrl","ServiceRegistryFederated","tenantId","RulesPageConnected","ServiceRegistryPage","ServiceRegistryPageConnected","SrsLayout","ServiceRegistrySchemaMapping","topicName","renderSchema","registryId","GetLink","Link","AccessDeniedPage","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","KafkaFederatedComponent","FederatedKafka","Topics","TopicDetails","CreateTopic","UpdateTopic","Metrics","onCreateTopic","MetricsFederated","filterEnvironmentConfig","environmentConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","federatedModulesConfig","entries","forEach","k","v","substring","EmbeddedConfigProvider","fetchConfig","setValue","jsonConfig","ConfigContext","FeatureFlagsContext","useFeatureFlags","useContext","FeatureFlagProvider","middleware","register","notifications","release","pathName","shift","accessibleRouteChangeHandler","setTimeout","mainContainer","getElementById","focus","useDocumentTitle","originalTitle","REFRESH_TOKEN_COOKIE_NAME","initKeycloak","initOptions","responseMode","retrieveRefreshToken","refreshToken","rk","updateToken","clearRefreshToken","logout","lk","onLoad","storeRefreshToken","encoded","storedToken","Base64","storedRefreshToken","refreshJWT","exp","getUnixTime","Date","insightsToken","rhUserId","insightsJWT","getAccessToken","keycloak","token","tokenParsed","info"],"sourceRoot":""}