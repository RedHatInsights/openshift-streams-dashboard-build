{"version":3,"sources":["webpack://mk-ui-host/./src/app/App.scss","webpack://mk-ui-host/./src/app/App.scss?af09","webpack://mk-ui-host/./src/app/utils/useDocumentTitle.ts","webpack://mk-ui-host/./src/app/NotFound/NotFound.tsx","webpack://mk-ui-host/./src/app/Components/FederatedModule/utils.tsx","webpack://mk-ui-host/./src/app/Components/FederatedModule/FederatedModule.tsx","webpack://mk-ui-host/./src/app/Routes.tsx","webpack://mk-ui-host/./src/openapi/base.ts","webpack://mk-ui-host/./src/openapi/api.ts","webpack://mk-ui-host/./src/app/Components/QuickStart/QuickStartDrawerFederated.tsx","webpack://mk-ui-host/./src/app/utils/a11y.ts","webpack://mk-ui-host/./src/app/DataPlanePage/DataPlanePage.tsx","webpack://mk-ui-host/./src/app/ControlPlanePage/ControlPlanePage.tsx","webpack://mk-ui-host/./src/app/Components/QuickStart/QuickStartCatalogFederated.tsx","webpack://mk-ui-host/./src/app/App.tsx","webpack://mk-ui-host/./src/app/Components/Loading/Loading.tsx","webpack://mk-ui-host/./src/app/Config/Config.tsx","webpack://mk-ui-host/./src/app/store/index.ts","webpack://mk-ui-host/./src/app/utils/auth/AuthContext.tsx","webpack://mk-ui-host/./src/app/utils/getBaseName.ts","webpack://mk-ui-host/./src/app/utils/insights.ts","webpack://mk-ui-host/./src/app/utils/keycloakAuth.ts"],"names":["___CSS_LOADER_EXPORT___","i","push","module","id","options","useDocumentTitle","title","originalTitle","document","NotFound","PageSection","EmptyState","variant","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","history","Button","onClick","getEntryPoint","baseUrl","fileName","scope","Promise","endsWith","url","console","log","fetch","json","then","fedMods","s","entry","path","startsWith","FederatedModuleContext","FederatedModuleProvider","children","config","useContext","Config","undefined","Loading","Provider","value","federatedModules","routeFocusTimer","FederatedModule","render","fallback","federatedModuleContext","useState","setUrl","useEffect","basePath","entryPoint","ready","setReady","failed","setFailed","element","createElement","src","type","async","onload","onerror","error","head","appendChild","removeChild","useDynamicScript","Component","window","init","default","get","factory","Module","loadComponent","BASE_PATH","replace","configuration","axios","this","field","msg","name","Error","DefaultApiAxiosParamCreator","createKafka","kafkaRequestPayload","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","createServiceAccount","serviceAccountRequest","deleteKafkaById","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","getMetricsByKafkaId","duration","interval","filters","listCloudProviderRegions","page","listCloudProviders","listKafkas","orderBy","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","BaseAPI","QuickStartDrawerFederated","guides","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","rest","routeProps","PageNotFound","component","flattenedRoutes","insights","getToken","AuthContext","showCreateTopic","setShowCreateTopic","adminServerUrl","setAdminServerUrl","parts","location","pathname","split","length","chrome","auth","DefaultApi","controlPlane","serviceApiBasePath","kafka","bootstrapServerHost","onCreateTopic","onCloseCreateTopic","createTopicPage","FederatedTopics","apiBasePath","topicListPage","exact","label","onConnectInstance","event","getConnectToInstancePath","createHref","dispatch","useDispatch","addAlert","message","getUsername","getUser","user","identity","username","OpenshiftStreamsFederated","onConnectToInstance","to","QuickStartCatalogFederated","reduce","flattened","route","routes","AppRoutes","LastLocationProvider","map","idx","key","registry","register","notifications","connect","identifyApp","on","navId","store","getStore","Bullseye","Spinner","ConfigContext","ConfigProvider","configUrl","setConfig","controller","AbortController","signal","newConfig","abort","middleware","resolve","release","pathName","shift","InsightsContext","keycloak","REFRESH_TOKEN_COOKIE_NAME","getKeycloakInstance","k","initOptions","responseMode","storedRefreshToken","refreshJWT","exp","Date","refreshToken","updateToken","onLoad","getValidAccessToken","token"],"mappings":"gLAIIA,EAA0B,IAA4B,KAC1DA,EAAwBC,EAAE,KAE1BD,EAAwBE,KAAK,CAACC,EAAOC,GAAI,gEAAiE,GAAG,CAAC,QAAU,EAAE,QAAU,CAAC,gHAAgH,+GAA+G,MAAQ,GAAG,SAAW,iCAAiC,eAAiB,CAAC,qzCAAqzC,0CAA0C,WAAa,MAEzxD,W,2HCNIC,EAAU,CAEd,OAAiB,OACjB,WAAoB,GAEP,IAAI,IAASA,GAIX,W,gDCTR,SAASC,EAAiBC,GAC/B,aAAgB,WACd,IAAMC,EAAgBC,SAASF,MAG/B,OAFAE,SAASF,MAAQA,EAEV,WACLE,SAASF,MAAQC,KAElB,CAACD,I,0BCCAG,EAAoC,WAWxC,OACE,gBAAC,EAAAC,YAAW,KACZ,gBAAC,EAAAC,WAAU,CAACC,QAAQ,QAClB,gBAAC,EAAAC,eAAc,CAACC,KAAM,OACtB,gBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,MAAI,sBAGlC,gBAAC,EAAAC,eAAc,yEAGf,iBApBJ,WACE,IAAMC,GAAU,UAIhB,OACE,gBAAC,EAAAC,OAAM,CAACC,QAJV,WACEF,EAAQlB,KAAK,OAGe,kBAclB,S,gCCtBHqB,EAAgB,SAAOC,EAAiBC,EAAkBC,GAAa,6BAAGC,SAAO,W,qEACxFF,EAASG,SAAS,SACdC,EAASL,EAAO,IAAIC,EAC1BK,QAAQC,IAAI,YAAYF,GACP,GAAMG,MAAMH,KAH3B,M,OAIK,SADU,SACKI,OAAOC,MAAK,SAAAD,GAAQ,OAAAA,KAAeC,MAAK,SAAAC,GAAW,OAAAA,EAAQT,MAAQQ,MAAK,SAAAE,GAAK,OAAAA,EAAEC,MAAM,MAAIH,MAAK,SAAAI,GAClH,OAAIA,EAAKC,WAAWf,GACXc,EAECd,EAAO,IAAIc,M,OAJvB,MAAO,CAAP,EAAO,U,OAOP,MAAO,CAAP,EAAUd,EAAO,IAAIC,WCZnBe,EAAyB,kBAAiD,IAEnEC,EAAmD,SAAC,G,IACEC,EAAQ,WAGnEC,GAAS,IAAAC,YAAWC,EAAA,GAE1B,YAAeC,IAAXH,EACK,kBAACI,EAAA,EAAO,MAIf,kBAACP,EAAuBQ,SAAQ,CAACC,MAAON,EAAOO,kBAC5CR,IAmBP,IClCIS,EDqFSC,EAAiE,SAAC,G,IAAE1B,EAAK,QAAEvB,EAAM,SAAEkD,EAAM,SAAEC,EAAQ,WAExGC,EAAyB,eAAiBf,GAC1C,GAAgB,IAAAgB,YAAf3B,EAAG,KAAE4B,EAAM,MAElB,IAAAC,YAAU,YACS,yC,8DACI,SAAMnC,EAAcgC,EAAuB7B,GAAOiC,SAAUJ,EAAuB7B,GAAOkC,WAAYlC,I,cAAnHkC,EAAa,SACnBH,EAAOG,G,aAGR,CAAClC,EAAO6B,IAEL,MAhEiB,SAAC,G,IAAE1B,EAAG,MAEvB,EAAoB,cAAe,GAAlCgC,EAAK,KAAEC,EAAQ,KAChB,EAAsB,cAAe,GAApCC,EAAM,KAAEC,EAAS,KAmCxB,OAjCA,eAAgB,WACd,GAAKnC,EAAL,CAIA,IAAMoC,EAAUxD,SAASyD,cAAc,UAsBvC,OApBAD,EAAQE,IAAMtC,EACdoC,EAAQG,KAAO,kBACfH,EAAQI,OAAQ,EAEhBP,GAAS,GACTE,GAAU,GAEVC,EAAQK,OAAS,WACfxC,QAAQC,IAAI,oCAAoCF,GAChDiC,GAAS,IAGXG,EAAQM,QAAU,WAChBzC,QAAQ0C,MAAM,mCAAmC3C,GACjDiC,GAAS,GACTE,GAAU,IAGZvD,SAASgE,KAAKC,YAAYT,GAEnB,WACLnC,QAAQC,IAAI,qCAAqCF,GACjDpB,SAASgE,KAAKE,YAAYV,OAE3B,CAACpC,IAEG,CACLgC,MAAK,EACLE,OAAM,GAwBkBa,CAAiB,CAAE/C,IAAG,IAAxCgC,EAAK,QAAEE,EAAM,SAErB,IAAKF,GAASE,EACZ,OAAIA,GAAUT,EACLA,EAEF,KAGT,IAAMuB,EAAY,SAvFpB,SAAuBnD,EAAOvB,GAA9B,WACE,OAAO,sD,gEAEL,SAAM,IAAyB,Y,OAG/B,OAHA,SAGA,GAFkB2E,OAAOpD,GAETqD,KAAK,IAAyBC,U,OAC9B,OADhB,SACgB,GAAMF,OAAOpD,GAAOuD,IAAI9E,I,OAGxC,OAHM+E,EAAU,SACVC,EAASD,IACfpD,QAAQC,IAAOoD,EAAM,WAAWhF,EAAM,SAASuB,GACxC,CAAP,EAAOyD,WA8EPC,CAAc1D,EAAOvB,IAGvB,OACE,kBAAC,aAAc,CAACmD,SAAU,kBAACP,EAAA,EAAO,OAC/BM,EAAOwB,K,yCExGDQ,EAAY,4BAA4BC,QAAQ,OAAQ,IA4BrE,EAGI,SAAYC,EAAyC5B,EAAwC6B,QAAxC,IAAA7B,MAAA,QAAwC,IAAA6B,MAAA,KAAxC,KAAA7B,WAAwC,KAAA6B,QACrFD,IACAE,KAAKF,cAAgBA,EACrBE,KAAK9B,SAAW4B,EAAc5B,UAAY8B,KAAK9B,WAW3D,cAEI,WAAmB+B,EAAeC,GAAlC,MACI,YAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAAE,KAAwB,gB,EAI5B,OALmC,aAKnC,EALA,CAAmCC,OC4yBtBC,EAA8B,SAAUP,GAAV,WACvC,MAAO,CASHQ,YAAa,SAAO1B,EAAgB2B,EAA0C3F,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,qDAErG,GAAI0C,QACA,MAAM,IAAI4B,EAAc,QAAQ,4EAGpC,GAAID,QACA,MAAM,IAAIC,EAAc,sBAAsB,0FAqClD,MAnCqB,sCACfC,EAAiB,QADF,uCACsC,GAEvDX,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,QAAWF,GAAgB9F,GAC9DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,QAG7C1D,IAAVuB,IACAkC,EAA8B,MAAIlC,GAKtCiC,EAAwB,gBAAkB,mBAE1CJ,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAC9FC,EAAqD,iBAAxBb,GAAwF,qBAAnDI,EAAuBQ,QAAQ,gBACvGR,EAAuBU,KAAQD,EAAqBE,KAAKC,eAAkClE,IAAxBkD,EAAoCA,EAAsB,IAAOA,GAAuB,GAEpJ,CAAP,EAAO,CACHnE,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAUjBa,qBAAsB,SAAOC,EAA8C7G,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,qDAElG,GAAIuF,QACA,MAAM,IAAIjB,EAAc,wBAAwB,qGAiCpD,MA/BqB,+CACfC,EAAiB,QADF,gDACsC,GAEvDX,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,QAAWF,GAAgB9F,GAC9DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,GAK3DF,EAAwB,gBAAkB,mBAE1CJ,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAC9FC,EAAuD,iBAA1BK,GAA0F,qBAAnDd,EAAuBQ,QAAQ,gBACzGR,EAAuBU,KAAQD,EAAqBE,KAAKC,eAAoClE,IAA1BoE,EAAsCA,EAAwB,IAAOA,GAAyB,GAE1J,CAAP,EAAO,CACHrF,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAWjBe,gBAAiB,SAAO/G,EAAYiE,EAAgBhE,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,qDAE3E,GAAIvB,QACA,MAAM,IAAI6F,EAAc,KAAK,6EAGjC,GAAI5B,QACA,MAAM,IAAI4B,EAAc,QAAQ,gFAkCpC,OAhCMmB,EAAe,2CAChB9B,QAAQ,OAAa+B,mBAAmBC,OAAOlH,KAC9C8F,EAAiB,QAAsBkB,GAAc,GAEvD7B,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,UAAaF,GAAgB9F,GAChEiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,QAG7C1D,IAAVuB,IACAkC,EAA8B,MAAIlC,GAKtC6B,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAUjBmB,qBAAsB,SAAOnH,EAAYC,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,qDAEhE,GAAIvB,QACA,MAAM,IAAI6F,EAAc,KAAK,kFA8BjC,OA5BMmB,EAAe,oDAChB9B,QAAQ,OAAa+B,mBAAmBC,OAAOlH,KAC9C8F,EAAiB,QAAsBkB,GAAc,GAEvD7B,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,UAAaF,GAAgB9F,GAChEiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,GAK3DN,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAUjBoB,aAAc,SAAOpH,EAAYC,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,qDAExD,GAAIvB,QACA,MAAM,IAAI6F,EAAc,KAAK,0EA8BjC,OA5BMmB,EAAe,2CAChB9B,QAAQ,OAAa+B,mBAAmBC,OAAOlH,KAC9C8F,EAAiB,QAAsBkB,GAAc,GAEvD7B,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,OAAUF,GAAgB9F,GAC7DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,GAK3DN,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAajBqB,oBAAqB,SAAOrH,EAAYsH,EAAkBC,EAAkBC,EAAyBvH,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,qDAE5H,GAAIvB,QACA,MAAM,IAAI6F,EAAc,KAAK,iFAGjC,GAAIyB,QACA,MAAM,IAAIzB,EAAc,WAAW,uFAGvC,GAAI0B,QACA,MAAM,IAAI1B,EAAc,WAAW,uFA0CvC,OAxCMmB,EAAe,mDAChB9B,QAAQ,OAAa+B,mBAAmBC,OAAOlH,KAC9C8F,EAAiB,QAAsBkB,GAAc,GAEvD7B,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,OAAUF,GAAgB9F,GAC7DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,QAG1C1D,IAAb4E,IACAnB,EAAiC,SAAImB,QAGxB5E,IAAb6E,IACApB,EAAiC,SAAIoB,GAGrCC,IACArB,EAAgC,QAAIqB,GAKxC1B,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAYjByB,yBAA0B,SAAOzH,EAAY0H,EAAe5G,EAAeb,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,qDAElG,GAAIvB,QACA,MAAM,IAAI6F,EAAc,KAAK,sFAsCjC,OApCMmB,EAAe,4DAChB9B,QAAQ,OAAa+B,mBAAmBC,OAAOlH,KAC9C8F,EAAiB,QAAsBkB,GAAc,GAEvD7B,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,OAAUF,GAAgB9F,GAC7DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,QAG9C1D,IAATgF,IACAvB,EAA6B,KAAIuB,QAGxBhF,IAAT5B,IACAqF,EAA6B,KAAIrF,GAKrCgF,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAWjB2B,mBAAoB,SAAOD,EAAe5G,EAAeb,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,mDAoChF,MAnCqB,+CACfuE,EAAiB,QADF,gDACsC,GAEvDX,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,OAAUF,GAAgB9F,GAC7DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,QAG9C1D,IAATgF,IACAvB,EAA6B,KAAIuB,QAGxBhF,IAAT5B,IACAqF,EAA6B,KAAIrF,GAKrCgF,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAajB4B,WAAY,SAAOF,EAAe5G,EAAe+G,EAAkBvB,EAAiBrG,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,mDA4C3G,MA3CqB,sCACfuE,EAAiB,QADF,uCACsC,GAEvDX,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,OAAUF,GAAgB9F,GAC7DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,QAG9C1D,IAATgF,IACAvB,EAA6B,KAAIuB,QAGxBhF,IAAT5B,IACAqF,EAA6B,KAAIrF,QAGrB4B,IAAZmF,IACA1B,EAAgC,QAAI0B,QAGzBnF,IAAX4D,IACAH,EAA+B,OAAIG,GAKvCR,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WASjB8B,oBAAqB,SAAO7H,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,mDA4BnD,MA3BqB,+CACfuE,EAAiB,QADF,gDACsC,GAEvDX,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,OAAUF,GAAgB9F,GAC7DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,GAK3DN,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,WAUjB+B,yBAA0B,SAAO/H,EAAYC,G,YAAA,IAAAA,MAAA,K,iBAAoBsB,SAAO,W,qDAEpE,GAAIvB,QACA,MAAM,IAAI6F,EAAc,KAAK,sFA8BjC,OA5BMmB,EAAe,sEAChB9B,QAAQ,OAAa+B,mBAAmBC,OAAOlH,KAC9C8F,EAAiB,QAAsBkB,GAAc,GAEvD7B,IACAY,EAAcZ,EAAcY,aAE1BC,GAAyB,kBAAEC,OAAQ,QAAWF,GAAgB9F,GAC9DiG,EAA0B,GAC1BC,EAAyB,GAI3BhB,GAAiBA,EAAciB,cACzBA,EAAmD,mBAA9BjB,EAAciB,YACnCjB,EAAciB,cACdjB,EAAciB,YACpBF,EAAuC,cAAI,UAAYE,GAK3DN,EAAeO,OAAQ,6BAAIP,EAAeO,OAAUF,GAA2BlG,EAAQoG,cAEhFP,EAAeQ,OAClBC,EAAyBR,GAAeA,EAAYS,QAAUT,EAAYS,QAAU,GACxFR,EAAuBQ,SAAU,6BAAIN,GAA4BK,GAA2BtG,EAAQuG,SAE7F,CAAP,EAAO,CACH/E,IAAK,SAAuBqE,GAC5B7F,QAAS+F,aAUZgC,EAAe,SAAS7C,GACjC,MAAO,CASGQ,YAAN,SAAkB1B,EAAgB2B,EAA0C3F,G,2BAAgBsB,SAAO,W,8DACrE,SAAMmE,EAA4BP,GAAeQ,YAAY1B,EAAO2B,EAAqB3F,I,OACnH,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAUvBrB,qBAAN,SAA2BC,EAA8C7G,G,2BAAgBsB,SAAO,W,8DAClE,SAAMmE,EAA4BP,GAAe0B,qBAAqBC,EAAuB7G,I,OACvH,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAWvBnB,gBAAN,SAAsB/G,EAAYiE,EAAgBhE,G,2BAAgBsB,SAAO,W,8DAC3C,SAAMmE,EAA4BP,GAAe4B,gBAAgB/G,EAAIiE,EAAOhE,I,OACtG,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAUvBf,qBAAN,SAA2BnH,EAAYC,G,2BAAgBsB,SAAO,W,8DAChC,SAAMmE,EAA4BP,GAAegC,qBAAqBnH,EAAIC,I,OACpG,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAUvBd,aAAN,SAAmBpH,EAAYC,G,2BAAgBsB,SAAO,W,8DACxB,SAAMmE,EAA4BP,GAAeiC,aAAapH,EAAIC,I,OAC5F,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAavBb,oBAAN,SAA0BrH,EAAYsH,EAAkBC,EAAkBC,EAAyBvH,G,2BAAgBsB,SAAO,W,8DAC5F,SAAMmE,EAA4BP,GAAekC,oBAAoBrH,EAAIsH,EAAUC,EAAUC,EAASvH,I,OAChI,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAYvBT,yBAAN,SAA+BzH,EAAY0H,EAAe5G,EAAeb,G,2BAAgBsB,SAAO,W,8DAClE,SAAMmE,EAA4BP,GAAesC,yBAAyBzH,EAAI0H,EAAM5G,EAAMb,I,OACpH,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAWvBP,mBAAN,SAAyBD,EAAe5G,EAAeb,G,2BAAgBsB,SAAO,W,8DAChD,SAAMmE,EAA4BP,GAAewC,mBAAmBD,EAAM5G,EAAMb,I,OAC1G,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAavBN,WAAN,SAAiBF,EAAe5G,EAAe+G,EAAkBvB,EAAiBrG,G,2BAAgBsB,SAAO,W,8DAC3E,SAAMmE,EAA4BP,GAAeyC,WAAWF,EAAM5G,EAAM+G,EAASvB,EAAQrG,I,OACnH,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aASvBJ,oBAAN,SAA0B7H,G,2BAAgBsB,SAAO,W,8DACnB,SAAMmE,EAA4BP,GAAe2C,oBAAoB7H,I,OAC/F,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,aAUvBH,yBAAN,SAA+B/H,EAAYC,G,2BAAgBsB,SAAO,W,8DACpC,SAAMmE,EAA4BP,GAAe4C,yBAAyB/H,EAAIC,I,OACxG,OADMgI,EAAoB,SACnB,CAAP,EAAO,SAAC7C,EAAoC7B,QAApC,IAAA6B,MAAA,UAAoC,IAAA7B,MAAA,GACxC,IAAM2E,GAAmB,oBAAID,EAAkBhI,SAAO,CAAEwB,IAAK8B,EAAW0E,EAAkBxG,MAC1F,OAAO2D,EAAM+C,QAAQD,eA6QrC,2B,+CA+IA,OA/IgC,aAUrB,YAAAvC,YAAP,SAAmB1B,EAAgB2B,EAA0C3F,GAA7E,WACI,OAAO+H,EAAa3C,KAAKF,eAAeQ,YAAY1B,EAAO2B,EAAqB3F,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAWjI,YAAAsD,qBAAP,SAA4BC,EAA8C7G,GAA1E,WACI,OAAO+H,EAAa3C,KAAKF,eAAe0B,qBAAqBC,EAAuB7G,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAYrI,YAAAwD,gBAAP,SAAuB/G,EAAYiE,EAAgBhE,GAAnD,WACI,OAAO+H,EAAa3C,KAAKF,eAAe4B,gBAAgB/G,EAAIiE,EAAOhE,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAWpH,YAAA4D,qBAAP,SAA4BnH,EAAYC,GAAxC,WACI,OAAO+H,EAAa3C,KAAKF,eAAegC,qBAAqBnH,EAAIC,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAWlH,YAAA6D,aAAP,SAAoBpH,EAAYC,GAAhC,WACI,OAAO+H,EAAa3C,KAAKF,eAAeiC,aAAapH,EAAIC,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAc1G,YAAA8D,oBAAP,SAA2BrH,EAAYsH,EAAkBC,EAAkBC,EAAyBvH,GAApG,WACI,OAAO+H,EAAa3C,KAAKF,eAAekC,oBAAoBrH,EAAIsH,EAAUC,EAAUC,EAASvH,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAa9I,YAAAkE,yBAAP,SAAgCzH,EAAY0H,EAAe5G,EAAeb,GAA1E,WACI,OAAO+H,EAAa3C,KAAKF,eAAesC,yBAAyBzH,EAAI0H,EAAM5G,EAAMb,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAYlI,YAAAoE,mBAAP,SAA0BD,EAAe5G,EAAeb,GAAxD,WACI,OAAO+H,EAAa3C,KAAKF,eAAewC,mBAAmBD,EAAM5G,EAAMb,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAcxH,YAAAqE,WAAP,SAAkBF,EAAe5G,EAAe+G,EAAkBvB,EAAiBrG,GAAnF,WACI,OAAO+H,EAAa3C,KAAKF,eAAeyC,WAAWF,EAAM5G,EAAM+G,EAASvB,EAAQrG,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAUjI,YAAAuE,oBAAP,SAA2B7H,GAA3B,WACI,OAAO+H,EAAa3C,KAAKF,eAAe2C,oBAAoB7H,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAW7G,YAAAwE,yBAAP,SAAgC/H,EAAYC,GAA5C,WACI,OAAO+H,EAAa3C,KAAKF,eAAe4C,yBAAyB/H,EAAIC,GAAS6B,MAAK,SAACqG,GAAY,OAAAA,EAAQ,EAAK/C,MAAO,EAAK7B,cAGjI,EA/IA,CAAgC6E,GCp1DnBC,EAA+C,SAAC,G,IAAE/F,EAAQ,WAE/DC,GAAS,IAAAC,YAAWC,EAAA,GAE1B,YAAeC,IAAXH,EACK,kBAACI,EAAA,EAAO,MAIf,kBAACK,EAAe,CACd1B,MAAM,SACNvB,OAAO,qBACPmD,SAAUZ,EACVW,OAAQ,SAACoF,GAA8B,OACrC,kBAACA,EAAyB,CAAC9E,SAAUhB,aAAM,EAANA,EAAQO,iBAAiBwF,OAAO/E,UAClEjB,OH+CLiG,EAAqB,SAACC,GAC1B,IAAMC,GAAiB,IAAAC,mBACvB,eAAgB,WAId,OAHKF,GAA8B,OAAnBC,IACd1F,EItEG2B,OAAOiE,YAAW,WACvB,IAAMC,EAAgBvI,SAASwI,eAAe,yBAC1CD,GACFA,EAAcE,UAEf,KJmEM,WACLpE,OAAOqE,aAAahG,MAErB,CAACyF,EAASC,KAGTO,EAAwB,SAAC,GAAE,IAAWvE,EAAS,YAAE,IAAA+D,eAAO,IAAG,GAAK,EAAErI,EAAK,QAAK8I,GAAI,UAAvD,iCAY7B,OAXAV,EAAmBC,GACnBtI,EAAiBC,GAUV,kBAAC,KAAK,CAAC8C,OARd,SAAwBiG,GACtB,OACE,kBAACb,EAAyB,KACxB,kBAAC5D,GAAS,WAAKwE,EAAUC,SAQ3BC,EAAe,SAAC,GAEpB,OADAjJ,EAD2B,SAEpB,kBAAC,KAAK,CAACkJ,UAAW9I,KAGrB+I,EAlE2B,CAC/B,CACED,UK3BkD,WAEpD,IAAME,GAAW,IAAA9G,YAAW,KACtBD,GAAS,IAAAC,YAAWC,EAAA,GAClB8G,GAAa,IAAA/G,YAAWgH,EAAA,GAAY,SACtC,GAAwC,IAAApG,WAAS,GAAhDqG,EAAe,KAAEC,EAAkB,KACpC,GAAsC,IAAAtG,YAArCuG,EAAc,KAAEC,EAAiB,KAIlCC,GADWnF,OAAOoF,SAASC,SAASvI,SAAS,KAAOkD,OAAOoF,SAASC,SAAcrF,OAAOoF,SAASC,SAAQ,KACzFC,MAAM,KACvBhK,EAAK6J,EAAMA,EAAMI,OAAS,GAiBhC,IAJA,IAAA3G,YAAU,YAXa,yC,gEACD,SAAMgG,EAASY,OAAOC,KAAKZ,Y,OAMjC,OANRnD,EAAc,SAMN,GALM,IAAIgE,EAAW,CACjChE,YAAW,EACX7C,UAAUhB,aAAM,EAANA,EAAQ8H,aAAaC,qBAAsB,KAGvBlD,aAAapH,I,cAAvCuK,EAAQ,SACdX,EAAkB,wBAAwBW,EAAM7D,KAAK8D,oBAAmB,S,aAKxE,CAAClB,EAAU/G,SAEEG,IAAXH,QAA2CG,IAAnBiH,EAC1B,OAAO,kBAAChH,EAAA,EAAO,MAGjB,IAAM8H,EAAgB,WACpBf,GAAmB,IAGfgB,EAAqB,WACzBhJ,QAAQC,IAAI,YACZ+H,GAAmB,IAGfiB,EAAkB,kBAAC3H,EAAe,CACtC1B,MAAM,QACNvB,OAAO,uBACPkD,OAAQ,SAAC2H,GAAoB,yBAACA,EAAe,CAC3CrB,SAAUA,EACVsB,YAAalB,EACbe,mBAAoBA,OAIlBI,EAAgB,kBAAC9H,EAAe,CACpC1B,MAAM,QACNvB,OAAO,kBACPkD,OAAQ,SAAC2H,GAAoB,yBAACA,EAAe,CAC3CrB,SAAUA,EACVsB,YAAalB,EACbc,cAAeA,OAInB,OAAIhB,EACKkB,EAEAG,GLpCPC,OAAO,EACPC,MAAO,6CACP9I,KAAM,4BACN/B,MAAO,8CAET,CACEiJ,UMhCqD,WAEvD,IAAME,GAAW,IAAA9G,YAAW,KACtBD,GAAS,IAAAC,YAAWC,EAAA,GAEpBzB,GAAU,UAEViK,EAAoB,SAAOC,GAAK,gD,iCACpC,QAAiBxI,IAAbwI,EAAMlL,GACR,MAAM,IAAIyF,M,OAEZzE,EAAQlB,KAAK,6BAA6BoL,EAAMlL,I,WAG5CmL,EAA2B,SAACD,GAChC,QAAiBxI,IAAbwI,EAAMlL,GACR,MAAM,IAAIyF,MAEZ,OAAOzE,EAAQoK,WAAW,CAAErB,SAAU,6BAA6BmB,EAAMlL,MAGrEqL,GAAW,IAAAC,eAEXC,EAAW,SAACC,EAAiB/K,GACjC4K,GACE,QAAgB,CACd5K,QAASA,EACTN,MAAOqL,MAMb,QAAe9I,IAAXH,EACF,OAAO,kBAACI,EAAA,EAAO,MAGjB,IAAM8I,EAAc,WAAM,OAAAnC,EAASY,OAAOC,KAAKuB,UAAU5J,MAAK,SAAA6J,GAAQ,OAAAA,EAAKC,SAASD,KAAKE,aAqBzF,OAlBE,kBAAC7I,EAAe,CACd1B,MAAM,MACNvB,OAAO,qBACPkD,OAAQ,SAAC6I,GACP,OACE,kBAACA,EAAyB,CACxBvC,SAAUD,EAASY,OAAOC,KAAKZ,SAC/BkC,YAAaA,EACbM,oBAAqBd,EACrBE,yBAA0BA,EAC1BI,SAAUA,EACVhI,SAAUhB,aAAM,EAANA,EAAQ8H,aAAaC,yBNlBvCS,OAAO,EACPC,MAAO,6CACP9I,KAAM,qBACN/B,MAAO,8CAET,CACEiJ,UAlB2C,WAAM,OAAC,kBAAC,KAAQ,CAAC4C,GAAG,wBAmB/DjB,OAAO,EACPC,MAAO,6CACP9I,KAAM,IACN/B,MAAO,8CAET,CACEiJ,UOrDyD,WAAM,OACjE,kBAACpG,EAAe,CACd1B,MAAM,SACNvB,OAAO,sBACPkD,OAAQ,SAACgJ,GAA+B,yBAACA,EAA0B,UPkDnElB,OAAO,EACPC,MAAO,yDACP9I,KAAM,eACN/B,MAAO,2DAuCiC+L,QAC1C,SAACC,EAAWC,GAAU,2BAAID,GAAeC,EAAMC,OAASD,EAAMC,OAAS,CAACD,MACxE,IAGIE,EAAY,WAA0B,OAC1C,kBAAC,EAAAC,qBAAoB,KACnB,kBAAC,KAAM,KACJlD,EAAgBmD,KAAI,SAAC,EAA4CC,G,IAA1CvK,EAAI,OAAE6I,EAAK,QAAE3B,EAAS,YAAEjJ,EAAK,QAAEqI,EAAO,UAAY,OACxE,kBAACQ,EAAqB,CACpB9G,KAAMA,EACN6I,MAAOA,EACP3B,UAAWA,EACXsD,IAAKD,EACLtM,MAAOA,EACPqI,QAASA,OAGb,kBAACW,EAAY,CAAChJ,MAAM,0BQ3GpBwM,GAAW,UACjBA,EAASC,SAAS,CAAEC,cAAa,OA+BjC,SAAe,IAAAC,UAAf,EA7B4C,WAE1C,IAAMxD,GAAW,IAAA9G,YAAW,KACtBxB,GAAU,UAYhB,OAVA,IAAAsC,YAAU,WACRgG,EAASY,OAAOvF,OAChB2E,EAASY,OAAO6C,YAAY,wBAG5BzD,EAASY,OAAO8C,GAAG,kBAAkB,SAAA9B,GACnClK,EAAQlB,KAAK,IAAIoL,EAAM+B,aAKzB,kBAAC,EAAArK,SAAQ,CAACsK,MAAOP,EAASQ,YACxB,kBAAC9K,EAAuB,KACtB,kBAAC,KAAmB,MACpB,kBAACiK,EAAS,Y,4FC3BL3J,EAAmC,WAAM,OACpD,kBAAC,EAAAyK,SAAQ,KACP,kBAAC,EAAAC,QAAO,S,yFCkBCC,EAAgB,uBAAwC5K,GAMxD6K,EAA+D,SAAC,G,IAAEC,EAAS,YAAElL,EAAQ,WAC1F,EAAsB,kBAAmCI,GAAxDH,EAAM,KAAEkL,EAAS,KAgBxB,OAfA,eAAgB,WACd,IAAMC,EAAa,IAAIC,gBACjBC,EAASF,EAAWE,OAU1B,OARC,yC,8DAEkB,OADjBlM,QAAQC,IAAI,kBACK,GAAMC,MAAM4L,EAAW,CAAEI,OAAM,K,OAC9B,SADD,SACgB/L,Q,cAA3BgM,EAAY,SAClBJ,EAAUI,GACVnM,QAAQC,IAAI,sBAAuBkM,G,WAG9B,WAAM,OAAAH,EAAWI,WACvB,CAACN,IAGF,kBAACF,EAAc1K,SAAQ,CAACC,MAAON,GAC5BD,K,kDC/CHqK,E,0CAEG,SAAShI,I,IAAM,sDAClB,GAAIgI,EACA,MAAM,IAAIlH,MAAM,6BAcpB,OAXAkH,EAAW,IAAI,KAAgB,IAAI,SAC/B,KACGoB,M,6DCNEvE,E,MAAc,iBAAkC,CACzDD,SAAU,WAAM,OAAAhI,QAAQyM,QAAQ,Q,8CCOpC,QAdA,SAAqBjE,GACjB,IAAIkE,EAAU,IACRC,EAAWnE,EAASC,MAAM,KAShC,OAPAkE,EAASC,QAEW,SAAhBD,EAAS,KACTA,EAASC,QACTF,EAAU,UAGP,GAAGA,EAAUC,EAAS,K,6DCmCpBE,E,MAAkB,iBAAoB,K,4DCzC/CC,E,0FAEEC,EAA4B,qBAWrBC,EAAsB,SAAOhM,GAAsB,gD,+DACzD8L,EAAD,MACS,GAAM1J,EAAKpC,I,OAAtB8L,EAAW,S,iBAEb,MAAO,CAAP,EAAOA,WAUI1J,EAAO,SAAOpC,GAAsB,6BAAGhB,SAAO,W,oEAUzD,GATMiN,EAAI,IAASjM,GAEbkM,EAAc,CAClBC,aAAc,SAGVC,EAAqB,QAAYL,GAIrC,IACEM,EAAa,IAAsBD,GACnC,SACAjN,QAAQC,IAAI,6CACZ,WAAe2M,G,IAIfM,IAAcA,EAAWC,IAAzB,Y,KAEU,IAAY,IAAIC,MAClBF,EAAWC,IA9CJ,IA8Cb,Y,iBAIA,O,sBAAA,GAAML,EAAE7J,KAAK8J,I,OASb,OATA,SAEAD,EAAEO,aAAeJ,EAEjBH,EAAEQ,aAAa,GACXR,EAAEO,cAAgBP,EAAEO,eAAiBJ,GAEvC,QAAYL,EAA2BE,EAAEO,cAEpC,CAAP,EAAOP,G,uBAGP9M,QAAQC,IAAI,qDACZ,WAAe2M,G,aAMrB,OADAG,EAAYQ,OAAS,iBACrB,GAAMT,EAAE7J,KAAK8J,I,OAIb,OAJA,SACID,EAAEO,cAAgBP,EAAEO,eAAiBJ,GACvC,QAAYL,EAA2BE,EAAEO,cAEpC,CAAP,EAAOP,WAkBIU,EAAsB,wCAAU3N,SAAO,W,wDAClD,SAAM8M,aAAQ,EAARA,EAAUW,YA5FG,K,OA6FnB,GADA,WACKX,aAAQ,EAARA,EAAUc,OACb,MAAM,IAAI1J,MAAM,2BAMlB,OAJI4I,aAAQ,EAARA,EAAUU,eAEZ,QAAYT,EAA2BD,aAAQ,EAARA,EAAUU,cAE5C,CAAP,EAAOV,aAAQ,EAARA,EAAUc","file":"669.48228864870fccf28153.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_variables.scss\",\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_helpers.scss\"],\"names\":[],\"mappings\":\"AAAA,MACI,4BAAA,CCDJ,aACI,YAAA\",\"sourcesContent\":[\":root {\\n    --ins-color--orange: #ec7a08;\\n}\\n\\n// Spacing\\n$ins-padding: var(--pf-global--spacer--lg);\\n$ins-margin: var(--pf-global--spacer--xl);\\n$ins-gutter: var(--pf-global--gutter);\\n\\n// Font Size\\n$ins-fontSize: var(--pf-global--FontSize--md);\\n$ins-fontSize--sm: var(--pf-global--FontSize--sm);\\n$ins-fontSize--lg: var(--pf-global--FontSize--lg);\\n$ins-fontSize--xl: var(--pf-global--FontSize--xl);\\n\\n// Borders\\n$ins-borderRadius: var(--pf-global--BorderRadius--sm);\\n$ins-borderRadius--round: var(--pf-global--BorderRadius--lg);\\n\\n// Grid breakpoints\\n$ins-break--xs: var(--pf-global--breakpoint--xs);\\n$ins-break--sm: var(--pf-global--breakpoint--sm);\\n$ins-break--md: var(--pf-global--breakpoint--md);\\n$ins-break--lg: var(--pf-global--breakpoint--lg);\\n$ins-break--xl: var(--pf-global--breakpoint--xl);\\n\\n// Colors\\n$ins-color--red: var(--pf-global--danger-color--100);\\n$ins-color--critical: $ins-color--red;\\n\\n$ins-color--orange: var(--ins-color--orange);\\n$ins-color--high: $ins-color--orange;\\n\\n$ins-color--yellow: var(--pf-global--warning-color--100);\\n$ins-color--medium: $ins-color--yellow;\\n\\n$ins-color--green: var(--pf-global--success-color--100);\\n$ins-color--low: $ins-color--green;\\n\\n$ins-color--blue: var(--pf-global--info-color--100);\\n\\n$ins-color--gray: var(--pf-global--disabled-color--200);\",\"button:focus {\\n    outline:none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFound: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFound };\n","import React from \"react\";\nimport {file} from \"@babel/types\";\n\nexport type Utils = {\n  [key: string]: {\n    entry: string[],\n    modules: string[]\n  };\n};\n\n\nexport const getEntryPoint = async (baseUrl: string, fileName: string, scope: string): Promise<string> => {\n  if (fileName.endsWith(\"json\") ){\n    const url = `${baseUrl}/${fileName}`;\n    console.log(`fetching ${url}`);\n    const response = await fetch(url);\n    return await response.json().then(json => json as Utils).then(fedMods => fedMods[scope]).then(s => s.entry[0]).then(path => {\n      if (path.startsWith(baseUrl)) {\n        return path;\n      }\n      return `${baseUrl}/${path}`\n    });\n  } else {\n    return `${baseUrl}/${fileName}`;\n  }\n}\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, {ReactNode, useContext, useEffect, useState} from 'react';\nimport { Loading } from '../Loading/Loading';\nimport { ConfigContext, FederatedModuleConfig } from \"@app/Config/Config\";\nimport {getEntryPoint} from \"@app/Components/FederatedModule/utils\";\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nconst FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({\n                                                                   children\n                                                                 }) => {\n\n  const config = useContext(ConfigContext);\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope]; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await window[scope].get(module);\n    const Module = factory();\n    console.log(`${Module} loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = ({ url }) => {\n\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!url) {\n      return;\n    }\n\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    setReady(false);\n    setFailed(false);\n\n    element.onload = () => {\n      console.log(`Dynamic federated module Loaded: ${url}`);\n      setReady(true);\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      setReady(false);\n      setFailed(true);\n    };\n\n    document.head.appendChild(element);\n\n    return () => {\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: any;\n}\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    const fetchUrl = async () => {\n      const entryPoint = await getEntryPoint(federatedModuleContext[scope].basePath, federatedModuleContext[scope].entryPoint, scope);\n      setUrl(entryPoint);\n    }\n    fetchUrl();\n  }, [scope, federatedModuleContext]);\n\n  const { ready, failed } = useDynamicScript({ url });\n\n  if (!ready || failed) {\n    if (failed && fallback) {\n      return fallback;\n    }\n    return null;\n  }\n\n  const Component = React.lazy(\n    loadComponent(scope, module)\n  );\n\n  return (\n    <React.Suspense fallback={<Loading/>}>\n      {render(Component)}\n    </React.Suspense>\n  );\n}\n\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { NotFound } from '@app/NotFound/NotFound';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { ControlPlanePage } from \"@app/ControlPlanePage/ControlPlanePage\";\nimport { DataPlanePage } from \"@app/DataPlanePage/DataPlanePage\";\nimport { QuickStartDrawerFederated } from \"@app/Components/QuickStart/QuickStartDrawerFederated\";\nimport { QuickStartCatalogFederated } from \"@app/Components/QuickStart/QuickStartCatalogFederated\";\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst RedirectSlash: React.FunctionComponent = () => (<Redirect to=\"/openshift-streams\" />)\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: DataPlanePage,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ControlPlanePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectSlash,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: QuickStartCatalogFederated,\n    exact: true,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/quickstarts',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n  }\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return (\n      <QuickStartDrawerFederated>\n        <Component {...rest} {...routeProps} />\n      </QuickStartDrawerFederated>\n      );\n  }\n\n  return <Route render={routeWithTitle}/>;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFound}/>;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <Switch>\n      {flattenedRoutes.map(({ path, exact, component, title, isAsync }, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n        />\n      ))}\n      <PageNotFound title=\"404 Page Not Found\"/>\n    </Switch>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof Metric\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof Metric\n     */\n    values?: Array<Values>;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList extends MetricsListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByKafkaId.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByKafkaId(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList> {\n            return DefaultApiFp(configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import { FederatedModule } from \"@app/Components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent, useContext } from \"react\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\n\nexport const QuickStartDrawerFederated: FunctionComponent = ({ children }) => {\n\n  const config = useContext(ConfigContext);\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"guides\"\n      module=\"./QuickStartDrawer\"\n      fallback={children}\n      render={(QuickStartDrawerFederated) => (\n        <QuickStartDrawerFederated basePath={config?.federatedModules.guides.basePath}>\n          {children}\n        </QuickStartDrawerFederated>\n      )}/>)\n};\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { InsightsContext } from \"@app/utils\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { FederatedModule } from \"../Components/FederatedModule/FederatedModule\";\nimport { AuthContext } from \"@app/utils/auth/AuthContext\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport { DefaultApi } from \"../../openapi\";\n\nexport const DataPlanePage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n  const { getToken } = useContext(AuthContext);\n  const [showCreateTopic, setShowCreateTopic] = useState(false);\n  const [adminServerUrl, setAdminServerUrl] = useState<undefined | string>();\n\n  // TODO useParams is not working?\n  const pathname = window.location.pathname.endsWith(\"/\") ? window.location.pathname : `${window.location.pathname}/`;\n  const parts = pathname.split(\"/\");\n  const id = parts[parts.length - 2];\n\n  const getAdminApiUrl = async () => {\n    const accessToken = await insights.chrome.auth.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath: config?.controlPlane.serviceApiBasePath || '',\n    });\n\n    const kafka = await apisService.getKafkaById(id);\n    setAdminServerUrl(`https://admin-server-${kafka.data.bootstrapServerHost}/rest`);\n  }\n\n  useEffect(() => {\n    getAdminApiUrl();\n  },[insights, config]);\n\n  if (config === undefined || adminServerUrl === undefined) {\n    return <Loading/>\n  }\n\n  const onCreateTopic = () => {\n    setShowCreateTopic(true);\n  }\n\n  const onCloseCreateTopic = () => {\n    console.log(\"on close\");\n    setShowCreateTopic(false);\n  }\n\n  const createTopicPage = <FederatedModule\n    scope=\"kafka\"\n    module=\"./Panels/CreateTopic\"\n    render={(FederatedTopics) => <FederatedTopics\n      getToken={getToken}\n      apiBasePath={adminServerUrl}\n      onCloseCreateTopic={onCloseCreateTopic}\n    />}\n  />;\n\n  const topicListPage = <FederatedModule\n    scope=\"kafka\"\n    module=\"./Panels/Topics\"\n    render={(FederatedTopics) => <FederatedTopics\n      getToken={getToken}\n      apiBasePath={adminServerUrl}\n      onCreateTopic={onCreateTopic}\n    />}\n  />;\n\n  if (showCreateTopic) {\n    return createTopicPage;\n  } else {\n    return topicListPage;\n  }\n}\n","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { FederatedModule } from \"../Components/FederatedModule/FederatedModule\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\n\nexport const ControlPlanePage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n\n  const history = useHistory();\n\n  const onConnectInstance = async (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n    history.push(`/openshift-streams/kafkas/${event.id}`);\n  };\n\n  const getConnectToInstancePath = (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n    return history.createHref({ pathname: `/openshift-streams/kafkas/${event.id}` });\n  }\n\n  const dispatch = useDispatch();\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n\n  };\n\n  if (config === undefined) {\n    return <Loading/>\n  }\n\n  const getUsername = () => insights.chrome.auth.getUser().then(user => user.identity.user.username);\n\n  const osStreams = (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      render={(OpenshiftStreamsFederated) => {\n        return (\n          <OpenshiftStreamsFederated\n            getToken={insights.chrome.auth.getToken}\n            getUsername={getUsername}\n            onConnectToInstance={onConnectInstance}\n            getConnectToInstancePath={getConnectToInstancePath}\n            addAlert={addAlert}\n            basePath={config?.controlPlane.serviceApiBasePath}\n          />\n        );\n      }}\n    />\n  );\n\n  return osStreams;\n};\n","import { FederatedModule } from \"@app/Components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent } from 'react';\n\nexport const QuickStartCatalogFederated: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux';\nimport './App.scss';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { notifications, NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { AppRoutes } from \"@app/Routes\";\nimport { FederatedModuleProvider } from \"./Components/FederatedModule/FederatedModule\";\n\nconst registry = getRegistry();\nregistry.register({ notifications });\n\nexport const App: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.identifyApp('application-services');\n\n\n    insights.chrome.on('APP_NAVIGATION', event => {\n      history.push(`/${event.navId}`);\n    });\n  });\n\n  return (\n    <Provider store={registry.getStore()}>\n      <FederatedModuleProvider>\n        <NotificationsPortal/>\n        <AppRoutes/>\n      </FederatedModuleProvider>\n    </Provider>\n  );\n}\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","import React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner/>\n  </Bullseye>\n);\n","import React from \"react\";\n\nexport type Config = {\n  controlPlane: {\n    serviceApiBasePath: string\n  }\n  dataPlane: {\n    keycloak: {\n      authServerUrl: string,\n      clientId: string,\n      realm: string\n    }\n  }\n  federatedModules: {\n    strimziUI: FederatedModuleConfig\n    mkUiFrontend: FederatedModuleConfig\n    guides: FederatedModuleConfig\n  }\n};\n\nexport type FederatedModuleConfig = {\n  basePath: string\n  entryPoint: string\n}\n\nexport const ConfigContext = React.createContext<Config | undefined>(undefined);\n\nexport type ConfigProviderProps = {\n  configUrl: string\n}\n\nexport const ConfigProvider: React.FunctionComponent<ConfigProviderProps> = ({ configUrl, children }) => {\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  React.useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async () => {\n      console.log('Loading config');\n      const response = await fetch(configUrl, { signal });\n      const newConfig = await response.json();\n      setConfig(newConfig);\n      console.log('Done loading config', newConfig);\n    })();\n\n    return () => controller.abort();\n  }, [configUrl]);\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    //If you want to register all of your reducers, this is good place.\n    /*\n     *  registry.register({\n     *    someName: (state, action) => ({...state})\n     *  });\n     */\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n    getToken: () => Promise.resolve('')\n  }\n);\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import React from 'react';\n\nexport type InsightsType = {\n  chrome: {\n    init: () => void;\n    identifyApp: (appId: string) => Promise<void>;\n    getApp: () => string;\n    getBundle: () => string;\n    getEnvironment: () => 'ci' | 'qa' | 'prod' | 'stage';\n    on: (type: string, callback: ((event: any) => void)) => void;\n    auth: {\n      getToken(): Promise<string>;\n      getUser(): Promise<UserType>;\n    };\n    isProd: boolean;\n    isBeta: () => boolean;\n    isPenTest: () => boolean;\n  };\n};\n\nexport type UserType = {\n  entitlements: {\n    [key: string]: {\n      is_entitled: boolean;\n      is_trial: boolean;\n    }\n  },\n  identity: IdentityType;\n};\n\nexport type IdentityType = {\n  account_number: string;\n  type: string;\n  internal: {\n    org_id: string;\n    account_id: string;\n  }\n  user: {\n    username: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n    is_active: boolean;\n  }\n};\n\nexport const InsightsContext = React.createContext({} as InsightsType);\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\n\nlet keycloak: KeycloakInstance | undefined;\n\nconst REFRESH_TOKEN_COOKIE_NAME = \"masSSORefreshToken\";\nconst MIN_VALIDITY = 50;\n\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig) => {\n  if (!keycloak) {\n    keycloak = await init(config);\n  }\n  return keycloak;\n}\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (config: KeycloakConfig): Promise<KeycloakInstance | undefined> => {\n  const k = Keycloak(config);\n\n  const initOptions = {\n    responseMode: \"query\",\n  } as KeycloakInitOptions;\n\n  const storedRefreshToken = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  if (storedRefreshToken) {\n    try {\n      refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken);\n    } catch {\n      console.log(\"unable to parse refresh token from cookie\")\n      Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n    }\n  }\n\n  if (refreshJWT && refreshJWT.exp) {\n    // if the JWT exists, and has an expiry\n    const now = getUnixTime(new Date());\n    if (now < refreshJWT.exp + MIN_VALIDITY) {\n      // Use the refresh token if it's still valid (make sure it's valid for at least MIN_VALIDITY)\n      try {\n        // Perform a keycloak init without a login\n        await k.init(initOptions);\n        // Set the saved refresh token into Keycloak\n        k.refreshToken = storedRefreshToken\n        // Then force a token refresh to check if the refresh token is actually valid\n        k.updateToken(-1);\n        if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n          // If we get back a refresh token that has changed, then save it\n          Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n        }\n        return k;\n      } catch {\n        // If any of the methods above error, then perform a login\n        console.log(\"refresh token is not valid, performing full login\");\n        Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n      }\n    }\n  }\n\n  initOptions.onLoad = \"login-required\";\n  await k.init(initOptions);\n  if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n  }\n  return k;\n\n}\n\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getValidAccessToken = async (): Promise<string> => {\n  await keycloak?.updateToken(MIN_VALIDITY);\n  if (!keycloak?.token) {\n    throw new Error(\"No token from keycloak!\");\n  }\n  if (keycloak?.refreshToken) {\n    // Save the most recent refresh token\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, keycloak?.refreshToken);\n  }\n  return keycloak?.token;\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (keycloak: Keycloak.KeycloakInstance | undefined) => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n}\n"],"sourceRoot":""}