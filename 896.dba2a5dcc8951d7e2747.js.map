{"version":3,"file":"896.dba2a5dcc8951d7e2747.js","mappings":"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","sources":["webpack://application-services-ui/./src/app/AppRoutes.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/PrincipalsProvider/PrincipalsProvider.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/components/KasModalLoader/KasModalLoader.tsx","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/hooks/modal.ts","webpack://application-services-ui/./src/app/hooks/insights.ts","webpack://application-services-ui/./src/app/hooks/keycloak.ts","webpack://application-services-ui/./src/app/hooks/useMASToken.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/CosPage/CosPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederatedComponent.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Dashboard.tsx","webpack://application-services-ui/./src/app/pages/Kafka/ConsumerGroups.tsx","webpack://application-services-ui/./src/app/pages/Kafka/AclPermissions.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaRoutes.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaMainView.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaInstanceMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaTopicsFromAdmin.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchMetricsKpi.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchTopicsMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/ConnectedMetrics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/kafka-instance.ts","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactVersion.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/Artifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactsRedirect.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/DownloadArtifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/RulesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/SrsLayout.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistrySchemaMapping.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/providers/config/ServiceConstants.ts","webpack://application-services-ui/./src/app/providers/config/ServiceConstantsContextProvider.tsx","webpack://application-services-ui/./src/app/providers/featureflags/FeatureFlags.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/Routing.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/utils/keycloak/keycloakUtils.ts"],"sourcesContent":["import React, { useCallback, VoidFunctionComponent } from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch, useHistory } from 'react-router-dom';\nimport { LastLocationProvider } from 'react-router-last-location';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport getBaseName from './utils/getBaseName';\nimport {\n  DevelopmentPreview,\n  AppServicesPageNotFound,\n  AppServicesEmptyState,\n  AppServicesEmptyStateVariant,\n} from '@rhoas/app-services-ui-components';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange } from '@app/utils/Routing';\nimport { useDocumentTitle } from '@app/utils';\nimport { KafkaMainView } from '@app/pages/Kafka';\nimport { BasenameContext } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@patternfly/react-core';\n\nconst QuickStartLoaderFederated = React.lazy(() => import('@app/pages/Resources/QuickStartLoaderFederated'));\n\nconst APIManagementPage = React.lazy(() => import('@app/pages/APIManagement/APIManagementPage'));\nconst ArtifactRedirect = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactsRedirect'));\nconst Artifacts = React.lazy(() => import('@app/pages/ServiceRegistry/Artifacts'));\nconst ArtifactVersionDetails = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactVersion'));\nconst DataSciencePage = React.lazy(() => import('@app/pages/DataScience/DataSciencePage'));\nconst KafkaOverviewPage = React.lazy(() => import('@app/pages/KafkaOverview/KafkaOverviewPage'));\n\nconst KasPage = React.lazy(() => import('@app/pages/Kas/KasPage'));\nconst OverviewPage = React.lazy(() => import('@app/pages/Overview/OverviewPage'));\nconst ResourcesPage = React.lazy(() => import('@app/pages/Resources/ResourcesPage'));\nconst RulesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RulesPage'));\nconst RolesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RolesPage'));\nconst SettingsPage = React.lazy(() => import('@app/pages/ServiceRegistry/SettingsPage'));\nconst ServiceAccountsPage = React.lazy(() => import('@app/pages/ServiceAccounts/ServiceAccountsPage'));\nconst CosPage = React.lazy(() => import('@app/pages/CosPage/CosPage'));\nconst ServiceRegistryPage = React.lazy(() => import('@app/pages/ServiceRegistry/ServiceRegistryPage'));\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\nconst RedirectToServiceAccounts: React.FunctionComponent = () => <Redirect to=\"/service-accounts\" />;\nconst RedirectToResources: React.FunctionComponent = () => <Redirect to=\"/learning-resources\" />;\n\nconst appRoutes: AppRouteConfig<any>[] = [\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Overview',\n    path: '/',\n    title: 'Overview | Red Hat OpenShift Application Services',\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Overview',\n    path: '/overview',\n    title: 'Overview | Red Hat OpenShift Application Services',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'API Management',\n    path: '/api-management',\n    title: 'API Management | Red Hat OpenShift Application Services',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Data Science',\n    path: '/data-science',\n    title: 'Data Science | Red Hat OpenShift Application Services',\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'Learning Resources | Red Hat OpenShift Application Services',\n    path: '/learning-resources',\n    title: 'Learning Resources | Red Hat OpenShift Application Services',\n    devPreview: false,\n  },\n  /**\n   * STREAMS SECTION\n   */\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Streams for Apache Kafka | Red Hat OpenShift Application Services',\n  },\n  {\n    component: KafkaOverviewPage,\n    exact: true,\n    label: 'Streams for Apache Kafka',\n    path: '/streams/overview',\n    title: 'Overview | Streams for Apache Kafka | Red Hat OpenShift Application Services',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Streams for Apache Kafka | Red Hat OpenShift Application Services',\n    basename: '/streams/kafkas',\n    devPreview: false,\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: RedirectToServiceAccounts,\n    exact: true,\n    label: 'Service Accounts',\n    path: '/streams/service-accounts',\n    title: 'Service Accounts | Red Hat OpenShift Application Services',\n    devPreview: false,\n  },\n  {\n    // Handle the redirect for the old url application-services/streams/resources to application-services/learning-resources\n    component: RedirectToResources,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n    devPreview: true,\n  },\n  // this needs to be the last route for the streams section since it's the catch-all one\n  {\n    component: KafkaMainView,\n    label: 'Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Streams for Apache Kafka | Red Hat OpenShift Application Services',\n    basename: '/streams/kafkas/:id',\n    devPreview: false,\n  },\n  /**\n   * END OF STREAMS SECTION\n   */\n\n  /**\n   * SERVICE REGISTRY SECTION\n   */\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/rules',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: RolesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/roles',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: SettingsPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/settings',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  /**\n   * END OF SERVICE REGISTRY SECTION\n   */\n\n  {\n    component: CosPage,\n    exact: false,\n    label: 'COS',\n    path: '/connectors',\n    title: 'Connectors | Red Hat OpenShift Application Services',\n    basename: `${getBaseName(window.location.pathname)}/connectors`,\n    devPreview: true,\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Service Accounts',\n    path: '/service-accounts',\n    title: 'Service Accounts | Red Hat OpenShift Application Services',\n    devPreview: false,\n  },\n\n  // old url handling\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Streams for Apache Kafka | Red Hat OpenShift Application Services',\n  },\n];\n\nconst WrappedRoute: React.FunctionComponent<IAppRoute<any>> = ({\n  component: Component,\n  isAsync = false,\n  title,\n  basename,\n  devPreview,\n  ...rest\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const getBasename = useCallback(() => {\n    return basename || '';\n  }, [basename]);\n  const onClickButton = useCallback(() => history.push('/'), [history]);\n\n  const wrapRoute = useCallback((routeProps: RouteComponentProps) => {\n    return (\n      <ErrorBoundary\n        fallbackRender={({ error }) =>\n          error.message === '404' ? (\n            <AppServicesPageNotFound />\n          ) : (\n            <AppServicesEmptyState\n              emptyStateProps={{\n                variant: AppServicesEmptyStateVariant.UnexpectedError,\n              }}\n              emptyStateIconProps={{\n                className: 'icon-color',\n              }}\n              titleProps={{\n                title: t('common:something_went_wrong'),\n              }}\n              emptyStateBodyProps={{\n                body: t('common:unexpected_error'),\n              }}\n            >\n              <Button onClick={onClickButton}>{t('common:return_to_home_page')}</Button>\n            </AppServicesEmptyState>\n          )\n        }\n      >\n        <DevelopmentPreview show={devPreview}>\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        </DevelopmentPreview>\n      </ErrorBoundary>\n    );\n  }, [Component, devPreview, getBasename, onClickButton, rest, t]);\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst AppRoutes: VoidFunctionComponent = () => {\n  return (\n    <>\n      <LastLocationProvider>\n        <React.Suspense fallback={<AppServicesLoading />}>\n          <Switch>\n            {flattenedRoutes(appRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n              <WrappedRoute\n                path={path}\n                exact={exact}\n                component={component}\n                key={idx}\n                title={title}\n                isAsync={isAsync}\n                {...rest}\n              />\n            ))}\n            <PageNotFoundRoute title=\"404 Page Not Found\" />\n          </Switch>\n        </React.Suspense>\n      </LastLocationProvider>\n      <QuickStartLoaderFederated />\n    </>\n  );\n};\n\nexport { AppRoutes, appRoutes };\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AppRoutes } from '@app/AppRoutes';\nimport { FederatedModuleProvider } from '@app/components';\nimport { useInsights } from '@app/hooks';\nimport { Page } from \"@patternfly/react-core\";\nimport \"./App.css\";\n\nexport const App: React.FunctionComponent = () => {\n  const insights = useInsights();\n  const history = useHistory();\n\n  const getAppId = () => {\n    const defaultAppId = 'overview';\n\n    const parts = history.location.pathname.split('/');\n    if (parts.length > 1) {\n      if (parts[1] === '') {\n        return defaultAppId;\n      } else {\n        if (parts[1] === 'openshift-streams') {\n          return 'streams';\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal />\n      <Page>\n        <AppRoutes />\n      </Page>\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ComponentType, memo, ReactNode, useEffect, useRef, useState, VoidFunctionComponent } from 'react';\nimport { AssetsContext } from '@rhoas/app-services-ui-shared';\nimport { ModuleInfo } from '@app/components/FederatedModule/moduleInfo';\nimport { useFederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\ndeclare function __webpack_init_sharing__(shareScope: string);\n\ndeclare const __webpack_share_scopes__: {\n  default: unknown;\n};\n\ntype Container = {\n  init: (shareScopes: unknown) => Promise<void>;\n  get: (module: string) => Promise<{ (): { default: ComponentType<any> } }>;\n};\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope] as unknown as Container; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await container.get(module);\n    const Module = factory();\n    console.debug(`loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = (url: string) => {\n  const isMounted = useIsMounted();\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    let element;\n    if (isMounted.current) {\n      if (!url) {\n        setFailed(true);\n        return;\n      }\n\n      element = document.createElement('script');\n\n      element.src = url;\n      element.type = 'text/javascript';\n      element.async = true;\n\n      setReady(false);\n      setFailed(false);\n\n      element.onload = () => {\n        console.log(`Dynamic federated module Loaded: ${url}`);\n        setReady(true);\n      };\n\n      element.onerror = () => {\n        console.error(`Dynamic federated module Error: ${url}`);\n        setReady(false);\n        setFailed(true);\n      };\n\n      document.head.appendChild(element);\n    }\n\n    return () => {\n      if (element) {\n        console.log(`Dynamic federated module Removed: ${url}`);\n        document.head.removeChild(element);\n      }\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed,\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: React.ReactNode;\n};\n\nexport const FederatedModule: VoidFunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n  console.log(\"Dynamic federated module\", scope, module)\n  const isMounted = useIsMounted();\n\n  const { getModuleInfo, modules } = useFederatedModule();\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(modules[scope].basePath, scope, modules[scope].fallbackBasePath);\n      if (isMounted.current) {\n        setModuleInfo(moduleInfo);\n      }\n    };\n    fetchModuleInfo();\n  }, [scope, modules, getModuleInfo, isMounted]);\n\n  if (moduleInfo !== undefined) {\n    return <DynamicFederatedModule scope={scope} module={module} render={render} moduleInfo={moduleInfo} />;\n  }\n  if (fallback !== undefined) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n\ntype DynamicFederatedModuleProps = FederatedModuleProps & {\n  moduleInfo: ModuleInfo;\n};\n\nconst DynamicFederatedModule: React.FunctionComponent<DynamicFederatedModuleProps> = ({\n  moduleInfo,\n  fallback,\n  scope,\n  render,\n  module,\n}) => {\n  const { ready, failed } = useDynamicScript(moduleInfo.entryPoint);\n\n  if (ready && !failed) {\n    const Component = React.lazy(loadComponent(scope, module));\n\n    const getPath = () => {\n      return moduleInfo.basePath;\n    };\n\n    return (\n      <AssetsContext.Provider value={{ getPath }}>\n        <React.Suspense fallback={<AppServicesLoading />}>{render(Component)}</React.Suspense>\n      </AssetsContext.Provider>\n    );\n  }\n\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n","import React, { useEffect, useState } from 'react';\nimport { Configuration, KafkaRequest, SecurityApi } from '@rhoas/kafka-management-sdk';\nimport { Principal, PrincipalsContext, PrincipalType, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { PrincipalApi } from '@redhat-cloud-services/rbac-client';\n\nexport type PrincipalsProviderProps = {\n  kafkaInstance?: KafkaRequest;\n};\n\nexport const usePrincipal = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [serviceAccountPrincipals, setServiceAccountPrincipals] = useState<Principal[] | undefined>();\n  const [userAcountPrincipals, setUserAccountPrincipals] = useState<Principal[] | undefined>();\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      if (config !== undefined && auth !== undefined && config.rbac.basePath !== undefined) {\n        const accessToken = await auth.kas.getToken();\n        const principalApi = new PrincipalApi({\n          accessToken,\n          basePath: config?.rbac.basePath,\n        });\n\n        try {\n          const userAccounts = await principalApi.listPrincipals(-1).then((response) =>\n            response.data.data.map((p) => {\n              return {\n                id: p.username,\n                principalType: PrincipalType.UserAccount,\n                displayName: `${p.first_name} ${p.last_name}`,\n                emailAddress: p.email,\n              } as Principal;\n            })\n          );\n          setUserAccountPrincipals(userAccounts);\n        } catch (e) {\n          // temp fix - this API is only available to org admins\n          // needs a proper approach longer term\n        }\n      }\n    };\n    fetchUserAccounts();\n  }, [auth, config]);\n\n  useEffect(() => {\n    const fetchServiceAccounts = async () => {\n      if (config !== undefined && auth !== undefined && config.rbac.basePath !== undefined) {\n        const accessToken = await auth.kas.getToken();\n        const securityApi = new SecurityApi({\n          accessToken,\n          basePath: config.kas.apiBasePath,\n        } as Configuration);\n        const serviceAccounts = await securityApi.getServiceAccounts().then((response) =>\n          response.data.items.map((sa) => {\n            return {\n              id: sa.client_id,\n              displayName: sa.name,\n              principalType: PrincipalType.ServiceAccount,\n            } as Principal;\n          })\n        );\n\n        setServiceAccountPrincipals(serviceAccounts);\n      }\n    };\n    fetchServiceAccounts();\n  }, [auth, config]);\n\n  return {\n    getAllPrincipals: () => {\n      let answer: Principal[] = [];\n      if (userAcountPrincipals !== undefined && serviceAccountPrincipals !== undefined) {\n        answer = answer.concat(userAcountPrincipals);\n      }\n      if (serviceAccountPrincipals !== undefined) {\n        answer = answer.concat(serviceAccountPrincipals);\n      }\n      return answer;\n    },\n    getAllUserAccounts: () => userAcountPrincipals,\n    getAllServiceAccounts: () => serviceAccountPrincipals,\n  };\n};\n\nexport const PrincipalsProvider: React.FunctionComponent<PrincipalsProviderProps> = ({ children }) => {\n  const { getAllPrincipals } = usePrincipal();\n  return <PrincipalsContext.Provider value={{ getAllPrincipals }}>{children}</PrincipalsContext.Provider>;\n};\n","import { useCallback, useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useMASToken } from '@app/hooks';\n\nexport function useKafkaInstanceDrawer() {\n  const history = useHistory();\n\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [drawerActiveTab, setDrawerActiveTab] = useState<string | undefined>(undefined);\n\n  const openDrawer = useCallback((tab: string | undefined) => {\n    if (tab) {\n      setDrawerActiveTab(tab);\n    }\n    setIsDrawerOpen(true);\n  }, []);\n\n  const closeDrawer = useCallback(() => {\n    setDrawerActiveTab(undefined);\n    setIsDrawerOpen(false);\n  }, []);\n\n  const { getTokenEndPointUrl } = useMASToken();\n\n  const onDeleteInstance = () => {\n    history.push('/streams/kafkas');\n  };\n\n  return {\n    isDrawerOpen,\n    drawerActiveTab,\n    setDrawerActiveTab,\n    openDrawer,\n    closeDrawer,\n    tokenEndPointUrl: getTokenEndPointUrl(),\n    onDeleteInstance,\n  };\n}\n","export type ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nexport type FetchModuleInfoFunction = {\n  (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined>\n}\n\nexport const fetchModuleInfo: FetchModuleInfoFunction = async (baseUrl, scope, fallbackBasePath) => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}?ts=${Date.now()}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n","import React, { useRef } from \"react\";\nimport { FederatedModuleConfig, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { fetchModuleInfo, FetchModuleInfoFunction, ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\n\nexport type FederatedModuleContextProps = {\n  modules: {\n    [module: string]: FederatedModuleConfig\n  };\n  getModuleInfo: FetchModuleInfoFunction;\n}\n\nexport const FederatedModuleContext = React.createContext<FederatedModuleContextProps | undefined>(undefined);\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  type ModuleInfoCache = {\n    [key:string]: ModuleInfo\n  }\n\n  const moduleInfoCache = useRef<ModuleInfoCache>({} as ModuleInfoCache );\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <AppServicesLoading/>;\n  }\n\n  const getModuleInfo: FetchModuleInfoFunction = async ( baseUrl,scope, fallbackBasePath) => {\n    if (moduleInfoCache.current[scope] !== undefined) {\n      return moduleInfoCache.current[scope];\n    }\n    const answer = await fetchModuleInfo(baseUrl, scope, fallbackBasePath);\n    if (answer !== undefined) {\n      moduleInfoCache.current[scope] = answer;\n    }\n    return answer;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={{\n      modules: config.federatedModules,\n      getModuleInfo\n    }}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nexport const useFederatedModule = (): FederatedModuleContextProps => {\n  const answer = React.useContext(FederatedModuleContext);\n  if (answer === undefined) {\n    throw new Error('must be used inside FederatedModuleContext provider');\n  }\n  return answer;\n}\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\n\nexport const KasModalLoader: React.FC = ({ children }) => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./KasModalLoader\"\n      fallback={null}\n      render={(KasModalLoaderFederated) => {\n        return <KasModalLoaderFederated>{children}</KasModalLoaderFederated>;\n      }}\n    />\n  );\n};\n","import { Reducer, useEffect, useReducer, useRef } from 'react';\nimport { AxiosResponse } from 'axios';\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<AxiosResponse<T>>;\n  key: string;\n};\n\nexport const useFetch = <T extends any>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>((states, action: Action<T>) => {\n    switch (action.type) {\n      case Status.FETCHING:\n        return { ...initialState, status: Status.FETCHING };\n      case Status.FETCHED:\n        return { ...initialState, status: Status.FETCHED, data: action.payload };\n      case Status.FETCH_ERROR:\n        return { ...initialState, status: Status.FETCH_ERROR, error: action.error };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response.data;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response.data });\n        } catch (error) {\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCH_ERROR, payload: error.message });\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, []);\n\n  return state;\n};\n","import { useEffect, useState, useMemo } from 'react';\nimport { useAuth, useConfig, Quota, QuotaValue, QuotaType, ProductType } from '@rhoas/app-services-ui-shared';\nimport { Configuration, AppServicesApi } from '@rhoas/account-management-sdk';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\n\nexport const useQuota = (productId: ProductType) => {\n    const config = useConfig();\n    const auth = useAuth();\n    const constants = useConstants();\n\n    const [orgId, setOrgId] = useState();\n\n    useEffect(() => {\n        const getCurrentAccount = async () => {\n            if (!orgId) {\n                const accessToken = await auth?.ams.getToken();\n                const ams = new AppServicesApi({\n                    accessToken,\n                    basePath: config?.ams.apiBasePath || '',\n                } as Configuration);\n\n                await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n                    const orgID = account?.data?.organization?.id;\n                    setOrgId(orgID);\n                });\n            }\n        };\n\n        getCurrentAccount();\n    }, [config?.ams.apiBasePath, auth]);\n\n    const getQuotaTypesByProductId = () => {\n        const kasQuotaProductId = constants.kafka.ams.quotaProductId;\n        const kasTrialQuotaProductId = constants.kafka.ams.trialQuotaProductId;\n        const kasResourceName = constants.kafka.ams.resourceName;\n\n        const srsQuotaProductId = constants.serviceRegistry.ams.quotaProductId;\n        const srsTrialQuotaProductId = constants.serviceRegistry.ams.trialQuotaProductId;\n        const srsResourceName = constants.serviceRegistry.ams.resourceName;\n\n        if (productId === ProductType.kas) {\n            return { quotaProductId: kasQuotaProductId, trialQuotaProductId: kasTrialQuotaProductId, resourceName: kasResourceName, quotaKey: QuotaType.kas, trialQuotaKey: QuotaType.kasTrial };\n        } else if (productId === ProductType.srs) {\n            return { quotaProductId: srsQuotaProductId, trialQuotaProductId: srsTrialQuotaProductId, resourceName: srsResourceName, quotaKey: QuotaType.srs, trialQuotaKey: QuotaType.srsTrial };\n        }\n    }\n\n    const getQuota = async () => {\n        const quotaData = new Map<QuotaType, QuotaValue>();\n        let filteredQuota: Quota = { loading: true, isServiceDown: false, data: undefined };\n\n        if (orgId) {\n            const { quotaProductId, trialQuotaProductId, resourceName, quotaKey, trialQuotaKey } = getQuotaTypesByProductId() || {};\n\n            const accessToken = await auth?.ams.getToken();\n            const ams = new AppServicesApi({\n                accessToken,\n                basePath: config?.ams.apiBasePath || '',\n            } as Configuration);\n\n            try {\n                const response = await ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, undefined, true);\n\n                const quota = response?.data?.items?.find(\n                    (q) => q.related_resources?.find((r) => r.resource_name === resourceName && r.product === quotaProductId)\n                );\n                const trialQuota = response?.data?.items?.find(\n                    (q) => q.related_resources?.find((r) => r.resource_name === resourceName && r.product === trialQuotaProductId)\n                );\n\n                if (quota && quota.allowed > 0) {\n                    const remaining = quota?.allowed - quota?.consumed;\n                    quotaData?.set(quotaKey, {\n                        allowed: quota?.allowed,\n                        consumed: quota?.consumed,\n                        remaining: remaining < 0 ? 0 : remaining\n                    });\n                }\n\n                if (trialQuota) {\n                    quotaData?.set(trialQuotaKey, {\n                        allowed: trialQuota?.allowed,\n                        consumed: trialQuota?.consumed,\n                        remaining: trialQuota?.allowed - trialQuota?.consumed\n                    });\n                }\n\n                filteredQuota.loading = false;\n                filteredQuota.data = quotaData;\n\n            } catch (error) {\n                filteredQuota.loading = false;\n                filteredQuota.isServiceDown = true;\n                console.error(error)\n            }\n        }\n        \n        return filteredQuota;\n    };\n\n    const contextValue = useMemo(() => {\n        return { orgId, getQuota };\n    }, [orgId, getQuota]);\n\n    return contextValue;\n}\n\n","import { Auth, Config, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { Configuration, AppServicesApi, TermsReviewResponse } from '@rhoas/account-management-sdk';\nimport { useFetch } from '@app/services/fetch';\nimport { useEffect, useRef } from \"react\";\n\nexport type ITermsConfig = {\n  eventCode: string;\n  siteCode: string;\n}\n\nexport const useTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  return useFetch(fetchTermsReviewFactory(config, auth, termsConfig));\n};\n\nexport const useAsyncTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth, termsConfig).fetch().then(r => r.data);\n    ref.current = answer;\n    return answer;\n  }\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth]);\n  return load;\n}\n\nconst fetchTermsReviewFactory = (config: Config, auth: Auth, termsConfig: ITermsConfig) => {\n  return {\n    key: 'selfTermsReview',\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || '',\n      } as Configuration);\n      return await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: termsConfig.eventCode,\n        site_code: termsConfig.siteCode,\n      });\n    },\n  }\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join('&');\n","import { useLocation } from 'react-router-dom';\nimport { parse as parseQueryString, stringifyUrl } from 'query-string';\nimport { useAsyncTermsReview, ITermsConfig } from '@app/services/termsReview';\nimport { getTermsAppURL } from '@app/utils/termsApp';\n\nexport const useModalControl = (termsConfig: ITermsConfig) => {\n    const loadTermsReview = useAsyncTermsReview(termsConfig);\n    const location = useLocation();\n\n    const shouldOpenCreateModal = async () => {\n        const parsed = parseQueryString(location.search);\n        const c = parsed['create'] === 'true';\n        if (c) {\n            const termsReview = await loadTermsReview();\n            if (!termsReview.terms_required) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const preCreateInstance = async (open: boolean) => {\n        const termsReview = await loadTermsReview();\n        if (termsReview.terms_available || termsReview.terms_required) {\n            if (termsReview.redirect_url === undefined) {\n                throw new Error('terms must be signed but there is no terms url');\n            }\n            const redirectURL = stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n            const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n            window.location.href = url;\n            return false;\n        }\n        return open;\n    };\n\n    return { shouldOpenCreateModal, preCreateInstance };\n};","import { InsightsType } from \"@app/utils\";\n\nexport const useInsights = () => {\n  const insights = window['insights'] as InsightsType;\n  if (insights === undefined) {\n    throw new Error(\"must be used inside an initialized insights context\");\n  }\n  return insights;\n}\n","import { KeycloakConfig, KeycloakInstance } from \"keycloak-js\";\nimport { Auth, Config, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { getAccessToken, initKeycloak } from \"@app/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { useInsights } from \"@app/hooks/insights\";\n\nconst init = async (config: Config, getInsightsAccessToken: () => Promise<string>) => {\n  const keycloakConfig = {\n    url: config.masSso.authServerUrl,\n    clientId: config.masSso.clientId,\n    realm: config.masSso.realm,\n  } as KeycloakConfig;\n  return await initKeycloak(keycloakConfig, getInsightsAccessToken);\n}\n\nexport const useAuth = (): Auth => {\n  const keycloakInstance = useRef<KeycloakInstance>();\n  const config = useConfig();\n  const insights = useInsights();\n\n  if (config === undefined || insights.chrome.auth === undefined) {\n    throw new Error(\"useAuth must be used inside a config provider, and insights auth\");\n  }\n\n  const insightsChromeAuth = insights.chrome.auth;\n\n  const getKeycloakInstance = async () => {\n    const instance = keycloakInstance.current;\n    if (instance === undefined) {\n      const answer = await init(config, insightsChromeAuth.getToken);\n      keycloakInstance.current = answer;\n      return answer;\n    }\n    return instance;\n  }\n\n  useEffect(() => {\n    // Start loading keycloak immediately\n    getKeycloakInstance();\n  }, [config, insightsChromeAuth]);\n\n  const getMASSSOToken = async () => {\n    const keycloakInstance = await getKeycloakInstance();\n    return getAccessToken(keycloakInstance, insightsChromeAuth.getToken)\n  };\n\n  const getUsername = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.username;\n  }\n\n  const isOrgAdmin = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.is_org_admin;\n  }\n\n  const getToken = insightsChromeAuth.getToken;\n\n  return {\n    getUsername,\n    isOrgAdmin,\n    kafka: {\n      getToken: getMASSSOToken,\n    },\n    kas: {\n      getToken,\n    },\n    ams: {\n      getToken,\n    },\n    srs: {\n      getToken,\n    },\n    apicurio_registry: {\n      getToken: getMASSSOToken,\n    },\n  };\n\n}\n","import { } from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { buildTokenEndPointUrl } from \"@app/utils\";\n\nexport const useMASToken = () => {\n    const config = useConfig();\n    const getTokenEndPointUrl = () => {\n        if (config) {\n            return buildTokenEndPointUrl(config.masSso.authServerUrl, config.masSso.realm);\n        }\n        return undefined;\n    };\n\n    return { getTokenEndPointUrl };\n}\n","import React from 'react';\nimport { APIManagementPage } from '@rhoas/app-services-ui-components';\n\nexport const APIManagementOverviewPage: React.FunctionComponent = () => {\n  return (\n    <APIManagementPage />\n  );\n};\n\nexport default APIManagementOverviewPage;\n","import { FederatedModule } from '@app/components';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport React from 'react';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\n\nexport const CosPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage/>;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"cos\"\n      fallback={<AppServicesLoading/>}\n      module=\"./OpenshiftManagedConnectors\"\n      render={(OpenshiftManagedConnectors) => <OpenshiftManagedConnectors/>}\n    />\n  )\n};\n\nexport default CosPage;\n","import React from 'react';\nimport { DataSciencePage } from '@rhoas/app-services-ui-components';\n\nexport const DataScienceOverViewPage: React.FunctionComponent = () => {\n\n  return (\n    <DataSciencePage />\n  );\n};\n\nexport default DataScienceOverViewPage;","import React, { ComponentType } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { KafkaRequestWithSize } from '@app/pages/Kafka/kafka-instance';\n\nexport type KafkaFederatedComponentProps = UnderlyingProps & {\n  module: string;\n};\n\nexport type UnderlyingProps = {\n  activeTab?: number;\n  getToken?: () => Promise<string> | undefined;\n  apiBasePath?: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  showMetrics?: JSX.Element;\n  showSchemas?: JSX.Element;\n  kafka?: Required<KafkaRequestWithSize>;\n  redirectAfterDeleteInstance?: () => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void\n};\n\n// Provides properties for component path and it's underlying properties\nexport const KafkaFederatedComponent: React.FunctionComponent<KafkaFederatedComponentProps> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => <FederatedKafka {...rest} />}\n    />\n  );\n};\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const Topics: React.FunctionComponent<UnderlyingProps> = (props) => (\n    <KafkaFederatedComponent module=\"./Topics\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const TopicDetails: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./TopicDetails\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const CreateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./CreateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const UpdateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./UpdateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const Dashboard: React.FunctionComponent<UnderlyingProps> = (props) => ( \n    <KafkaFederatedComponent module=\"./Dashboard\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const ConsumerGroups: React.FunctionComponent<UnderlyingProps> = (props) => (\n   <KafkaFederatedComponent module=\"./ConsumerGroups\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const AclPermissions: React.FunctionComponent<UnderlyingProps> = (props) => (\n     <KafkaFederatedComponent module=\"./AclPermissions\" {...props} />\n);\n","import React, { ComponentType, memo, useCallback, VoidFunctionComponent } from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange } from '@app/utils/Routing';\nimport { useDocumentTitle } from '@app/utils';\nimport { CreateTopic, TopicDetails, Topics, UpdateTopic, Dashboard, ConsumerGroups, AclPermissions } from '@app/pages';\nimport { UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\nimport { BasenameContext } from '@rhoas/app-services-ui-shared';\nimport { FederatedModule, useKafkaInstanceDrawer } from '@app/components';\n\nconst kafkaRoutes: AppRouteConfig<UnderlyingProps>[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topics',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/create',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/update/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/dashboard',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: ConsumerGroups,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/consumer-groups',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: AclPermissions,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/acls',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n];\nconst flatRoutes = flattenedRoutes(kafkaRoutes);\n\ntype WrappedRouteProps = IAppRoute<UnderlyingProps> & {\n  underlyingProps: UnderlyingProps;\n  url: string;\n  InstanceDrawer: ComponentType;\n};\n\n/**\n * The wrapped route allows us to apply the basename, document title and accessible route change for all components\n * without having to add these to each component. They must happen inside the route.\n */\nconst WrappedRoute: React.FunctionComponent<WrappedRouteProps> = ({\n  component: Component,\n  InstanceDrawer,\n  isAsync = false,\n  title,\n  underlyingProps,\n  url,\n  ...rest\n}) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  const getBasename = () => {\n    return url;\n  };\n\n  return (\n    <Route\n      render={(routeProps) => {\n        return (\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...underlyingProps} {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        );\n      }}\n      {...rest}\n    />\n  );\n};\n\nconst KafkaRoutes: VoidFunctionComponent<UnderlyingProps & { InstanceDrawer: ComponentType<any> }> = ({\n  InstanceDrawer,\n  ...props\n}): React.ReactElement => {\n  const routeMatch = useRouteMatch();\n  const { kafka } = props;\n\n  const drawerProps = useKafkaInstanceDrawer();\n  const handleInstanceDrawer: (isOpen: boolean, activeTab?: string) => void = useCallback(\n    (isOpen, activeTab) => {\n      if (isOpen) {\n        drawerProps.openDrawer(activeTab);\n      } else {\n        drawerProps.closeDrawer();\n      }\n    },\n    [drawerProps]\n  );\n\n  return (\n    <InstanceDrawer\n      data-ouia-app-id=\"dataPlane-streams\"\n      drawerInstance={kafka}\n      setDrawerInstance={() => false} // can't change the instance from the data plane\n      {...drawerProps}\n    >\n      <Switch>\n        {flatRoutes.map(({ path, exact, component, title, isAsync, ...rest }, idx) => {\n          const routePath = `${routeMatch.path}${path}`;\n          console.log(`Creating route for ${routePath}`);\n          return (\n            <WrappedRoute\n              path={routePath}\n              exact={exact}\n              component={component}\n              key={idx}\n              title={title}\n              isAsync={isAsync}\n              underlyingProps={{\n                ...props,\n                handleInstanceDrawer,\n              }}\n              url={routeMatch.url}\n              InstanceDrawer={InstanceDrawer}\n              {...rest}\n            />\n          );\n        })}\n        <PageNotFoundRoute title=\"404 Page Not Found\" />\n      </Switch>\n    </InstanceDrawer>\n  );\n};\n\nexport { KafkaRoutes, kafkaRoutes };\n","import React, { useCallback, useMemo, useState, VoidFunctionComponent } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { AccessDeniedPage, ConnectedMetrics, ServiceDownPage } from '@app/pages';\nimport { KafkaInstance, useKafkaInstance } from '@app/pages/Kafka/kafka-instance';\nimport { UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\nimport { PrincipalsProvider } from '@app/components/PrincipalsProvider/PrincipalsProvider';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ServiceRegistrySchemaMapping } from '@app/pages/ServiceRegistry';\nimport { KafkaRoutes } from './KafkaRoutes';\nimport { FederatedModule } from '@app/components';\n\nexport const KafkaMainView: VoidFunctionComponent = () => {\n  const config = useConfig();\n  const { id: kafkaInstanceId } = useParams<{ id: string }>();\n  const kafka = useKafkaInstance(kafkaInstanceId);\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  if (kafka === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (kafka === false) {\n    throw new Error('404');\n  }\n\n  return <KafkaMainViewConnected kafka={kafka} />;\n};\n\nexport const KafkaMainViewConnected: VoidFunctionComponent<{ kafka: KafkaInstance }> = ({ kafka }) => {\n  return (\n    <PrincipalsProvider kafkaInstance={kafka.kafkaDetail}>\n      <ConnectedKafkaRoutes kafka={kafka} />\n    </PrincipalsProvider>\n  );\n};\n\nconst ConnectedKafkaRoutes: VoidFunctionComponent<{\n  kafka: KafkaInstance;\n}> = ({ kafka: { kafkaDetail, adminServerUrl } }) => {\n  const {\n    kafka: { getToken },\n  } = useAuth();\n  const history = useHistory();\n  const [error, setError] = useState<undefined | number>();\n\n  const onError = useCallback((code: number) => {\n    setError(code);\n  }, []);\n\n  const redirectAfterDeleteInstance = useCallback(() => {\n    history.push('/streams/kafkas');\n  }, [history]);\n\n  const showMetrics = useMemo(\n    () => (\n      <ConnectedMetrics\n        kafkaId={kafkaDetail.id}\n        kafkaAdminUrl={adminServerUrl}\n        totalMaxConnections={kafkaDetail.size.total_max_connections || 0}\n        maxConnections={kafkaDetail.size.max_connection_attempts_per_sec || 0}\n        maxPartitions={kafkaDetail.size.max_partitions || 0}\n        kafkaStorageBytes={parseInt(kafkaDetail.kafka_storage_size.replace('Gi', '')) * 1073741824}\n      />\n    ),\n    [adminServerUrl, kafkaDetail]\n  );\n  const showSchemas = useMemo(() => <ServiceRegistrySchemaMapping />, []);\n\n  const props = useMemo<Partial<UnderlyingProps>>(\n    () => ({\n      kafkaPageLink: '/streams/kafkas',\n      kafkaInstanceLink: `/streams/kafkas/${kafkaDetail.id}/topics`,\n      showMetrics,\n      onError,\n      kafkaName: kafkaDetail.name,\n      apiBasePath: adminServerUrl,\n      getToken: getToken,\n      showSchemas,\n      kafka: kafkaDetail,\n      redirectAfterDeleteInstance,\n    }),\n    [adminServerUrl, getToken, kafkaDetail, onError, redirectAfterDeleteInstance, showMetrics, showSchemas]\n  );\n\n  if (error === 401) {\n    return <AccessDeniedPage />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={null}\n      render={(InstanceDrawer) => <KafkaRoutes {...props} InstanceDrawer={InstanceDrawer} />}\n    />\n  );\n};\n","import { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from './types';\n\ntype FetchKafkaInstanceMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n} & BasicApiConfigurationParameters;\nexport async function fetchKafkaInstanceMetrics({\n  kafkaId,\n  duration,\n  interval,\n  accessToken,\n  basePath,\n}: FetchKafkaInstanceMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(kafkaId, duration, interval, [\n    'kubelet_volume_stats_used_bytes',\n    'kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum',\n    'kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum',\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes('zookeeper')\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  let connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(({ value, timestamp }) => (metric[timestamp] = value + (metric[timestamp] || 0)));\n    }\n\n    switch (name) {\n      case 'kubelet_volume_stats_used_bytes':\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case 'kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum':\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case 'kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum':\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","import { TopicsApi } from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters } from './types';\n\nexport async function fetchKafkaTopisFromAdmin({\n  accessToken,\n  basePath,\n}: BasicApiConfigurationParameters): Promise<string[]> {\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  const response = await api.getTopics(undefined, 100, 100, undefined, undefined, undefined, undefined);\n  return (response.data.items || []).map((t) => t.name as string);\n}\n","import { GetMetricsKpiResponse } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi, InstantQuery } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, NoUndefinedField } from './types';\n\nexport type FetchMetricsKpiProps = {\n  kafkaId: string;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchMetricsKpi({\n  accessToken,\n  basePath,\n  kafkaId,\n}: FetchMetricsKpiProps): Promise<Omit<GetMetricsKpiResponse, 'kafkaTopics'>> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0,\n    topicPartitionsLimit = 0;\n\n  const response = await apisService.getMetricsByInstantQuery(kafkaId, [\n    'kafka_topic:kafka_topic_partitions:sum', // (Number of topic partitions)\n    'kafka_topic:kafka_topic_partitions:count', // (Number of topics)\n    'consumergroup:kafka_consumergroup_members:count', // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items || []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case 'kafka_topic:kafka_topic_partitions:sum':\n        topicPartitions = value;\n        break;\n      case 'kafka_topic:kafka_topic_partitions:count':\n        topics = value;\n        break;\n      case 'consumergroup:kafka_consumergroup_members:count':\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n    topicPartitionsLimit,\n  };\n}\n","import { GetTopicsMetricsResponse, PartitionBytesMetric, TimeSeriesMetrics } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from './types';\n\nexport type FetchTopicsMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchTopicMetrics({\n  accessToken,\n  basePath,\n  kafkaId,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<Omit<GetTopicsMetricsResponse, 'kafkaTopics'>> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(kafkaId, duration, interval, [\n    'kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m',\n    'kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m',\n    'kafka_topic:kafka_log_log_size:sum',\n    'kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m',\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(({ value, timestamp }) => (metric[timestamp] = value + (metric[timestamp] || 0)));\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(({ value, timestamp }) => (partition[timestamp] = value + (partition[timestamp] || 0)));\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case 'kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m':\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case 'kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m':\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case 'kafka_topic:kafka_log_log_size:sum':\n        addAggregatePartitionBytes();\n        break;\n      case 'kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m':\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import React, { useCallback, useState, VoidFunctionComponent } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth, useBasename, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading, Metrics, MetricsProps } from '@rhoas/app-services-ui-components';\nimport { fetchKafkaInstanceMetrics, fetchKafkaTopisFromAdmin, fetchMetricsKpi, fetchTopicMetrics } from './api';\n\ntype ConnectedMetricsProps = {\n  kafkaId: string;\n  kafkaAdminUrl: string;\n  totalMaxConnections: number;\n  maxConnections: number;\n  maxPartitions: number;\n  kafkaStorageBytes: number;\n};\n\nexport const ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  kafkaId,\n  kafkaAdminUrl,\n  totalMaxConnections,\n  maxConnections,\n  maxPartitions,\n  kafkaStorageBytes,\n}) => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n\n  const storageKey = `metrics-alert-${kafkaId}`;\n\n  const [isAlertClosed, setIsAlertClosed] = useState<boolean>(localStorage.getItem(storageKey) !== null);\n\n  const onAlertClose = () => {\n    setIsAlertClosed(true);\n    localStorage.setItem(storageKey, 'true');\n  };\n\n  const onCreateTopic = () => {\n    history.push(`${basename}/topic/create`);\n  };\n\n  const getKafkaInstanceMetrics: MetricsProps['getKafkaInstanceMetrics'] = useCallback(\n    async (props) => {\n      const kafkaResponse = await fetchKafkaInstanceMetrics({\n        ...props,\n        kafkaId,\n        basePath: config.kas.apiBasePath,\n        accessToken: auth?.kas.getToken(),\n      });\n\n      return {\n        ...kafkaResponse,\n        diskSpaceLimit: kafkaStorageBytes / 1073741824,\n        connectionsLimit: totalMaxConnections,\n        connectionRateLimit: maxConnections,\n      };\n    },\n    [auth?.kas, config.kas.apiBasePath, kafkaId, totalMaxConnections, maxConnections]\n  );\n\n  const getTopicMetrics: MetricsProps['getTopicsMetrics'] = useCallback(\n    async (props) => {\n      const [kafkaTopics, metrics] = await Promise.all([\n        fetchKafkaTopisFromAdmin({\n          accessToken: auth?.kafka.getToken(),\n          basePath: kafkaAdminUrl,\n        }),\n        fetchTopicMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        }),\n      ]);\n      const { metricsTopics, bytesIncoming, bytesOutgoing, bytesPerPartition, incomingMessageRate } = metrics;\n      return {\n        kafkaTopics,\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      };\n    },\n    [auth?.kafka, auth?.kas, config.kas.apiBasePath, kafkaAdminUrl, kafkaId]\n  );\n\n  const getMetricsKpi: MetricsProps['getMetricsKpi'] = useCallback(async () => {\n    const kpiResponse = await fetchMetricsKpi({\n      kafkaId,\n      basePath: config.kas.apiBasePath,\n      accessToken: auth?.kas.getToken(),\n    });\n\n    return { ...kpiResponse, topicPartitionsLimit: maxPartitions };\n  }, [auth?.kas, config.kas.apiBasePath, kafkaId, maxPartitions]);\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <Metrics\n      onCreateTopic={onCreateTopic}\n      getTopicsMetrics={getTopicMetrics}\n      getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      getMetricsKpi={getMetricsKpi}\n      isClosed={isAlertClosed}\n      onClickClose={onAlertClose}\n    />\n  );\n};\n","import { useEffect, useState, useCallback } from 'react';\nimport { Configuration, DefaultApi, KafkaRequest, SupportedKafkaSize } from '@rhoas/kafka-management-sdk';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\n\nconst DEFAULT_ADMIN_SERVER_URL_TEMPLATE = 'https://admin-server-{}';\n\n/**\n * Join admin server url template with the kafka bootstrap host and return the kafka admin url.\n *\n * @param adminServerUrlTemplate The template that will be used to generate the full admin url from the kafka bootstrap_server_host.\n *                               The template must have a '{}' placeholder that will be substitute with the bootstrap_server_host.\n * @param kafkaRequest KafkaRequest\n * @returns The admin server full URL included the protocol and base path\n */\n\nexport const getAdminServerUrl = (adminServerUrlTemplate: string, kafkaRequest?: KafkaRequest): string => {\n  if (kafkaRequest === undefined) {\n    throw new Error('kafkaRequest cannot be undefined');\n  }\n  return adminServerUrlTemplate.replace('{}', kafkaRequest.bootstrap_server_host || '');\n};\n\nexport type KafkaInstance = {\n  kafkaDetail: Required<KafkaRequestWithSize>;\n  adminServerUrl: string;\n};\n\nexport type KafkaRequestWithSize = KafkaRequest & {\n  size: SupportedKafkaSize;\n};\n\nexport const useKafkaInstance = (id: string | undefined): KafkaInstance | false | undefined => {\n  const {\n    kas: { apiBasePath },\n    kafka,\n  } = useConfig();\n  const {\n    kas: { getToken },\n  } = useAuth();\n  const [kafkaRequest, setKafkaRequest] = useState<KafkaRequestWithSize | false | undefined>();\n  const getKafkaSize = useGetAvailableSizes();\n\n  const fetchKafka = useCallback(\n    async (id: string) => {\n      setKafkaRequest(undefined);\n      const kasService = new DefaultApi({\n        accessToken: getToken,\n        basePath: apiBasePath,\n      } as Configuration);\n      try {\n        const kafka = await kasService.getKafkaById(id);\n\n        const { cloud_provider, region, instance_type, size_id } = kafka.data;\n        if (!cloud_provider || !region || !size_id || !instance_type) {\n          throw new Error(\n            `Kafka instance ${kafka.data.id} missing some required info: ${cloud_provider}, ${region}, ${instance_type}, ${size_id}`\n          );\n        }\n        const size = await getKafkaSize(cloud_provider, region, size_id, instance_type);\n\n        setKafkaRequest({\n          ...kafka.data,\n          size,\n        });\n      } catch (e) {\n        setKafkaRequest(false);\n      }\n    },\n    [apiBasePath, getKafkaSize, getToken]\n  );\n\n  useEffect(() => {\n    if (id) {\n      fetchKafka(id);\n    } else {\n      setKafkaRequest(undefined);\n    }\n  }, [id]);\n\n  return kafkaRequest\n    ? {\n        kafkaDetail: kafkaRequest as Required<KafkaRequestWithSize>,\n        adminServerUrl: getAdminServerUrl(kafka?.adminServerUrlTemplate || DEFAULT_ADMIN_SERVER_URL_TEMPLATE, kafkaRequest),\n      }\n    : kafkaRequest;\n};\n\n/**\n * Return list of the instance types available for the current user\n *\n * @returns {Promise<InstanceType[]>}\n */\n\nexport const useGetAvailableSizes = () => {\n  const {\n    kas: { getToken },\n  } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  return useCallback(\n    async (provider: string, region: string, sizeId: string, instanceType: string): Promise<SupportedKafkaSize> => {\n      try {\n        const api = new DefaultApi(\n          new Configuration({\n            accessToken: getToken(),\n            basePath,\n          })\n        );\n\n        const sizes = await api.getInstanceTypesByCloudProviderAndRegion(provider, region);\n\n        if (!sizes?.data?.instance_types) {\n          throw new Error(\n            `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}, no instance_types returned`\n          );\n        }\n        const instanceTypesSizes = sizes?.data?.instance_types.find((i) => i.id === instanceType)?.sizes;\n        const size = instanceTypesSizes?.find((s) => s.id === sizeId);\n\n        if (!size) {\n          throw new Error(\n            `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}, can't find a size matching ${sizeId}`\n          );\n        }\n\n        return size;\n      } catch (e: unknown) {\n        throw new Error(\n          `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}: ${e}`\n        );\n      }\n    },\n    [getToken, basePath]\n  );\n};\n","import React, { useState, VoidFunctionComponent } from 'react';\nimport { ProductType, QuotaContext, useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { FederatedModule, usePrincipal, useKafkaInstanceDrawer } from '@app/components';\nimport { useModalControl, useQuota } from '@app/hooks';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ITermsConfig } from '@app/services';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\nimport { useKafkaInstance } from '@app/pages/Kafka/kafka-instance';\n\nconst KasPage: React.FC = () => {\n  const { getQuota } = useQuota(ProductType?.kas);\n\n\n  return (\n    <QuotaContext.Provider value={{ getQuota }}>\n\n        <FederatedModule\n          scope=\"kas\"\n          module=\"./OpenshiftStreams\"\n          fallback={<AppServicesLoading />}\n          render={(component) => <KasPageConnected Component={component} />}\n        />\n    </QuotaContext.Provider>\n  );\n};\n\nconst KasPageConnected: VoidFunctionComponent<{ Component: React.LazyExoticComponent<any> }> = ({ Component }) => {\n  const config = useConfig();\n  const constants = useConstants();\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.kafka.ams.termsAndConditionsEventCode,\n    siteCode: constants.kafka.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getAllUserAccounts } = usePrincipal();\n\n  const [drawerInstanceId, setDrawerInstanceId] = useState<string | undefined>(undefined);\n  const drawerInstance = useKafkaInstance(drawerInstanceId);\n  const drawerInstanceDetails = drawerInstance ? drawerInstance.kafkaDetail : undefined;\n\n  const drawerProps = useKafkaInstanceDrawer();\n\n  if (config.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <Component\n      preCreateInstance={preCreateInstance}\n      shouldOpenCreateModal={shouldOpenCreateModal}\n      drawerInstance={drawerInstanceDetails}\n      setDrawerInstance={setDrawerInstanceId}\n      {...drawerProps}\n      getAllUserAccounts={getAllUserAccounts}\n    />\n  );\n};\n\nexport default KasPage;\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFoundPage: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n\n","import { OverviewPageV2 } from '@rhoas/app-services-ui-components';\nimport React from 'react';\n\nexport const ConnectedOverviewPage: React.FunctionComponent = () => {\n\n  const kafkaHref = '/streams/kafkas';\n  const serviceRegistryHref = '/service-registry';\n\n  const connectorHref = '/connectors';\n\n  return <OverviewPageV2 toKafkaHref={kafkaHref} toServiceRegistryHref={serviceRegistryHref} toConnectorsHref={connectorHref} />;\n};\n\nexport default ConnectedOverviewPage;\n","import React, { VoidFunctionComponent } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ResourcesPage: VoidFunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<AppServicesLoading />}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n\nexport default ResourcesPage;\n","import React, { VoidFunctionComponent } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ServiceAccountsPage: VoidFunctionComponent = () => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<AppServicesLoading />}\n      render={(component) => <ServiceAccountsPageConnected Component={component} />}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<{ Component: React.LazyExoticComponent<any> }> = ({\n  Component,\n}) => {\n  const config = useConfig();\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n  return <Component />;\n};\nexport default ServiceAccountsPage;\n","import React from 'react';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport { PageSection, Title, Button, EmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const ServiceDownPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['appTemporaryFixMe']);\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t('serviceDown.serviceDownTitle')}\n        </Title>\n        <EmptyStateBody>{t('serviceDown.serviceDownMessage')}</EmptyStateBody>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            window.location.href = 'https://status.starter.openshift.com/';\n          }}\n        >\n          {t('serviceDown.serviceDownButton')}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactVersionDetails: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactVersionDetailsConnected />;\n};\n\nconst ArtifactVersionDetailsConnected: React.FunctionComponent = () => {\n  let { artifactId }=useParams<{artifactId:string}>();\n  artifactId = decodeURIComponent(artifactId);\n\n  return (\n    <SrsLayout breadcrumbId=\"srs.artifacts_details\" artifactId={artifactId} render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactVersionPage\" />\n    )}/>\n  );\n};\n\nexport default ArtifactVersionDetails;\n","import { FederatedApicurioComponent } from '@app/pages/ServiceRegistry/FederatedApicurioComponent';\nimport React from 'react';\nimport { SrsLayout } from '@app/pages/ServiceRegistry/SrsLayout';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages';\n\nexport const Artifacts: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactsConnected />;\n};\n\nconst ArtifactsConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts\"\n      render={(registry) => <FederatedApicurioComponent module=\"./FederatedArtifactsPage\" registry={registry} />}\n    />\n  );\n};\n\nexport default Artifacts;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactRedirect: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactRedirectConnected />;\n};\n\nconst ArtifactRedirectConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactRedirectPage\" />\n    )} />\n  );\n};\n\nexport default ArtifactRedirect;\n","import React from 'react';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { FederatedApicurioComponent } from './FederatedApicurioComponent';\n\ntype DownloadArtifactsProps = {\n  registry: Registry;\n  downloadLabel?: string;\n};\n\nexport const DownloadArtifacts: React.FC<DownloadArtifactsProps> = ({ registry, downloadLabel }) => {\n  return (\n    <FederatedApicurioComponent\n      module=\"./FederatedDownloadArtifacts\"\n      registry={registry}\n      fileName={registry.name}\n      downloadLinkLabel={downloadLabel}\n    />\n  );\n};\n","import React, { VoidFunctionComponent } from 'react';\nimport { ConfigType, createApicurioConfig } from '@app/pages/ServiceRegistry/utils';\nimport { FederatedModule } from '@app/components';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { useAuth, useBasename, useConfig, Principal } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: Registry | undefined;\n  topicName?: string;\n  groupId?: string | null | undefined;\n  version?: string;\n  registryId?: string;\n  basename?: string;\n  fileName?: string;\n  downloadLinkLabel?: string;\n  principals?: Principal[];\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: React.FC<FederatedApicurioComponentProps> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<AppServicesLoading />}\n      render={(component) => <ServiceAccountsPageConnected Component={component} {...rest} />}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<\n  { Component: React.LazyExoticComponent<any> } & Omit<FederatedApicurioComponentProps, 'module'>\n> = ({ Component, registry, principals, ...rest }) => {\n  let federateConfig: ConfigType;\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const getToken = auth?.apicurio_registry.getToken;\n\n  let { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n  groupId = decodeURIComponent(groupId);\n  artifactId = decodeURIComponent(artifactId);\n  version = decodeURIComponent(version);\n\n  if (config === undefined || registry === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (getToken && basename) {\n    federateConfig = createApicurioConfig(\n      config,\n      registry.registryUrl as string,\n      `${basename.getBasename()}/t/${registry?.id}`,\n      getToken,\n      principals\n    );\n    return (\n      <Component\n        config={federateConfig}\n        tenantId={registry.id}\n        groupId={groupId}\n        artifactId={artifactId}\n        version={version}\n        history={history}\n        {...rest}\n      />\n    );\n  }\n  return null;\n};\n","import { Principal } from '@rhoas/app-services-ui-shared';\nimport { Config } from \"@rhoas/app-services-ui-shared\";\n\n\nexport interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport interface NoneAuthConfig extends AuthConfig { }\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n  principals?: Principal[] | undefined;\n}\n\nconst createApicurioConfig = (config: Config, apiUrl: string, navPathPrefix: string,\n  getToken: () => Promise<string> | undefined, principals?: Principal[] | undefined) => {\n  const apicurioConfig: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: 'gettoken',\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      roleManagement: true,\n      multiTenant: true,\n      settings: true\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n    principals\n  } as ConfigType;\n\n  return apicurioConfig;\n};\n\nexport { createApicurioConfig };\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const RulesPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RulesPageConnected />;\n};\n\nconst RulesPageConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout breadcrumbId=\"srs.global_rules\" render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedRulesPage\"/>\n    )}/>\n  );\n};\n\nexport default RulesPage;\n","import React from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { FederatedModule, KasModalLoader } from '@app/components';\nimport { ServiceDownPage } from '@app/pages';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading, DevelopmentPreview } from '@rhoas/app-services-ui-components';\nimport { ProductType, QuotaContext } from '@rhoas/app-services-ui-shared';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { ITermsConfig } from '@app/services';\nimport { DownloadArtifacts } from './DownloadArtifacts';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\n\nexport const ServiceRegistryPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ServiceRegistryPageConnected />;\n};\n\nexport const ServiceRegistryPageConnected: React.FC = () => {\n  const config = useConfig();\n  const constants =  useConstants();\n  const { getQuota } = useQuota(ProductType.srs);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.serviceRegistry.ams.termsAndConditionsEventCode,\n    siteCode: constants.serviceRegistry.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getTokenEndPointUrl } = useMASToken();\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <DevelopmentPreview>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistry\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <QuotaContext.Provider value={{ getQuota }}>\n              <KasModalLoader>\n                <ServiceRegistryFederated\n                  preCreateInstance={preCreateInstance}\n                  shouldOpenCreateModal={shouldOpenCreateModal}\n                  tokenEndPointUrl={getTokenEndPointUrl()}\n                  renderDownloadArtifacts={(registry: Registry, downloadLabel?: string) => (\n                    <DownloadArtifacts registry={registry} downloadLabel={downloadLabel} />\n                  )}\n                />\n              </KasModalLoader>\n            </QuotaContext.Provider>\n          );\n        }}\n      />\n    </DevelopmentPreview>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import React, { VoidFunctionComponent } from 'react';\nimport { FederatedModule, KasModalLoader } from '@app/components';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useMASToken } from '@app/hooks';\nimport { DownloadArtifacts } from './DownloadArtifacts';\n\ntype SrsLayoutProps = {\n  render: (registry: Registry) => JSX.Element;\n  breadcrumbId?: string;\n  artifactId?: string;\n};\n\nexport const SrsLayout: React.FC<SrsLayoutProps> = (props) => {\n  return (\n    <FederatedModule\n      scope=\"srs\"\n      module=\"./ApicurioRegistry\"\n      fallback={<AppServicesLoading />}\n      render={(component) => <SrsLayoutConnected Component={component} {...props} />}\n    />\n  );\n};\n\nconst SrsLayoutConnected: VoidFunctionComponent<{ Component: React.LazyExoticComponent<any> } & SrsLayoutProps> = ({\n  Component,\n  render,\n  breadcrumbId,\n  artifactId,\n}) => {\n  const { getTokenEndPointUrl } = useMASToken();\n\n  return (\n    <KasModalLoader>\n      <Component\n        render={render}\n        breadcrumbId={breadcrumbId}\n        tokenEndPointUrl={getTokenEndPointUrl()}\n        artifactId={artifactId}\n        renderDownloadArtifacts={(registry: Registry, downloadLabel?: string) => (\n          <DownloadArtifacts registry={registry} downloadLabel={downloadLabel} />\n        )}\n      />\n    </KasModalLoader>\n  );\n};\n","import React, { VoidFunctionComponent } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { FederatedApicurioComponent } from './FederatedApicurioComponent';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ServiceRegistrySchemaMapping: React.FC = () => {\n  return (\n    <>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistryMapping\"\n        fallback={<AppServicesLoading />}\n        render={(component) => <ServiceRegistrySchemaMappingConnected Component={component} />}\n      />\n    </>\n  );\n};\n\nconst ServiceRegistrySchemaMappingConnected: VoidFunctionComponent<{ Component: React.LazyExoticComponent<any> }> = ({\n  Component,\n}) => {\n  const { topicName } = useParams<{ topicName: string }>();\n  const basename = '/service-registry';\n\n  return (\n    <Component\n      basename={basename}\n      topicName={topicName}\n      renderSchema={(registry: Registry) => (\n        <FederatedApicurioComponent\n          module=\"./FederatedSchemaMapping\"\n          registry={registry}\n          topicName={topicName}\n          groupId={null}\n          version={'latest'}\n          registryId={registry?.id}\n          basename={basename}\n        />\n      )}\n    />\n  );\n};\n","import React from 'react';\n\nimport { Main, NotAuthorized } from '@redhat-cloud-services/frontend-components';\n\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: React.FunctionComponent<GetLinkProps> = ({ href, children }) => <Link to={href || ''}>{children}</Link>;\n\nexport const AccessDeniedPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['appTemporaryFixMe']);\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t('accessdenied.accessDeniedTitle')}\n        description={accessDeniedDetails}\n        prevPageButtonText={t('accessdenied.accessDeniedButtonText')}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import { Config } from '@rhoas/app-services-ui-shared';\n\nconst defaultHostname = 'console.redhat.com';\n\ntype FederatedModulesConfig = Config['federatedModules'];\n\ntype EnvironmentConfig = {\n  hostnames: string[];\n  fetchConfig?: boolean;\n  type?: string;\n  config: Omit<Config, 'federatedModules'>;\n};\n\nexport type EnvironmentConfigs = Array<EnvironmentConfig>;\n\nexport const filterEnvironmentConfig = (environmentConfig: EnvironmentConfigs): EnvironmentConfig => {\n  const hostname = window.location.hostname;\n  console.log(`Filter config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(hostname));\n  if (possibleConfigs.length > 1) {\n    throw new Error(`Unable to find config for ${hostname}, more than one config matched ${possibleConfigs}`);\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(defaultHostname));\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      return possibleDefaultConfigs[0];\n    }\n  }\n  return possibleConfigs[0];\n};\n\nexport const addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfig,\n  federatedModulesConfig: FederatedModulesConfig,\n  beta: boolean\n): Config => {\n  const federatedModules = {} as FederatedModulesConfig;\n  Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n    let { basePath } = v;\n    let fallbackBasePath: string | undefined = undefined;\n    if (environmentConfig.type !== 'proxy') {\n      basePath = v.fallbackBasePath;\n    } else {\n      fallbackBasePath = v.fallbackBasePath;\n    }\n    if (!beta) {\n      if (basePath.startsWith('/beta')) {\n        basePath = basePath.substring(5);\n      }\n      if (fallbackBasePath?.startsWith('/beta')) {\n        fallbackBasePath = fallbackBasePath.substring(5);\n      }\n    }\n    federatedModules[k] = {\n      basePath,\n      fallbackBasePath\n    };\n  });\n  return {\n    ...environmentConfig.config,\n    federatedModules,\n  };\n};\n","import React from 'react';\nimport { Config, ConfigContext } from '@rhoas/app-services-ui-shared';\nimport configs from '../../../../config/config.json';\nimport { addFederatedModulesToConfig, EnvironmentConfigs, filterEnvironmentConfig } from '@app/providers/config/utils';\nimport { useFeatureFlags } from \"@app/providers/featureflags/FeatureFlags\";\n\ndeclare const __webpack_public_path__: string;\n\nexport const EmbeddedConfigProvider: React.FunctionComponent = ({ children }) => {\n\n  const { beta } = useFeatureFlags();\n\n  const [value, setValue] = React.useState<Config | undefined>(() => {\n    const environmentConfig = filterEnvironmentConfig(configs.config as EnvironmentConfigs);\n    if (environmentConfig.fetchConfig) {\n      return undefined;\n    }\n    const config = addFederatedModulesToConfig(environmentConfig, configs.federatedModules, beta);\n    console.log('Done loading config', config);\n    return config;\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      if (value === undefined) {\n        const response = await fetch(`${__webpack_public_path__}config.json`);\n        const jsonConfig = await response.json();\n        const environmentConfig = filterEnvironmentConfig(jsonConfig.config);\n        const config = addFederatedModulesToConfig(environmentConfig, jsonConfig.federatedModules, beta);\n        console.debug('Done loading config', config);\n        setValue(config);\n      }\n    })();\n  }, []);\n  return <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>;\n};\n","import React from \"react\";\nimport { useContext } from \"react\";\n\n/**\n * Configuration for AMS\n */\nexport type AmsConfig = {\n  termsAndConditionsEventCode: string;\n  termsAndConditionsSiteCode: string;\n  quotaProductId: string;\n  trialQuotaProductId: string;\n  resourceName: string;\n}\n\nexport type ServiceConstants = {\n  version: number;\n  kafka: {\n    ams: AmsConfig;\n  },\n  serviceRegistry: {\n    ams: AmsConfig;\n  }\n}\n\n/**\n * The ConstantContext allows access to the constants for the application.\n */\nexport const ConstantContext: React.Context<ServiceConstants | undefined> =\n  React.createContext<ServiceConstants | undefined>(undefined);\n\n/**\n * useConstants is a custom hook that is a shorthand for useContext(ConfigContext)\n */\nexport const useConstants = (): ServiceConstants => {\n  const answer = useContext(ConstantContext);\n  if (answer === undefined) {\n    throw new Error(\"useConstants must be used inside an ServiceConstantsContextProvider\");\n  }\n  return answer;\n}\n","import React from 'react';\nimport { ConstantContext, ServiceConstants } from './ServiceConstants';\nimport constantsFallback   from '../../../../static/configs/service-constants.json'\n\nexport const ServiceConstantsContextProvider: React.FunctionComponent = ({ children }) => {\n  return <ConstantContext.Provider value={constantsFallback as ServiceConstants}>{children}</ConstantContext.Provider>;\n};\n","import React, { useContext } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport type FeatureFlags = {\n  beta: boolean\n}\n\nexport const FeatureFlagsContext = React.createContext<FeatureFlags | undefined>(undefined);\n\nexport const useFeatureFlags = (): FeatureFlags => {\n  const answer = useContext(FeatureFlagsContext);\n  if (answer === undefined) {\n    throw new Error('useFeatureFlags must be used inside a FeatureFlagContext provider');\n  }\n  return answer;\n};\n\nexport const FeatureFlagProvider: React.FunctionComponent = ({\n                                                               children\n                                                             }) => {\n  const value = {\n    beta: window.location.pathname.startsWith('/beta')\n  } as FeatureFlags;\n  return (\n    <FeatureFlagsContext.Provider value={value}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  )\n}\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (!registry) {\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React from 'react';\nimport { Route, RouteComponentProps } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { useLastLocation } from 'react-router-last-location';\n\nconst NotFoundPage = React.lazy(() => import('@app/pages/NotFound/NotFoundPage'));\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute<T> {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps> | React.ComponentType<T>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup<T> {\n  label: string;\n  routes: IAppRoute<T>[];\n}\n\nexport type AppRouteConfig<T> = IAppRoute<T> | IAppRouteGroup<T>;\n\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nexport const useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nexport const PageNotFoundRoute: React.FunctionComponent<{ title: string }> = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage}/>;\n};\n\nexport const flattenedRoutes = <T, >(routes: AppRouteConfig<T>[]) => routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute<T>[]\n);\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport { accessibleRouteChangeHandler };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport { Base64 } from 'js-base64';\nimport jwtDecode, { JwtPayload } from 'jwt-decode';\nimport getUnixTime from 'date-fns/getUnixTime';\n\nconst REFRESH_TOKEN_COOKIE_NAME = 'mrt';\nconst MIN_VALIDITY = 50;\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n};\n\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const initKeycloak = async (\n  config: KeycloakConfig,\n  getInsightsAccessToken: () => Promise<string>\n): Promise<KeycloakInstance> => {\n  const initOptions = {\n    responseMode: 'query',\n    enableLogging: false,\n    checkLoginIframe: false\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken !== undefined && config.url !== undefined) {\n    // try to get an access token from the token endpoint so that we can pass it to initOptions\n    const url = buildTokenEndPointUrl(config.url, config.realm);\n    const body = new URLSearchParams();\n    body.append('grant_type', 'refresh_token');\n    body.append('refresh_token', refreshToken);\n    body.append('client_id', config.clientId);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body,\n    });\n    if (response.status === 200) {\n      console.debug('[KEYCLOAK] found valid access token');\n      const json = await response.json();\n      const accessToken = json['access_token'];\n      initOptions.token = accessToken;\n      initOptions.refreshToken = refreshToken;\n    } else {\n      console.debug('[KEYCLOAK] error getting access token from endpoint');\n      initOptions.onLoad = 'login-required';\n    }\n  } else {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (!urlParams.has('state')) {\n      // only when this isn't a redirect back from MASSSO\n      console.debug('[KEYCLOAK] did not find refresh token, will require a full login');\n      initOptions.onLoad = 'login-required';\n    }\n  }\n  console.debug(\"[KEYCLOAK] initOptions \" + JSON.stringify(initOptions));\n  const keycloak = Keycloak(config);\n  const keycloakSucess = await keycloak.init(initOptions);\n  console.log(\"[KEYCLOAK] keycloakSuccess \" + keycloakSucess);\n  if (keycloak.refreshToken) {\n    console.log(\"[KEYCLOAK] initKeycloak \" + keycloak.refreshToken);\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  } else {\n    console.log(\"[KEYCLOAK] no refresh token\");\n  }\n  console.log(\"[KEYCLOAK] init complete\");\n  return keycloak;\n};\n\nconst retrieveRefreshToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = (JSON.parse(storedToken) as unknown) as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n};\n\nconst clearRefreshToken = () => {\n  console.debug('clearing stored refresh token');\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n};\n\nconst storeRefreshToken = async (refreshToken: string, getInsightsAccessToken: () => Promise<string>) => {\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const rhUserId = insightsJWT['account_id'];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId,\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug('storing refresh token');\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n};\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getAccessToken = async (keycloak: KeycloakInstance, getInsightsAccessToken: () => Promise<string>): Promise<string> => {\n  console.log(\"keycloak.refreshToken \" + keycloak.refreshToken);\n  console.log(\"keycloak.token \" + keycloak.token);\n  console.log(\"keycloak.tokenParsed \" + keycloak.tokenParsed);\n  await keycloak.updateToken(MIN_VALIDITY);\n  console.log(\"keycloak.token \" + keycloak.token);\n  console.log(\"keycloak.tokenParsed \" + keycloak.tokenParsed);\n  if (!keycloak.token || !keycloak.tokenParsed) {\n    throw new Error('No token from keycloak!');\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const accountId = insightsJWT['account_id'];\n  const rhUserId = keycloak.tokenParsed['rh-user-id'];\n  if (accountId !== rhUserId) {\n    console.debug(`Triggering MASSSO logout because sso.redhat.com account_id claim does not match the MASSSO rh-user-id claim. account_id: ${accountId}, rh-user-id ${rhUserId}`);\n    await logout(keycloak);\n    return '';\n  }\n  if (keycloak.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak.token;\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nconst logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.debug('Performing MASSSO logout');\n    await k.logout();\n  }\n};\n\nexport const buildTokenEndPointUrl = (authServerUrl: string, realm: string) => {\n    return `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n};\n"],"names":["QuickStartLoaderFederated","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","KafkaOverviewPage","KasPage","OverviewPage","ResourcesPage","RulesPage","RolesPage","SettingsPage","ServiceAccountsPage","CosPage","RedirectToStreamsKafkas","Redirect","to","appRoutes","component","exact","label","path","title","devPreview","basename","Kafka","getBaseName","window","location","pathname","WrappedRoute","Component","isAsync","rest","t","useTranslation","history","useHistory","getBasename","useCallback","onClickButton","push","wrapRoute","routeProps","ErrorBoundary","fallbackRender","message","AppServicesPageNotFound","AppServicesEmptyState","emptyStateProps","variant","AppServicesEmptyStateVariant","emptyStateIconProps","className","titleProps","emptyStateBodyProps","body","Button","onClick","DevelopmentPreview","show","BasenameContext","value","Route","render","AppRoutes","LastLocationProvider","fallback","AppServicesLoading","Switch","map","idx","key","connect","insights","getAppId","defaultAppId","parts","split","length","useEffect","chrome","init","appId","identifyApp","unregister","on","event","includes","navId","Page","useIsMounted","isMounted","useRef","current","FederatedModule","scope","module","console","log","getModuleInfo","modules","useState","moduleInfo","setModuleInfo","basePath","fallbackBasePath","undefined","DynamicFederatedModule","url","ready","setReady","failed","setFailed","element","document","createElement","src","type","async","onload","onerror","error","head","appendChild","removeChild","useDynamicScript","entryPoint","container","default","get","factory","Module","debug","loadComponent","AssetsContext","getPath","usePrincipal","config","useConfig","auth","useAuth","serviceAccountPrincipals","setServiceAccountPrincipals","userAcountPrincipals","setUserAccountPrincipals","rbac","kas","getToken","accessToken","principalApi","PrincipalApi","listPrincipals","then","response","data","p","id","username","principalType","PrincipalType","displayName","first_name","last_name","emailAddress","email","userAccounts","SecurityApi","apiBasePath","getServiceAccounts","items","sa","client_id","name","serviceAccounts","getAllPrincipals","answer","concat","getAllUserAccounts","getAllServiceAccounts","PrincipalsProvider","children","PrincipalsContext","useKafkaInstanceDrawer","isDrawerOpen","setIsDrawerOpen","drawerActiveTab","setDrawerActiveTab","openDrawer","tab","closeDrawer","getTokenEndPointUrl","tokenEndPointUrl","onDeleteInstance","fetchModuleInfo","baseUrl","Date","now","fetch","json","fedMods","s","entry","startsWith","FederatedModuleContext","FederatedModuleProvider","moduleInfoCache","Provider","federatedModules","useFederatedModule","Error","KasModalLoader","KasModalLoaderFederated","Status","useQuota","productId","constants","orgId","setOrgId","ams","AppServicesApi","apiAccountsMgmtV1CurrentAccountGet","account","orgID","organization","getQuota","quotaData","Map","filteredQuota","loading","isServiceDown","kasQuotaProductId","kafka","quotaProductId","kasTrialQuotaProductId","trialQuotaProductId","kasResourceName","resourceName","srsQuotaProductId","serviceRegistry","srsTrialQuotaProductId","srsResourceName","ProductType","quotaKey","QuotaType","trialQuotaKey","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","quota","find","q","related_resources","r","resource_name","product","trialQuota","allowed","remaining","consumed","set","useMemo","fetchTermsReviewFactory","termsConfig","apiAuthorizationsV1SelfTermsReviewPost","event_code","eventCode","site_code","siteCode","buildUrlParams","params","Object","keys","encodeURIComponent","join","useModalControl","loadTermsReview","ref","load","Promise","useAsyncTermsReview","useLocation","shouldOpenCreateModal","parsed","parse","search","terms_required","preCreateInstance","open","termsReview","terms_available","redirect_url","redirectURL","stringifyUrl","href","query","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","useInsights","getInsightsAccessToken","keycloakConfig","masSso","authServerUrl","clientId","realm","keycloakInstance","insightsChromeAuth","getKeycloakInstance","instance","getMASSSOToken","getUsername","getUser","identity","user","isOrgAdmin","is_org_admin","srs","apicurio_registry","useMASToken","APIManagementOverviewPage","serviceDown","OpenshiftManagedConnectors","DataScienceOverViewPage","KafkaFederatedComponent","FederatedKafka","Topics","props","TopicDetails","CreateTopic","UpdateTopic","Dashboard","ConsumerGroups","AclPermissions","kafkaRoutes","flatRoutes","underlyingProps","KafkaRoutes","InstanceDrawer","routeMatch","useRouteMatch","drawerProps","handleInstanceDrawer","isOpen","activeTab","drawerInstance","setDrawerInstance","routePath","KafkaMainView","kafkaInstanceId","useParams","KafkaMainViewConnected","kafkaInstance","kafkaDetail","ConnectedKafkaRoutes","adminServerUrl","setError","onError","code","redirectAfterDeleteInstance","showMetrics","kafkaId","kafkaAdminUrl","totalMaxConnections","size","total_max_connections","maxConnections","max_connection_attempts_per_sec","maxPartitions","max_partitions","kafkaStorageBytes","parseInt","kafka_storage_size","replace","showSchemas","ServiceRegistry","kafkaPageLink","kafkaInstanceLink","kafkaName","fetchKafkaInstanceMetrics","duration","interval","DefaultApi","Configuration","getMetricsByRangeQuery","safeMetrics","filter","m","values","metric","topic","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","forEach","addAggregatedValuesTo","timestamp","diskSpaceLimit","connectionRateLimit","connectionsLimit","fetchKafkaTopisFromAdmin","TopicsApi","getTopics","fetchMetricsKpi","apisService","topics","topicPartitions","consumerGroups","topicPartitionsLimit","getMetricsByInstantQuery","fetchTopicMetrics","selectedTopic","filteredMetrics","Array","from","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","partition","addAggregatedTotalBytesTo","metricsTopics","ConnectedMetrics","useBasename","storageKey","localStorage","getItem","isAlertClosed","setIsAlertClosed","getKafkaInstanceMetrics","kafkaResponse","getTopicMetrics","all","kafkaTopics","metrics","getMetricsKpi","kpiResponse","Metrics","onCreateTopic","getTopicsMetrics","isClosed","onClickClose","setItem","getAdminServerUrl","adminServerUrlTemplate","kafkaRequest","bootstrap_server_host","useKafkaInstance","setKafkaRequest","getKafkaSize","useGetAvailableSizes","fetchKafka","kasService","getKafkaById","cloud_provider","region","instance_type","size_id","provider","sizeId","instanceType","getInstanceTypesByCloudProviderAndRegion","sizes","instance_types","instanceTypesSizes","i","KasPageConnected","termsAndConditionsEventCode","termsAndConditionsSiteCode","drawerInstanceId","setDrawerInstanceId","drawerInstanceDetails","QuotaContext","NotFoundPage","PageSection","EmptyState","EmptyStateIcon","icon","ExclamationTriangleIcon","Title","headingLevel","EmptyStateBody","ConnectedOverviewPage","OverviewPageV2","toKafkaHref","toServiceRegistryHref","toConnectorsHref","QuickStartCatalogFederated","ServiceAccountsPageConnected","ServiceDownPage","ArtifactVersionDetailsConnected","artifactId","decodeURIComponent","breadcrumbId","registry","ArtifactsConnected","ArtifactRedirectConnected","DownloadArtifacts","downloadLabel","fileName","downloadLinkLabel","FederatedApicurioComponent","federateConfig","principals","groupId","version","apiUrl","navPathPrefix","artifacts","features","readOnly","breadcrumbs","roleManagement","multiTenant","settings","ui","navPrefixPath","createApicurioConfig","registryUrl","tenantId","RulesPageConnected","ServiceRegistryPage","ServiceRegistryPageConnected","ServiceRegistryFederated","renderDownloadArtifacts","SrsLayout","SrsLayoutConnected","ServiceRegistrySchemaMapping","ServiceRegistrySchemaMappingConnected","topicName","renderSchema","registryId","GetLink","Link","AccessDeniedPage","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","filterEnvironmentConfig","environmentConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","federatedModulesConfig","beta","entries","k","v","substring","EmbeddedConfigProvider","fetchConfig","setValue","jsonConfig","ConfigContext","ConstantContext","useConstants","useContext","ServiceConstantsContextProvider","FeatureFlagsContext","useFeatureFlags","FeatureFlagProvider","middleware","register","notifications","routeFocusTimer","useA11yRouteChange","lastNavigation","useLastLocation","clearTimeout","PageNotFoundRoute","flattenedRoutes","routes","reduce","flattened","route","release","pathName","shift","accessibleRouteChangeHandler","setTimeout","mainContainer","getElementById","focus","useDocumentTitle","originalTitle","REFRESH_TOKEN_COOKIE_NAME","initKeycloak","initOptions","responseMode","enableLogging","checkLoginIframe","retrieveRefreshToken","refreshToken","buildTokenEndPointUrl","URLSearchParams","append","method","headers","status","token","onLoad","has","JSON","stringify","keycloak","keycloakSucess","storeRefreshToken","encoded","storedToken","Base64","storedRefreshToken","refreshJWT","clearRefreshToken","exp","getUnixTime","insightsToken","rhUserId","insightsJWT","getAccessToken","tokenParsed","updateToken","accountId","logout"],"sourceRoot":""}