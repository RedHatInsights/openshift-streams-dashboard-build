{"version":3,"sources":["webpack://application-services-ui/./src/app/App.scss","webpack://application-services-ui/./src/app/pages/Resources/QuickStartDrawerFederated.scss","webpack://application-services-ui/./static/images/APIManagement_MECH_API_FullColor_Pink.svg","webpack://application-services-ui/./static/images/AppServicesOverview-IconPattern.svg","webpack://application-services-ui/./static/images/RHODS-ML-Technology.svg","webpack://application-services-ui/./static/images/icon__plus-solid.svg","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/App.scss?af09","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/openapi/kas/base.ts","webpack://application-services-ui/./src/openapi/kas/common.ts","webpack://application-services-ui/./src/openapi/kas/api.ts","webpack://application-services-ui/./src/openapi/kas/configuration.ts","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/Loading/Loading.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaPage.tsx","webpack://application-services-ui/./src/app/components/DevelopmentPreview/DevelopmentPreview.tsx","webpack://application-services-ui/./src/openapi/ams/api.ts","webpack://application-services-ui/./src/app/pages/Kafka/utils.ts","webpack://application-services-ui/./src/openapi/ams/base.ts","webpack://application-services-ui/./src/openapi/ams/common.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/openapi/ams/configuration.ts","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/QuickStartDrawerFederated.scss?71e4","webpack://application-services-ui/./src/app/pages/Resources/QuickStartDrawerFederated.tsx","webpack://application-services-ui/./src/app/Routes.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/utils/keycloakAuth.ts","webpack://application-services-ui/./src/app/providers/ConfigContextProvider.tsx","webpack://application-services-ui/./src/app/i18n/locale/index.ts","webpack://application-services-ui/./src/app/i18n/index.ts","webpack://application-services-ui/./src/AppEntry.tsx","webpack://application-services-ui/./src/bootstrap.tsx"],"names":["___CSS_LOADER_EXPORT___","i","___CSS_LOADER_URL_REPLACEMENT_0___","___CSS_LOADER_URL_REPLACEMENT_1___","___CSS_LOADER_URL_REPLACEMENT_2___","___CSS_LOADER_URL_REPLACEMENT_3___","push","module","id","registry","init","Error","ReducerRegistry","middleware","options","useDocumentTitle","title","originalTitle","document","GetLink","href","children","Link","to","AccessDeniedPage","t","useTranslation","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","BASE_PATH","replace","configuration","basePath","axios","this","field","msg","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","RequiredError","setBearerAuthToObject","object","accessToken","setSearchParams","url","searchParams","URLSearchParams","search","objects","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","value","requestOptions","nonString","isJsonMime","headers","JSON","stringify","undefined","toPathString","pathname","hash","createRequestFunction","axiosArgs","globalAxios","axiosRequestArgs","request","DefaultApiFp","localVarAxiosParamCreator","createKafka","async","kafkaRequestPayload","Promise","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","data","createServiceAccount","serviceAccountRequest","deleteKafkaById","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","getMetricsByInstantQuery","filters","getMetricsByRangeQuery","duration","interval","getServiceAccountById","listCloudProviderRegions","page","size","listCloudProviders","listKafkas","orderBy","listServiceAccounts","resetServiceAccountCreds","serviceStatus","versionMetadata","DefaultApiAxiosParamCreator","localVarAxiosArgs","then","BaseAPI","param","apiKey","username","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","release","pathName","split","shift","InstanceDrawer","isExpanded","onClose","kafkaDetail","activeTab","setIsOpenDeleteInstanceModal","isOpenDeleteInstanceModal","config","useConfig","history","Loading","getConnectToRoutePath","event","routePath","createHref","onConnectToRoute","masSso","tokenEndPointUrl","FederatedModule","scope","render","InstanceDrawerFederated","instanceDetail","Bullseye","Spinner","FederatedModuleContext","FederatedModuleProvider","Provider","federatedModules","KafkaUIKafkaModules","fallback","federatedModuleContext","useState","moduleInfo","setModuleInfo","useEffect","getModuleInfo","fallbackBasePath","ready","setReady","failed","setFailed","element","createElement","src","type","onload","console","log","onerror","error","head","appendChild","removeChild","useDynamicScript","entryPoint","Component","window","default","get","factory","Module","loadComponent","AssetsContext","getPath","baseUrl","fetchModuleInfo","fetch","json","fedMods","s","entry","path","startsWith","DevelopmentPreview","className","style","height","Banner","isSticky","variant","Popover","hasAutoWidth","bodyContent","position","minWidth","maxWidth","Button","AccessReviewActionEnum","AccessReviewResourceTypeEnum","AccessReviewResponseActionEnum","AccessReviewResponseResourceTypeEnum","CapabilityReviewRequestCapabilityEnum","CapabilityReviewRequestTypeEnum","ClusterAuthorizationRequestProductCategoryEnum","ClusterAuthorizationRequestProductIdEnum","OneMetricHealthStateEnum","PermissionActionEnum","PermissionAllOfActionEnum","ResourceQuotaTypeEnum","ResourceQuotaAllOfTypeEnum","ResourceQuotaRequestTypeEnum","ResourceReviewActionEnum","ResourceReviewResourceTypeEnum","ResourceReviewRequestActionEnum","ResourceReviewRequestResourceTypeEnum","RoleBindingTypeEnum","RoleBindingAllOfTypeEnum","SelfAccessReviewActionEnum","SelfAccessReviewResourceTypeEnum","SelfResourceReviewActionEnum","SelfResourceReviewResourceTypeEnum","SelfResourceReviewRequestActionEnum","SelfResourceReviewRequestResourceTypeEnum","SubscriptionProductBundleEnum","SubscriptionServiceLevelEnum","SubscriptionSupportLevelEnum","SubscriptionSystemUnitsEnum","SubscriptionUsageEnum","SubscriptionAllOfProductBundleEnum","SubscriptionAllOfServiceLevelEnum","SubscriptionAllOfSupportLevelEnum","SubscriptionAllOfSystemUnitsEnum","SubscriptionAllOfUsageEnum","SubscriptionCreateRequestPlanIdEnum","SubscriptionCreateRequestStatusEnum","SubscriptionPatchRequestClusterBillingModelEnum","SubscriptionPatchRequestProductBundleEnum","SubscriptionPatchRequestServiceLevelEnum","SubscriptionPatchRequestSupportLevelEnum","SubscriptionPatchRequestSystemUnitsEnum","SubscriptionPatchRequestUsageEnum","SupportCasesRequestSeverityEnum","KafkaPage","serviceDown","ServiceDownPage","KafkaPageConnected","auth","useAuth","adminServerUrl","setAdminServerUrl","setKafkaDetail","matches","exec","location","groups","topicName","getParams","kafkaName","setKafkaName","kas","getToken","DefaultApi","apiBasePath","kafka","bootstrapServerHost","KafkaPageContent","alert","useAlert","showCreate","setShowCreate","showUpdate","setShowUpdate","setError","isInstanceDrawerOpen","setIsInstanceDrawerOpen","activeDrawerTab","setActiveDrawerTab","onCreateTopic","onClickTopic","onCloseCreateTopic","getTopicDetailsPath","onUpdateTopic","onError","code","message","onDeleteTopic","onCancelUpdateTopic","onSaveTopic","kafkaModule","kafkaMainPageModule","topicCreateModule","topicUpdateModule","topicListDetailModule","kafkaPageLink","kafkaInstanceLink","handleInstanceDrawer","isOpen","kafkaUIPage","FederatedTopics","currentTopic","addAlert","apiAccountsMgmtV1AccessTokenPost","apiAccountsMgmtV1AccountsGet","fields","fetchLabels","fetchCapabilities","apiAccountsMgmtV1AccountsIdGet","apiAccountsMgmtV1AccountsIdLabelsGet","apiAccountsMgmtV1AccountsIdLabelsKeyDelete","apiAccountsMgmtV1AccountsIdLabelsKeyGet","apiAccountsMgmtV1AccountsIdLabelsKeyPatch","label","apiAccountsMgmtV1AccountsIdLabelsPost","apiAccountsMgmtV1AccountsIdPatch","accountPatchRequest","apiAccountsMgmtV1AccountsPost","account","dryRun","apiAccountsMgmtV1ClusterAuthorizationsPost","clusterAuthorizationRequest","apiAccountsMgmtV1ClusterRegistrationsPost","clusterRegistrationRequest","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1ErrorsGet","apiAccountsMgmtV1ErrorsIdGet","apiAccountsMgmtV1FeatureTogglesIdQueryPost","featureToggleQueryRequest","apiAccountsMgmtV1LabelsGet","apiAccountsMgmtV1MetricsGet","apiAccountsMgmtV1NotifyPost","notificationRequest","apiAccountsMgmtV1OrganizationsGet","apiAccountsMgmtV1OrganizationsIdGet","apiAccountsMgmtV1OrganizationsIdLabelsGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete","apiAccountsMgmtV1OrganizationsIdLabelsKeyGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch","apiAccountsMgmtV1OrganizationsIdLabelsPost","apiAccountsMgmtV1OrganizationsIdPatch","organizationPatchRequest","apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","orgId","fetchRelatedResources","apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost","resourceQuotaRequest","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete","quotaId","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch","apiAccountsMgmtV1OrganizationsPost","organization","apiAccountsMgmtV1PlansGet","apiAccountsMgmtV1PlansIdGet","apiAccountsMgmtV1PullSecretsExternalResourceIdDelete","externalResourceId","apiAccountsMgmtV1PullSecretsPost","pullSecretRequest","apiAccountsMgmtV1RegistriesGet","apiAccountsMgmtV1RegistriesIdGet","apiAccountsMgmtV1RegistryCredentialsGet","apiAccountsMgmtV1RegistryCredentialsIdDelete","apiAccountsMgmtV1RegistryCredentialsIdGet","apiAccountsMgmtV1RegistryCredentialsIdPatch","registryCredentialPatchRequest","apiAccountsMgmtV1RegistryCredentialsPost","registryCredential","apiAccountsMgmtV1ReservedResourcesGet","apiAccountsMgmtV1ResourceQuotaGet","apiAccountsMgmtV1RoleBindingsGet","apiAccountsMgmtV1RoleBindingsIdDelete","apiAccountsMgmtV1RoleBindingsIdGet","apiAccountsMgmtV1RoleBindingsIdPatch","roleBindingRequest","apiAccountsMgmtV1RoleBindingsPost","roleBindingCreateRequest","apiAccountsMgmtV1RolesGet","apiAccountsMgmtV1RolesIdGet","apiAccountsMgmtV1SkuRulesGet","apiAccountsMgmtV1SkuRulesIdGet","apiAccountsMgmtV1SkusGet","apiAccountsMgmtV1SkusIdGet","apiAccountsMgmtV1SubscriptionsGet","fetchAccounts","labels","apiAccountsMgmtV1SubscriptionsIdDelete","apiAccountsMgmtV1SubscriptionsIdGet","fetchCpuAndSocket","apiAccountsMgmtV1SubscriptionsIdLabelsGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete","apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch","apiAccountsMgmtV1SubscriptionsIdLabelsPost","apiAccountsMgmtV1SubscriptionsIdNotifyPost","apiAccountsMgmtV1SubscriptionsIdPatch","subscriptionPatchRequest","apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet","apiAccountsMgmtV1SubscriptionsIdSupportCasesGet","apiAccountsMgmtV1SubscriptionsPost","subscriptionCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete","subId","accountId","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost","notificationContactCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet","reservedResourceId","apiAccountsMgmtV1SupportCasesCaseIdDelete","caseId","apiAccountsMgmtV1SupportCasesPost","supportCasesRequest","apiAccountsMgmtV1TokenAuthorizationPost","tokenAuthorizationRequest","apiAuthorizationsV1AccessReviewPost","accessReview","apiAuthorizationsV1CapabilityReviewPost","capabilityReviewRequest","apiAuthorizationsV1ExportControlReviewPost","exportControlReviewRequest","apiAuthorizationsV1FeatureReviewPost","featureReview","apiAuthorizationsV1ResourceReviewPost","resourceReviewRequest","apiAuthorizationsV1SelfAccessReviewPost","selfAccessReview","apiAuthorizationsV1SelfFeatureReviewPost","selfFeatureReview","apiAuthorizationsV1SelfResourceReviewPost","selfResourceReviewRequest","apiAuthorizationsV1SelfTermsReviewPost","selfTermsReview","apiAuthorizationsV1TermsReviewPost","termsReview","buildUrlParams","params","Object","keys","map","join","PageSection","EmptyState","EmptyStateIcon","icon","Title","headingLevel","EmptyStateBody","onClick","KasPageConnected","create","setCreate","setTermsReview","ams","event_code","eventCode","site_code","siteCode","resp","preCreateInstance","open","terms_available","terms_required","redirect_url","redirectURL","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","createDialogOpen","osStreams","OpenshiftStreamsFederated","NotFoundPage","routeFocusTimer","QuickStartDrawerFederated","showDrafts","guides","appendTo","querySelector","root","ServiceAccountsPageConnected","ServiceAccountsFederated","RedirectToStreamsKafkas","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","rest","getBasename","routeProps","BasenameContext","PageNotFound","component","flattenedRoutes","exact","PageSectionVariants","Stack","hasGutter","Text","TextVariants","StackItem","ButtonVariant","isLarge","isWidthLimited","Grid","md","lg","Card","CardHeader","CardHeaderMain","alt","CardTitle","CardBody","Label","CardFooter","color","isInline","target","TitleSizes","GridItem","frameBorder","allow","allowFullScreen","TextContent","List","ListItem","frameborder","allowfullscreen","QuickStartCatalogFederated","reduce","flattened","route","routes","AppRoutes","LastLocationProvider","idx","register","notifications","connect","insights","chrome","defaultAppId","parts","appId","length","identifyApp","on","includes","navId","store","getStore","keycloak","ConfigProvider","configUrl","setConfig","controller","AbortController","signal","hostname","environmentConfig","possibleConfigs","filter","hostnames","possibleDefaultConfigs","abort","ConfigContext","REFRESH_TOKEN_COOKIE_NAME","getKeycloakInstance","k","initOptions","responseMode","storedRefreshToken","refreshJWT","exp","Date","refreshToken","updateToken","onLoad","getValidAccessToken","token","resources","en","translation","appServicesi18n","use","initReactI18next","detection","order","caches","fallbackLng","debug","interpolation","escapeValue","AppWithKeycloak","authServerUrl","clientId","realm","setKeycloak","setLoadingKeycloak","loadingKeycloak","dispatch","useDispatch","getUsername","getUser","identity","user","baseName","AuthContext","AlertContext","basename","I18nextProvider","i18n"],"mappings":"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d,GAClC,OAAOA,EAAIuB,SAAWvB,EAAIG,OAASH,EAAIwB,MAO9B,GAAwB,SAAUE,EAAwBC,EAA4B9C,EAAmBE,GAClH,OAAO,SAACE,EAAoCD,QAApC,IAAAC,MAAA,QAAoC,IAAAD,MAAA,GACxC,IAAM4C,GAAmB,gCAAIF,EAAUnE,SAAO,CAAEyC,MAAMjB,aAAa,EAAbA,EAAeC,WAAYA,GAAY0C,EAAU1B,MACvG,OAAOf,EAAM4C,QAAQD,MH1D7B,SAAYoJ,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,QAAsB,KAWlC,SAAYC,GACR,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCJ,CAAYA,QAA4B,KAuGxC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,QAA8B,KAW1C,SAAYC,GACR,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCJ,CAAYA,QAAoC,KA8iBhD,SAAYC,GACR,4CADJ,CAAYA,QAAqC,KAOjD,SAAYC,GACR,oBADJ,CAAYA,QAA+B,KAoG3C,SAAYC,GACR,oCADJ,CAAYA,QAA8C,KAO1D,SAAYC,GACR,YACA,YACA,sBACA,YACA,cALJ,CAAYA,QAAwC,KAsrCpD,SAAYC,GACR,oBACA,wBACA,oBAHJ,CAAYA,QAAwB,KA6NpC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,QAAoB,KAgChC,SAAYC,GACR,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","file":"104.afe83cb1f4af8168a296.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/getUrl.js\";\nimport ___CSS_LOADER_URL_IMPORT_0___ from \"../../static/images/AppServicesOverview-IconPattern.svg\";\nimport ___CSS_LOADER_URL_IMPORT_1___ from \"../../static/images/APIManagement_MECH_API_FullColor_Pink.svg\";\nimport ___CSS_LOADER_URL_IMPORT_2___ from \"../../static/images/RHODS-ML-Technology.svg\";\nimport ___CSS_LOADER_URL_IMPORT_3___ from \"../../static/images/icon__plus-solid.svg\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_3___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}.pf-u-font-size-xs{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl{font-size:var(--pf-global--FontSize--4xl) !important}@media screen and (min-width: 576px){.pf-u-font-size-xs-on-sm{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-sm{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-sm{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-sm{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-sm{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-sm{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-sm{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-sm{font-size:var(--pf-global--FontSize--4xl) !important}}@media screen and (min-width: 768px){.pf-u-font-size-xs-on-md{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-md{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-md{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-md{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-md{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-md{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-md{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-md{font-size:var(--pf-global--FontSize--4xl) !important}}@media screen and (min-width: 992px){.pf-u-font-size-xs-on-lg{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-lg{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-lg{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-lg{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-lg{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-lg{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-lg{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-lg{font-size:var(--pf-global--FontSize--4xl) !important}}@media screen and (min-width: 1200px){.pf-u-font-size-xs-on-xl{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-xl{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-xl{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-xl{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-xl{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-xl{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-xl{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-xl{font-size:var(--pf-global--FontSize--4xl) !important}}@media screen and (min-width: 1450px){.pf-u-font-size-xs-on-2xl{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-2xl{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-2xl{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-2xl{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-2xl{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-2xl{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-2xl{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-2xl{font-size:var(--pf-global--FontSize--4xl) !important}}.pf-u-font-weight-light{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold{font-weight:var(--pf-global--FontWeight--bold) !important}@media screen and (min-width: 576px){.pf-u-font-weight-light-on-sm{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-sm{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-sm{font-weight:var(--pf-global--FontWeight--bold) !important}}@media screen and (min-width: 768px){.pf-u-font-weight-light-on-md{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-md{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-md{font-weight:var(--pf-global--FontWeight--bold) !important}}@media screen and (min-width: 992px){.pf-u-font-weight-light-on-lg{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-lg{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-lg{font-weight:var(--pf-global--FontWeight--bold) !important}}@media screen and (min-width: 1200px){.pf-u-font-weight-light-on-xl{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-xl{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-xl{font-weight:var(--pf-global--FontWeight--bold) !important}}@media screen and (min-width: 1450px){.pf-u-font-weight-light-on-2xl{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-2xl{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-2xl{font-weight:var(--pf-global--FontWeight--bold) !important}}.pf-u-color-100{color:var(--pf-global--Color--100) !important}.pf-u-color-200{color:var(--pf-global--Color--200) !important}.pf-u-color-300{color:var(--pf-global--Color--300) !important}.pf-u-color-400{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300{color:var(--pf-global--danger-color--300) !important}@media screen and (min-width: 576px){.pf-u-color-100-on-sm{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-sm{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-sm{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-sm{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-sm{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-sm{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-sm{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-sm{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-sm{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-sm{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-sm{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-sm{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-sm{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-sm{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-sm{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-sm{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-sm{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-sm{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-sm{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-sm{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-sm{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-sm{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-sm{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-sm{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-sm{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-sm{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-sm{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-sm{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-sm{color:var(--pf-global--danger-color--300) !important}}@media screen and (min-width: 768px){.pf-u-color-100-on-md{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-md{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-md{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-md{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-md{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-md{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-md{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-md{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-md{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-md{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-md{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-md{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-md{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-md{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-md{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-md{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-md{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-md{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-md{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-md{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-md{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-md{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-md{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-md{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-md{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-md{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-md{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-md{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-md{color:var(--pf-global--danger-color--300) !important}}@media screen and (min-width: 992px){.pf-u-color-100-on-lg{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-lg{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-lg{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-lg{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-lg{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-lg{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-lg{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-lg{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-lg{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-lg{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-lg{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-lg{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-lg{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-lg{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-lg{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-lg{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-lg{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-lg{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-lg{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-lg{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-lg{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-lg{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-lg{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-lg{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-lg{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-lg{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-lg{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-lg{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-lg{color:var(--pf-global--danger-color--300) !important}}@media screen and (min-width: 1200px){.pf-u-color-100-on-xl{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-xl{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-xl{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-xl{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-xl{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-xl{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-xl{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-xl{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-xl{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-xl{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-xl{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-xl{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-xl{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-xl{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-xl{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-xl{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-xl{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-xl{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-xl{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-xl{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-xl{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-xl{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-xl{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-xl{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-xl{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-xl{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-xl{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-xl{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-xl{color:var(--pf-global--danger-color--300) !important}}@media screen and (min-width: 1450px){.pf-u-color-100-on-2xl{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-2xl{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-2xl{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-2xl{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-2xl{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-2xl{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-2xl{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-2xl{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-2xl{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-2xl{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-2xl{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-2xl{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-2xl{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-2xl{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-2xl{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-2xl{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-2xl{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-2xl{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-2xl{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-2xl{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-2xl{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-2xl{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-2xl{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-2xl{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-2xl{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-2xl{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-2xl{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-2xl{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-2xl{color:var(--pf-global--danger-color--300) !important}}.pf-u-text-break-word{word-break:break-word !important}.pf-u-text-nowrap{white-space:nowrap !important}.pf-u-text-wrap{white-space:normal !important}@media screen and (min-width: 576px){.pf-u-text-break-word-on-sm{word-break:break-word !important}.pf-u-text-nowrap-on-sm{white-space:nowrap !important}.pf-u-text-wrap-on-sm{white-space:normal !important}}@media screen and (min-width: 768px){.pf-u-text-break-word-on-md{word-break:break-word !important}.pf-u-text-nowrap-on-md{white-space:nowrap !important}.pf-u-text-wrap-on-md{white-space:normal !important}}@media screen and (min-width: 992px){.pf-u-text-break-word-on-lg{word-break:break-word !important}.pf-u-text-nowrap-on-lg{white-space:nowrap !important}.pf-u-text-wrap-on-lg{white-space:normal !important}}@media screen and (min-width: 1200px){.pf-u-text-break-word-on-xl{word-break:break-word !important}.pf-u-text-nowrap-on-xl{white-space:nowrap !important}.pf-u-text-wrap-on-xl{white-space:normal !important}}@media screen and (min-width: 1450px){.pf-u-text-break-word-on-2xl{word-break:break-word !important}.pf-u-text-nowrap-on-2xl{white-space:nowrap !important}.pf-u-text-wrap-on-2xl{white-space:normal !important}}.pf-u-text-truncate{min-width:0 !important;max-width:100% !important;overflow:hidden !important;text-overflow:ellipsis !important;white-space:nowrap !important}.pf-u-background-color-100{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400{background-color:var(--pf-global--BackgroundColor--dark-400) !important}@media screen and (min-width: 576px){.pf-u-background-color-100-on-sm{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-sm{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-sm{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-sm{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-sm{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-sm{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}@media screen and (min-width: 768px){.pf-u-background-color-100-on-md{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-md{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-md{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-md{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-md{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-md{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}@media screen and (min-width: 992px){.pf-u-background-color-100-on-lg{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-lg{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-lg{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-lg{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-lg{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-lg{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}@media screen and (min-width: 1200px){.pf-u-background-color-100-on-xl{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-xl{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-xl{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-xl{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-xl{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-xl{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}@media screen and (min-width: 1450px){.pf-u-background-color-100-on-2xl{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-2xl{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-2xl{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-2xl{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-2xl{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-2xl{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}.pf-c-page__main-section.app-services-ui--banner{--app-services-ui--banner--before--GridTemplateColumns: 1fr;--app-services-ui--banner--ColumnGap: var(--pf-global--spacer--2xl);--app-services-ui--banner__tagline--Color: var(--pf-global--Color--light-300);--app-services-ui--banner--Padding: var(--pf-global--spacer--lg);--app-services-ui--banner--PaddingTop: var(--app-services-ui--banner--Padding);--app-services-ui--banner--PaddingRight: var(--app-services-ui--banner--Padding);--app-services-ui--banner--PaddingBottom: var(--app-services-ui--banner--Padding);--app-services-ui--banner--PaddingLeft: var(--app-services-ui--banner--Padding);--app-services-ui--banner--before--BackgroundImage: url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");--app-services-ui--banner--before--BackgroundImage--rhoam: url(\" + ___CSS_LOADER_URL_REPLACEMENT_1___ + \");--app-services-ui--banner--before--BackgroundImage--rhods: url(\" + ___CSS_LOADER_URL_REPLACEMENT_2___ + \");--app-services-ui--banner--before--BackgroundSize: 42.375rem;--app-services-ui--banner--before--BackgroundSize--rhoam: 30rem;--app-services-ui--banner--before--BackgroundSize--rhods: 30rem;--app-services-ui--banner--before--Offset--top: calc(var(--app-services-ui--banner--PaddingTop) * -1);--app-services-ui--banner--before--Offset--bottom: calc(var(--app-services-ui--banner--PaddingBottom) * -1);--app-services-ui--banner--before--Offset--right: calc(var(--app-services-ui--banner--PaddingRight) * -1);--app-services-ui--banner--before--Offset--left: calc(var(--app-services-ui--banner--PaddingLeft) * -1);display:grid;grid-template-columns:var(--app-services-ui--banner--before--GridTemplateColumns);grid-template-areas:content;grid-gap:var(--app-services-ui--banner--ColumnGap);padding-top:var(--app-services-ui--banner--PaddingTop);padding-right:var(--app-services-ui--banner--PaddingRight);padding-bottom:var(--app-services-ui--banner--PaddingBottom);padding-left:var(--app-services-ui--banner--PaddingLeft)}@media screen and (min-width: 768px){.pf-c-page__main-section.app-services-ui--banner{--app-services-ui--banner--Padding: var(--pf-global--spacer--2xl);--app-services-ui--banner--before--Opacity: 0.65;--app-services-ui--banner--before--GridTemplateColumns: 2fr 1fr;grid-template-areas:\\\"content graphic\\\"}}@media screen and (min-width: 992px){.pf-c-page__main-section.app-services-ui--banner{--app-services-ui--banner--before--GridTemplateColumns: 2fr 1fr}}@media screen and (min-width: 1200px){.pf-c-page__main-section.app-services-ui--banner{--app-services-ui--banner--before--Opacity: 1}}.pf-c-page__main-section.app-services-ui--banner:before{content:\\\"\\\";grid-area:graphic;margin-top:var(--app-services-ui--banner--before--Offset--top);margin-right:var(--app-services-ui--banner--before--Offset--right);margin-bottom:var(--app-services-ui--banner--before--Offset--bottom);background-image:var(--app-services-ui--banner--before--BackgroundImage);background-size:var(--app-services-ui--banner--before--BackgroundSize);opacity:var(--app-services-ui--banner--before--Opacity)}.pf-c-page__main-section.app-services-ui--banner[class*=pf-m-dark-].pf-c-page__main-section .pf-c-button.pf-m-primary{color:var(--pf-global--primary-color-100);background-color:var(--pf-global--palette--blue-400)}.pf-c-page__main-section.app-services-ui--banner[class*=pf-m-dark-].pf-c-page__main-section .pf-c-button.pf-m-primary:hover,.pf-c-page__main-section.app-services-ui--banner[class*=pf-m-dark-].pf-c-page__main-section .pf-c-button.pf-m-primary:focus,.pf-c-page__main-section.app-services-ui--banner[class*=pf-m-dark-].pf-c-page__main-section .pf-c-button.pf-m-primary:active{color:var(--pf-global--primary-color-100);background-color:var(--pf-global--palette--blue-500)}.app-services-ui--banner__tagline{color:var(--app-services-ui--banner__tagline--Color);font-size:var(--pf-global--FontSize--lg);margin-bottom:var(--pf-global--spacer--lg)}.app-services-ui--banner--text-only{font-size:var(--pf-global--FontSize--xl);text-align:center;max-width:800px}.app-services-ui--page-section--marketing,.app-services-ui--page-section--video{--pf-c-page__main-section--PaddingTop: var(--pf-global--spacer--xl);--pf-c-page__main-section--PaddingRight: var(--pf-global--spacer--lg);--pf-c-page__main-section--PaddingBottom: var(--pf-global--spacer--xl);--pf-c-page__main-section--PaddingLeft: var(--pf-global--spacer--lg)}.app-services-ui--page-section--marketing .pf-l-grid.pf-m-gutter,.app-services-ui--page-section--video .pf-l-grid.pf-m-gutter{--pf-l-grid--m-gutter--GridGap: var(--pf-global--spacer--lg)}@media screen and (min-width: 768px){.app-services-ui--page-section--marketing,.app-services-ui--page-section--video{--pf-c-page__main-section--PaddingRight: var(--pf-global--spacer--2xl);--pf-c-page__main-section--PaddingLeft: var(--pf-global--spacer--2xl)}}.app-services-ui--banner--rhoam:before{--app-services-ui--banner--before--BackgroundImage: var(--app-services-ui--banner--before--BackgroundImage--rhoam);--app-services-ui--banner--before--BackgroundSize: var(--app-services-ui--banner--before--BackgroundSize--rhoam);background-position-y:-99px;background-repeat:no-repeat}.app-services-ui--banner--rhods:before{--app-services-ui--banner--before--BackgroundImage: var(--app-services-ui--banner--before--BackgroundImage--rhods);--app-services-ui--banner--before--BackgroundSize: var(--app-services-ui--banner--before--BackgroundSize--rhods);background-repeat:no-repeat}.app-services-ui--icon-list{--app-services-ui--icon-list--RowGap: var(--pf-global--spacer--lg);--app-services-ui--icon-list--item--ColumnGap: var(--pf-global--spacer--md);--app-services-ui--icon-list--item--before--Content--width: 1rem;--app-services-ui--icon-list--item--before--Content--height: 1rem;--app-services-ui--icon-list--item--before--Content--url: url(\" + ___CSS_LOADER_URL_REPLACEMENT_3___ + \");list-style:none;display:grid;row-gap:var(--app-services-ui--icon-list--RowGap);--pf-c-content--ul--MarginLeft: 0}.app-services-ui--icon-list li{display:grid;column-gap:var(--app-services-ui--icon-list--item--ColumnGap);grid-template-columns:1rem auto;align-content:start}.app-services-ui--icon-list li::before{grid-column:1;content:var(--app-services-ui--icon-list--item--before--Content--url);width:var(--app-services-ui--icon-list--item--before--Content--width);height:var(--app-services-ui--icon-list--item--before--Content--height);color:var(--pf-global--palette--red-100);transform:translateY(2px)}.app-services-ui--card--video{position:relative;padding-bottom:56.25% !important;height:0}.app-services-ui--card--video iframe{position:absolute;top:0;left:0;width:100%;height:100%}.app-services-ui--u-display-contents{display:contents}#qs-content{transform:translate(0)}.app-services-ui--button--dev-preview,.app-services-ui--button--dev-preview:visited{--pf-c-button--m-link--Color: var(--pf-global--Color--dark-100) !important;text-decoration:underline}.pf-c-select__toggle:before{border-top:1px solid var(--pf-c-select__toggle--before--BorderTopColor);border-right:1px solid var(--pf-c-select__toggle--before--BorderRightColor);border-bottom:1px solid var(--pf-c-select__toggle--before--BorderBottomColor);border-left:1px solid var(--pf-c-select__toggle--before--BorderLeftColor)}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_variables.scss\",\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_helpers.scss\",\"webpack://./node_modules/@patternfly/patternfly/sass-utilities/mixins.scss\",\"webpack://./node_modules/@patternfly/patternfly/utilities/Text/text.scss\",\"webpack://./src/app/App.scss\"],\"names\":[],\"mappings\":\"AAAA,MACI,4BAAA,CCDJ,aACI,YAAA,CCqEE,mBACE,mDAAA,CADF,mBACE,mDAAA,CADF,mBACE,mDAAA,CADF,mBACE,mDAAA,CADF,mBACE,mDAAA,CADF,oBACE,oDAAA,CADF,oBACE,oDAAA,CADF,oBACE,oDAAA,CAhEJ,qCA8EQ,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CAAA,CAzEV,qCAwEQ,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CAAA,CAnEV,qCAkEQ,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CAAA,CA7DV,sCA4DQ,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CAAA,CAvDV,sCAsDQ,0BACE,mDAAA,CADF,0BACE,mDAAA,CADF,0BACE,mDAAA,CADF,0BACE,mDAAA,CADF,0BACE,mDAAA,CADF,2BACE,oDAAA,CADF,2BACE,oDAAA,CADF,2BACE,oDAAA,CAAA,CAhBR,wBACE,0DAAA,CADF,yBACE,2DAAA,CADF,uBACE,yDAAA,CAhEJ,qCA8EQ,8BACE,0DAAA,CADF,+BACE,2DAAA,CADF,6BACE,yDAAA,CAAA,CAzEV,qCAwEQ,8BACE,0DAAA,CADF,+BACE,2DAAA,CADF,6BACE,yDAAA,CAAA,CAnEV,qCAkEQ,8BACE,0DAAA,CADF,+BACE,2DAAA,CADF,6BACE,yDAAA,CAAA,CA7DV,sCA4DQ,8BACE,0DAAA,CADF,+BACE,2DAAA,CADF,6BACE,yDAAA,CAAA,CAvDV,sCAsDQ,+BACE,0DAAA,CADF,gCACE,2DAAA,CADF,8BACE,yDAAA,CAAA,CAhBR,gBACE,6CAAA,CADF,gBACE,6CAAA,CADF,gBACE,6CAAA,CADF,gBACE,6CAAA,CADF,uBACE,qDAAA,CADF,sBACE,oDAAA,CADF,iBACE,8CAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CADF,yBACE,sDAAA,CADF,yBACE,sDAAA,CADF,yBACE,sDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,0BACE,uDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,qBACE,kDAAA,CADF,qBACE,kDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CAhEJ,qCA8EQ,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,6BACE,qDAAA,CADF,4BACE,oDAAA,CADF,uBACE,8CAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,gCACE,uDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,2BACE,kDAAA,CADF,2BACE,kDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CAAA,CAzEV,qCAwEQ,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,6BACE,qDAAA,CADF,4BACE,oDAAA,CADF,uBACE,8CAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,gCACE,uDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,2BACE,kDAAA,CADF,2BACE,kDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CAAA,CAnEV,qCAkEQ,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,6BACE,qDAAA,CADF,4BACE,oDAAA,CADF,uBACE,8CAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,gCACE,uDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,2BACE,kDAAA,CADF,2BACE,kDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CAAA,CA7DV,sCA4DQ,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,6BACE,qDAAA,CADF,4BACE,oDAAA,CADF,uBACE,8CAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,gCACE,uDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,2BACE,kDAAA,CADF,2BACE,kDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CAAA,CAvDV,sCAsDQ,uBACE,6CAAA,CADF,uBACE,6CAAA,CADF,uBACE,6CAAA,CADF,uBACE,6CAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,wBACE,8CAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CADF,gCACE,sDAAA,CADF,gCACE,sDAAA,CADF,gCACE,sDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,iCACE,uDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,4BACE,kDAAA,CADF,4BACE,kDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CAAA,CAhBR,sBACE,gCAAA,CADF,kBACE,6BAAA,CADF,gBACE,6BAAA,CAhEJ,qCA8EQ,4BACE,gCAAA,CADF,wBACE,6BAAA,CADF,sBACE,6BAAA,CAAA,CAzEV,qCAwEQ,4BACE,gCAAA,CADF,wBACE,6BAAA,CADF,sBACE,6BAAA,CAAA,CAnEV,qCAkEQ,4BACE,gCAAA,CADF,wBACE,6BAAA,CADF,sBACE,6BAAA,CAAA,CA7DV,sCA4DQ,4BACE,gCAAA,CADF,wBACE,6BAAA,CADF,sBACE,6BAAA,CAAA,CAvDV,sCAsDQ,6BACE,gCAAA,CADF,yBACE,6BAAA,CADF,uBACE,6BAAA,CAAA,CCqEd,oBACE,sBAAA,CACA,yBAAA,CACA,0BAAA,CACA,iCAAA,CACA,6BAAA,CD1FI,2BACE,kEAAA,CADF,2BACE,kEAAA,CADF,gCACE,uEAAA,CADF,gCACE,uEAAA,CADF,gCACE,uEAAA,CADF,gCACE,uEAAA,CAhEJ,qCA8EQ,iCACE,kEAAA,CADF,iCACE,kEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CAAA,CAzEV,qCAwEQ,iCACE,kEAAA,CADF,iCACE,kEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CAAA,CAnEV,qCAkEQ,iCACE,kEAAA,CADF,iCACE,kEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CAAA,CA7DV,sCA4DQ,iCACE,kEAAA,CADF,iCACE,kEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CAAA,CAvDV,sCAsDQ,kCACE,kEAAA,CADF,kCACE,kEAAA,CADF,uCACE,uEAAA,CADF,uCACE,uEAAA,CADF,uCACE,uEAAA,CADF,uCACE,uEAAA,CAAA,CE7Ed,iDAEE,2DAAA,CACA,mEAAA,CAEA,6EAAA,CAGA,gEAAA,CACA,8EAAA,CACA,gFAAA,CACA,iFAAA,CACA,+EAAA,CAGA,2FAAA,CACA,kGAAA,CACA,kGAAA,CAGA,4DAAA,CACA,+DAAA,CACA,+DAAA,CAGA,qGAAA,CACA,2GAAA,CACA,yGAAA,CACA,uGAAA,CAqBA,YAAA,CACA,iFAAA,CACA,2BAAA,CACA,kDAAA,CACA,sDAAA,CACA,0DAAA,CACA,4DAAA,CACA,wDAAA,CAzBA,qCA/BF,iDAgCI,iEAAA,CACA,gDAAA,CACA,+DAAA,CACA,qCAAA,CAAA,CAIF,qCAvCF,iDAwCI,+DAAA,CAAA,CAIF,sCA5CF,iDA6CI,6CAAA,CAAA,CAcF,wDACE,UAAA,CACA,iBAAA,CACA,8DAAA,CACA,kEAAA,CACA,oEAAA,CAEA,wEAAA,CACA,sEAAA,CACA,uDAAA,CAIF,sHACI,yCAAA,CACA,oDAAA,CAEJ,qXAGE,yCAAA,CACA,oDAAA,CAIJ,kCACE,oDAAA,CACA,wCAAA,CACA,0CAAA,CAGF,oCACE,wCAAA,CACA,iBAAA,CACA,eAAA,CAIF,gFAEE,mEAAA,CACA,qEAAA,CACA,sEAAA,CACA,oEAAA,CAEA,8HACE,4DAAA,CAGF,qCAXF,gFAYI,sEAAA,CACA,qEAAA,CAAA,CAOF,uCACE,kHAAA,CACA,gHAAA,CACA,2BAAA,CACA,2BAAA,CAKF,uCACE,kHAAA,CACA,gHAAA,CACA,2BAAA,CAKJ,4BACE,kEAAA,CACA,2EAAA,CACA,gEAAA,CACA,iEAAA,CACA,iGAAA,CAEA,eAAA,CACA,YAAA,CACA,iDAAA,CACA,iCAAA,CAEA,+BACE,YAAA,CACA,6DAAA,CACA,+BAAA,CACA,mBAAA,CAEA,uCACE,aAAA,CACA,qEAAA,CACA,qEAAA,CACA,uEAAA,CACA,wCAAA,CACA,yBAAA,CAMN,8BACE,iBAAA,CAEA,gCAAA,CACA,QAAA,CAGF,qCACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA,CAGF,qCACE,gBAAA,CAGF,YACE,sBAAA,CAGF,oFAGE,0EAAA,CACA,yBAAA,CAGF,4BACE,uEAAA,CACA,2EAAA,CACA,6EAAA,CACA,yEAAA\",\"sourcesContent\":[\":root {\\n    --ins-color--orange: #ec7a08;\\n}\\n\\n// Spacing\\n$ins-padding: var(--pf-global--spacer--lg);\\n$ins-margin: var(--pf-global--spacer--xl);\\n$ins-gutter: var(--pf-global--gutter);\\n\\n// Font Size\\n$ins-fontSize: var(--pf-global--FontSize--md);\\n$ins-fontSize--sm: var(--pf-global--FontSize--sm);\\n$ins-fontSize--lg: var(--pf-global--FontSize--lg);\\n$ins-fontSize--xl: var(--pf-global--FontSize--xl);\\n\\n// Borders\\n$ins-borderRadius: var(--pf-global--BorderRadius--sm);\\n$ins-borderRadius--round: var(--pf-global--BorderRadius--lg);\\n\\n// Grid breakpoints\\n$ins-break--xs: var(--pf-global--breakpoint--xs);\\n$ins-break--sm: var(--pf-global--breakpoint--sm);\\n$ins-break--md: var(--pf-global--breakpoint--md);\\n$ins-break--lg: var(--pf-global--breakpoint--lg);\\n$ins-break--xl: var(--pf-global--breakpoint--xl);\\n\\n// Colors\\n$ins-color--red: var(--pf-global--danger-color--100);\\n$ins-color--critical: $ins-color--red;\\n\\n$ins-color--orange: var(--ins-color--orange);\\n$ins-color--high: $ins-color--orange;\\n\\n$ins-color--yellow: var(--pf-global--warning-color--100);\\n$ins-color--medium: $ins-color--yellow;\\n\\n$ins-color--green: var(--pf-global--success-color--100);\\n$ins-color--low: $ins-color--green;\\n\\n$ins-color--blue: var(--pf-global--info-color--100);\\n\\n$ins-color--gray: var(--pf-global--disabled-color--200);\",\"button:focus {\\n    outline:none;\\n}\\n\",\"// Media query used to create responsive classes\\n@mixin pf-media-query($point) {\\n  @if $point == \\\"\\\" or $point == null or $point == \\\"base\\\" {\\n    @content;\\n  }\\n\\n  @else if $point == \\\"sm\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--sm) {\\n      @content;\\n    }\\n  }\\n\\n  @else if $point == \\\"md\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--md) {\\n      @content;\\n    }\\n  }\\n\\n  @else if $point == \\\"lg\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--lg) {\\n      @content;\\n    }\\n  }\\n\\n  @else if $point == \\\"xl\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--xl) {\\n      @content;\\n    }\\n  }\\n\\n  @else if $point == \\\"2xl\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--2xl) {\\n      @content;\\n    }\\n  }\\n}\\n\\n// Create single prop / value classes, optionally add responsive suffix\\n// @group mixins\\n// @moduleType mixin\\n// @parameter: {Suffix} xs, sm, md, lg, xl, base or null\\n// @usage: @include pf-utility-builder(class-name, base sm md lg xl);\\n// ===============================================================================================\\n//\\n// ## Example sass map:\\n// this must be used when order matters or a cluster of similar utilties need to overwrite each other\\n//\\n// Justify content options\\n// $pf-u-flex-options: (\\n//   flex-none:  (flex none),\\n//   flex-1:     (flex 1)\\n// );\\n//\\n// non-responsive, base only                @include pf-utility-builder($sass-map)\\n// responsive, including all breakpoints    @include pf-utility-builder($sass-map, $pf-global--breakpoint-list)\\n//\\n// ## Passing individual utilities values\\n// ===============================================================================================\\n// Example individual utility:\\n// @include pf-utility-builder(flex-fill flex \\\"1 1 auto\\\", $pf-global--breakpoint-list);\\n\\n@mixin pf-utility-builder($props, $breakpoints: null) {\\n  // if $class-name is a map\\n\\n  // stylelint-disable\\n  @if type-of($props) == map {\\n    @each $class, $val in $props {\\n      $property: nth($val, 1);\\n      $value: #{nth($val, 2) !important};\\n\\n      .pf-u-#{$class} {\\n        #{$property}: #{$value};\\n      }\\n    }\\n\\n    // if breakpoints are requested\\n    @if $breakpoints != null {\\n      @each $breakpoint in $breakpoints {\\n        $suffix: -on-#{$breakpoint};\\n\\n        @include pf-media-query($breakpoint) {\\n          @each $class, $val in $props {\\n            $property: nth($val, 1);\\n            $value: #{nth($val, 2) !important};\\n\\n            .pf-u-#{$class}#{$suffix} {\\n              #{$property}: #{$value};\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  @else if type-of($props) == list {\\n    $class: nth($props, 1);\\n    $property: nth($props, 2);\\n    $value: nth($props, 3) !important;\\n\\n    .pf-u-#{$class} {\\n      #{$property}: #{$value};\\n    }\\n\\n    @if $breakpoints != null {\\n      @each $breakpoint in $breakpoints {\\n        $suffix: -on-#{$breakpoint};\\n\\n        .pf-u-#{$class}#{$suffix} {\\n          @include pf-media-query($breakpoint) {\\n            #{$property}: #{$value};\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n// stylelint-enable\\n\\n@mixin pf-u-screen-reader {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border: 0;\\n}\\n\\n@mixin pf-u-visible {\\n  position: static;\\n  overflow: visible;\\n  clip: auto;\\n  white-space: normal;\\n  border: inherit;\\n}\\n\\n@mixin pf-t-light($color: \\\"--pf-global--Color--100\\\") {\\n  color: var(#{$color});\\n\\n  @extend %pf-t-light;\\n}\\n\\n@mixin pf-t-dark($color: \\\"--pf-global--Color--100\\\") {\\n  color: var(#{$color});\\n\\n  @extend %pf-t-dark;\\n}\\n\\n@mixin pf-text-overflow {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\n@mixin pf-line-clamp($line-clamp-val: 1) {\\n  // stylelint-disable\\n  display: -webkit-box;\\n  -webkit-box-orient: vertical;\\n  -webkit-line-clamp: #{$line-clamp-val};\\n  // stylelint-enable\\n  overflow: hidden;\\n}\\n\\n@mixin pf-overflow-hide-scroll {\\n  &::-webkit-scrollbar {\\n    display: none;\\n  } // hides scrollbars in Chrome\\n\\n  scrollbar-width: none; // hides scrollbars in Firefox 64 and up\\n  -ms-overflow-style: -ms-autohiding-scrollbar; // auto hides scrollbars in Edge\\n}\\n\\n@mixin pf-hidden-visible($val: \\\"block\\\") {\\n  // stylelint-disable-next-line\\n  --pf-hidden-visible--visible--Display: #{$val};\\n\\n  @extend %pf-hidden-visible;\\n}\\n\\n@mixin pf-m-overpass-font {\\n  .pf-m-overpass-font {\\n    @content;\\n  }\\n}\\n\\n// Apply media query if value is passed\\n@mixin pf-apply-breakpoint($breakpoint) {\\n  @if ($breakpoint == \\\"null\\\" or $breakpoint == \\\"base\\\" or $breakpoint == \\\"\\\") {\\n    @content;\\n  }\\n\\n  @else {\\n    $breakpoint: pf-breakpoint-value($breakpoint);\\n\\n    @media (min-width: $breakpoint) {\\n      @content;\\n    }\\n  }\\n}\\n\\n@mixin pf-emit-properties($map) {\\n  @each $prop, $value in $map {\\n    #{$value}: #{$prop};\\n  }\\n}\\n\\n// Animate tab focus removal\\n@mixin pf-animate-remove-tab-focus($element, $delay: $pf-global--TransitionDuration) {\\n  @keyframes pf-remove-tab-focus {\\n    to {\\n      visibility: hidden;\\n    }\\n  }\\n\\n  #{$element}[hidden] {\\n    animation-name: pf-remove-tab-focus;\\n    animation-delay: #{$delay};\\n    animation-fill-mode: forwards;\\n  }\\n}\\n\\n// Build variable stack\\n@mixin pf-build-css-variable-stack($prop, $css-var, $breakpoint-map: $pf-global--breakpoint-map) {\\n  $list: ();\\n\\n  @each $breakpoint, $breakpoint-value in $breakpoint-map {\\n    $variable-list: ();\\n\\n    // Build variable list\\n    @if $breakpoint != \\\"base\\\" {\\n      $list: append($list, $css-var + \\\"-on-\\\" + $breakpoint);\\n    } @else {\\n      $list: append($list, $css-var);\\n    }\\n\\n    // Construct variable stack\\n    @each $list-item in $list {\\n      @if length($variable-list) == 0 {\\n        $variable-list: var(#{$list-item});\\n      } @else {\\n        $variable-list: var(#{$list-item}, $variable-list);\\n      }\\n    }\\n\\n    // Assign variable stack to $prop\\n    @include pf-apply-breakpoint($breakpoint) {\\n      #{$prop}: #{$variable-list};\\n    }\\n  }\\n}\\n\",\"// stylelint-disable\\n\\n// Font size options\\n$pf-u-font-size-options: (\\n  font-size-xs: (\\n    font-size var(--pf-global--FontSize--xs)\\n  ),\\n  font-size-sm: (\\n    font-size var(--pf-global--FontSize--sm)\\n  ),\\n  font-size-md: (\\n    font-size var(--pf-global--FontSize--md)\\n  ),\\n  font-size-lg: (\\n    font-size var(--pf-global--FontSize--lg)\\n  ),\\n  font-size-xl: (\\n    font-size var(--pf-global--FontSize--xl)\\n  ),\\n  font-size-2xl: (\\n    font-size var(--pf-global--FontSize--2xl)\\n  ),\\n  font-size-3xl: (\\n    font-size var(--pf-global--FontSize--3xl)\\n  ),\\n  font-size-4xl: (\\n    font-size var(--pf-global--FontSize--4xl)\\n  )\\n);\\n\\n@include pf-utility-builder($pf-u-font-size-options, $pf-global--breakpoint-list);\\n\\n// Font weight options\\n$pf-u-font-weight-options: (\\n  font-weight-light: (\\n    font-weight var(--pf-global--FontWeight--light)\\n  ),\\n  font-weight-normal: (\\n    font-weight var(--pf-global--FontWeight--normal)\\n  ),\\n  font-weight-bold: (\\n    font-weight var(--pf-global--FontWeight--bold)\\n  )\\n);\\n\\n@include pf-utility-builder($pf-u-font-weight-options, $pf-global--breakpoint-list);\\n\\n// Font color options\\n$pf-u-font-color-options: (\\n  color-100: (\\n    color var(--pf-global--Color--100)\\n  ),\\n  color-200: (\\n    color var(--pf-global--Color--200)\\n  ),\\n  color-300: (\\n    color var(--pf-global--Color--300)\\n  ),\\n  color-400: (\\n    color var(--pf-global--Color--400)\\n  ),\\n  icon-color-light: (\\n    color var(--pf-global--icon--Color--light)\\n  ),\\n  icon-color-dark: (\\n    color var(--pf-global--icon--Color--dark)\\n  ),\\n  link-color: (\\n    color var(--pf-global--link--Color)\\n  ),\\n  active-color-100: (\\n    color var(--pf-global--active-color--100)\\n  ),\\n  active-color-200: (\\n    color var(--pf-global--active-color--200)\\n  ),\\n  active-color-300: (\\n    color var(--pf-global--active-color--300)\\n  ),\\n  active-color-400: (\\n    color var(--pf-global--active-color--400)\\n  ),\\n  disabled-color-100: (\\n    color var(--pf-global--disabled-color--100)\\n  ),\\n  disabled-color-200: (\\n    color var(--pf-global--disabled-color--200)\\n  ),\\n  disabled-color-300: (\\n    color var(--pf-global--disabled-color--300)\\n  ),\\n  primary-color-100: (\\n    color var(--pf-global--primary-color--100)\\n  ),\\n  primary-color-200: (\\n    color var(--pf-global--primary-color--200)\\n  ),\\n  secondary-color-100: (\\n    color var(--pf-global--secondary-color--100)\\n  ),\\n  default-color-100: (\\n    color var(--pf-global--default-color--100)\\n  ),\\n  default-color-200: (\\n    color var(--pf-global--default-color--200)\\n  ),\\n  default-color-300: (\\n    color var(--pf-global--default-color--300)\\n  ),\\n  success-color-100: (\\n    color var(--pf-global--success-color--100)\\n  ),\\n  success-color-200: (\\n    color var(--pf-global--success-color--200)\\n  ),\\n  info-color-100: (\\n    color var(--pf-global--info-color--100)\\n  ),\\n  info-color-200: (\\n    color var(--pf-global--info-color--200)\\n  ),\\n  warning-color-100: (\\n    color var(--pf-global--warning-color--100)\\n  ),\\n  warning-color-200: (\\n    color var(--pf-global--warning-color--200)\\n  ),\\n  danger-color-100: (\\n    color var(--pf-global--danger-color--100)\\n  ),\\n  danger-color-200: (\\n    color var(--pf-global--danger-color--200)\\n  ),\\n  danger-color-300: (\\n    color var(--pf-global--danger-color--300)\\n  )\\n);\\n\\n@include pf-utility-builder($pf-u-font-color-options, $pf-global--breakpoint-list);\\n\\n// Font layout options\\n$pf-u-font-alignment-options: (\\n  text-break-word: (\\n    word-break break-word\\n  ),\\n  text-nowrap: (\\n    white-space nowrap\\n  ),\\n  text-wrap: (\\n    white-space normal\\n  )\\n);\\n\\n@include pf-utility-builder($pf-u-font-alignment-options, $pf-global--breakpoint-list);\\n\\n.pf-u-text-truncate {\\n  min-width: 0 !important;\\n  max-width: 100% !important;\\n  overflow: hidden !important;\\n  text-overflow: ellipsis !important;\\n  white-space: nowrap !important;\\n}\\n\\n// stylelint-enable\\n\",\"/* Importing Global Variables */\\n@import 'node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/all';\\n@import 'node_modules/@redhat-cloud-services/frontend-components-notifications/index.css';\\n\\n@import '~@patternfly/patternfly/sass-utilities/_all.scss';\\n@import '~@patternfly/patternfly/utilities/Text/text.scss';\\n@import '~@patternfly/patternfly/utilities/BackgroundColor/BackgroundColor.scss';\\n\\n\\n.pf-c-page__main-section.app-services-ui--banner {\\n\\n  --app-services-ui--banner--before--GridTemplateColumns: 1fr;\\n  --app-services-ui--banner--ColumnGap: var(--pf-global--spacer--2xl);\\n\\n  --app-services-ui--banner__tagline--Color: var(--pf-global--Color--light-300);\\n\\n  // padding on the banner\\n  --app-services-ui--banner--Padding: var(--pf-global--spacer--lg);\\n  --app-services-ui--banner--PaddingTop: var(--app-services-ui--banner--Padding);\\n  --app-services-ui--banner--PaddingRight: var(--app-services-ui--banner--Padding);\\n  --app-services-ui--banner--PaddingBottom: var(--app-services-ui--banner--Padding);\\n  --app-services-ui--banner--PaddingLeft: var(--app-services-ui--banner--Padding);\\n\\n  // background graphics for the hero banner\\n  --app-services-ui--banner--before--BackgroundImage: url('static/images/AppServicesOverview-IconPattern.svg');\\n  --app-services-ui--banner--before--BackgroundImage--rhoam: url('static/images/APIManagement_MECH_API_FullColor_Pink.svg');\\n  --app-services-ui--banner--before--BackgroundImage--rhods: url('static/images/RHODS-ML-Technology.svg');\\n\\n  // background graphic sizes\\n  --app-services-ui--banner--before--BackgroundSize: #{pf-size-prem(678px)};\\n  --app-services-ui--banner--before--BackgroundSize--rhoam: #{pf-size-prem(480px)};\\n  --app-services-ui--banner--before--BackgroundSize--rhods: #{pf-size-prem(480px)};\\n  \\n  // give the graphic negative margins for full bleed\\n  --app-services-ui--banner--before--Offset--top: calc(var(--app-services-ui--banner--PaddingTop) * -1);\\n  --app-services-ui--banner--before--Offset--bottom: calc(var(--app-services-ui--banner--PaddingBottom) * -1);\\n  --app-services-ui--banner--before--Offset--right: calc(var(--app-services-ui--banner--PaddingRight) * -1);\\n  --app-services-ui--banner--before--Offset--left: calc(var(--app-services-ui--banner--PaddingLeft) * -1);\\n\\n  // at medium, show the graphic but move it into another grid cell with less opacity\\n  @media screen and (min-width: $pf-global--breakpoint--md) {\\n    --app-services-ui--banner--Padding: var(--pf-global--spacer--2xl);\\n    --app-services-ui--banner--before--Opacity: 0.65;\\n    --app-services-ui--banner--before--GridTemplateColumns: 2fr 1fr;\\n    grid-template-areas: 'content graphic';\\n  }\\n\\n  // at large, adjust the proportion\\n  @media screen and (min-width: $pf-global--breakpoint--lg) {\\n    --app-services-ui--banner--before--GridTemplateColumns: 2fr 1fr;\\n  }\\n\\n  // at xl, full opacity for the graphic\\n  @media screen and (min-width: $pf-global--breakpoint--xl) {\\n    --app-services-ui--banner--before--Opacity: 1;\\n  }\\n\\n  // set up the content area\\n  display: grid;\\n  grid-template-columns: var(--app-services-ui--banner--before--GridTemplateColumns);\\n  grid-template-areas: content;\\n  grid-gap: var(--app-services-ui--banner--ColumnGap);\\n  padding-top: var(--app-services-ui--banner--PaddingTop);\\n  padding-right: var(--app-services-ui--banner--PaddingRight);\\n  padding-bottom: var(--app-services-ui--banner--PaddingBottom);\\n  padding-left: var(--app-services-ui--banner--PaddingLeft);\\n\\n  // set up the image area\\n  &:before {\\n    content: '';\\n    grid-area: graphic; // there won't be a graphic grid element until md breakpoint\\n    margin-top: var(--app-services-ui--banner--before--Offset--top);\\n    margin-right: var(--app-services-ui--banner--before--Offset--right);\\n    margin-bottom: var(--app-services-ui--banner--before--Offset--bottom);\\n    // margin-left: var(--app-services-ui--banner--before--Offset--left);\\n    background-image: var(--app-services-ui--banner--before--BackgroundImage);\\n    background-size: var(--app-services-ui--banner--before--BackgroundSize);\\n    opacity: var(--app-services-ui--banner--before--Opacity);\\n  }\\n\\n  // fix the color of the primary button on the dark background\\n  &[class*='pf-m-dark-'].pf-c-page__main-section .pf-c-button.pf-m-primary {\\n      color: var(--pf-global--primary-color-100);\\n      background-color: var(--pf-global--palette--blue-400);\\n    }\\n  &[class*='pf-m-dark-'].pf-c-page__main-section .pf-c-button.pf-m-primary:hover,\\n  &[class*='pf-m-dark-'].pf-c-page__main-section .pf-c-button.pf-m-primary:focus,\\n  &[class*='pf-m-dark-'].pf-c-page__main-section .pf-c-button.pf-m-primary:active {\\n    color: var(--pf-global--primary-color-100);\\n    background-color: var(--pf-global--palette--blue-500);\\n  }\\n}\\n\\n.app-services-ui--banner__tagline {\\n  color: var(--app-services-ui--banner__tagline--Color);\\n  font-size: var(--pf-global--FontSize--lg);\\n  margin-bottom: var(--pf-global--spacer--lg);\\n}\\n\\n.app-services-ui--banner--text-only {\\n  font-size: var(--pf-global--FontSize--xl);\\n  text-align: center;\\n  max-width: 800px;\\n}\\n\\n// Set up the card gallery\\n.app-services-ui--page-section--marketing,\\n.app-services-ui--page-section--video {\\n  --pf-c-page__main-section--PaddingTop: var(--pf-global--spacer--xl);\\n  --pf-c-page__main-section--PaddingRight: var(--pf-global--spacer--lg);\\n  --pf-c-page__main-section--PaddingBottom: var(--pf-global--spacer--xl);\\n  --pf-c-page__main-section--PaddingLeft: var(--pf-global--spacer--lg);\\n\\n  & .pf-l-grid.pf-m-gutter {\\n    --pf-l-grid--m-gutter--GridGap: var(--pf-global--spacer--lg);\\n  }\\n\\n  @media screen and (min-width: $pf-global--breakpoint--md) {\\n    --pf-c-page__main-section--PaddingRight: var(--pf-global--spacer--2xl);\\n    --pf-c-page__main-section--PaddingLeft: var(--pf-global--spacer--2xl);\\n  }\\n\\n}\\n\\n// bring in the correct image and adjust size for each page\\n.app-services-ui--banner--rhoam {\\n  &:before {\\n    --app-services-ui--banner--before--BackgroundImage: var(--app-services-ui--banner--before--BackgroundImage--rhoam);\\n    --app-services-ui--banner--before--BackgroundSize: var(--app-services-ui--banner--before--BackgroundSize--rhoam);\\n    background-position-y: -99px;\\n    background-repeat: no-repeat;\\n  }\\n}\\n\\n.app-services-ui--banner--rhods {\\n  &:before {\\n    --app-services-ui--banner--before--BackgroundImage: var(--app-services-ui--banner--before--BackgroundImage--rhods);\\n    --app-services-ui--banner--before--BackgroundSize: var(--app-services-ui--banner--before--BackgroundSize--rhods);\\n    background-repeat: no-repeat;\\n  }\\n}\\n\\n// + icon list\\n.app-services-ui--icon-list {\\n  --app-services-ui--icon-list--RowGap: var(--pf-global--spacer--lg);\\n  --app-services-ui--icon-list--item--ColumnGap: var(--pf-global--spacer--md);\\n  --app-services-ui--icon-list--item--before--Content--width: 1rem;\\n  --app-services-ui--icon-list--item--before--Content--height: 1rem;\\n  --app-services-ui--icon-list--item--before--Content--url: url('static/images/icon__plus-solid.svg');;\\n\\n  list-style: none;\\n  display: grid;\\n  row-gap: var(--app-services-ui--icon-list--RowGap);\\n  --pf-c-content--ul--MarginLeft: 0;\\n  \\n  li {\\n    display: grid;\\n    column-gap: var(--app-services-ui--icon-list--item--ColumnGap);\\n    grid-template-columns: 1rem auto;\\n    align-content: start;\\n\\n    &::before {\\n      grid-column: 1;\\n      content: var(--app-services-ui--icon-list--item--before--Content--url);\\n      width: var(--app-services-ui--icon-list--item--before--Content--width);\\n      height: var(--app-services-ui--icon-list--item--before--Content--height);\\n      color: var(--pf-global--palette--red-100);\\n      transform: translateY(2px);\\n    }\\n  }\\n}\\n\\n// Wrap the video to preserve aspect ratio\\n.app-services-ui--card--video {\\n  position: relative;\\n  /* important only because somehow PF styles are coming in again after */\\n  padding-bottom: 56.25% !important; /* 16:9 */\\n  height: 0;\\n}\\n\\n.app-services-ui--card--video iframe {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n}\\n\\n.app-services-ui--u-display-contents {\\n  display: contents;\\n}\\n\\n#qs-content {\\n  transform: translate(0);\\n}\\n\\n.app-services-ui--button--dev-preview,\\n.app-services-ui--button--dev-preview:visited\\n{\\n  --pf-c-button--m-link--Color: var(--pf-global--Color--dark-100) !important;\\n  text-decoration: underline;\\n}\\n\\n.pf-c-select__toggle:before {\\n  border-top: 1px solid var(--pf-c-select__toggle--before--BorderTopColor);\\n  border-right: 1px solid var(--pf-c-select__toggle--before--BorderRightColor);\\n  border-bottom: 1px solid var(--pf-c-select__toggle--before--BorderBottomColor);\\n  border-left: 1px solid var(--pf-c-select__toggle--before--BorderLeftColor);\\n}\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".mas-quickstart-drawer{height:calc(100vh - 76px) !important}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/pages/Resources/QuickStartDrawerFederated.scss\"],\"names\":[],\"mappings\":\"AAAA,uBAEI,oCAAA\",\"sourcesContent\":[\".mas-quickstart-drawer {\\n    // subtract the header height\\n    height: calc(100vh - 76px) !important;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export default __webpack_public_path__ + \"566a9f44.svg\";","export default __webpack_public_path__ + \"64e45f61.svg\";","export default __webpack_public_path__ + \"a99d8fc1.svg\";","export default __webpack_public_path__ + \"819010d9.svg\";","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    //If you want to register all of your reducers, this is good place.\n    /*\n     *  registry.register({\n     *    someName: (state, action) => ({...state})\n     *  });\n     */\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import React from 'react';\n\nimport { Main, NotAuthorized } from \"@redhat-cloud-services/frontend-components\";\n\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\ninterface GetLinkProps {\n   href?: string\n}\n\nconst GetLink: React.FunctionComponent<GetLinkProps> = ({href, children}) => <Link to={href || \"\"}>{children}</Link>\n\nexport const AccessDeniedPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n\n  const accessDeniedDetails = <Trans i18nKey='accessdenied.accessDeniedDescription' t={t} components={[<GetLink href='/streams/kafkas'/>]}/>\n\n  return (<Main>\n    <NotAuthorized title={t('accessdenied.accessDeniedTitle')} description={accessDeniedDetails} prevPageButtonText={t('accessdenied.accessDeniedButtonText')} showReturnButton={true}/>\n  </Main>\n  );\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface InstantQuery\n */\nexport interface InstantQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof InstantQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryList\n */\nexport interface MetricsInstantQueryList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryList\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryList\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryList\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryListAllOf\n */\nexport interface MetricsInstantQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryList\n */\nexport interface MetricsRangeQueryList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryList\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryList\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryList\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryListAllOf\n */\nexport interface MetricsRangeQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface RangeQuery\n */\nexport interface RangeQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof RangeQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof RangeQuery\n     */\n    values?: Array<Values>;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    created_at?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    created_at?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountList\n     */\n    kind: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountList\n     */\n    items: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * client id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * name of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * owner of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    owner?: string;\n    /**\n     * service account creation timestamp\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    created_at?: string;\n    /**\n     * description of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * client id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * name of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * owner of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    owner?: string;\n    /**\n     * service account creation timestamp\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    created_at?: string;\n    /**\n     * description of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: string;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * Schema for the service status response body\n * @export\n * @interface ServiceStatus\n */\nexport interface ServiceStatus {\n    /**\n     * \n     * @type {ServiceStatusKafkas}\n     * @memberof ServiceStatus\n     */\n    kafkas?: ServiceStatusKafkas;\n}\n/**\n * The kafka resource api status\n * @export\n * @interface ServiceStatusKafkas\n */\nexport interface ServiceStatusKafkas {\n    /**\n     * Indicates whether we have reached kafka maximum capacity\n     * @type {boolean}\n     * @memberof ServiceStatusKafkas\n     */\n    max_capacity_reached: boolean;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface VersionMetadata\n */\nexport interface VersionMetadata {\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof VersionMetadata\n     */\n    href?: string;\n    /**\n     * \n     * @type {Array<ObjectReference>}\n     * @memberof VersionMetadata\n     */\n    collections?: Array<ObjectReference>;\n}\n/**\n * \n * @export\n * @interface VersionMetadataAllOf\n */\nexport interface VersionMetadataAllOf {\n    /**\n     * \n     * @type {Array<ObjectReference>}\n     * @memberof VersionMetadataAllOf\n     */\n    collections?: Array<ObjectReference>;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            assertParamExists('createKafka', 'async', async)\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            assertParamExists('createKafka', 'kafkaRequestPayload', kafkaRequestPayload)\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(kafkaRequestPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            assertParamExists('createServiceAccount', 'serviceAccountRequest', serviceAccountRequest)\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteKafkaById', 'id', id)\n            // verify required parameter 'async' is not null or undefined\n            assertParamExists('deleteKafkaById', 'async', async)\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteServiceAccount', 'id', id)\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getKafkaById', 'id', id)\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery: async (id: string, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMetricsByInstantQuery', 'id', id)\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'id', id)\n            // verify required parameter 'duration' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'duration', duration)\n            // verify required parameter 'interval' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'interval', interval)\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas/{id}/metrics/query_range`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getServiceAccountById', 'id', id)\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listCloudProviderRegions', 'id', id)\n            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/cloud_providers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/kafkas`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('resetServiceAccountCreds', 'id', id)\n            const localVarPath = `/api/kafkas_mgmt/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        serviceStatus: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1/status`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        versionMetadata: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/kafkas_mgmt/v1`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createKafka(async, kafkaRequestPayload, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceAccount(serviceAccountRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKafkaById(id, async, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteServiceAccount(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getKafkaById(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsByInstantQuery(id, filters, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsByRangeQuery(id, duration, interval, filters, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServiceAccountById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceAccountById(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudProviderRegions(id, page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudProviders(page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listKafkas(page, size, orderBy, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceAccounts(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.resetServiceAccountCreds(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async serviceStatus(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceStatus>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.serviceStatus(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async versionMetadata(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<VersionMetadata>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.versionMetadata(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return localVarFp.createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return localVarFp.deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return localVarFp.deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return localVarFp.getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList> {\n            return localVarFp.getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList> {\n            return localVarFp.getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.getServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return localVarFp.listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return localVarFp.listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return localVarFp.listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return localVarFp.listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        serviceStatus(options?: any): AxiosPromise<ServiceStatus> {\n            return localVarFp.serviceStatus(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the version metadata\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        versionMetadata(options?: any): AxiosPromise<VersionMetadata> {\n            return localVarFp.versionMetadata(options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    serviceStatus(options?: any): AxiosPromise<ServiceStatus>;\n\n    /**\n     * \n     * @summary Retrieves the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    versionMetadata(options?: any): AxiosPromise<VersionMetadata>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getServiceAccountById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the status of resources e.g whether we have reached maximum service capacity\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public serviceStatus(options?: any) {\n        return DefaultApiFp(this.configuration).serviceStatus(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the version metadata\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public versionMetadata(options?: any) {\n        return DefaultApiFp(this.configuration).versionMetadata(options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 1.0.0\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@openapi/ams';\n\ntype InstanceDrawerProps = {\n  kafkaDetail: KafkaRequest | undefined;\n  isExpanded: boolean | undefined;\n  activeTab: string;\n  onClose: () => void;\n  isOpenDeleteInstanceModal: boolean;\n  setIsOpenDeleteInstanceModal: (isopen: boolean) => void;\n};\n\nexport const InstanceDrawer: React.FC<InstanceDrawerProps> = ({\n  isExpanded,\n  onClose,\n  kafkaDetail,\n  activeTab,\n  children,\n  setIsOpenDeleteInstanceModal,\n  isOpenDeleteInstanceModal,\n}) => {\n  const config = useConfig();\n  const history = useHistory();\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  const getConnectToRoutePath = (event: any, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    return history.createHref({ pathname: `/streams/${routePath}` });\n  };\n\n  const onConnectToRoute = async (event: any, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    history.push(`/streams/${routePath}`);\n  };\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      render={(InstanceDrawerFederated) => {\n        return (\n          <InstanceDrawerFederated\n            getConnectToRoutePath={getConnectToRoutePath}\n            onConnectToRoute={onConnectToRoute}\n            tokenEndPointUrl={tokenEndPointUrl}\n            isExpanded={isExpanded}\n            onClose={onClose}\n            instanceDetail={kafkaDetail}\n            activeTab={activeTab}\n            isOpenDeleteInstanceModal={isOpenDeleteInstanceModal}\n            setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n          >\n            {children}\n          </InstanceDrawerFederated>\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner/>\n  </Bullseye>\n);\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { FederatedModuleConfig, useConfig, AssetsContext } from \"@bf2/ui-shared\";\nimport { Loading } from \"@app/components/Loading/Loading\";\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nconst FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope]; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await window[scope].get(module);\n    const Module = factory();\n    console.log(`${Module} loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = ({ url }) => {\n\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!url) {\n      setFailed(true);\n      return;\n    }\n\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    setReady(false);\n    setFailed(false);\n\n    element.onload = () => {\n      console.log(`Dynamic federated module Loaded: ${url}`);\n      setReady(true);\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      setReady(false);\n      setFailed(true);\n    };\n\n    document.head.appendChild(element);\n\n    return () => {\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: any;\n}\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(federatedModuleContext[scope].basePath, scope, federatedModuleContext[scope].fallbackBasePath);\n      setModuleInfo(moduleInfo);\n    }\n    fetchModuleInfo();\n  }, [scope, federatedModuleContext]);\n\n  const { ready, failed } = useDynamicScript({ url: moduleInfo?.entryPoint });\n\n  if (!ready || failed) {\n    if (failed && fallback) {\n      return fallback;\n    }\n    return null;\n  }\n\n  const Component = React.lazy(\n    loadComponent(scope, module)\n  );\n  const getPath = () => {\n    return moduleInfo?.basePath\n  }\n\n  return (\n    <AssetsContext.Provider value={{ getPath }}>\n      <React.Suspense fallback={null}>\n          {render(Component)}\n      </React.Suspense>\n    </AssetsContext.Provider>\n  );\n}\n\ntype ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nconst getModuleInfo = async (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined> => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n\n\n","import React, { useEffect, useState } from 'react';\nimport { Configuration, DefaultApi, KafkaRequest } from '@openapi/kas';\nimport { useHistory } from 'react-router-dom';\nimport { getParams } from '@app/pages/Kafka/utils';\nimport getBaseName from '@app/utils/getBaseName';\nimport { useAlert, useAuth, useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule, DevelopmentPreview, InstanceDrawer } from '@app/components';\nimport { AccessDeniedPage, ServiceDownPage } from '@app/pages';\n\nenum KafkaUIKafkaModules {\n  kafkaMainPageModule = './Panels/KafkaMainView',\n  topicListDetailModule = './Panels/TopicDetails',\n  topicCreateModule = './Panels/CreateTopic',\n  topicUpdateModule = './Panels/UpdateTopic',\n}\n\nexport const KafkaPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <KafkaPageConnected />;\n};\n\nconst KafkaPageConnected: React.FunctionComponent = () => {\n  const config = useConfig();\n  const auth = useAuth();\n  const [adminServerUrl, setAdminServerUrl] = useState<undefined | string>();\n  const [kafkaDetail, setKafkaDetail] = useState<KafkaRequest | undefined>();\n\n  const { id, topicName } = getParams();\n  const [kafkaName, setKafkaName] = useState<undefined | string>();\n  useEffect(() => {\n    const getAdminApiUrl = async () => {\n      const accessToken = await auth?.kas.getToken();\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath: config?.kas.apiBasePath || '',\n      } as Configuration);\n\n      const kafka = await apisService.getKafkaById(id);\n      setKafkaDetail(kafka.data);\n      setKafkaName(kafka.data.name);\n      setAdminServerUrl(`https://admin-server-${kafka.data.bootstrapServerHost}/rest`);\n    };\n\n    getAdminApiUrl();\n  }, [auth, config, id]);\n\n  if (config === undefined || adminServerUrl === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <KafkaPageContent\n      adminServerUrl={adminServerUrl}\n      id={id}\n      topicName={topicName}\n      kafkaName={kafkaName}\n      kafkaDetail={kafkaDetail}\n    />\n  );\n};\n\ntype KafkaPageContentProps = {\n  adminServerUrl: string;\n  id: string;\n  topicName?: string;\n  kafkaName?: string;\n  kafkaDetail: KafkaRequest | undefined;\n};\n\nconst KafkaPageContent: React.FunctionComponent<KafkaPageContentProps> = ({\n  adminServerUrl,\n  id,\n  topicName,\n  kafkaName,\n  kafkaDetail,\n}) => {\n  const auth = useAuth();\n  const alert = useAlert();\n  const history = useHistory();\n  const [showCreate, setShowCreate] = useState<boolean>(false);\n  const [showUpdate, setShowUpdate] = useState<boolean>(false);\n  const [error, setError] = useState<undefined | number>();\n  const [isInstanceDrawerOpen, setIsInstanceDrawerOpen] = useState<boolean | undefined>();\n  const [activeDrawerTab, setActiveDrawerTab] = useState<string>('');\n  const [isOpenDeleteInstanceModal, setIsOpenDeleteInstanceModal] = useState<boolean>(false);\n\n  const onCreateTopic = () => {\n    setShowCreate(true);\n  };\n\n  const onClickTopic = (topicName) => {\n    history.push(`/streams/kafkas/${id}/topics/${topicName}`);\n  };\n\n  const onCloseCreateTopic = () => {\n    setShowCreate(false);\n  };\n\n  const getTopicDetailsPath = (topicName: string | undefined) => {\n    if (topicName === undefined) {\n      return history.createHref({ pathname: `streams/kafkas/${id}` });\n    }\n    return history.createHref({ pathname: `/streams/kafkas/${id}/topics/${topicName}`, key: topicName });\n  };\n\n  const onUpdateTopic = () => {\n    setShowUpdate(true);\n  };\n\n  const onError = (code: number, message: string) => {\n    setError(code);\n  };\n\n  const onDeleteTopic = () => {\n    history.push(`/streams/kafkas/${id}`);\n  };\n\n  const onCancelUpdateTopic = () => {\n    setShowUpdate(false);\n  };\n\n  const onSaveTopic = () => {\n    setShowUpdate(false);\n  };\n\n  let kafkaModule = KafkaUIKafkaModules.kafkaMainPageModule;\n  if (showCreate) {\n    kafkaModule = KafkaUIKafkaModules.topicCreateModule;\n  } else if (topicName && showUpdate) {\n    kafkaModule = KafkaUIKafkaModules.topicUpdateModule;\n  } else if (topicName) {\n    kafkaModule = KafkaUIKafkaModules.topicListDetailModule;\n  }\n\n  const kafkaPageLink = `${getBaseName(window.location.pathname)}/streams/kafkas/`;\n  const kafkaInstanceLink = `${getBaseName(window.location.pathname)}/streams/kafkas/${id}`;\n\n  const handleInstanceDrawer = (isOpen: boolean, activeTab?: string) => {\n    activeTab && setActiveDrawerTab(activeTab);\n    setIsInstanceDrawerOpen(isOpen);\n  };\n\n  const onCloseInstanceDrawer = () => {\n    setIsInstanceDrawerOpen(false);\n  };\n\n  let kafkaUIPage = (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={kafkaModule}\n      render={(FederatedTopics) => (\n        <FederatedTopics\n          getToken={auth?.kafka.getToken}\n          apiBasePath={adminServerUrl}\n          kafkaName={kafkaName}\n          kafkaPageLink={kafkaPageLink}\n          kafkaInstanceLink={kafkaInstanceLink}\n          onCreateTopic={onCreateTopic}\n          onClickTopic={onClickTopic}\n          getTopicDetailsPath={getTopicDetailsPath}\n          onCloseCreateTopic={onCloseCreateTopic}\n          onUpdateTopic={onUpdateTopic}\n          currentTopic={topicName}\n          addAlert={alert?.addAlert}\n          onDeleteTopic={onDeleteTopic}\n          onCancelUpdateTopic={onCancelUpdateTopic}\n          onSaveTopic={onSaveTopic}\n          onError={onError}\n          handleInstanceDrawer={handleInstanceDrawer}\n          setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n        />\n      )}\n    />\n  );\n\n  if (error === 401) {\n    kafkaUIPage = <AccessDeniedPage />;\n  }\n\n  return (\n    <div className=\"app-services-ui--u-display-contents\" data-ouia-app-id=\"dataPlane-streams\">\n      <DevelopmentPreview>\n        <InstanceDrawer\n          isExpanded={isInstanceDrawerOpen}\n          onClose={onCloseInstanceDrawer}\n          kafkaDetail={kafkaDetail}\n          activeTab={activeDrawerTab}\n          isOpenDeleteInstanceModal={isOpenDeleteInstanceModal}\n          setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n        >\n          {kafkaUIPage}\n        </InstanceDrawer>\n      </DevelopmentPreview>\n    </div>\n  );\n};\n","import React from 'react';\nimport { Banner, Bullseye, Button, Popover } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const DevelopmentPreview: React.FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return <div id='scrollablePageMain' className='pf-c-page__main' style={{height: '100%'}}>\n    <Banner isSticky variant=\"info\">\n      <Bullseye>  \n        <Popover\n          aria-label=\"Development Preview Button\"\n          hasAutoWidth\n          bodyContent={\n                <div>{t('common.developmentPreviewTooltip')}</div>\n              }\n          position='bottom'\n          minWidth='300px'\n          maxWidth='25%'> \n            <Button className='app-services-ui--button--dev-preview' variant='link'>{t('common.developmentPreview')}</Button>\n          </Popover>\n      </Bullseye> \n    </Banner>\n    {children}\n  </div>\n}","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AccessReview\n */\nexport interface AccessReview {\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    action: AccessReviewActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    resource_type: AccessReviewResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface AccessReviewResponse\n */\nexport interface AccessReviewResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    action?: AccessReviewResponseActionEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccessReviewResponse\n     */\n    allowed: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    resource_type?: AccessReviewResponseResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResponseActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResponseResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface AccessTokenCfg\n */\nexport interface AccessTokenCfg {\n    /**\n     * \n     * @type {{ [key: string]: object; }}\n     * @memberof AccessTokenCfg\n     */\n    auths: { [key: string]: object; };\n}\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Account\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Account\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Account\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {Organization}\n     * @memberof Account\n     */\n    organization?: Organization;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Account\n     */\n    service_account?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    username: string;\n}\n/**\n * \n * @export\n * @interface AccountAllOf\n */\nexport interface AccountAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountAllOf\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof AccountAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof AccountAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {Organization}\n     * @memberof AccountAllOf\n     */\n    organization?: Organization;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountAllOf\n     */\n    service_account?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    username: string;\n}\n/**\n * \n * @export\n * @interface AccountList\n */\nexport interface AccountList {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof AccountList\n     */\n    items: Array<Account>;\n}\n/**\n * \n * @export\n * @interface AccountListAllOf\n */\nexport interface AccountListAllOf {\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof AccountListAllOf\n     */\n    items?: Array<Account>;\n}\n/**\n * \n * @export\n * @interface AccountPatchRequest\n */\nexport interface AccountPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountPatchRequest\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountPatchRequest\n     */\n    service_account?: boolean;\n}\n/**\n * \n * @export\n * @interface AccountReference\n */\nexport interface AccountReference {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface AccountReferenceAllOf\n */\nexport interface AccountReferenceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface Capability\n */\nexport interface Capability {\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Capability\n     */\n    inherited: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface CapabilityAllOf\n */\nexport interface CapabilityAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof CapabilityAllOf\n     */\n    inherited: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityAllOf\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityAllOf\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface CapabilityReview\n */\nexport interface CapabilityReview {\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReview\n     */\n    result: string;\n}\n/**\n * \n * @export\n * @interface CapabilityReviewRequest\n */\nexport interface CapabilityReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    capability: CapabilityReviewRequestCapabilityEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    type: CapabilityReviewRequestTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CapabilityReviewRequestCapabilityEnum {\n    ManageClusterAdmin = 'manage_cluster_admin'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CapabilityReviewRequestTypeEnum {\n    Cluster = 'Cluster'\n}\n\n/**\n * \n * @export\n * @interface ClusterAuthorizationRequest\n */\nexport interface ClusterAuthorizationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    availability_zone?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    byoc?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cluster_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    disconnected?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    product_category?: ClusterAuthorizationRequestProductCategoryEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    product_id?: ClusterAuthorizationRequestProductIdEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    reserve?: boolean;\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ClusterAuthorizationRequest\n     */\n    resources?: Array<ReservedResource>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ClusterAuthorizationRequestProductCategoryEnum {\n    AssistedInstall = 'assistedInstall'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ClusterAuthorizationRequestProductIdEnum {\n    Ocp = 'ocp',\n    Osd = 'osd',\n    Osdtrial = 'osdtrial',\n    Moa = 'moa',\n    Rhmi = 'rhmi'\n}\n\n/**\n * \n * @export\n * @interface ClusterAuthorizationResponse\n */\nexport interface ClusterAuthorizationResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationResponse\n     */\n    allowed: boolean;\n    /**\n     * \n     * @type {Array<ExcessResource>}\n     * @memberof ClusterAuthorizationResponse\n     */\n    excess_resources: Array<ExcessResource>;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationResponse\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ClusterAuthorizationResponse\n     */\n    subscription?: ObjectReference;\n}\n/**\n * \n * @export\n * @interface ClusterMetricsNodes\n */\nexport interface ClusterMetricsNodes {\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    compute?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    infra?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    master?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface ClusterRegistrationRequest\n */\nexport interface ClusterRegistrationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationRequest\n     */\n    authorization_token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationRequest\n     */\n    cluster_id?: string;\n}\n/**\n * \n * @export\n * @interface ClusterRegistrationResponse\n */\nexport interface ClusterRegistrationResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    authorization_token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    cluster_id?: string;\n    /**\n     * Cluster Registration expiration in Unix time\n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    expires_at?: string;\n}\n/**\n * \n * @export\n * @interface ClusterResource\n */\nexport interface ClusterResource {\n    /**\n     * \n     * @type {ClusterResourceTotal}\n     * @memberof ClusterResource\n     */\n    total: ClusterResourceTotal;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterResource\n     */\n    updated_timestamp: string;\n    /**\n     * \n     * @type {ClusterResourceTotal}\n     * @memberof ClusterResource\n     */\n    used: ClusterResourceTotal;\n}\n/**\n * \n * @export\n * @interface ClusterResourceTotal\n */\nexport interface ClusterResourceTotal {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterResourceTotal\n     */\n    unit: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterResourceTotal\n     */\n    value: number;\n}\n/**\n * \n * @export\n * @interface ClusterUpgrade\n */\nexport interface ClusterUpgrade {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterUpgrade\n     */\n    available?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    updated_timestamp?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface EphemeralResourceQuota\n */\nexport interface EphemeralResourceQuota {\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof EphemeralResourceQuota\n     */\n    byoc?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof EphemeralResourceQuota\n     */\n    sku_count?: number;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ExcessResource\n */\nexport interface ExcessResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExcessResource\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ExcessResource\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    resource_type?: string;\n}\n/**\n * \n * @export\n * @interface ExcessResourceAllOf\n */\nexport interface ExcessResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExcessResourceAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ExcessResourceAllOf\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    resource_type?: string;\n}\n/**\n * \n * @export\n * @interface ExportControlReview\n */\nexport interface ExportControlReview {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExportControlReview\n     */\n    restricted: boolean;\n}\n/**\n * \n * @export\n * @interface ExportControlReviewRequest\n */\nexport interface ExportControlReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ExportControlReviewRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExportControlReviewRequest\n     */\n    ignore_cache?: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureReview\n */\nexport interface FeatureReview {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureReview\n     */\n    feature: string;\n}\n/**\n * \n * @export\n * @interface FeatureReviewResponse\n */\nexport interface FeatureReviewResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureReviewResponse\n     */\n    enabled: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureReviewResponse\n     */\n    feature_id: string;\n}\n/**\n * \n * @export\n * @interface FeatureToggle\n */\nexport interface FeatureToggle {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureToggle\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggleAllOf\n */\nexport interface FeatureToggleAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureToggleAllOf\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggleQueryRequest\n */\nexport interface FeatureToggleQueryRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggleQueryRequest\n     */\n    organization_id: string;\n}\n/**\n * \n * @export\n * @interface FeatureToggleQueryRequestAllOf\n */\nexport interface FeatureToggleQueryRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggleQueryRequestAllOf\n     */\n    organization_id: string;\n}\n/**\n * \n * @export\n * @interface Label\n */\nexport interface Label {\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Label\n     */\n    internal: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface LabelAllOf\n */\nexport interface LabelAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof LabelAllOf\n     */\n    internal: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface LabelList\n */\nexport interface LabelList {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof LabelList\n     */\n    items: Array<Label>;\n}\n/**\n * \n * @export\n * @interface LabelListAllOf\n */\nexport interface LabelListAllOf {\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof LabelListAllOf\n     */\n    items?: Array<Label>;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    health_state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    metrics?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    query_timestamp?: string;\n}\n/**\n * \n * @export\n * @interface MetricAllOf\n */\nexport interface MetricAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    health_state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    metrics?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    query_timestamp?: string;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsList\n     */\n    items: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n}\n/**\n * \n * @export\n * @interface NotificationContactCreateRequest\n */\nexport interface NotificationContactCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationContactCreateRequest\n     */\n    account_identifier?: string;\n}\n/**\n * \n * @export\n * @interface NotificationRequest\n */\nexport interface NotificationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    bcc_address?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NotificationRequest\n     */\n    include_red_hat_associates?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    subject?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    template_name: string;\n    /**\n     * \n     * @type {Array<TemplateParameter>}\n     * @memberof NotificationRequest\n     */\n    template_parameters?: Array<TemplateParameter>;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n}\n/**\n * \n * @export\n * @interface OneMetric\n */\nexport interface OneMetric {\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    cluster_type: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_cpu: ClusterResource;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_memory: ClusterResource;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_sockets: ClusterResource;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    console_url: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    cpu: ClusterResource;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    critical_alerts_firing: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    health_state?: OneMetricHealthStateEnum;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    memory: ClusterResource;\n    /**\n     * \n     * @type {ClusterMetricsNodes}\n     * @memberof OneMetric\n     */\n    nodes: ClusterMetricsNodes;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    openshift_version: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    operating_system: string;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    operators_condition_failing: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    query_timestamp?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    region: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    sockets: ClusterResource;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    state: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    state_description: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    storage: ClusterResource;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_cpu_total: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_obligation_exists: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_socket_total: number;\n    /**\n     * \n     * @type {ClusterUpgrade}\n     * @memberof OneMetric\n     */\n    upgrade: ClusterUpgrade;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum OneMetricHealthStateEnum {\n    Healthy = 'healthy',\n    Unhealthy = 'unhealthy',\n    Unknown = 'unknown'\n}\n\n/**\n * \n * @export\n * @interface Organization\n */\nexport interface Organization {\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Organization\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Organization\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface OrganizationAllOf\n */\nexport interface OrganizationAllOf {\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof OrganizationAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof OrganizationAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface OrganizationList\n */\nexport interface OrganizationList {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Organization>}\n     * @memberof OrganizationList\n     */\n    items: Array<Organization>;\n}\n/**\n * \n * @export\n * @interface OrganizationListAllOf\n */\nexport interface OrganizationListAllOf {\n    /**\n     * \n     * @type {Array<Organization>}\n     * @memberof OrganizationListAllOf\n     */\n    items?: Array<Organization>;\n}\n/**\n * \n * @export\n * @interface OrganizationPatchRequest\n */\nexport interface OrganizationPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface Permission\n */\nexport interface Permission {\n    /**\n     * \n     * @type {string}\n     * @memberof Permission\n     */\n    action?: PermissionActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Permission\n     */\n    resource?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PermissionActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n\n/**\n * \n * @export\n * @interface PermissionAllOf\n */\nexport interface PermissionAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionAllOf\n     */\n    action?: PermissionAllOfActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionAllOf\n     */\n    resource?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PermissionAllOfActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n\n/**\n * \n * @export\n * @interface PermissionList\n */\nexport interface PermissionList {\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof PermissionList\n     */\n    items: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface PermissionListAllOf\n */\nexport interface PermissionListAllOf {\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof PermissionListAllOf\n     */\n    items?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface Plan\n */\nexport interface Plan {\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface PlanAllOf\n */\nexport interface PlanAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface PlanList\n */\nexport interface PlanList {\n    /**\n     * \n     * @type {string}\n     * @memberof PlanList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Plan>}\n     * @memberof PlanList\n     */\n    items: Array<Plan>;\n}\n/**\n * \n * @export\n * @interface PlanListAllOf\n */\nexport interface PlanListAllOf {\n    /**\n     * \n     * @type {Array<Plan>}\n     * @memberof PlanListAllOf\n     */\n    items?: Array<Plan>;\n}\n/**\n * \n * @export\n * @interface PullSecretRequest\n */\nexport interface PullSecretRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof PullSecretRequest\n     */\n    external_resource_id: string;\n}\n/**\n * \n * @export\n * @interface QuotaCost\n */\nexport interface QuotaCost {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCost\n     */\n    allowed: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCost\n     */\n    consumed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    quota_id: string;\n    /**\n     * \n     * @type {Array<RelatedResource>}\n     * @memberof QuotaCost\n     */\n    related_resources?: Array<RelatedResource>;\n}\n/**\n * \n * @export\n * @interface QuotaCostAllOf\n */\nexport interface QuotaCostAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostAllOf\n     */\n    consumed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostAllOf\n     */\n    quota_id: string;\n    /**\n     * \n     * @type {Array<RelatedResource>}\n     * @memberof QuotaCostAllOf\n     */\n    related_resources?: Array<RelatedResource>;\n}\n/**\n * \n * @export\n * @interface QuotaCostList\n */\nexport interface QuotaCostList {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<QuotaCost>}\n     * @memberof QuotaCostList\n     */\n    items: Array<QuotaCost>;\n}\n/**\n * \n * @export\n * @interface QuotaCostListAllOf\n */\nexport interface QuotaCostListAllOf {\n    /**\n     * \n     * @type {Array<QuotaCost>}\n     * @memberof QuotaCostListAllOf\n     */\n    items?: Array<QuotaCost>;\n}\n/**\n * \n * @export\n * @interface QuotaSummary\n */\nexport interface QuotaSummary {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummary\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof QuotaSummary\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummary\n     */\n    reserved: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryAllOf\n */\nexport interface QuotaSummaryAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof QuotaSummaryAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryAllOf\n     */\n    reserved: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryList\n */\nexport interface QuotaSummaryList {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<QuotaSummary>}\n     * @memberof QuotaSummaryList\n     */\n    items: Array<QuotaSummary>;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryListAllOf\n */\nexport interface QuotaSummaryListAllOf {\n    /**\n     * \n     * @type {Array<QuotaSummary>}\n     * @memberof QuotaSummaryListAllOf\n     */\n    items?: Array<QuotaSummary>;\n}\n/**\n * \n * @export\n * @interface Registry\n */\nexport interface Registry {\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Registry\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RegistryAllOf\n */\nexport interface RegistryAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryAllOf\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCreateRequest\n */\nexport interface RegistryCreateRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryCreateRequest\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredential\n */\nexport interface RegistryCredential {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    kind?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredential\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredential\n     */\n    registry?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialAllOf\n */\nexport interface RegistryCredentialAllOf {\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredentialAllOf\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredentialAllOf\n     */\n    registry?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialList\n */\nexport interface RegistryCredentialList {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<RegistryCredential>}\n     * @memberof RegistryCredentialList\n     */\n    items: Array<RegistryCredential>;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialListAllOf\n */\nexport interface RegistryCredentialListAllOf {\n    /**\n     * \n     * @type {Array<RegistryCredential>}\n     * @memberof RegistryCredentialListAllOf\n     */\n    items?: Array<RegistryCredential>;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialPatchRequest\n */\nexport interface RegistryCredentialPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    registry_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryList\n */\nexport interface RegistryList {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Registry>}\n     * @memberof RegistryList\n     */\n    items: Array<Registry>;\n}\n/**\n * \n * @export\n * @interface RegistryListAllOf\n */\nexport interface RegistryListAllOf {\n    /**\n     * \n     * @type {Array<Registry>}\n     * @memberof RegistryListAllOf\n     */\n    items?: Array<Registry>;\n}\n/**\n * \n * @export\n * @interface RegistryRequest\n */\nexport interface RegistryRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryRequest\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RelatedResource\n */\nexport interface RelatedResource {\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    billing_model: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    byoc: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RelatedResource\n     */\n    cost: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    product: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    product_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface RelatedResourceAllOf\n */\nexport interface RelatedResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    billing_model: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    byoc: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RelatedResourceAllOf\n     */\n    cost: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    product: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    product_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface ReservedResource\n */\nexport interface ReservedResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResource\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResource\n     */\n    cluster?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResource\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ReservedResource\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface ReservedResourceAllOf\n */\nexport interface ReservedResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResourceAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResourceAllOf\n     */\n    cluster?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceAllOf\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ReservedResourceAllOf\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface ReservedResourceList\n */\nexport interface ReservedResourceList {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ReservedResourceList\n     */\n    items: Array<ReservedResource>;\n}\n/**\n * \n * @export\n * @interface ReservedResourceListAllOf\n */\nexport interface ReservedResourceListAllOf {\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ReservedResourceListAllOf\n     */\n    items?: Array<ReservedResource>;\n}\n/**\n * \n * @export\n * @interface ResourceQuota\n */\nexport interface ResourceQuota {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     * @deprecated\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResourceQuota\n     * @deprecated\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     * @deprecated\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     * @deprecated\n     */\n    resource_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuota\n     */\n    sku_count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    type?: ResourceQuotaTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceQuotaAllOf\n */\nexport interface ResourceQuotaAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     * @deprecated\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResourceQuotaAllOf\n     * @deprecated\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     * @deprecated\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     * @deprecated\n     */\n    resource_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaAllOf\n     */\n    sku_count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    type?: ResourceQuotaAllOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaAllOfTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceQuotaList\n */\nexport interface ResourceQuotaList {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<ResourceQuota>}\n     * @memberof ResourceQuotaList\n     */\n    items: Array<ResourceQuota>;\n}\n/**\n * \n * @export\n * @interface ResourceQuotaListAllOf\n */\nexport interface ResourceQuotaListAllOf {\n    /**\n     * \n     * @type {Array<ResourceQuota>}\n     * @memberof ResourceQuotaListAllOf\n     */\n    items?: Array<ResourceQuota>;\n}\n/**\n * \n * @export\n * @interface ResourceQuotaRequest\n */\nexport interface ResourceQuotaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaRequest\n     */\n    sku: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaRequest\n     */\n    sku_count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaRequest\n     */\n    type?: ResourceQuotaRequestTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaRequestTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceReview\n */\nexport interface ResourceReview {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    action: ResourceReviewActionEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    cluster_ids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    cluster_uuids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    organization_ids: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    resource_type: ResourceReviewResourceTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    subscription_ids: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceReviewRequest\n */\nexport interface ResourceReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    account_username?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    action?: ResourceReviewRequestActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    resource_type?: ResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewRequestActionEnum {\n    Get = 'get',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewRequestResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface Role\n */\nexport interface Role {\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof Role\n     */\n    permissions?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface RoleAllOf\n */\nexport interface RoleAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof RoleAllOf\n     */\n    permissions?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface RoleBinding\n */\nexport interface RoleBinding {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    kind?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBinding\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    organization?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    role?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    type?: RoleBindingTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum RoleBindingTypeEnum {\n    Application = 'Application',\n    Subscription = 'Subscription',\n    Organization = 'Organization'\n}\n\n/**\n * \n * @export\n * @interface RoleBindingAllOf\n */\nexport interface RoleBindingAllOf {\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingAllOf\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    organization?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    role?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    type?: RoleBindingAllOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum RoleBindingAllOfTypeEnum {\n    Application = 'Application',\n    Subscription = 'Subscription',\n    Organization = 'Organization'\n}\n\n/**\n * \n * @export\n * @interface RoleBindingCreateRequest\n */\nexport interface RoleBindingCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    account_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingCreateRequest\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    role_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    type: string;\n}\n/**\n * \n * @export\n * @interface RoleBindingList\n */\nexport interface RoleBindingList {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<RoleBinding>}\n     * @memberof RoleBindingList\n     */\n    items: Array<RoleBinding>;\n}\n/**\n * \n * @export\n * @interface RoleBindingListAllOf\n */\nexport interface RoleBindingListAllOf {\n    /**\n     * \n     * @type {Array<RoleBinding>}\n     * @memberof RoleBindingListAllOf\n     */\n    items?: Array<RoleBinding>;\n}\n/**\n * \n * @export\n * @interface RoleBindingRequest\n */\nexport interface RoleBindingRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingRequest\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    role_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface RoleList\n */\nexport interface RoleList {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Role>}\n     * @memberof RoleList\n     */\n    items: Array<Role>;\n}\n/**\n * \n * @export\n * @interface RoleListAllOf\n */\nexport interface RoleListAllOf {\n    /**\n     * \n     * @type {Array<Role>}\n     * @memberof RoleListAllOf\n     */\n    items?: Array<Role>;\n}\n/**\n * \n * @export\n * @interface SKU\n */\nexport interface SKU {\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SKU\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {Array<EphemeralResourceQuota>}\n     * @memberof SKU\n     */\n    resources?: Array<EphemeralResourceQuota>;\n}\n/**\n * \n * @export\n * @interface SKUAllOf\n */\nexport interface SKUAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SKUAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {Array<EphemeralResourceQuota>}\n     * @memberof SKUAllOf\n     */\n    resources?: Array<EphemeralResourceQuota>;\n}\n/**\n * \n * @export\n * @interface SelfAccessReview\n */\nexport interface SelfAccessReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    action: SelfAccessReviewActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    resource_type: SelfAccessReviewResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfAccessReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfAccessReviewResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface SelfFeatureReview\n */\nexport interface SelfFeatureReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfFeatureReview\n     */\n    feature: string;\n}\n/**\n * \n * @export\n * @interface SelfResourceReview\n */\nexport interface SelfResourceReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReview\n     */\n    action: SelfResourceReviewActionEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    cluster_ids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    cluster_uuids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    organization_ids: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReview\n     */\n    resource_type: SelfResourceReviewResourceTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    subscription_ids: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface SelfResourceReviewRequest\n */\nexport interface SelfResourceReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReviewRequest\n     */\n    action?: SelfResourceReviewRequestActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReviewRequest\n     */\n    resource_type?: SelfResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewRequestActionEnum {\n    Get = 'get',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewRequestResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface SelfTermsReview\n */\nexport interface SelfTermsReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfTermsReview\n     */\n    event_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfTermsReview\n     */\n    site_code?: string;\n}\n/**\n * \n * @export\n * @interface SkuList\n */\nexport interface SkuList {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<SKU>}\n     * @memberof SkuList\n     */\n    items: Array<SKU>;\n}\n/**\n * \n * @export\n * @interface SkuListAllOf\n */\nexport interface SkuListAllOf {\n    /**\n     * \n     * @type {Array<SKU>}\n     * @memberof SkuListAllOf\n     */\n    items?: Array<SKU>;\n}\n/**\n * \n * @export\n * @interface SkuRules\n */\nexport interface SkuRules {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRules\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    quota_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    sku?: string;\n}\n/**\n * \n * @export\n * @interface SkuRulesAllOf\n */\nexport interface SkuRulesAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesAllOf\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesAllOf\n     */\n    quota_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesAllOf\n     */\n    sku?: string;\n}\n/**\n * \n * @export\n * @interface SkuRulesList\n */\nexport interface SkuRulesList {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<SkuRules>}\n     * @memberof SkuRulesList\n     */\n    items: Array<SkuRules>;\n}\n/**\n * \n * @export\n * @interface SkuRulesListAllOf\n */\nexport interface SkuRulesListAllOf {\n    /**\n     * \n     * @type {Array<SkuRules>}\n     * @memberof SkuRulesListAllOf\n     */\n    items?: Array<SkuRules>;\n}\n/**\n * \n * @export\n * @interface Subscription\n */\nexport interface Subscription {\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    kind?: string;\n    /**\n     * If set, the date the subscription expires based on the billing model\n     * @type {string}\n     * @memberof Subscription\n     */\n    billing_expiration_date?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Subscription\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cluster_billing_model?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Subscription\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {AccountReference}\n     * @memberof Subscription\n     */\n    creator?: AccountReference;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Subscription\n     */\n    labels?: Array<Label>;\n    /**\n     * Last time this subscription were reconciled about cluster usage\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_reconcile_date?: string;\n    /**\n     * Last time status was set to Released for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_released_at?: string;\n    /**\n     * Last telemetry authorization request for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_telemetry_date?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    managed: boolean;\n    /**\n     * \n     * @type {Array<OneMetric>}\n     * @memberof Subscription\n     */\n    metrics?: Array<OneMetric>;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof Subscription\n     */\n    notification_contacts?: Array<Account>;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {Plan}\n     * @memberof Subscription\n     */\n    plan?: Plan;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    product_bundle?: SubscriptionProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    service_level?: SubscriptionServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Subscription\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    support_level?: SubscriptionSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    system_units?: SubscriptionSystemUnitsEnum;\n    /**\n     * If the subscription is a trial, date the trial ends\n     * @type {string}\n     * @memberof Subscription\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    usage?: SubscriptionUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionAllOf\n */\nexport interface SubscriptionAllOf {\n    /**\n     * If set, the date the subscription expires based on the billing model\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    billing_expiration_date?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof SubscriptionAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cluster_billing_model?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionAllOf\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {AccountReference}\n     * @memberof SubscriptionAllOf\n     */\n    creator?: AccountReference;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof SubscriptionAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * Last time this subscription were reconciled about cluster usage\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_reconcile_date?: string;\n    /**\n     * Last time status was set to Released for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_released_at?: string;\n    /**\n     * Last telemetry authorization request for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_telemetry_date?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionAllOf\n     */\n    managed: boolean;\n    /**\n     * \n     * @type {Array<OneMetric>}\n     * @memberof SubscriptionAllOf\n     */\n    metrics?: Array<OneMetric>;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof SubscriptionAllOf\n     */\n    notification_contacts?: Array<Account>;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {Plan}\n     * @memberof SubscriptionAllOf\n     */\n    plan?: Plan;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    product_bundle?: SubscriptionAllOfProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionAllOf\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    service_level?: SubscriptionAllOfServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionAllOf\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    support_level?: SubscriptionAllOfSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    system_units?: SubscriptionAllOfSystemUnitsEnum;\n    /**\n     * If the subscription is a trial, date the trial ends\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    usage?: SubscriptionAllOfUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionCreateRequest\n */\nexport interface SubscriptionCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    cluster_uuid: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    plan_id: SubscriptionCreateRequestPlanIdEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    status: SubscriptionCreateRequestStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionCreateRequestPlanIdEnum {\n    Ocp = 'OCP'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionCreateRequestStatusEnum {\n    Disconnected = 'Disconnected'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionList\n */\nexport interface SubscriptionList {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Subscription>}\n     * @memberof SubscriptionList\n     */\n    items: Array<Subscription>;\n}\n/**\n * \n * @export\n * @interface SubscriptionListAllOf\n */\nexport interface SubscriptionListAllOf {\n    /**\n     * \n     * @type {Array<Subscription>}\n     * @memberof SubscriptionListAllOf\n     */\n    items?: Array<Subscription>;\n}\n/**\n * \n * @export\n * @interface SubscriptionPatchRequest\n */\nexport interface SubscriptionPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    billing_expiration_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cluster_billing_model?: SubscriptionPatchRequestClusterBillingModelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionPatchRequest\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    creator_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionPatchRequest\n     */\n    managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    plan_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    product_bundle?: SubscriptionPatchRequestProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionPatchRequest\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    service_level?: SubscriptionPatchRequestServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionPatchRequest\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    support_level?: SubscriptionPatchRequestSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    system_units?: SubscriptionPatchRequestSystemUnitsEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    usage?: SubscriptionPatchRequestUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestClusterBillingModelEnum {\n    Standard = 'standard',\n    Marketplace = 'marketplace'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface Summary\n */\nexport interface Summary {\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<SummaryMetrics>}\n     * @memberof Summary\n     */\n    metrics: Array<SummaryMetrics>;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface SummaryAllOf\n */\nexport interface SummaryAllOf {\n    /**\n     * \n     * @type {Array<SummaryMetrics>}\n     * @memberof SummaryAllOf\n     */\n    metrics: Array<SummaryMetrics>;\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryAllOf\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface SummaryMetrics\n */\nexport interface SummaryMetrics {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryMetrics\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<SummaryVector>}\n     * @memberof SummaryMetrics\n     */\n    vector?: Array<SummaryVector>;\n}\n/**\n * \n * @export\n * @interface SummaryMetricsAllOf\n */\nexport interface SummaryMetricsAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryMetricsAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<SummaryVector>}\n     * @memberof SummaryMetricsAllOf\n     */\n    vector?: Array<SummaryVector>;\n}\n/**\n * \n * @export\n * @interface SummaryVector\n */\nexport interface SummaryVector {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryVector\n     */\n    time?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SummaryVector\n     */\n    value?: number;\n}\n/**\n * \n * @export\n * @interface SummaryVectorAllOf\n */\nexport interface SummaryVectorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryVectorAllOf\n     */\n    time?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SummaryVectorAllOf\n     */\n    value?: number;\n}\n/**\n * \n * @export\n * @interface SupportCasesCreatedResponse\n */\nexport interface SupportCasesCreatedResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    caseNumber?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    severity?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    summary?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface SupportCasesRequest\n */\nexport interface SupportCasesRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    account_number?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    case_language?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    contact_sso_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    event_stream_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    openshift_cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    product?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    severity: SupportCasesRequestSeverityEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    summary: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    version?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SupportCasesRequestSeverityEnum {\n    _1Urgent = '1 (Urgent)',\n    _2High = '2 (High)',\n    _3Normal = '3 (Normal)',\n    _4Low = '4 (Low)'\n}\n\n/**\n * \n * @export\n * @interface TemplateParameter\n */\nexport interface TemplateParameter {\n    /**\n     * \n     * @type {string}\n     * @memberof TemplateParameter\n     */\n    content: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemplateParameter\n     */\n    name: string;\n}\n/**\n * \n * @export\n * @interface TermsReview\n */\nexport interface TermsReview {\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    event_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    site_code?: string;\n}\n/**\n * \n * @export\n * @interface TermsReviewResponse\n */\nexport interface TermsReviewResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    account_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    organization_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    redirect_url?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TermsReviewResponse\n     */\n    terms_available: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TermsReviewResponse\n     */\n    terms_required: boolean;\n}\n/**\n * \n * @export\n * @interface TokenAuthorizationRequest\n */\nexport interface TokenAuthorizationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenAuthorizationRequest\n     */\n    authorization_token?: string;\n}\n/**\n * \n * @export\n * @interface TokenAuthorizationResponse\n */\nexport interface TokenAuthorizationResponse {\n    /**\n     * \n     * @type {Account}\n     * @memberof TokenAuthorizationResponse\n     */\n    account?: Account;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccessTokenPost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/access_token`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdPatch: async (id: string, accountPatchRequest: AccountPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id)\n            // verify required parameter 'accountPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsPost: async (account: Account, dryRun?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'account' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (dryRun !== undefined) {\n                localVarQueryParameter['dryRun'] = dryRun;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterAuthorizationsPost: async (clusterAuthorizationRequest: ClusterAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'clusterAuthorizationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ClusterAuthorizationsPost', 'clusterAuthorizationRequest', clusterAuthorizationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(clusterAuthorizationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterRegistrationsPost: async (clusterRegistrationRequest: ClusterRegistrationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'clusterRegistrationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ClusterRegistrationsPost', 'clusterRegistrationRequest', clusterRegistrationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(clusterRegistrationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1CurrentAccountGet: async (fetchLabels?: boolean, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/current_account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/errors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id)\n            // verify required parameter 'featureToggleQueryRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'featureToggleQueryRequest', featureToggleQueryRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(featureToggleQueryRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1LabelsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/labels`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1MetricsGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1NotifyPost: async (notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'notificationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/notify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdPatch: async (id: string, organizationPatchRequest: OrganizationPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id)\n            // verify required parameter 'organizationPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(organizationPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: async (orgId: string, search?: string, fetchRelatedResources?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fetchRelatedResources !== undefined) {\n                localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet: async (orgId: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_summary`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId)\n            // verify required parameter 'resourceQuotaRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'resourceQuotaRequest', resourceQuotaRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId)\n            // verify required parameter 'resourceQuotaRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'resourceQuotaRequest', resourceQuotaRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'organization' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/plans`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (externalResourceId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'externalResourceId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PullSecretsExternalResourceIdDelete', 'externalResourceId', externalResourceId)\n            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`\n                .replace(`{${\"externalResourceId\"}}`, encodeURIComponent(String(externalResourceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsPost: async (pullSecretRequest: PullSecretRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pullSecretRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/registries`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdPatch: async (id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id)\n            // verify required parameter 'registryCredentialPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'registryCredentialPatchRequest', registryCredentialPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(registryCredentialPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsPost: async (registryCredential: RegistryCredential, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'registryCredential' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ReservedResourcesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ResourceQuotaGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdPatch: async (id: string, roleBindingRequest: RoleBindingRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id)\n            // verify required parameter 'roleBindingRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsPost: async (roleBindingCreateRequest: RoleBindingCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roleBindingCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/roles`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/skus`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsGet: async (page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fetchAccounts !== undefined) {\n                localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (labels !== undefined) {\n                localVarQueryParameter['labels'] = labels;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdGet: async (id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchAccounts !== undefined) {\n                localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fetchCpuAndSocket !== undefined) {\n                localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (id: string, notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id)\n            // verify required parameter 'notificationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdPatch: async (id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id)\n            // verify required parameter 'subscriptionPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (id: string, page?: number, size?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsPost: async (subscriptionCreateRequest: SubscriptionCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subscriptionCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (subId: string, accountId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId)\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'accountId', accountId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)))\n                .replace(`{${\"accountId\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId)\n            // verify required parameter 'notificationContactCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'notificationContactCreateRequest', notificationContactCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationContactCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (subId: string, reservedResourceId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId)\n            // verify required parameter 'reservedResourceId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'reservedResourceId', reservedResourceId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)))\n                .replace(`{${\"reservedResourceId\"}}`, encodeURIComponent(String(reservedResourceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'caseId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId)\n            const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`\n                .replace(`{${\"caseId\"}}`, encodeURIComponent(String(caseId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesPost: async (supportCasesRequest: SupportCasesRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'supportCasesRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/support_cases`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1TokenAuthorizationPost: async (tokenAuthorizationRequest: TokenAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'tokenAuthorizationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1TokenAuthorizationPost', 'tokenAuthorizationRequest', tokenAuthorizationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(tokenAuthorizationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1AccessReviewPost: async (accessReview: AccessReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accessReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview)\n            const localVarPath = `/api/authorizations/v1/access_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1CapabilityReviewPost: async (capabilityReviewRequest: CapabilityReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'capabilityReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest)\n            const localVarPath = `/api/authorizations/v1/capability_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(capabilityReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ExportControlReviewPost: async (exportControlReviewRequest: ExportControlReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'exportControlReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1ExportControlReviewPost', 'exportControlReviewRequest', exportControlReviewRequest)\n            const localVarPath = `/api/authorizations/v1/export_control_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(exportControlReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review feature to perform an action on it such as toggle a feature on/off\n         * @param {FeatureReview} featureReview Feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1FeatureReviewPost: async (featureReview: FeatureReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'featureReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1FeatureReviewPost', 'featureReview', featureReview)\n            const localVarPath = `/api/authorizations/v1/feature_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(featureReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ResourceReviewPost: async (resourceReviewRequest: ResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'resourceReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest)\n            const localVarPath = `/api/authorizations/v1/resource_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfAccessReviewPost: async (selfAccessReview: SelfAccessReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfAccessReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfAccessReviewPost', 'selfAccessReview', selfAccessReview)\n            const localVarPath = `/api/authorizations/v1/self_access_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfAccessReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your ability to toggle a feature\n         * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfFeatureReviewPost: async (selfFeatureReview: SelfFeatureReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfFeatureReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfFeatureReviewPost', 'selfFeatureReview', selfFeatureReview)\n            const localVarPath = `/api/authorizations/v1/self_feature_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfFeatureReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfResourceReviewPost: async (selfResourceReviewRequest: SelfResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfResourceReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfResourceReviewPost', 'selfResourceReviewRequest', selfResourceReviewRequest)\n            const localVarPath = `/api/authorizations/v1/self_resource_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfResourceReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfTermsReviewPost: async (selfTermsReview: SelfTermsReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfTermsReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview)\n            const localVarPath = `/api/authorizations/v1/self_terms_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfTermsReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'termsReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview)\n            const localVarPath = `/api/authorizations/v1/terms_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccessTokenPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1MetricsGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(notificationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaSummaryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(organization, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PlansIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RolesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkusGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkusIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(accessReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review feature to perform an action on it such as toggle a feature on/off\n         * @param {FeatureReview} featureReview Feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1FeatureReviewPost(featureReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your ability to toggle a feature\n         * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(termsReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg> {\n            return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList> {\n            return localVarFp.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse> {\n            return localVarFp.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse> {\n            return localVarFp.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {\n            return localVarFp.apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {\n            return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle> {\n            return localVarFp.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {\n            return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): AxiosPromise<QuotaCostList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {\n            return localVarFp.apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {\n            return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg> {\n            return localVarFp.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList> {\n            return localVarFp.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {\n            return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {\n            return localVarFp.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {\n            return localVarFp.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {\n            return localVarFp.apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {\n            return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {\n            return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {\n            return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {\n            return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {\n            return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse> {\n            return localVarFp.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse> {\n            return localVarFp.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n            return localVarFp.apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview> {\n            return localVarFp.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview> {\n            return localVarFp.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review feature to perform an action on it such as toggle a feature on/off\n         * @param {FeatureReview} featureReview Feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): AxiosPromise<FeatureReviewResponse> {\n            return localVarFp.apiAuthorizationsV1FeatureReviewPost(featureReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview> {\n            return localVarFp.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your ability to toggle a feature\n         * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): AxiosPromise<FeatureReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview> {\n            return localVarFp.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n            return localVarFp.apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg>;\n\n    /**\n     * \n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList>;\n\n    /**\n     * \n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse>;\n\n    /**\n     * \n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse>;\n\n    /**\n     * \n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList>;\n\n    /**\n     * \n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList>;\n\n    /**\n     * \n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary>;\n\n    /**\n     * \n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): AxiosPromise<QuotaCostList>;\n\n    /**\n     * \n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList>;\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;\n\n    /**\n     * \n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList>;\n\n    /**\n     * \n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan>;\n\n    /**\n     * \n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg>;\n\n    /**\n     * \n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList>;\n\n    /**\n     * \n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry>;\n\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList>;\n\n    /**\n     * \n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;\n\n    /**\n     * \n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList>;\n\n    /**\n     * \n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList>;\n\n    /**\n     * \n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role>;\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList>;\n\n    /**\n     * \n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules>;\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList>;\n\n    /**\n     * \n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU>;\n\n    /**\n     * \n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList>;\n\n    /**\n     * \n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;\n\n    /**\n     * \n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList>;\n\n    /**\n     * \n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource>;\n\n    /**\n     * \n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse>;\n\n    /**\n     * \n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview>;\n\n    /**\n     * \n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview>;\n\n    /**\n     * \n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): AxiosPromise<FeatureReviewResponse>;\n\n    /**\n     * \n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview>;\n\n    /**\n     * \n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n    /**\n     * \n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): AxiosPromise<FeatureReviewResponse>;\n\n    /**\n     * \n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview>;\n\n    /**\n     * \n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccessTokenPost(options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1MetricsGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PlansIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RolesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkusGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkusIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1FeatureReviewPost(featureReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","export const getParams = () => {\n  const pathRegex = /^.*\\/kafkas\\/(?<id>[a-zA-Z0-9]+)(\\/topics\\/(?<topicName>[a-zA-Z0-9-_]+))?$/gm\n  const matches = pathRegex.exec(window.location.pathname)\n  if (matches === null || matches.groups === undefined) {\n    throw new Error(\"matches is null or groups are undefined\")\n  }\n  const { id, topicName } = matches.groups;\n  if (id === undefined) {\n    throw new Error(\"id cannot be null\")\n  }\n  return { id, topicName };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = params => Object.keys(params)\n  .map(key => `${key}=${encodeURIComponent(params[key])}`)\n  .join('&');\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import React from 'react';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const ServiceDownPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t('serviceDown.serviceDownTitle')}\n        </Title>\n        <EmptyStateBody>\n          {t('serviceDown.serviceDownMessage')}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={() => {window.location.href = \"https://status.starter.openshift.com/\"}}>{t('serviceDown.serviceDownButton')}</Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { useAuth, useConfig } from '@bf2/ui-shared';\nimport { Configuration, DefaultApi, TermsReviewResponse } from '@openapi/ams';\nimport { getTermsAppURL } from '@app/utils/termsApp';\nimport queryString from 'query-string';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { Loading, FederatedModule, DevelopmentPreview } from '@app/components';\n\nexport const KasPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <KasPageConnected />;\n};\n\nexport const KasPageConnected: React.FunctionComponent = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const [create, setCreate] = useState<boolean>(false);\n  const [termsReview, setTermsReview] = useState<TermsReviewResponse | undefined>();\n\n  useEffect(() => {\n    // Handle being passed ?create=true by setting the create state, then removing it from the search params\n    const handleCreateParam = () => {\n      const parsed = queryString.parse(location.search);\n      const c = parsed['create'] === 'true';\n      if (c) {\n        setCreate(true);\n      }\n    };\n\n    handleCreateParam();\n  }, [create, location.search]);\n\n  useEffect(() => {\n    // Load the terms review state asynchronously, to avoid the user waiting when they press the Create Kafka Instance button\n    const selfTermsReview = async () => {\n      const accessToken = await auth?.ams.getToken();\n      const ams = new DefaultApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || '',\n      } as Configuration);\n      setTermsReview(\n        await ams\n          .apiAuthorizationsV1SelfTermsReviewPost({\n            event_code: config?.ams.eventCode,\n            site_code: config?.ams.siteCode,\n          })\n          .then((resp) => resp.data)\n      );\n    };\n\n    selfTermsReview();\n  }, [config?.ams.apiBasePath, auth]);\n\n  const onConnectToRoute = async (event: any, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    history.push(`/streams/${routePath}`);\n  };\n\n  const getConnectToRoutePath = (event: any, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    return history.createHref({ pathname: `/streams/${routePath}` });\n  };\n\n  const preCreateInstance = async (open: boolean) => {\n    // if termsReview is set, we can proceed, otherwise wait for the effect to complete - the state update will cause the page to rerender\n    if (termsReview) {\n      if (termsReview.terms_available || termsReview.terms_required) {\n        if (termsReview.redirect_url === undefined) {\n          throw new Error('terms must be signed but there is no terms url');\n        }\n        const redirectURL = queryString.stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n        const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n        window.location.href = url;\n        return false;\n      }\n      return open;\n    }\n    return false;\n  };\n\n  const createDialogOpen = () => {\n    return create;\n  };\n\n  if (config === undefined || termsReview === undefined) {\n    return <Loading />;\n  }\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  const osStreams = (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      render={(OpenshiftStreamsFederated) => {\n        return (\n          <OpenshiftStreamsFederated\n            onConnectToRoute={onConnectToRoute}\n            getConnectToRoutePath={getConnectToRoutePath}\n            preCreateInstance={preCreateInstance}\n            createDialogOpen={createDialogOpen}\n            tokenEndPointUrl={tokenEndPointUrl}\n          />\n        );\n      }}\n    />\n  );\n\n  return <DevelopmentPreview> {osStreams} </DevelopmentPreview>;\n};\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFoundPage: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFoundPage };\n","export default __webpack_public_path__ + \"d0f2bb14.svg\";","export default __webpack_public_path__ + \"61fdfbf5.svg\";","export default __webpack_public_path__ + \"485bae8d.svg\";","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  Grid,\n  Label,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport ApacheKafkaLogo from \"/static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg\";\nimport APIMgmtLogo from \"/static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg\";\nimport DataScienceLogo from \"static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg\";\n\nimport { useTranslation } from 'react-i18next';\n\nexport const OverviewPage: React.FunctionComponent = () => {\n\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {/* Hero banner with graphic */}\n      <PageSection className=\"app-services-ui--page-section--marketing app-services-ui--banner pf-t-dark pf-u-background-color-dark-100\" variant={PageSectionVariants.dark}>\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('overview.heroTitle')}\n          </Title>\n          <Text className=\"app-services-ui--banner__tagline\">{t('overview.heroTagline')}</Text>\n          <Text component={TextVariants.p}>\n            {t('overview.heroDescription')}\n          </Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('overview.heroDescription2')}\n          </Text>\n          <StackItem>\n            <Button variant={ButtonVariant.primary} isLarge component=\"a\" data-testid=\"hero-buttonTryKafka\" href=\"http://cloud.redhat.com/beta/application-services/streams/kafkas/\">\n              {t('overview.heroCallToActionButton')}\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      {/* Banner with just text */}\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\">\n        <Bullseye>\n          <Text component={TextVariants.p} className=\"app-services-ui--banner--text-only\">\n            {t('overview.banner')}\n          </Text>\n        </Bullseye>\n      </PageSection>\n\n      {/* Cards */}\n      <PageSection isWidthLimited className=\"app-services-ui--page-section--marketing\">\n        <Grid md={6} lg={4} hasGutter>\n\n          {/* Kafka card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={ApacheKafkaLogo}\n                  alt=\"Red Hat OpenShift Streams for Apache Kafka logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhosakTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.developmentPreview')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhosakMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhosakSecondaryText')}\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHOSAK-buttonCreateKafka\" variant={ButtonVariant.secondary} component=\"a\" href=\"http://cloud.redhat.com/beta/application-services/streams/kafkas/\">{t('overview.rhosakCallToActionButton')}</Button>\n            </CardFooter>\n          </Card>\n\n          {/* API Management card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={APIMgmtLogo}\n                  alt=\"Red Hat OpenShift API Management logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhoamTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label color=\"blue\">{t('overview.generalAvailability')}</Label>\n                </StackItem>\n                <StackItem>\n                {t('overview.rhoamMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhoamSecondaryText')} <Button data-testid=\"cardRHOAM-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\">OpenShift\n                  <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button variant={ButtonVariant.secondary} data-testid=\"cardRHOAM-buttonCTA\" component=\"a\" target=\"_blank\" href=\"https://developers.redhat.com/products/rhoam/getting-started\">\n                {t('overview.getStarted')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Data science card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={DataScienceLogo}\n                  alt=\"Red Hat OpenShift Data Science logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n              {t('overview.rhodsTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.beta')}</Label>\n                </StackItem>\n                <StackItem>\n                {t('overview.rhodsMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                {t('overview.rhodsSecondaryText')} <Button data-testid=\"cardRHODS-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\"> OpenShift\n                  <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHODS-buttonCTA\" variant={ButtonVariant.secondary} component=\"a\" target=\"_blank\" href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\">\n                {t('overview.learnMore')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n","import api from \"!../../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../../node_modules/css-loader/dist/cjs.js!../../../../node_modules/sass-loader/dist/cjs.js!./QuickStartDrawerFederated.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { FederatedModule } from '@app/components/FederatedModule/FederatedModule';\nimport React, { FunctionComponent } from 'react';\nimport { useConfig } from '@bf2/ui-shared';\nimport { Loading } from '@app/components/Loading/Loading';\nimport './QuickStartDrawerFederated.scss';\n\nexport const QuickStartDrawerFederated: FunctionComponent = ({ children }) => {\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (<FederatedModule\n      scope=\"guides\"\n      module=\"./QuickStartDrawer\"\n      fallback={children}\n      render={(QuickStartDrawerFederated) => (\n        <QuickStartDrawerFederated\n          showDrafts={config?.guides.showDrafts}\n          appendTo={() => document.querySelector(\"#qs-include\")}\n          root={() => document.querySelector('#qs-root')}\n          className=\"mas-quickstart-drawer\"\n        >\n          {children}\n        </QuickStartDrawerFederated>\n      )}\n    />\n  );\n};\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { BasenameContext } from \"@bf2/ui-shared\";\nimport { useHistory } from \"react-router\";\nimport {\n  APIManagementPage,\n  DataSciencePage,\n  KafkaPage,\n  KasPage, NotFoundPage,\n  OverviewPage, QuickStartDrawerFederated,\n  ResourcesPage,\n  ServiceAccountsPage\n} from \"@app/pages\";\n\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\"/>;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\"/>;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: KafkaPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KafkaPage,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n  }\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const history = useHistory();\n  const getBasename = () => {\n    return history.createHref({ pathname: rest.path })\n  };\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return (\n      <QuickStartDrawerFederated>\n        <BasenameContext.Provider value={{ getBasename }}>\n          <Component {...rest} {...routeProps} />\n        </BasenameContext.Provider>\n      </QuickStartDrawerFederated>\n    );\n  }\n\n  return <Route render={routeWithTitle}/>;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage}/>;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <Switch>\n      {flattenedRoutes.map(({ path, exact, component, title, isAsync }, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n        />\n      ))}\n      <PageNotFound title=\"404 Page Not Found\"/>\n    </Switch>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","import React from 'react';\nimport { FederatedModule, DevelopmentPreview, Loading } from '@app/components';\nimport { useConfig } from '@bf2/ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\n\nexport const ServiceAccountsPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ServiceAccountsPageConnected />;\n};\n\nconst ServiceAccountsPageConnected: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <DevelopmentPreview>\n      <FederatedModule\n        scope=\"kas\"\n        module=\"./ServiceAccounts\"\n        render={(ServiceAccountsFederated) => {\n          return <ServiceAccountsFederated />;\n        }}\n      />\n    </DevelopmentPreview>\n  );\n};\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","import React from 'react';\nimport { Loading } from '@app/components/Loading/Loading';\nimport LoremIpsum from 'react-lorem-ipsum';\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  Card,\n  CardBody,\n  CardHeader,\n  CardFooter,\n  CardHeaderMain,\n  CardTitle,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  TitleSizes,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport '../../App.scss';\nimport { useTranslation } from 'react-i18next';\n\nexport const APIManagementPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhoam\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('apimgmtoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('apimgmtoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('apimgmtoverview.heroDescription')}</Text>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Grid hasGutter lg={6}>\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h3\">{t('apimgmtoverview.alreadyHaveCardTitle')}</Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t('apimgmtoverview.alreadyHaveCardMainText')}</CardBody>\n            <CardFooter>\n              <Stack hasGutter>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardHaveRHOAM-buttonGoOCM\"\n                    variant={ButtonVariant.secondary}\n                    component=\"a\"\n                    href=\"https://cloud.redhat.com/openshift/\"\n                  >\n                    {t('apimgmtoverview.alreadyHaveCardCallToActionButton')}\n                  </Button>\n                </StackItem>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardHaveRHOAM-linkViewDocs\"\n                    variant={ButtonVariant.link}\n                    component=\"a\"\n                    href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                  </Button>\n                </StackItem>\n              </Stack>{' '}\n            </CardFooter>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h3\">{t('apimgmtoverview.wantToTryCardTitle')}</Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t('apimgmtoverview.wantToTryCardMainText')}</CardBody>\n            <CardFooter>\n              <Stack hasGutter>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardTryRHOAM-buttonGetStarted\"\n                    variant={ButtonVariant.secondary}\n                    component=\"a\"\n                    href=\"https://developers.redhat.com/products/rhoam/getting-started\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.wantToTryCardCallToActionButton')}\n                    <ExternalLinkAltIcon className=\"pf-u-ml-md\" />\n                  </Button>\n                </StackItem>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardTryRHOAM-linkViewDocs\"\n                    variant={ButtonVariant.link}\n                    component=\"a\"\n                    href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                  </Button>\n                </StackItem>\n              </Stack>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </PageSection>\n\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n          {t('apimgmtoverview.videoSectionTitle')}\n        </Title>\n        <Grid hasGutter>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n              <div className=\"app-services-ui--video-wrapper\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/NzNgc0f75pc\"\n                  title={t('apimgmtoverview.videoSectionTitle')}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </div>\n            </Card>\n          </GridItem>\n          <GridItem md={5}>\n            <TextContent>\n              <Text className=\"pf-u-color-200 pf-u-ml-md\">{t('apimgmtoverview.videoSectionInThisVideo')}</Text>\n              <List className=\"app-services-ui--icon-list\">\n                <ListItem>{t('apimgmtoverview.videoSectionBulletBuild')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletImport')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletAdd')}</ListItem>\n              </List>\n            </TextContent>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Card,\n  Grid,\n  GridItem,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport { useTranslation } from 'react-i18next';\n\nexport const DataSciencePage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhods\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('datascienceoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('datascienceoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('datascienceoverview.heroDescription')}</Text>\n          <StackItem>\n            <Button\n              data-testid=\"hero-buttonLearnMore\"\n              variant={ButtonVariant.secondary}\n              component=\"a\"\n              href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\"\n              target=\"_blank\"\n            >\n              {t('datascienceoverview.heroCallToActionButton')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Grid hasGutter>\n          <GridItem md={5}>\n            <Stack hasGutter>\n              <StackItem>\n                <TextContent>\n                  <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n                    {t('datascienceoverview.videoSectionTitle')}\n                  </Title>\n                  <Text className=\"pf-u-mr-md\">{t('datascienceoverview.videoSectionInThisVideo')}</Text>\n                </TextContent>\n              </StackItem>\n              <StackItem>\n                <Button\n                  data-testid=\"CTA-videoRHODSDemo\"\n                  variant={ButtonVariant.secondary}\n                  component=\"a\"\n                  href=\"http://www.openshift.com/DataScienceVideoDemo\"\n                  target=\"_blank\"\n                >\n                  {t('datascienceoverview.heroViewDemo')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                </Button>\n              </StackItem>\n            </Stack>\n          </GridItem>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n                <div className=\"app-services-ui--video-wrapper\">\n                  <iframe\n                    src=\"https://www.youtube.com/embed/joK89xYeuUY\"\n                    title={t('datascienceoverview.videoSectionTitle')}\n                    frameborder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                  ></iframe>\n                </div>\n              </Card>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n","import { FederatedModule } from \"@app/components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent } from 'react';\n\nexport const ResourcesPage: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux';\nimport './App.scss';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { notifications, NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AppRoutes } from \"@app/Routes\";\nimport { FederatedModuleProvider } from \"./components/FederatedModule/FederatedModule\";\nimport { InsightsType } from \"@app/utils\";\n\nconst registry = getRegistry();\nregistry.register({ notifications });\n\nexport const App: React.FunctionComponent = () => {\n\n  const insights: InsightsType = window[\"insights\"];\n  const history = useHistory();\n\n  const getAppId = () => {\n\n    const defaultAppId = \"overview\";\n\n    const parts = history.location.pathname.split(\"/\");\n    if (parts.length > 1) {\n      if (parts[1] === \"\") {\n        return defaultAppId\n      } else {\n        if (parts[1] === \"openshift-streams\") {\n          return \"streams\";\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  }\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    insights.chrome.on('APP_NAVIGATION', event => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n  });\n\n  return (\n    <Provider store={registry.getStore()}>\n      <FederatedModuleProvider>\n        <NotificationsPortal/>\n        <AppRoutes/>\n      </FederatedModuleProvider>\n    </Provider>\n  );\n}\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\n\nlet keycloak: KeycloakInstance | undefined;\n\nconst REFRESH_TOKEN_COOKIE_NAME = \"masSSORefreshToken\";\nconst MIN_VALIDITY = 50;\n\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig) => {\n  if (!keycloak) {\n    keycloak = await init(config);\n  }\n  return keycloak;\n}\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (config: KeycloakConfig): Promise<KeycloakInstance | undefined> => {\n  const k = Keycloak(config);\n\n  const initOptions = {\n    responseMode: \"query\",\n  } as KeycloakInitOptions;\n\n  const storedRefreshToken = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  if (storedRefreshToken) {\n    try {\n      refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken);\n    } catch {\n      console.log(\"unable to parse refresh token from cookie\")\n      Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n    }\n  }\n\n  if (refreshJWT && refreshJWT.exp) {\n    // if the JWT exists, and has an expiry\n    const now = getUnixTime(new Date());\n    if (now < refreshJWT.exp + MIN_VALIDITY) {\n      // Use the refresh token if it's still valid (make sure it's valid for at least MIN_VALIDITY)\n      try {\n        // Perform a keycloak init without a login\n        await k.init(initOptions);\n        // Set the saved refresh token into Keycloak\n        k.refreshToken = storedRefreshToken\n        // Then force a token refresh to check if the refresh token is actually valid\n        k.updateToken(-1);\n        if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n          // If we get back a refresh token that has changed, then save it\n          Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n        }\n        return k;\n      } catch {\n        // If any of the methods above error, then perform a login\n        console.log(\"refresh token is not valid, performing full login\");\n        Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n      }\n    }\n  }\n\n  initOptions.onLoad = \"login-required\";\n  await k.init(initOptions);\n  if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n  }\n  return k;\n\n}\n\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getValidAccessToken = async (): Promise<string> => {\n  await keycloak?.updateToken(MIN_VALIDITY);\n  if (!keycloak?.token) {\n    throw new Error(\"No token from keycloak!\");\n  }\n  if (keycloak?.refreshToken) {\n    // Save the most recent refresh token\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, keycloak?.refreshToken);\n  }\n  return keycloak?.token;\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (keycloak: Keycloak.KeycloakInstance | undefined) => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n}\n","import React from \"react\";\nimport { Config, ConfigContext } from '@bf2/ui-shared';\n\nconst defaultHostname = \"cloud.redhat.com\";\n\nexport type EnviromentConfigs = [\n  {\n    hostnames: string[],\n    config: Config\n  }\n];\n\n\nexport type ConfigProviderProps = {\n  configUrl: string\n}\n\nexport const ConfigProvider: React.FunctionComponent<ConfigProviderProps> = ({ configUrl, children }) => {\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  React.useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async () => {\n      const hostname = window.location.hostname;\n      console.log(`Loading config for ${hostname}`);\n      const response = await fetch(configUrl, { signal });\n      const environmentConfig = await response.json() as EnviromentConfigs;\n      const possibleConfigs = environmentConfig.filter(entry => entry.hostnames.includes(hostname))\n      if (possibleConfigs.length > 1) {\n        throw new Error(`Unable to load config for ${hostname}, more than one config matched ${possibleConfigs}`);\n      } else if (possibleConfigs.length < 1) {\n        // Use the default config\n        const possibleDefaultConfigs = environmentConfig.filter(entry => entry.hostnames.includes(defaultHostname))\n        if (possibleDefaultConfigs.length > 1) {\n          throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n        } else if (possibleDefaultConfigs.length < 1) {\n          throw new Error(`Unable to load default config, no configs matched`);\n        } else {\n          setConfig(possibleDefaultConfigs[0].config);\n          console.log('Done loading default config', possibleDefaultConfigs[0]);\n        }\n      } else {\n        setConfig(possibleConfigs[0].config);\n        console.log('Done loading config', possibleConfigs[0].config);\n      }\n    })();\n\n    return () => controller.abort();\n  }, [configUrl]);\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import en from './en.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst appServicesi18n = i18n.createInstance();\n\nappServicesi18n\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      detection: {\n        order: ['htmlTag', 'navigator'],\n        caches: [],\n      },\n      fallbackLng: 'en',\n      debug: true,\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      resources,\n    });\n\nexport default appServicesi18n;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider, useDispatch } from 'react-redux';\nimport { init } from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport { InsightsType } from \"@app/utils/insights\";\nimport { ConfigProvider } from \"@app/providers/ConfigContextProvider\";\nimport { KeycloakInstance } from \"keycloak-js\";\nimport { Alert, AlertContext, Auth, AuthContext, useConfig } from \"@bf2/ui-shared\";\nimport { getKeycloakInstance, getValidAccessToken } from \"@app/utils/keycloakAuth\";\nimport { I18nextProvider } from 'react-i18next';\nimport appServicesi18n from '@app/i18n';\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Loading } from \"@app/components/Loading/Loading\";\n\ndeclare const __webpack_public_path__: string;\n\nconst AppWithKeycloak: React.FunctionComponent = () => {\n\n  const config = useConfig();\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadToken = async () => {\n        const keycloak = await getKeycloakInstance ({\n          url: config.masSso.authServerUrl,\n          clientId: config.masSso.clientId,\n          realm: config.masSso.realm\n        });\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      }\n      loadToken();\n    }\n  }, [config]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n  const dispatch = useDispatch();\n\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading/>;\n  }\n\n  const insights: InsightsType = window[\"insights\"];\n\n  const getToken = () => {\n    return getValidAccessToken();\n\n  }\n\n  const auth: Auth = {\n    getUsername: () => insights.chrome.auth.getUser().then(value => value.identity.user.username),\n    kafka: {\n      getToken\n    },\n    kas: {\n      getToken: insights.chrome.auth.getToken\n    },\n    ams: {\n      getToken: insights.chrome.auth.getToken\n    }\n  }\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n  };\n\n  const alert: Alert = {\n    addAlert\n  }\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={auth}>\n      <AlertContext.Provider value={alert}>\n        <Router basename={baseName}>\n          <App/>\n        </Router>\n      </AlertContext.Provider>\n    </AuthContext.Provider>\n  )\n}\n\n\nconst AppEntry: React.FunctionComponent = () => (\n  <Provider store={init(logger).getStore()}>\n    <I18nextProvider i18n = {appServicesi18n}>\n    <ConfigProvider configUrl={`${__webpack_public_path__}config.json`}>\n      <AppWithKeycloak/>\n    </ConfigProvider>\n    </I18nextProvider>\n  </Provider>\n);\nexport default AppEntry;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root);\n"],"sourceRoot":""}