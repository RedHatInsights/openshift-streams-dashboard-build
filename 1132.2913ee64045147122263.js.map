{"version":3,"file":"1132.2913ee64045147122263.js","mappings":"sRASO,MAAMA,EAA+B,KAC1C,MAAMC,GAAS,IAAAC,aAEf,OAAID,aAAM,EAANA,EAAQE,cACH,SAAC,KAAe,KAGlB,SAACC,EAAkB,GAAG,EAGzBA,EAAwC,KAE1C,SAAC,IAAS,CACRC,aAAa,mBACbC,OAASC,IAAa,SAACC,EAAiB,CAACD,SAAUA,MAKnDC,EAED,EAAGD,e,MACN,MAAOE,EAAuBC,IAA4B,IAAAC,YACpDC,GAAO,IAAAC,YAEb,IAAAC,YAAU,MACK,0C,YACc,QAAnB,EAAAF,aAAI,EAAJA,EAAMG,qBAAa,eAAEC,MAAMC,GAASP,EAAyBO,IACrE,GAAI,GACH,CAACL,IAEJ,MAAM,iBAAEM,IAAqB,UAE7B,QAAiBC,IAAbZ,QAAoDY,IAA1BV,EAC5B,OAAO,SAAC,EAAAW,mBAAkB,IAG5B,MAAMC,EAA+B,QAAlB,EAAAH,WAAkB,eAAEI,QACpCC,GAAMA,EAAEC,KAAOf,GAAyBc,EAAEC,MAAOjB,aAAQ,EAARA,EAAUkB,SAG9D,OACE,SAAC,IAA0B,CACzBlB,SAAUA,EACVmB,OAAO,uBACPL,WAAYA,GAEf,EAGH,G","sources":["webpack://application-services-ui/./src/app/pages/ServiceRegistry/RolesPage.tsx"],"sourcesContent":["import { useState, useEffect, FunctionComponent } from \"react\";\nimport { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig, useAuth } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { usePrincipal } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\n\nexport const RolesPage: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RolesPageConnected />;\n};\n\nconst RolesPageConnected: FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.global_roles\"\n      render={(registry) => <RolesLayoutRender registry={registry} />}\n    />\n  );\n};\n\nconst RolesLayoutRender: FunctionComponent<{\n  registry: Registry;\n}> = ({ registry }) => {\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<string>();\n  const auth = useAuth();\n\n  useEffect(() => {\n    (async () => {\n      await auth?.getUsername()?.then((user) => setCurrentlyLoggedInuser(user));\n    })();\n  }, [auth]);\n\n  const { getAllPrincipals } = usePrincipal();\n\n  if (registry === undefined || currentlyLoggedInuser === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const principals = getAllPrincipals()?.filter(\n    (p) => p.id !== currentlyLoggedInuser && p.id !== registry?.owner\n  );\n\n  return (\n    <FederatedApicurioComponent\n      registry={registry}\n      module=\"./FederatedRolesPage\"\n      principals={principals}\n    />\n  );\n};\n\nexport default RolesPage;\n"],"names":["RolesPage","config","useConfig","serviceDown","RolesPageConnected","breadcrumbId","render","registry","RolesLayoutRender","currentlyLoggedInuser","setCurrentlyLoggedInuser","useState","auth","useAuth","useEffect","getUsername","then","user","getAllPrincipals","undefined","AppServicesLoading","principals","filter","p","id","owner","module"],"sourceRoot":""}