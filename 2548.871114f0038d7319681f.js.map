{"version":3,"file":"2548.871114f0038d7319681f.js","mappings":"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","sources":["webpack://application-services-ui/./node_modules/@redhat-cloud-services/rbac-client/dist/api.js","webpack://application-services-ui/./node_modules/@redhat-cloud-services/rbac-client/dist/base.js","webpack://application-services-ui/./node_modules/@redhat-cloud-services/rbac-client/dist/configuration.js","webpack://application-services-ui/./node_modules/@redhat-cloud-services/rbac-client/dist/index.js"],"sourcesContent":["\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.StatusApi = exports.StatusApiFactory = exports.StatusApiFp = exports.StatusApiAxiosParamCreator = exports.RoleApi = exports.RoleApiFactory = exports.RoleApiFp = exports.RoleApiAxiosParamCreator = exports.PrincipalApi = exports.PrincipalApiFactory = exports.PrincipalApiFp = exports.PrincipalApiAxiosParamCreator = exports.PolicyApi = exports.PolicyApiFactory = exports.PolicyApiFp = exports.PolicyApiAxiosParamCreator = exports.PermissionApi = exports.PermissionApiFactory = exports.PermissionApiFp = exports.PermissionApiAxiosParamCreator = exports.GroupApi = exports.GroupApiFactory = exports.GroupApiFp = exports.GroupApiAxiosParamCreator = exports.CrossAccountRequestApi = exports.CrossAccountRequestApiFactory = exports.CrossAccountRequestApiFp = exports.CrossAccountRequestApiAxiosParamCreator = exports.AccessApi = exports.AccessApiFactory = exports.AccessApiFp = exports.AccessApiAxiosParamCreator = exports.ResourceDefinitionFilterOperationEnum = exports.CrossAccountRequestUpdateInStatusEnum = exports.CrossAccountRequestPatchStatusEnum = void 0;\nvar globalImportUrl = require(\"url\");\nvar axios_1 = require(\"axios\");\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar base_1 = require(\"./base\");\n/**\n    * @export\n    * @enum {string}\n    */\nvar CrossAccountRequestPatchStatusEnum;\n(function (CrossAccountRequestPatchStatusEnum) {\n    CrossAccountRequestPatchStatusEnum[\"Pending\"] = \"pending\";\n    CrossAccountRequestPatchStatusEnum[\"Approved\"] = \"approved\";\n    CrossAccountRequestPatchStatusEnum[\"Expired\"] = \"expired\";\n    CrossAccountRequestPatchStatusEnum[\"Cancelled\"] = \"cancelled\";\n    CrossAccountRequestPatchStatusEnum[\"Denied\"] = \"denied\";\n})(CrossAccountRequestPatchStatusEnum = exports.CrossAccountRequestPatchStatusEnum || (exports.CrossAccountRequestPatchStatusEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar CrossAccountRequestUpdateInStatusEnum;\n(function (CrossAccountRequestUpdateInStatusEnum) {\n    CrossAccountRequestUpdateInStatusEnum[\"Pending\"] = \"pending\";\n    CrossAccountRequestUpdateInStatusEnum[\"Approved\"] = \"approved\";\n    CrossAccountRequestUpdateInStatusEnum[\"Expired\"] = \"expired\";\n    CrossAccountRequestUpdateInStatusEnum[\"Cancelled\"] = \"cancelled\";\n    CrossAccountRequestUpdateInStatusEnum[\"Denied\"] = \"denied\";\n})(CrossAccountRequestUpdateInStatusEnum = exports.CrossAccountRequestUpdateInStatusEnum || (exports.CrossAccountRequestUpdateInStatusEnum = {}));\n/**\n    * @export\n    * @enum {string}\n    */\nvar ResourceDefinitionFilterOperationEnum;\n(function (ResourceDefinitionFilterOperationEnum) {\n    ResourceDefinitionFilterOperationEnum[\"Equal\"] = \"equal\";\n    ResourceDefinitionFilterOperationEnum[\"In\"] = \"in\";\n})(ResourceDefinitionFilterOperationEnum = exports.ResourceDefinitionFilterOperationEnum || (exports.ResourceDefinitionFilterOperationEnum = {}));\n/**\n * AccessApi - axios parameter creator\n * @export\n */\nvar AccessApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {'application' | 'resource_type' | 'verb'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-application\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, orderBy, limit, offset, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'application' is not null or undefined\n                    if (application === null || application === undefined) {\n                        throw new base_1.RequiredError('application', 'Required parameter application was null or undefined when calling getPrincipalAccess.');\n                    }\n                    localVarPath = \"/access/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (application !== undefined) {\n                        localVarQueryParameter['application'] = application;\n                    }\n                    if (username !== undefined) {\n                        localVarQueryParameter['username'] = username;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\nexports.AccessApiAxiosParamCreator = AccessApiAxiosParamCreator;\n/**\n * AccessApi - functional programming interface\n * @export\n */\nvar AccessApiFp = function (configuration) {\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {'application' | 'resource_type' | 'verb'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-application\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, orderBy, limit, offset, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.AccessApiAxiosParamCreator)(configuration).getPrincipalAccess(application, username, orderBy, limit, offset, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\nexports.AccessApiFp = AccessApiFp;\n/**\n * AccessApi - factory interface\n * @export\n */\nvar AccessApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * Access responses are sorted in ascending order by an ID internal to the database\n         * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n         * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {'application' | 'resource_type' | 'verb'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-application\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalAccess: function (application, username, orderBy, limit, offset, options) {\n            return (0, exports.AccessApiFp)(configuration).getPrincipalAccess(application, username, orderBy, limit, offset, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\nexports.AccessApiFactory = AccessApiFactory;\n/**\n * AccessApi - object-oriented interface\n * @export\n * @class AccessApi\n * @extends {BaseAPI}\n */\nvar AccessApi = /** @class */ (function (_super) {\n    __extends(AccessApi, _super);\n    function AccessApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * Access responses are sorted in ascending order by an ID internal to the database\n     * @summary Get the permitted access for a principal in the tenant (defaults to principal from the identity header)\n     * @param {string} application The application name(s) to obtain access for the principal. This is an exact match. When no application is supplied, all permissions for the principal are returned. You may also use a comma-separated list to match on multiple applications.\n     * @param {string} [username] Unique username of the principal to obtain access for (only available for admins, and if supplied, takes precedence over the identity header).\n     * @param {'application' | 'resource_type' | 'verb'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-application\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof AccessApi\n     */\n    AccessApi.prototype.getPrincipalAccess = function (application, username, orderBy, limit, offset, options) {\n        var _this = this;\n        return (0, exports.AccessApiFp)(this.configuration).getPrincipalAccess(application, username, orderBy, limit, offset, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return AccessApi;\n}(base_1.BaseAPI));\nexports.AccessApi = AccessApi;\n/**\n * CrossAccountRequestApi - axios parameter creator\n * @export\n */\nvar CrossAccountRequestApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         *\n         * @summary Create a cross account request\n         * @param {CrossAccountRequestIn} crossAccountRequestIn CrossAccountRequest to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCrossAccountRequests: function (crossAccountRequestIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'crossAccountRequestIn' is not null or undefined\n                    if (crossAccountRequestIn === null || crossAccountRequestIn === undefined) {\n                        throw new base_1.RequiredError('crossAccountRequestIn', 'Required parameter crossAccountRequestIn was null or undefined when calling createCrossAccountRequests.');\n                    }\n                    localVarPath = \"/cross-account-requests/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof crossAccountRequestIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(crossAccountRequestIn !== undefined ? crossAccountRequestIn : {}) : (crossAccountRequestIn || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {'user_id' | 'target_account'} [queryBy] Parameter for filtering resource by either a user\\&#39;s ID, or a client\\&#39;s account number. The default value is target_account.\n         * @param {string} [account] Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by&#x3D;user_id to further filter a user\\&#39;s requests by account number.\n         * @param {'true'} [approvedOnly] Parameter for filtering resource which have been approved.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCrossAccountRequest: function (uuid, queryBy, account, approvedOnly, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getCrossAccountRequest.');\n                    }\n                    localVarPath = \"/cross-account-requests/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (queryBy !== undefined) {\n                        localVarQueryParameter['query_by'] = queryBy;\n                    }\n                    if (account !== undefined) {\n                        localVarQueryParameter['account'] = account;\n                    }\n                    if (approvedOnly !== undefined) {\n                        localVarQueryParameter['approved_only'] = approvedOnly;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by created_at\n         * @summary List the cross account requests for a user or account\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'user_id' | 'target_account'} [queryBy] Parameter for filtering resource by either a user\\&#39;s ID, or a client\\&#39;s account number. The default value is target_account.\n         * @param {string} [account] Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by&#x3D;user_id to further filter a user\\&#39;s requests by account number.\n         * @param {'true'} [approvedOnly] Parameter for filtering resource which have been approved.\n         * @param {'pending' | 'approved' | 'denied' | 'cancelled' | 'expired'} [status] Parameter for filtering resource based on status.\n         * @param {'request_id' | 'start_date' | 'end_date' | 'created' | 'modified' | 'status'} [orderBy] Parameter for ordering by field. For inverse ordering, use \\&#39;-\\&#39;, e.g. ?order_by&#x3D;-start_date.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCrossAccountRequests: function (limit, offset, queryBy, account, approvedOnly, status, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/cross-account-requests/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (queryBy !== undefined) {\n                        localVarQueryParameter['query_by'] = queryBy;\n                    }\n                    if (account !== undefined) {\n                        localVarQueryParameter['account'] = account;\n                    }\n                    if (approvedOnly !== undefined) {\n                        localVarQueryParameter['approved_only'] = approvedOnly;\n                    }\n                    if (status !== undefined) {\n                        localVarQueryParameter['status'] = status;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * Update a cross account request\n         * @summary Update a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {CrossAccountRequestPatch} crossAccountRequestPatch Updates to CrossAccountRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchCrossAccountRequest: function (uuid, crossAccountRequestPatch, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling patchCrossAccountRequest.');\n                    }\n                    // verify required parameter 'crossAccountRequestPatch' is not null or undefined\n                    if (crossAccountRequestPatch === null || crossAccountRequestPatch === undefined) {\n                        throw new base_1.RequiredError('crossAccountRequestPatch', 'Required parameter crossAccountRequestPatch was null or undefined when calling patchCrossAccountRequest.');\n                    }\n                    localVarPath = \"/cross-account-requests/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof crossAccountRequestPatch !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(crossAccountRequestPatch !== undefined ? crossAccountRequestPatch : {}) : (crossAccountRequestPatch || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * Update a cross account request\n         * @summary Update a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {CrossAccountRequestUpdateIn} crossAccountRequestUpdateIn Updates to CrossAccountRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        putCrossAccountRequest: function (uuid, crossAccountRequestUpdateIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling putCrossAccountRequest.');\n                    }\n                    // verify required parameter 'crossAccountRequestUpdateIn' is not null or undefined\n                    if (crossAccountRequestUpdateIn === null || crossAccountRequestUpdateIn === undefined) {\n                        throw new base_1.RequiredError('crossAccountRequestUpdateIn', 'Required parameter crossAccountRequestUpdateIn was null or undefined when calling putCrossAccountRequest.');\n                    }\n                    localVarPath = \"/cross-account-requests/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof crossAccountRequestUpdateIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(crossAccountRequestUpdateIn !== undefined ? crossAccountRequestUpdateIn : {}) : (crossAccountRequestUpdateIn || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\nexports.CrossAccountRequestApiAxiosParamCreator = CrossAccountRequestApiAxiosParamCreator;\n/**\n * CrossAccountRequestApi - functional programming interface\n * @export\n */\nvar CrossAccountRequestApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a cross account request\n         * @param {CrossAccountRequestIn} crossAccountRequestIn CrossAccountRequest to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCrossAccountRequests: function (crossAccountRequestIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.CrossAccountRequestApiAxiosParamCreator)(configuration).createCrossAccountRequests(crossAccountRequestIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {'user_id' | 'target_account'} [queryBy] Parameter for filtering resource by either a user\\&#39;s ID, or a client\\&#39;s account number. The default value is target_account.\n         * @param {string} [account] Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by&#x3D;user_id to further filter a user\\&#39;s requests by account number.\n         * @param {'true'} [approvedOnly] Parameter for filtering resource which have been approved.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCrossAccountRequest: function (uuid, queryBy, account, approvedOnly, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.CrossAccountRequestApiAxiosParamCreator)(configuration).getCrossAccountRequest(uuid, queryBy, account, approvedOnly, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by created_at\n         * @summary List the cross account requests for a user or account\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'user_id' | 'target_account'} [queryBy] Parameter for filtering resource by either a user\\&#39;s ID, or a client\\&#39;s account number. The default value is target_account.\n         * @param {string} [account] Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by&#x3D;user_id to further filter a user\\&#39;s requests by account number.\n         * @param {'true'} [approvedOnly] Parameter for filtering resource which have been approved.\n         * @param {'pending' | 'approved' | 'denied' | 'cancelled' | 'expired'} [status] Parameter for filtering resource based on status.\n         * @param {'request_id' | 'start_date' | 'end_date' | 'created' | 'modified' | 'status'} [orderBy] Parameter for ordering by field. For inverse ordering, use \\&#39;-\\&#39;, e.g. ?order_by&#x3D;-start_date.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCrossAccountRequests: function (limit, offset, queryBy, account, approvedOnly, status, orderBy, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.CrossAccountRequestApiAxiosParamCreator)(configuration).listCrossAccountRequests(limit, offset, queryBy, account, approvedOnly, status, orderBy, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Update a cross account request\n         * @summary Update a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {CrossAccountRequestPatch} crossAccountRequestPatch Updates to CrossAccountRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchCrossAccountRequest: function (uuid, crossAccountRequestPatch, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.CrossAccountRequestApiAxiosParamCreator)(configuration).patchCrossAccountRequest(uuid, crossAccountRequestPatch, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * Update a cross account request\n         * @summary Update a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {CrossAccountRequestUpdateIn} crossAccountRequestUpdateIn Updates to CrossAccountRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        putCrossAccountRequest: function (uuid, crossAccountRequestUpdateIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.CrossAccountRequestApiAxiosParamCreator)(configuration).putCrossAccountRequest(uuid, crossAccountRequestUpdateIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\nexports.CrossAccountRequestApiFp = CrossAccountRequestApiFp;\n/**\n * CrossAccountRequestApi - factory interface\n * @export\n */\nvar CrossAccountRequestApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Create a cross account request\n         * @param {CrossAccountRequestIn} crossAccountRequestIn CrossAccountRequest to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createCrossAccountRequests: function (crossAccountRequestIn, options) {\n            return (0, exports.CrossAccountRequestApiFp)(configuration).createCrossAccountRequests(crossAccountRequestIn, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Get a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {'user_id' | 'target_account'} [queryBy] Parameter for filtering resource by either a user\\&#39;s ID, or a client\\&#39;s account number. The default value is target_account.\n         * @param {string} [account] Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by&#x3D;user_id to further filter a user\\&#39;s requests by account number.\n         * @param {'true'} [approvedOnly] Parameter for filtering resource which have been approved.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getCrossAccountRequest: function (uuid, queryBy, account, approvedOnly, options) {\n            return (0, exports.CrossAccountRequestApiFp)(configuration).getCrossAccountRequest(uuid, queryBy, account, approvedOnly, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * By default, responses are sorted in ascending order by created_at\n         * @summary List the cross account requests for a user or account\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'user_id' | 'target_account'} [queryBy] Parameter for filtering resource by either a user\\&#39;s ID, or a client\\&#39;s account number. The default value is target_account.\n         * @param {string} [account] Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by&#x3D;user_id to further filter a user\\&#39;s requests by account number.\n         * @param {'true'} [approvedOnly] Parameter for filtering resource which have been approved.\n         * @param {'pending' | 'approved' | 'denied' | 'cancelled' | 'expired'} [status] Parameter for filtering resource based on status.\n         * @param {'request_id' | 'start_date' | 'end_date' | 'created' | 'modified' | 'status'} [orderBy] Parameter for ordering by field. For inverse ordering, use \\&#39;-\\&#39;, e.g. ?order_by&#x3D;-start_date.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCrossAccountRequests: function (limit, offset, queryBy, account, approvedOnly, status, orderBy, options) {\n            return (0, exports.CrossAccountRequestApiFp)(configuration).listCrossAccountRequests(limit, offset, queryBy, account, approvedOnly, status, orderBy, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Update a cross account request\n         * @summary Update a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {CrossAccountRequestPatch} crossAccountRequestPatch Updates to CrossAccountRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchCrossAccountRequest: function (uuid, crossAccountRequestPatch, options) {\n            return (0, exports.CrossAccountRequestApiFp)(configuration).patchCrossAccountRequest(uuid, crossAccountRequestPatch, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * Update a cross account request\n         * @summary Update a cross account request\n         * @param {string} uuid ID of cross account request to get\n         * @param {CrossAccountRequestUpdateIn} crossAccountRequestUpdateIn Updates to CrossAccountRequest\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        putCrossAccountRequest: function (uuid, crossAccountRequestUpdateIn, options) {\n            return (0, exports.CrossAccountRequestApiFp)(configuration).putCrossAccountRequest(uuid, crossAccountRequestUpdateIn, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\nexports.CrossAccountRequestApiFactory = CrossAccountRequestApiFactory;\n/**\n * CrossAccountRequestApi - object-oriented interface\n * @export\n * @class CrossAccountRequestApi\n * @extends {BaseAPI}\n */\nvar CrossAccountRequestApi = /** @class */ (function (_super) {\n    __extends(CrossAccountRequestApi, _super);\n    function CrossAccountRequestApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Create a cross account request\n     * @param {CrossAccountRequestIn} crossAccountRequestIn CrossAccountRequest to create\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CrossAccountRequestApi\n     */\n    CrossAccountRequestApi.prototype.createCrossAccountRequests = function (crossAccountRequestIn, options) {\n        var _this = this;\n        return (0, exports.CrossAccountRequestApiFp)(this.configuration).createCrossAccountRequests(crossAccountRequestIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Get a cross account request\n     * @param {string} uuid ID of cross account request to get\n     * @param {'user_id' | 'target_account'} [queryBy] Parameter for filtering resource by either a user\\&#39;s ID, or a client\\&#39;s account number. The default value is target_account.\n     * @param {string} [account] Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by&#x3D;user_id to further filter a user\\&#39;s requests by account number.\n     * @param {'true'} [approvedOnly] Parameter for filtering resource which have been approved.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CrossAccountRequestApi\n     */\n    CrossAccountRequestApi.prototype.getCrossAccountRequest = function (uuid, queryBy, account, approvedOnly, options) {\n        var _this = this;\n        return (0, exports.CrossAccountRequestApiFp)(this.configuration).getCrossAccountRequest(uuid, queryBy, account, approvedOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * By default, responses are sorted in ascending order by created_at\n     * @summary List the cross account requests for a user or account\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'user_id' | 'target_account'} [queryBy] Parameter for filtering resource by either a user\\&#39;s ID, or a client\\&#39;s account number. The default value is target_account.\n     * @param {string} [account] Parameter for filtering resource by an account number. Value can be a comma-separated list of ids. To be used in tandem with ?query_by&#x3D;user_id to further filter a user\\&#39;s requests by account number.\n     * @param {'true'} [approvedOnly] Parameter for filtering resource which have been approved.\n     * @param {'pending' | 'approved' | 'denied' | 'cancelled' | 'expired'} [status] Parameter for filtering resource based on status.\n     * @param {'request_id' | 'start_date' | 'end_date' | 'created' | 'modified' | 'status'} [orderBy] Parameter for ordering by field. For inverse ordering, use \\&#39;-\\&#39;, e.g. ?order_by&#x3D;-start_date.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CrossAccountRequestApi\n     */\n    CrossAccountRequestApi.prototype.listCrossAccountRequests = function (limit, offset, queryBy, account, approvedOnly, status, orderBy, options) {\n        var _this = this;\n        return (0, exports.CrossAccountRequestApiFp)(this.configuration).listCrossAccountRequests(limit, offset, queryBy, account, approvedOnly, status, orderBy, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Update a cross account request\n     * @summary Update a cross account request\n     * @param {string} uuid ID of cross account request to get\n     * @param {CrossAccountRequestPatch} crossAccountRequestPatch Updates to CrossAccountRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CrossAccountRequestApi\n     */\n    CrossAccountRequestApi.prototype.patchCrossAccountRequest = function (uuid, crossAccountRequestPatch, options) {\n        var _this = this;\n        return (0, exports.CrossAccountRequestApiFp)(this.configuration).patchCrossAccountRequest(uuid, crossAccountRequestPatch, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * Update a cross account request\n     * @summary Update a cross account request\n     * @param {string} uuid ID of cross account request to get\n     * @param {CrossAccountRequestUpdateIn} crossAccountRequestUpdateIn Updates to CrossAccountRequest\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CrossAccountRequestApi\n     */\n    CrossAccountRequestApi.prototype.putCrossAccountRequest = function (uuid, crossAccountRequestUpdateIn, options) {\n        var _this = this;\n        return (0, exports.CrossAccountRequestApiFp)(this.configuration).putCrossAccountRequest(uuid, crossAccountRequestUpdateIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return CrossAccountRequestApi;\n}(base_1.BaseAPI));\nexports.CrossAccountRequestApi = CrossAccountRequestApi;\n/**\n * GroupApi - axios parameter creator\n * @export\n */\nvar GroupApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling addPrincipalToGroup.');\n                    }\n                    // verify required parameter 'groupPrincipalIn' is not null or undefined\n                    if (groupPrincipalIn === null || groupPrincipalIn === undefined) {\n                        throw new base_1.RequiredError('groupPrincipalIn', 'Required parameter groupPrincipalIn was null or undefined when calling addPrincipalToGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/principals/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof groupPrincipalIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(groupPrincipalIn !== undefined ? groupPrincipalIn : {}) : (groupPrincipalIn || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling addRoleToGroup.');\n                    }\n                    // verify required parameter 'groupRoleIn' is not null or undefined\n                    if (groupRoleIn === null || groupRoleIn === undefined) {\n                        throw new base_1.RequiredError('groupRoleIn', 'Required parameter groupRoleIn was null or undefined when calling addRoleToGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/roles/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof groupRoleIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(groupRoleIn !== undefined ? groupRoleIn : {}) : (groupRoleIn || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'group' is not null or undefined\n                    if (group === null || group === undefined) {\n                        throw new base_1.RequiredError('group', 'Required parameter group was null or undefined when calling createGroup.');\n                    }\n                    localVarPath = \"/groups/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof group !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(group !== undefined ? group : {}) : (group || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deletePrincipalFromGroup.');\n                    }\n                    // verify required parameter 'usernames' is not null or undefined\n                    if (usernames === null || usernames === undefined) {\n                        throw new base_1.RequiredError('usernames', 'Required parameter usernames was null or undefined when calling deletePrincipalFromGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/principals/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (usernames !== undefined) {\n                        localVarQueryParameter['usernames'] = usernames;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteRoleFromGroup.');\n                    }\n                    // verify required parameter 'roles' is not null or undefined\n                    if (roles === null || roles === undefined) {\n                        throw new base_1.RequiredError('roles', 'Required parameter roles was null or undefined when calling deleteRoleFromGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/roles/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (roles !== undefined) {\n                        localVarQueryParameter['roles'] = roles;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getPrincipalsFromGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/principals/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (principalUsername !== undefined) {\n                        localVarQueryParameter['principal_username'] = principalUsername;\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name or display_name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {'name' | 'modified' | 'principalCount' | 'policyCount'} [orderBy] Parameter for ordering groups by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {boolean} [platformDefault] An optional flag to return either platform default or non-platform default groups.\n         * @param {boolean} [adminDefault] An optional flag to return either admin default or non-admin default groups.\n         * @param {boolean} [system] An optional flag to return either system or non-system groups.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, platformDefault, adminDefault, system, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/groups/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (name !== undefined) {\n                        localVarQueryParameter['name'] = name;\n                    }\n                    if (nameMatch !== undefined) {\n                        localVarQueryParameter['name_match'] = nameMatch;\n                    }\n                    if (scope !== undefined) {\n                        localVarQueryParameter['scope'] = scope;\n                    }\n                    if (username !== undefined) {\n                        localVarQueryParameter['username'] = username;\n                    }\n                    if (uuid) {\n                        localVarQueryParameter['uuid'] = uuid.join(base_1.COLLECTION_FORMATS.csv);\n                    }\n                    if (roleNames) {\n                        localVarQueryParameter['role_names'] = roleNames.join(base_1.COLLECTION_FORMATS.csv);\n                    }\n                    if (roleDiscriminator !== undefined) {\n                        localVarQueryParameter['role_discriminator'] = roleDiscriminator;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    if (platformDefault !== undefined) {\n                        localVarQueryParameter['platform_default'] = platformDefault;\n                    }\n                    if (adminDefault !== undefined) {\n                        localVarQueryParameter['admin_default'] = adminDefault;\n                    }\n                    if (system !== undefined) {\n                        localVarQueryParameter['system'] = system;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDisplayName] Parameter for filtering group roles by role &#x60;display_name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {boolean} [roleSystem] Parameter for filtering group roles by system flag.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'display_name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDisplayName, roleDescription, roleSystem, limit, offset, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling listRolesForGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/roles/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (exclude !== undefined) {\n                        localVarQueryParameter['exclude'] = exclude;\n                    }\n                    if (roleName !== undefined) {\n                        localVarQueryParameter['role_name'] = roleName;\n                    }\n                    if (roleDisplayName !== undefined) {\n                        localVarQueryParameter['role_display_name'] = roleDisplayName;\n                    }\n                    if (roleDescription !== undefined) {\n                        localVarQueryParameter['role_description'] = roleDescription;\n                    }\n                    if (roleSystem !== undefined) {\n                        localVarQueryParameter['role_system'] = roleSystem;\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Update a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updateGroup.');\n                    }\n                    // verify required parameter 'group' is not null or undefined\n                    if (group === null || group === undefined) {\n                        throw new base_1.RequiredError('group', 'Required parameter group was null or undefined when calling updateGroup.');\n                    }\n                    localVarPath = \"/groups/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof group !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(group !== undefined ? group : {}) : (group || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\nexports.GroupApiAxiosParamCreator = GroupApiAxiosParamCreator;\n/**\n * GroupApi - functional programming interface\n * @export\n */\nvar GroupApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).addRoleToGroup(uuid, groupRoleIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).createGroup(group, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).deleteGroup(uuid, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).deletePrincipalFromGroup(uuid, usernames, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).deleteRoleFromGroup(uuid, roles, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).getGroup(uuid, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name or display_name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {'name' | 'modified' | 'principalCount' | 'policyCount'} [orderBy] Parameter for ordering groups by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {boolean} [platformDefault] An optional flag to return either platform default or non-platform default groups.\n         * @param {boolean} [adminDefault] An optional flag to return either admin default or non-admin default groups.\n         * @param {boolean} [system] An optional flag to return either system or non-system groups.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, platformDefault, adminDefault, system, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).listGroups(limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, platformDefault, adminDefault, system, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDisplayName] Parameter for filtering group roles by role &#x60;display_name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {boolean} [roleSystem] Parameter for filtering group roles by system flag.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'display_name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDisplayName, roleDescription, roleSystem, limit, offset, orderBy, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).listRolesForGroup(uuid, exclude, roleName, roleDisplayName, roleDescription, roleSystem, limit, offset, orderBy, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Update a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.GroupApiAxiosParamCreator)(configuration).updateGroup(uuid, group, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\nexports.GroupApiFp = GroupApiFp;\n/**\n * GroupApi - factory interface\n * @export\n */\nvar GroupApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Add a principal to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addPrincipalToGroup: function (uuid, groupPrincipalIn, options) {\n            return (0, exports.GroupApiFp)(configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Add a role to a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {GroupRoleIn} groupRoleIn Role to add to a group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        addRoleToGroup: function (uuid, groupRoleIn, options) {\n            return (0, exports.GroupApiFp)(configuration).addRoleToGroup(uuid, groupRoleIn, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Create a group in a tenant\n         * @param {Group} group Group to create in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createGroup: function (group, options) {\n            return (0, exports.GroupApiFp)(configuration).createGroup(group, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Delete a group in the tenant\n         * @param {string} uuid ID of group to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteGroup: function (uuid, options) {\n            return (0, exports.GroupApiFp)(configuration).deleteGroup(uuid, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Remove a principal from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePrincipalFromGroup: function (uuid, usernames, options) {\n            return (0, exports.GroupApiFp)(configuration).deletePrincipalFromGroup(uuid, usernames, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Remove a role from a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRoleFromGroup: function (uuid, roles, options) {\n            return (0, exports.GroupApiFp)(configuration).deleteRoleFromGroup(uuid, roles, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Get a group in the tenant\n         * @param {string} uuid ID of group to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getGroup: function (uuid, options) {\n            return (0, exports.GroupApiFp)(configuration).getGroup(uuid, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary Get a list of principals from a group in the tenant\n         * @param {string} uuid ID of group from which to get principals\n         * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPrincipalsFromGroup: function (uuid, principalUsername, limit, offset, orderBy, options) {\n            return (0, exports.GroupApiFp)(configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * By default, responses are sorted in ascending order by group name\n         * @summary List the groups for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name or display_name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [username] A username for a principal to filter for groups\n         * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n         * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n         * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n         * @param {'name' | 'modified' | 'principalCount' | 'policyCount'} [orderBy] Parameter for ordering groups by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {boolean} [platformDefault] An optional flag to return either platform default or non-platform default groups.\n         * @param {boolean} [adminDefault] An optional flag to return either admin default or non-admin default groups.\n         * @param {boolean} [system] An optional flag to return either system or non-system groups.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listGroups: function (limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, platformDefault, adminDefault, system, options) {\n            return (0, exports.GroupApiFp)(configuration).listGroups(limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, platformDefault, adminDefault, system, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a group in the tenant\n         * @param {string} uuid ID of group\n         * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n         * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n         * @param {string} [roleDisplayName] Parameter for filtering group roles by role &#x60;display_name&#x60; using string contains search.\n         * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n         * @param {boolean} [roleSystem] Parameter for filtering group roles by system flag.\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'name' | 'display_name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRolesForGroup: function (uuid, exclude, roleName, roleDisplayName, roleDescription, roleSystem, limit, offset, orderBy, options) {\n            return (0, exports.GroupApiFp)(configuration).listRolesForGroup(uuid, exclude, roleName, roleDisplayName, roleDescription, roleSystem, limit, offset, orderBy, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Update a group in the tenant\n         * @param {string} uuid ID of group to update\n         * @param {Group} group Group to update in tenant\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateGroup: function (uuid, group, options) {\n            return (0, exports.GroupApiFp)(configuration).updateGroup(uuid, group, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\nexports.GroupApiFactory = GroupApiFactory;\n/**\n * GroupApi - object-oriented interface\n * @export\n * @class GroupApi\n * @extends {BaseAPI}\n */\nvar GroupApi = /** @class */ (function (_super) {\n    __extends(GroupApi, _super);\n    function GroupApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Add a principal to a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {GroupPrincipalIn} groupPrincipalIn Principal to add to a group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.addPrincipalToGroup = function (uuid, groupPrincipalIn, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).addPrincipalToGroup(uuid, groupPrincipalIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Add a role to a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {GroupRoleIn} groupRoleIn Role to add to a group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.addRoleToGroup = function (uuid, groupRoleIn, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).addRoleToGroup(uuid, groupRoleIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Create a group in a tenant\n     * @param {Group} group Group to create in tenant\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.createGroup = function (group, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).createGroup(group, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Delete a group in the tenant\n     * @param {string} uuid ID of group to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deleteGroup = function (uuid, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).deleteGroup(uuid, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Remove a principal from a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {string} usernames A comma separated list of usernames for principals to remove from the group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deletePrincipalFromGroup = function (uuid, usernames, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).deletePrincipalFromGroup(uuid, usernames, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Remove a role from a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {string} roles A comma separated list of role UUIDs for roles to remove from the group\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.deleteRoleFromGroup = function (uuid, roles, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).deleteRoleFromGroup(uuid, roles, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Get a group in the tenant\n     * @param {string} uuid ID of group to get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.getGroup = function (uuid, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).getGroup(uuid, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * By default, responses are sorted in ascending order by username\n     * @summary Get a list of principals from a group in the tenant\n     * @param {string} uuid ID of group from which to get principals\n     * @param {string} [principalUsername] Parameter for filtering group principals by principal &#x60;username&#x60; using string contains search.\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.getPrincipalsFromGroup = function (uuid, principalUsername, limit, offset, orderBy, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).getPrincipalsFromGroup(uuid, principalUsername, limit, offset, orderBy, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * By default, responses are sorted in ascending order by group name\n     * @summary List the groups for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name or display_name.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {string} [username] A username for a principal to filter for groups\n     * @param {Array<string>} [uuid] A list of UUIDs to filter listed groups.\n     * @param {Array<string>} [roleNames] List of role name to filter for groups. It is exact match but case-insensitive\n     * @param {'all' | 'any'} [roleDiscriminator] Discriminator that works with role_names to indicate matching all/any of the role names\n     * @param {'name' | 'modified' | 'principalCount' | 'policyCount'} [orderBy] Parameter for ordering groups by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {boolean} [platformDefault] An optional flag to return either platform default or non-platform default groups.\n     * @param {boolean} [adminDefault] An optional flag to return either admin default or non-admin default groups.\n     * @param {boolean} [system] An optional flag to return either system or non-system groups.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.listGroups = function (limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, platformDefault, adminDefault, system, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).listGroups(limit, offset, name, nameMatch, scope, username, uuid, roleNames, roleDiscriminator, orderBy, platformDefault, adminDefault, system, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * By default, responses are sorted in ascending order by role name\n     * @summary List the roles for a group in the tenant\n     * @param {string} uuid ID of group\n     * @param {boolean} [exclude] If this is set to true, the result would be roles excluding the ones in the group\n     * @param {string} [roleName] Parameter for filtering group roles by role &#x60;name&#x60; using string contains search.\n     * @param {string} [roleDisplayName] Parameter for filtering group roles by role &#x60;display_name&#x60; using string contains search.\n     * @param {string} [roleDescription] Parameter for filtering group roles by role &#x60;description&#x60; using string contains search.\n     * @param {boolean} [roleSystem] Parameter for filtering group roles by system flag.\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'name' | 'display_name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.listRolesForGroup = function (uuid, exclude, roleName, roleDisplayName, roleDescription, roleSystem, limit, offset, orderBy, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).listRolesForGroup(uuid, exclude, roleName, roleDisplayName, roleDescription, roleSystem, limit, offset, orderBy, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Update a group in the tenant\n     * @param {string} uuid ID of group to update\n     * @param {Group} group Group to update in tenant\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof GroupApi\n     */\n    GroupApi.prototype.updateGroup = function (uuid, group, options) {\n        var _this = this;\n        return (0, exports.GroupApiFp)(this.configuration).updateGroup(uuid, group, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return GroupApi;\n}(base_1.BaseAPI));\nexports.GroupApi = GroupApi;\n/**\n * PermissionApi - axios parameter creator\n * @export\n */\nvar PermissionApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * By default, options of application is returned. And could be resource_type or verb on demand.\n         * @summary List the available options for fields of permissions for a tenant\n         * @param {'application' | 'resource_type' | 'verb'} field specify which fields of permission to display\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [application] Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.\n         * @param {string} [resourceType] Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.\n         * @param {string} [verb] Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.\n         * @param {'true' | 'false'} [excludeGlobals] If set to \\&#39;true\\&#39;, this will exclude any permission option with a global allowance on the supplied \\&#39;?field&#x3D;\\&#39; value of \\&#39;application\\&#39;, \\&#39;resource_type\\&#39; or \\&#39;verb\\&#39;. The default is \\&#39;false\\&#39;.\n         * @param {'true' | 'false'} [allowedOnly] If set to \\&#39;true\\&#39;, this will exclude any permission with a role where the \\&#39;application\\&#39; is not in the role create allow list.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissionOptions: function (field, limit, offset, application, resourceType, verb, excludeGlobals, allowedOnly, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'field' is not null or undefined\n                    if (field === null || field === undefined) {\n                        throw new base_1.RequiredError('field', 'Required parameter field was null or undefined when calling listPermissionOptions.');\n                    }\n                    localVarPath = \"/permissions/options/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (field !== undefined) {\n                        localVarQueryParameter['field'] = field;\n                    }\n                    if (application !== undefined) {\n                        localVarQueryParameter['application'] = application;\n                    }\n                    if (resourceType !== undefined) {\n                        localVarQueryParameter['resource_type'] = resourceType;\n                    }\n                    if (verb !== undefined) {\n                        localVarQueryParameter['verb'] = verb;\n                    }\n                    if (excludeGlobals !== undefined) {\n                        localVarQueryParameter['exclude_globals'] = excludeGlobals;\n                    }\n                    if (allowedOnly !== undefined) {\n                        localVarQueryParameter['allowed_only'] = allowedOnly;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by permission application.\n         * @summary List the permissions for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'application' | 'resource_type' | 'verb' | 'permission'} [orderBy] Parameter for ordering permissions by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-application\n         * @param {string} [application] Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [resourceType] Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.\n         * @param {string} [verb] Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.\n         * @param {string} [permission] Partial match for the aggregate permission value name of a permission object.\n         * @param {'true' | 'false'} [excludeGlobals] If set to \\&#39;true\\&#39;, this will exclude any permission with a global allowance on either \\&#39;application\\&#39;, \\&#39;resource_type\\&#39; or \\&#39;verb\\&#39;. The default is \\&#39;false\\&#39;.\n         * @param {string} [excludeRoles] An optional string filter which accepts one or more role UUIDs, comma-separated, to return permissions not associated with the supplied role(s).\n         * @param {'true' | 'false'} [allowedOnly] If set to \\&#39;true\\&#39;, this will exclude any permission with a role where the \\&#39;application\\&#39; is not in the role create allow list.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissions: function (limit, offset, orderBy, application, resourceType, verb, permission, excludeGlobals, excludeRoles, allowedOnly, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/permissions/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    if (application !== undefined) {\n                        localVarQueryParameter['application'] = application;\n                    }\n                    if (resourceType !== undefined) {\n                        localVarQueryParameter['resource_type'] = resourceType;\n                    }\n                    if (verb !== undefined) {\n                        localVarQueryParameter['verb'] = verb;\n                    }\n                    if (permission !== undefined) {\n                        localVarQueryParameter['permission'] = permission;\n                    }\n                    if (excludeGlobals !== undefined) {\n                        localVarQueryParameter['exclude_globals'] = excludeGlobals;\n                    }\n                    if (excludeRoles !== undefined) {\n                        localVarQueryParameter['exclude_roles'] = excludeRoles;\n                    }\n                    if (allowedOnly !== undefined) {\n                        localVarQueryParameter['allowed_only'] = allowedOnly;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\nexports.PermissionApiAxiosParamCreator = PermissionApiAxiosParamCreator;\n/**\n * PermissionApi - functional programming interface\n * @export\n */\nvar PermissionApiFp = function (configuration) {\n    return {\n        /**\n         * By default, options of application is returned. And could be resource_type or verb on demand.\n         * @summary List the available options for fields of permissions for a tenant\n         * @param {'application' | 'resource_type' | 'verb'} field specify which fields of permission to display\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [application] Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.\n         * @param {string} [resourceType] Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.\n         * @param {string} [verb] Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.\n         * @param {'true' | 'false'} [excludeGlobals] If set to \\&#39;true\\&#39;, this will exclude any permission option with a global allowance on the supplied \\&#39;?field&#x3D;\\&#39; value of \\&#39;application\\&#39;, \\&#39;resource_type\\&#39; or \\&#39;verb\\&#39;. The default is \\&#39;false\\&#39;.\n         * @param {'true' | 'false'} [allowedOnly] If set to \\&#39;true\\&#39;, this will exclude any permission with a role where the \\&#39;application\\&#39; is not in the role create allow list.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissionOptions: function (field, limit, offset, application, resourceType, verb, excludeGlobals, allowedOnly, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.PermissionApiAxiosParamCreator)(configuration).listPermissionOptions(field, limit, offset, application, resourceType, verb, excludeGlobals, allowedOnly, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by permission application.\n         * @summary List the permissions for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'application' | 'resource_type' | 'verb' | 'permission'} [orderBy] Parameter for ordering permissions by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-application\n         * @param {string} [application] Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [resourceType] Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.\n         * @param {string} [verb] Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.\n         * @param {string} [permission] Partial match for the aggregate permission value name of a permission object.\n         * @param {'true' | 'false'} [excludeGlobals] If set to \\&#39;true\\&#39;, this will exclude any permission with a global allowance on either \\&#39;application\\&#39;, \\&#39;resource_type\\&#39; or \\&#39;verb\\&#39;. The default is \\&#39;false\\&#39;.\n         * @param {string} [excludeRoles] An optional string filter which accepts one or more role UUIDs, comma-separated, to return permissions not associated with the supplied role(s).\n         * @param {'true' | 'false'} [allowedOnly] If set to \\&#39;true\\&#39;, this will exclude any permission with a role where the \\&#39;application\\&#39; is not in the role create allow list.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissions: function (limit, offset, orderBy, application, resourceType, verb, permission, excludeGlobals, excludeRoles, allowedOnly, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.PermissionApiAxiosParamCreator)(configuration).listPermissions(limit, offset, orderBy, application, resourceType, verb, permission, excludeGlobals, excludeRoles, allowedOnly, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\nexports.PermissionApiFp = PermissionApiFp;\n/**\n * PermissionApi - factory interface\n * @export\n */\nvar PermissionApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * By default, options of application is returned. And could be resource_type or verb on demand.\n         * @summary List the available options for fields of permissions for a tenant\n         * @param {'application' | 'resource_type' | 'verb'} field specify which fields of permission to display\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [application] Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.\n         * @param {string} [resourceType] Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.\n         * @param {string} [verb] Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.\n         * @param {'true' | 'false'} [excludeGlobals] If set to \\&#39;true\\&#39;, this will exclude any permission option with a global allowance on the supplied \\&#39;?field&#x3D;\\&#39; value of \\&#39;application\\&#39;, \\&#39;resource_type\\&#39; or \\&#39;verb\\&#39;. The default is \\&#39;false\\&#39;.\n         * @param {'true' | 'false'} [allowedOnly] If set to \\&#39;true\\&#39;, this will exclude any permission with a role where the \\&#39;application\\&#39; is not in the role create allow list.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissionOptions: function (field, limit, offset, application, resourceType, verb, excludeGlobals, allowedOnly, options) {\n            return (0, exports.PermissionApiFp)(configuration).listPermissionOptions(field, limit, offset, application, resourceType, verb, excludeGlobals, allowedOnly, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * By default, responses are sorted in ascending order by permission application.\n         * @summary List the permissions for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'application' | 'resource_type' | 'verb' | 'permission'} [orderBy] Parameter for ordering permissions by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-application\n         * @param {string} [application] Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [resourceType] Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.\n         * @param {string} [verb] Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.\n         * @param {string} [permission] Partial match for the aggregate permission value name of a permission object.\n         * @param {'true' | 'false'} [excludeGlobals] If set to \\&#39;true\\&#39;, this will exclude any permission with a global allowance on either \\&#39;application\\&#39;, \\&#39;resource_type\\&#39; or \\&#39;verb\\&#39;. The default is \\&#39;false\\&#39;.\n         * @param {string} [excludeRoles] An optional string filter which accepts one or more role UUIDs, comma-separated, to return permissions not associated with the supplied role(s).\n         * @param {'true' | 'false'} [allowedOnly] If set to \\&#39;true\\&#39;, this will exclude any permission with a role where the \\&#39;application\\&#39; is not in the role create allow list.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPermissions: function (limit, offset, orderBy, application, resourceType, verb, permission, excludeGlobals, excludeRoles, allowedOnly, options) {\n            return (0, exports.PermissionApiFp)(configuration).listPermissions(limit, offset, orderBy, application, resourceType, verb, permission, excludeGlobals, excludeRoles, allowedOnly, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\nexports.PermissionApiFactory = PermissionApiFactory;\n/**\n * PermissionApi - object-oriented interface\n * @export\n * @class PermissionApi\n * @extends {BaseAPI}\n */\nvar PermissionApi = /** @class */ (function (_super) {\n    __extends(PermissionApi, _super);\n    function PermissionApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * By default, options of application is returned. And could be resource_type or verb on demand.\n     * @summary List the available options for fields of permissions for a tenant\n     * @param {'application' | 'resource_type' | 'verb'} field specify which fields of permission to display\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [application] Filter returned options based on application. You may also use a comma-separated list to filter on multiple applications.\n     * @param {string} [resourceType] Filter returned options based on resource_type. You may also use a comma-separated list to filter on multiple resource_types.\n     * @param {string} [verb] Filter returned options based on verb. You may also use a comma-separated list to filter on multiple verbs.\n     * @param {'true' | 'false'} [excludeGlobals] If set to \\&#39;true\\&#39;, this will exclude any permission option with a global allowance on the supplied \\&#39;?field&#x3D;\\&#39; value of \\&#39;application\\&#39;, \\&#39;resource_type\\&#39; or \\&#39;verb\\&#39;. The default is \\&#39;false\\&#39;.\n     * @param {'true' | 'false'} [allowedOnly] If set to \\&#39;true\\&#39;, this will exclude any permission with a role where the \\&#39;application\\&#39; is not in the role create allow list.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PermissionApi\n     */\n    PermissionApi.prototype.listPermissionOptions = function (field, limit, offset, application, resourceType, verb, excludeGlobals, allowedOnly, options) {\n        var _this = this;\n        return (0, exports.PermissionApiFp)(this.configuration).listPermissionOptions(field, limit, offset, application, resourceType, verb, excludeGlobals, allowedOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * By default, responses are sorted in ascending order by permission application.\n     * @summary List the permissions for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'application' | 'resource_type' | 'verb' | 'permission'} [orderBy] Parameter for ordering permissions by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-application\n     * @param {string} [application] Exact match for the application name of a permission. You may also use a comma-separated list to match on multiple applications.\n     * @param {string} [resourceType] Exact match for the resource type name of a permission. You may also use a comma-separated list to match on multiple resource_types.\n     * @param {string} [verb] Exact match for the operation verb name of a permission You may also use a comma-separated list to match on multiple verbs.\n     * @param {string} [permission] Partial match for the aggregate permission value name of a permission object.\n     * @param {'true' | 'false'} [excludeGlobals] If set to \\&#39;true\\&#39;, this will exclude any permission with a global allowance on either \\&#39;application\\&#39;, \\&#39;resource_type\\&#39; or \\&#39;verb\\&#39;. The default is \\&#39;false\\&#39;.\n     * @param {string} [excludeRoles] An optional string filter which accepts one or more role UUIDs, comma-separated, to return permissions not associated with the supplied role(s).\n     * @param {'true' | 'false'} [allowedOnly] If set to \\&#39;true\\&#39;, this will exclude any permission with a role where the \\&#39;application\\&#39; is not in the role create allow list.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PermissionApi\n     */\n    PermissionApi.prototype.listPermissions = function (limit, offset, orderBy, application, resourceType, verb, permission, excludeGlobals, excludeRoles, allowedOnly, options) {\n        var _this = this;\n        return (0, exports.PermissionApiFp)(this.configuration).listPermissions(limit, offset, orderBy, application, resourceType, verb, permission, excludeGlobals, excludeRoles, allowedOnly, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return PermissionApi;\n}(base_1.BaseAPI));\nexports.PermissionApi = PermissionApi;\n/**\n * PolicyApi - axios parameter creator\n * @export\n */\nvar PolicyApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'policyIn' is not null or undefined\n                    if (policyIn === null || policyIn === undefined) {\n                        throw new base_1.RequiredError('policyIn', 'Required parameter policyIn was null or undefined when calling createPolicies.');\n                    }\n                    localVarPath = \"/policies/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof policyIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(policyIn !== undefined ? policyIn : {}) : (policyIn || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deletePolicy.');\n                    }\n                    localVarPath = \"/policies/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getPolicy.');\n                    }\n                    localVarPath = \"/policies/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {'name' | 'modified'} [orderBy] Parameter for ordering policies by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/policies/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (name !== undefined) {\n                        localVarQueryParameter['name'] = name;\n                    }\n                    if (scope !== undefined) {\n                        localVarQueryParameter['scope'] = scope;\n                    }\n                    if (groupName !== undefined) {\n                        localVarQueryParameter['group_name'] = groupName;\n                    }\n                    if (groupUuid !== undefined) {\n                        localVarQueryParameter['group_uuid'] = groupUuid;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updatePolicy.');\n                    }\n                    // verify required parameter 'policyIn' is not null or undefined\n                    if (policyIn === null || policyIn === undefined) {\n                        throw new base_1.RequiredError('policyIn', 'Required parameter policyIn was null or undefined when calling updatePolicy.');\n                    }\n                    localVarPath = \"/policies/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof policyIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(policyIn !== undefined ? policyIn : {}) : (policyIn || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\nexports.PolicyApiAxiosParamCreator = PolicyApiAxiosParamCreator;\n/**\n * PolicyApi - functional programming interface\n * @export\n */\nvar PolicyApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.PolicyApiAxiosParamCreator)(configuration).createPolicies(policyIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.PolicyApiAxiosParamCreator)(configuration).deletePolicy(uuid, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.PolicyApiAxiosParamCreator)(configuration).getPolicy(uuid, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {'name' | 'modified'} [orderBy] Parameter for ordering policies by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.PolicyApiAxiosParamCreator)(configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.PolicyApiAxiosParamCreator)(configuration).updatePolicy(uuid, policyIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\nexports.PolicyApiFp = PolicyApiFp;\n/**\n * PolicyApi - factory interface\n * @export\n */\nvar PolicyApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Create a policy in a tenant\n         * @param {PolicyIn} policyIn Policy to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createPolicies: function (policyIn, options) {\n            return (0, exports.PolicyApiFp)(configuration).createPolicies(policyIn, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Delete a policy in the tenant\n         * @param {string} uuid ID of policy to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deletePolicy: function (uuid, options) {\n            return (0, exports.PolicyApiFp)(configuration).deletePolicy(uuid, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Get a policy in the tenant\n         * @param {string} uuid ID of policy to get\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getPolicy: function (uuid, options) {\n            return (0, exports.PolicyApiFp)(configuration).getPolicy(uuid, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * By default, responses are sorted in ascending order by policy name\n         * @summary List the policies in the tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n         * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n         * @param {'name' | 'modified'} [orderBy] Parameter for ordering policies by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPolicies: function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n            return (0, exports.PolicyApiFp)(configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Update a policy in the tenant\n         * @param {string} uuid ID of policy to update\n         * @param {PolicyIn} policyIn Policy to update\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updatePolicy: function (uuid, policyIn, options) {\n            return (0, exports.PolicyApiFp)(configuration).updatePolicy(uuid, policyIn, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\nexports.PolicyApiFactory = PolicyApiFactory;\n/**\n * PolicyApi - object-oriented interface\n * @export\n * @class PolicyApi\n * @extends {BaseAPI}\n */\nvar PolicyApi = /** @class */ (function (_super) {\n    __extends(PolicyApi, _super);\n    function PolicyApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Create a policy in a tenant\n     * @param {PolicyIn} policyIn Policy to create\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.createPolicies = function (policyIn, options) {\n        var _this = this;\n        return (0, exports.PolicyApiFp)(this.configuration).createPolicies(policyIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Delete a policy in the tenant\n     * @param {string} uuid ID of policy to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.deletePolicy = function (uuid, options) {\n        var _this = this;\n        return (0, exports.PolicyApiFp)(this.configuration).deletePolicy(uuid, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Get a policy in the tenant\n     * @param {string} uuid ID of policy to get\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.getPolicy = function (uuid, options) {\n        var _this = this;\n        return (0, exports.PolicyApiFp)(this.configuration).getPolicy(uuid, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * By default, responses are sorted in ascending order by policy name\n     * @summary List the policies in the tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {string} [groupName] Parameter for filtering resource by group name using string contains search.\n     * @param {string} [groupUuid] Parameter for filtering resource by group uuid using UUID exact match.\n     * @param {'name' | 'modified'} [orderBy] Parameter for ordering policies by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.listPolicies = function (limit, offset, name, scope, groupName, groupUuid, orderBy, options) {\n        var _this = this;\n        return (0, exports.PolicyApiFp)(this.configuration).listPolicies(limit, offset, name, scope, groupName, groupUuid, orderBy, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Update a policy in the tenant\n     * @param {string} uuid ID of policy to update\n     * @param {PolicyIn} policyIn Policy to update\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PolicyApi\n     */\n    PolicyApi.prototype.updatePolicy = function (uuid, policyIn, options) {\n        var _this = this;\n        return (0, exports.PolicyApiFp)(this.configuration).updatePolicy(uuid, policyIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return PolicyApi;\n}(base_1.BaseAPI));\nexports.PolicyApi = PolicyApi;\n/**\n * PrincipalApi - axios parameter creator\n * @export\n */\nvar PrincipalApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'partial' | 'exact'} [matchCriteria] Parameter for specifying the matching criteria for an object\\&#39;s name and/or email. Currently, match_criteria of partial searches for a username/email using \\&quot;starts with\\&quot; pattern.\n         * @param {string} [usernames] Comma separated usernames of principals to get. If match_criteria is specified, only the first username will be picked up for search.\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending. Defaults to ascending.\n         * @param {string} [email] E-mail address of principal to search for. Could be combined with match_criteria for searching.\n         * @param {'enabled' | 'disabled' | 'all'} [status] Set the status of users to get back.\n         * @param {'true' | 'false'} [adminOnly] Get only admin users within an account. Setting this would ignore the parameters: usernames, email\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, matchCriteria, usernames, sortOrder, email, status, adminOnly, orderBy, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/principals/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (matchCriteria !== undefined) {\n                        localVarQueryParameter['match_criteria'] = matchCriteria;\n                    }\n                    if (usernames !== undefined) {\n                        localVarQueryParameter['usernames'] = usernames;\n                    }\n                    if (sortOrder !== undefined) {\n                        localVarQueryParameter['sort_order'] = sortOrder;\n                    }\n                    if (email !== undefined) {\n                        localVarQueryParameter['email'] = email;\n                    }\n                    if (status !== undefined) {\n                        localVarQueryParameter['status'] = status;\n                    }\n                    if (adminOnly !== undefined) {\n                        localVarQueryParameter['admin_only'] = adminOnly;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\nexports.PrincipalApiAxiosParamCreator = PrincipalApiAxiosParamCreator;\n/**\n * PrincipalApi - functional programming interface\n * @export\n */\nvar PrincipalApiFp = function (configuration) {\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'partial' | 'exact'} [matchCriteria] Parameter for specifying the matching criteria for an object\\&#39;s name and/or email. Currently, match_criteria of partial searches for a username/email using \\&quot;starts with\\&quot; pattern.\n         * @param {string} [usernames] Comma separated usernames of principals to get. If match_criteria is specified, only the first username will be picked up for search.\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending. Defaults to ascending.\n         * @param {string} [email] E-mail address of principal to search for. Could be combined with match_criteria for searching.\n         * @param {'enabled' | 'disabled' | 'all'} [status] Set the status of users to get back.\n         * @param {'true' | 'false'} [adminOnly] Get only admin users within an account. Setting this would ignore the parameters: usernames, email\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, matchCriteria, usernames, sortOrder, email, status, adminOnly, orderBy, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.PrincipalApiAxiosParamCreator)(configuration).listPrincipals(limit, offset, matchCriteria, usernames, sortOrder, email, status, adminOnly, orderBy, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\nexports.PrincipalApiFp = PrincipalApiFp;\n/**\n * PrincipalApi - factory interface\n * @export\n */\nvar PrincipalApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         * By default, responses are sorted in ascending order by username\n         * @summary List the principals for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {'partial' | 'exact'} [matchCriteria] Parameter for specifying the matching criteria for an object\\&#39;s name and/or email. Currently, match_criteria of partial searches for a username/email using \\&quot;starts with\\&quot; pattern.\n         * @param {string} [usernames] Comma separated usernames of principals to get. If match_criteria is specified, only the first username will be picked up for search.\n         * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending. Defaults to ascending.\n         * @param {string} [email] E-mail address of principal to search for. Could be combined with match_criteria for searching.\n         * @param {'enabled' | 'disabled' | 'all'} [status] Set the status of users to get back.\n         * @param {'true' | 'false'} [adminOnly] Get only admin users within an account. Setting this would ignore the parameters: usernames, email\n         * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listPrincipals: function (limit, offset, matchCriteria, usernames, sortOrder, email, status, adminOnly, orderBy, options) {\n            return (0, exports.PrincipalApiFp)(configuration).listPrincipals(limit, offset, matchCriteria, usernames, sortOrder, email, status, adminOnly, orderBy, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\nexports.PrincipalApiFactory = PrincipalApiFactory;\n/**\n * PrincipalApi - object-oriented interface\n * @export\n * @class PrincipalApi\n * @extends {BaseAPI}\n */\nvar PrincipalApi = /** @class */ (function (_super) {\n    __extends(PrincipalApi, _super);\n    function PrincipalApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     * By default, responses are sorted in ascending order by username\n     * @summary List the principals for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {'partial' | 'exact'} [matchCriteria] Parameter for specifying the matching criteria for an object\\&#39;s name and/or email. Currently, match_criteria of partial searches for a username/email using \\&quot;starts with\\&quot; pattern.\n     * @param {string} [usernames] Comma separated usernames of principals to get. If match_criteria is specified, only the first username will be picked up for search.\n     * @param {'asc' | 'desc'} [sortOrder] The sort order of the query, either ascending or descending. Defaults to ascending.\n     * @param {string} [email] E-mail address of principal to search for. Could be combined with match_criteria for searching.\n     * @param {'enabled' | 'disabled' | 'all'} [status] Set the status of users to get back.\n     * @param {'true' | 'false'} [adminOnly] Get only admin users within an account. Setting this would ignore the parameters: usernames, email\n     * @param {'username'} [orderBy] Parameter for ordering principals by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PrincipalApi\n     */\n    PrincipalApi.prototype.listPrincipals = function (limit, offset, matchCriteria, usernames, sortOrder, email, status, adminOnly, orderBy, options) {\n        var _this = this;\n        return (0, exports.PrincipalApiFp)(this.configuration).listPrincipals(limit, offset, matchCriteria, usernames, sortOrder, email, status, adminOnly, orderBy, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return PrincipalApi;\n}(base_1.BaseAPI));\nexports.PrincipalApi = PrincipalApi;\n/**\n * RoleApi - axios parameter creator\n * @export\n */\nvar RoleApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'roleIn' is not null or undefined\n                    if (roleIn === null || roleIn === undefined) {\n                        throw new base_1.RequiredError('roleIn', 'Required parameter roleIn was null or undefined when calling createRoles.');\n                    }\n                    localVarPath = \"/roles/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'POST' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof roleIn !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(roleIn !== undefined ? roleIn : {}) : (roleIn || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling deleteRole.');\n                    }\n                    localVarPath = \"/roles/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'DELETE' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, scope, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getRole.');\n                    }\n                    localVarPath = \"/roles/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (scope !== undefined) {\n                        localVarQueryParameter['scope'] = scope;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling getRoleAccess.');\n                    }\n                    localVarPath = \"/roles/{uuid}/access/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {boolean} [system] Parameter for filtering resource by system flag.\n         * @param {string} [displayName] Parameter for filtering resource by display_name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name or display_name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {'name' | 'display_name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {string} [application] The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [permission] The permission(s) to filter roles by. This is an exact match. You may also use a comma-separated list to match on multiple permissions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, system, displayName, nameMatch, scope, orderBy, addFields, username, application, permission, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/roles/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    if (limit !== undefined) {\n                        localVarQueryParameter['limit'] = limit;\n                    }\n                    if (offset !== undefined) {\n                        localVarQueryParameter['offset'] = offset;\n                    }\n                    if (name !== undefined) {\n                        localVarQueryParameter['name'] = name;\n                    }\n                    if (system !== undefined) {\n                        localVarQueryParameter['system'] = system;\n                    }\n                    if (displayName !== undefined) {\n                        localVarQueryParameter['display_name'] = displayName;\n                    }\n                    if (nameMatch !== undefined) {\n                        localVarQueryParameter['name_match'] = nameMatch;\n                    }\n                    if (scope !== undefined) {\n                        localVarQueryParameter['scope'] = scope;\n                    }\n                    if (orderBy !== undefined) {\n                        localVarQueryParameter['order_by'] = orderBy;\n                    }\n                    if (addFields) {\n                        localVarQueryParameter['add_fields'] = addFields.join(base_1.COLLECTION_FORMATS.csv);\n                    }\n                    if (username !== undefined) {\n                        localVarQueryParameter['username'] = username;\n                    }\n                    if (application !== undefined) {\n                        localVarQueryParameter['application'] = application;\n                    }\n                    if (permission !== undefined) {\n                        localVarQueryParameter['permission'] = permission;\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Patch a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RolePatch} [rolePatch] Patch to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchRole: function (uuid, rolePatch, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling patchRole.');\n                    }\n                    localVarPath = \"/roles/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PATCH' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof rolePatch !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(rolePatch !== undefined ? rolePatch : {}) : (rolePatch || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions, needsSerialization;\n                return __generator(this, function (_a) {\n                    // verify required parameter 'uuid' is not null or undefined\n                    if (uuid === null || uuid === undefined) {\n                        throw new base_1.RequiredError('uuid', 'Required parameter uuid was null or undefined when calling updateRole.');\n                    }\n                    // verify required parameter 'roleWithAccess' is not null or undefined\n                    if (roleWithAccess === null || roleWithAccess === undefined) {\n                        throw new base_1.RequiredError('roleWithAccess', 'Required parameter roleWithAccess was null or undefined when calling updateRole.');\n                    }\n                    localVarPath = \"/roles/{uuid}/\"\n                        .replace(\"{\".concat(\"uuid\", \"}\"), encodeURIComponent(String(uuid)));\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'PUT' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarHeaderParameter['Content-Type'] = 'application/json';\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    needsSerialization = (typeof roleWithAccess !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n                    localVarRequestOptions.data = needsSerialization ? JSON.stringify(roleWithAccess !== undefined ? roleWithAccess : {}) : (roleWithAccess || \"\");\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\nexports.RoleApiAxiosParamCreator = RoleApiAxiosParamCreator;\n/**\n * RoleApi - functional programming interface\n * @export\n */\nvar RoleApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.RoleApiAxiosParamCreator)(configuration).createRoles(roleIn, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.RoleApiAxiosParamCreator)(configuration).deleteRole(uuid, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, scope, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.RoleApiAxiosParamCreator)(configuration).getRole(uuid, scope, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.RoleApiAxiosParamCreator)(configuration).getRoleAccess(uuid, limit, offset, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {boolean} [system] Parameter for filtering resource by system flag.\n         * @param {string} [displayName] Parameter for filtering resource by display_name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name or display_name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {'name' | 'display_name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {string} [application] The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [permission] The permission(s) to filter roles by. This is an exact match. You may also use a comma-separated list to match on multiple permissions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, system, displayName, nameMatch, scope, orderBy, addFields, username, application, permission, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.RoleApiAxiosParamCreator)(configuration).listRoles(limit, offset, name, system, displayName, nameMatch, scope, orderBy, addFields, username, application, permission, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Patch a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RolePatch} [rolePatch] Patch to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchRole: function (uuid, rolePatch, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.RoleApiAxiosParamCreator)(configuration).patchRole(uuid, rolePatch, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.RoleApiAxiosParamCreator)(configuration).updateRole(uuid, roleWithAccess, options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\nexports.RoleApiFp = RoleApiFp;\n/**\n * RoleApi - factory interface\n * @export\n */\nvar RoleApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Create a roles for a tenant\n         * @param {RoleIn} roleIn Role to create\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createRoles: function (roleIn, options) {\n            return (0, exports.RoleApiFp)(configuration).createRoles(roleIn, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Delete a role in the tenant\n         * @param {string} uuid ID of role to delete\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteRole: function (uuid, options) {\n            return (0, exports.RoleApiFp)(configuration).deleteRole(uuid, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Get a role in the tenant\n         * @param {string} uuid ID of role to get\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRole: function (uuid, scope, options) {\n            return (0, exports.RoleApiFp)(configuration).getRole(uuid, scope, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Get access for a role in the tenant\n         * @param {string} uuid ID of the role\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getRoleAccess: function (uuid, limit, offset, options) {\n            return (0, exports.RoleApiFp)(configuration).getRoleAccess(uuid, limit, offset, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         * By default, responses are sorted in ascending order by role name\n         * @summary List the roles for a tenant\n         * @param {number} [limit] Parameter for selecting the amount of data returned.\n         * @param {number} [offset] Parameter for selecting the offset of data.\n         * @param {string} [name] Parameter for filtering resource by name using string contains search.\n         * @param {boolean} [system] Parameter for filtering resource by system flag.\n         * @param {string} [displayName] Parameter for filtering resource by display_name using string contains search.\n         * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name or display_name.\n         * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n         * @param {'name' | 'display_name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n         * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n         * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n         * @param {string} [application] The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.\n         * @param {string} [permission] The permission(s) to filter roles by. This is an exact match. You may also use a comma-separated list to match on multiple permissions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listRoles: function (limit, offset, name, system, displayName, nameMatch, scope, orderBy, addFields, username, application, permission, options) {\n            return (0, exports.RoleApiFp)(configuration).listRoles(limit, offset, name, system, displayName, nameMatch, scope, orderBy, addFields, username, application, permission, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Patch a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RolePatch} [rolePatch] Patch to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        patchRole: function (uuid, rolePatch, options) {\n            return (0, exports.RoleApiFp)(configuration).patchRole(uuid, rolePatch, options).then(function (request) { return request(axios, basePath); });\n        },\n        /**\n         *\n         * @summary Update a Role in the tenant\n         * @param {string} uuid ID of role to update\n         * @param {RoleWithAccess} roleWithAccess Update to a Role\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        updateRole: function (uuid, roleWithAccess, options) {\n            return (0, exports.RoleApiFp)(configuration).updateRole(uuid, roleWithAccess, options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\nexports.RoleApiFactory = RoleApiFactory;\n/**\n * RoleApi - object-oriented interface\n * @export\n * @class RoleApi\n * @extends {BaseAPI}\n */\nvar RoleApi = /** @class */ (function (_super) {\n    __extends(RoleApi, _super);\n    function RoleApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Create a roles for a tenant\n     * @param {RoleIn} roleIn Role to create\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.createRoles = function (roleIn, options) {\n        var _this = this;\n        return (0, exports.RoleApiFp)(this.configuration).createRoles(roleIn, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Delete a role in the tenant\n     * @param {string} uuid ID of role to delete\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.deleteRole = function (uuid, options) {\n        var _this = this;\n        return (0, exports.RoleApiFp)(this.configuration).deleteRole(uuid, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Get a role in the tenant\n     * @param {string} uuid ID of role to get\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.getRole = function (uuid, scope, options) {\n        var _this = this;\n        return (0, exports.RoleApiFp)(this.configuration).getRole(uuid, scope, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Get access for a role in the tenant\n     * @param {string} uuid ID of the role\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.getRoleAccess = function (uuid, limit, offset, options) {\n        var _this = this;\n        return (0, exports.RoleApiFp)(this.configuration).getRoleAccess(uuid, limit, offset, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     * By default, responses are sorted in ascending order by role name\n     * @summary List the roles for a tenant\n     * @param {number} [limit] Parameter for selecting the amount of data returned.\n     * @param {number} [offset] Parameter for selecting the offset of data.\n     * @param {string} [name] Parameter for filtering resource by name using string contains search.\n     * @param {boolean} [system] Parameter for filtering resource by system flag.\n     * @param {string} [displayName] Parameter for filtering resource by display_name using string contains search.\n     * @param {'partial' | 'exact'} [nameMatch] Parameter for specifying the matching criteria for an object\\&#39;s name or display_name.\n     * @param {'account' | 'principal'} [scope] Parameter for filtering resource by scope.\n     * @param {'name' | 'display_name' | 'modified' | 'policyCount'} [orderBy] Parameter for ordering roles by value. For inverse ordering, supply \\&#39;-\\&#39; before the param value, such as: ?order_by&#x3D;-name\n     * @param {Array<'groups_in' | 'groups_in_count'>} [addFields] Parameter for add list of fields to display for roles.\n     * @param {string} [username] Unique username of the principal to obtain roles for (only available for admins, and if supplied, takes precedence over the identity header).\n     * @param {string} [application] The application name(s) to filter roles by, from permissions. This is an exact match. You may also use a comma-separated list to match on multiple applications.\n     * @param {string} [permission] The permission(s) to filter roles by. This is an exact match. You may also use a comma-separated list to match on multiple permissions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.listRoles = function (limit, offset, name, system, displayName, nameMatch, scope, orderBy, addFields, username, application, permission, options) {\n        var _this = this;\n        return (0, exports.RoleApiFp)(this.configuration).listRoles(limit, offset, name, system, displayName, nameMatch, scope, orderBy, addFields, username, application, permission, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Patch a Role in the tenant\n     * @param {string} uuid ID of role to update\n     * @param {RolePatch} [rolePatch] Patch to a Role\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.patchRole = function (uuid, rolePatch, options) {\n        var _this = this;\n        return (0, exports.RoleApiFp)(this.configuration).patchRole(uuid, rolePatch, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    /**\n     *\n     * @summary Update a Role in the tenant\n     * @param {string} uuid ID of role to update\n     * @param {RoleWithAccess} roleWithAccess Update to a Role\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RoleApi\n     */\n    RoleApi.prototype.updateRole = function (uuid, roleWithAccess, options) {\n        var _this = this;\n        return (0, exports.RoleApiFp)(this.configuration).updateRole(uuid, roleWithAccess, options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return RoleApi;\n}(base_1.BaseAPI));\nexports.RoleApi = RoleApi;\n/**\n * StatusApi - axios parameter creator\n * @export\n */\nvar StatusApiAxiosParamCreator = function (configuration) {\n    var _this = this;\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            if (options === void 0) { options = {}; }\n            return __awaiter(_this, void 0, void 0, function () {\n                var localVarPath, localVarUrlObj, baseOptions, localVarRequestOptions, localVarHeaderParameter, localVarQueryParameter, headersFromBaseOptions;\n                return __generator(this, function (_a) {\n                    localVarPath = \"/status/\";\n                    localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n                    if (configuration) {\n                        baseOptions = configuration.baseOptions;\n                    }\n                    localVarRequestOptions = __assign(__assign({ method: 'GET' }, baseOptions), options);\n                    localVarHeaderParameter = {};\n                    localVarQueryParameter = {};\n                    // authentication basic_auth required\n                    // http basic authentication required\n                    if (configuration && (configuration.username || configuration.password)) {\n                        localVarRequestOptions[\"auth\"] = { username: configuration.username, password: configuration.password };\n                    }\n                    localVarUrlObj.query = __assign(__assign(__assign({}, localVarUrlObj.query), localVarQueryParameter), options.query);\n                    // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n                    delete localVarUrlObj.search;\n                    headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n                    localVarRequestOptions.headers = __assign(__assign(__assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n                    return [2 /*return*/, {\n                            url: globalImportUrl.format(localVarUrlObj),\n                            options: localVarRequestOptions,\n                        }];\n                });\n            });\n        },\n    };\n};\nexports.StatusApiAxiosParamCreator = StatusApiAxiosParamCreator;\n/**\n * StatusApi - functional programming interface\n * @export\n */\nvar StatusApiFp = function (configuration) {\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            return __awaiter(this, void 0, void 0, function () {\n                var localVarAxiosArgs;\n                return __generator(this, function (_a) {\n                    switch (_a.label) {\n                        case 0: return [4 /*yield*/, (0, exports.StatusApiAxiosParamCreator)(configuration).getStatus(options)];\n                        case 1:\n                            localVarAxiosArgs = _a.sent();\n                            return [2 /*return*/, function (axios, basePath) {\n                                    if (axios === void 0) { axios = axios_1.default; }\n                                    if (basePath === void 0) { basePath = base_1.BASE_PATH; }\n                                    var axiosRequestArgs = __assign(__assign({}, localVarAxiosArgs.options), { url: basePath + localVarAxiosArgs.url });\n                                    return axios.request(axiosRequestArgs);\n                                }];\n                    }\n                });\n            });\n        },\n    };\n};\nexports.StatusApiFp = StatusApiFp;\n/**\n * StatusApi - factory interface\n * @export\n */\nvar StatusApiFactory = function (configuration, basePath, axios) {\n    return {\n        /**\n         *\n         * @summary Obtain server status\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getStatus: function (options) {\n            return (0, exports.StatusApiFp)(configuration).getStatus(options).then(function (request) { return request(axios, basePath); });\n        },\n    };\n};\nexports.StatusApiFactory = StatusApiFactory;\n/**\n * StatusApi - object-oriented interface\n * @export\n * @class StatusApi\n * @extends {BaseAPI}\n */\nvar StatusApi = /** @class */ (function (_super) {\n    __extends(StatusApi, _super);\n    function StatusApi() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    /**\n     *\n     * @summary Obtain server status\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof StatusApi\n     */\n    StatusApi.prototype.getStatus = function (options) {\n        var _this = this;\n        return (0, exports.StatusApiFp)(this.configuration).getStatus(options).then(function (request) { return request(_this.axios, _this.basePath); });\n    };\n    return StatusApi;\n}(base_1.BaseAPI));\nexports.StatusApi = StatusApi;\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.RequiredError = exports.BaseAPI = exports.COLLECTION_FORMATS = exports.BASE_PATH = void 0;\n// Some imports not used depending on template conditions\n// @ts-ignore\nvar axios_1 = require(\"axios\");\nexports.BASE_PATH = \"https://raw.githubusercontent.com/api/rbac/v1\".replace(/\\/+$/, \"\");\n/**\n *\n * @export\n */\nexports.COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n/**\n *\n * @export\n * @class BaseAPI\n */\nvar BaseAPI = /** @class */ (function () {\n    function BaseAPI(configuration, basePath, axios) {\n        if (basePath === void 0) { basePath = exports.BASE_PATH; }\n        if (axios === void 0) { axios = axios_1.default; }\n        this.basePath = basePath;\n        this.axios = axios;\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n    return BaseAPI;\n}());\nexports.BaseAPI = BaseAPI;\n;\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nvar RequiredError = /** @class */ (function (_super) {\n    __extends(RequiredError, _super);\n    function RequiredError(field, msg) {\n        var _this = _super.call(this, msg) || this;\n        _this.field = field;\n        _this.name = \"RequiredError\";\n        return _this;\n    }\n    return RequiredError;\n}(Error));\nexports.RequiredError = RequiredError;\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Configuration = void 0;\nvar Configuration = /** @class */ (function () {\n    function Configuration(param) {\n        if (param === void 0) { param = {}; }\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n    }\n    return Configuration;\n}());\nexports.Configuration = Configuration;\n","\"use strict\";\n// tslint:disable\n/**\n * Role Based Access Control\n * The API for Role Based Access Control.\n *\n * The version of the OpenAPI document: 1.0.0\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __exportStar = (this && this.__exportStar) || function(m, exports) {\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__exportStar(require(\"./api\"), exports);\n__exportStar(require(\"./configuration\"), exports);\n"],"names":["extendStatics","__extends","this","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","Symbol","iterator","v","op","pop","push","defineProperty","exports","StatusApi","StatusApiFactory","StatusApiFp","StatusApiAxiosParamCreator","RoleApi","RoleApiFactory","RoleApiFp","RoleApiAxiosParamCreator","PrincipalApi","PrincipalApiFactory","PrincipalApiFp","PrincipalApiAxiosParamCreator","PolicyApi","PolicyApiFactory","PolicyApiFp","PolicyApiAxiosParamCreator","PermissionApi","PermissionApiFactory","PermissionApiFp","PermissionApiAxiosParamCreator","GroupApi","GroupApiFactory","GroupApiFp","GroupApiAxiosParamCreator","CrossAccountRequestApi","CrossAccountRequestApiFactory","CrossAccountRequestApiFp","CrossAccountRequestApiAxiosParamCreator","AccessApi","AccessApiFactory","AccessApiFp","AccessApiAxiosParamCreator","ResourceDefinitionFilterOperationEnum","CrossAccountRequestUpdateInStatusEnum","CrossAccountRequestPatchStatusEnum","globalImportUrl","axios_1","base_1","configuration","_this","getPrincipalAccess","application","username","orderBy","limit","offset","options","localVarUrlObj","baseOptions","localVarRequestOptions","localVarHeaderParameter","localVarQueryParameter","headersFromBaseOptions","_a","RequiredError","parse","method","password","undefined","query","search","headers","url","format","localVarAxiosArgs","axios","basePath","default","BASE_PATH","axiosRequestArgs","request","_super","BaseAPI","createCrossAccountRequests","crossAccountRequestIn","needsSerialization","data","JSON","stringify","getCrossAccountRequest","uuid","queryBy","account","approvedOnly","localVarPath","replace","concat","encodeURIComponent","listCrossAccountRequests","status","patchCrossAccountRequest","crossAccountRequestPatch","putCrossAccountRequest","crossAccountRequestUpdateIn","addPrincipalToGroup","groupPrincipalIn","addRoleToGroup","groupRoleIn","createGroup","group","deleteGroup","deletePrincipalFromGroup","usernames","deleteRoleFromGroup","roles","getGroup","getPrincipalsFromGroup","principalUsername","listGroups","name","nameMatch","scope","roleNames","roleDiscriminator","platformDefault","adminDefault","system","join","COLLECTION_FORMATS","csv","listRolesForGroup","exclude","roleName","roleDisplayName","roleDescription","roleSystem","updateGroup","listPermissionOptions","field","resourceType","excludeGlobals","allowedOnly","listPermissions","permission","excludeRoles","createPolicies","policyIn","deletePolicy","getPolicy","listPolicies","groupName","groupUuid","updatePolicy","listPrincipals","matchCriteria","sortOrder","email","adminOnly","createRoles","roleIn","deleteRole","getRole","getRoleAccess","listRoles","displayName","addFields","patchRole","rolePatch","updateRole","roleWithAccess","getStatus","ssv","tsv","pipes","msg","Error","Configuration","param","apiKey","accessToken","__createBinding","o","m","k","k2","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","__exportStar"],"sourceRoot":""}