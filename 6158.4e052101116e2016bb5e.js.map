{"version":3,"file":"6158.4e052101116e2016bb5e.js","mappings":"0XAmCsD,OAAlDA,OAAOC,aAAaC,QAAQ,oBAC9B,QAAQ,CACNC,QAAQ,IAIZ,MAAMC,EAAqC,KACzC,MAAOC,EAAcC,IAAmB,IAAAC,aACjCC,EAAwBC,IAC7B,IAAAF,YAEFG,QAAQC,IAAI,4BACZ,IAAIC,GAAO,UACX,MAAMC,GAAW,IAAAC,eACXC,GAAkB,WAExB,IAAAC,YAAU,MACK,0CACXP,GAA0B,GAC1B,MAAMQ,QAAiBF,IACvBT,EAAgBW,GAChBR,GAA0B,QAE3B,CAACM,IAUJ,IAA+B,IAA3BP,GAP4B,aAAvBH,MAAAA,OAAY,EAAZA,EAAca,MAOqC,CAC1D,MACEC,KAAK,SAAEC,IACLR,EACJA,EAAO,OAAH,wBACCA,GAAI,CACPS,MAAO,CAAED,SAAAA,GACTE,kBAAmB,CAAEF,SAAAA,KAIzB,MA0BMG,EAAe,CACnBC,SA3Be,EACfC,MAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,WAAAA,EACAC,YAAAA,EACAC,YAAAA,EACAC,aAAAA,EACAC,UAAAA,EACAC,SAAAA,MAEApB,GACE,IAAAqB,iBAAgB,CACdT,MAAAA,EACAC,QAAAA,EACAC,YAAAA,EACAC,WAAAA,EACAC,YAAaA,IAAe,EAC5BC,YAAaA,IAAe,EAC5BC,aAAcA,GAAgB,IAC9BC,UAAAA,EACAC,SAAAA,OASAE,GAAW,EAAAC,EAAA,GAAYpC,OAAOqC,SAASC,WACvC,IAAEnB,EAAG,MAAEE,EAAK,YAAEkB,EAAW,WAAEC,GAAe5B,EAEhD,OACE,SAAC,uBAA0B,eAAC6B,MAAO7B,GAAI,WACrC,SAAC,aAAoB,eACnB6B,MAAO,CACLrB,SAAUD,EAAIC,SACdsB,eAAgBrB,EAAMD,SACtBmB,YAAAA,EACAC,WAAAA,EACAG,iBAAkBtC,MAAAA,OAAY,EAAZA,EAAcuC,YACjC,WAED,SAAC,EAAAC,aAAA,SAAqB,eAACJ,MAAOlB,GAAK,WACjC,SAAC,EAAAuB,cAAa,WACZ,SAAC,gBAAM,eAACC,SAAUZ,GAAQ,WACxB,SAACa,EAAA,EAAG,mBASZC,EAAmC,SAExBC,KADA,IAAAC,YAAW,EAAAC,gBAEjB,SAAC,EAAAC,mBAAkB,KAErB,SAACjD,EAAe,IAuEzB,GApEoC,IAAAkD,OAAK,KACvC,SAAC,EAAAC,SAAQ,eAACC,OAAO,OAAK,KAAQC,YAAU,WACtC,SAAC,EAAAC,aAAY,eACXC,IAAK,KACLC,UAAW,CACTC,GAAI,CACFC,OAAQ,IACN,oCACF,wBAAyB,IACvB,qCAGFzC,MAAO,IACL,qCACF0C,QAAS,IACP,qCACFC,SAAU,IACR,qCAGFC,oBAAqB,IACnB,oCAGFC,gBAAiB,IACf,qCAGFC,cAAe,IACb,qCAGF,kBAAmB,IACjB,qCAIFC,kBAAmB,IAAM,qCACzBC,oBAAqB,IAAM,qCAC3BC,kBAAmB,IAAM,kCACzBC,kBAAmB,IAAM,qCACzB,2BAA4B,IAC1B,qCAGF,cAAe,IACb,oCAGF,mBAAoB,IAClB,uCAKNC,OAAO,GAAI,WAEX,SAAC,KAAmB,WAClB,SAAC,IAAsB,WACrB,SAACC,EAAA,EAA+B,WAC9B,SAACxB,EAAa,kBCxMpByB,EAAOC,SAASC,eAAe,QAErC,YAAgB,SAAC,EAAQ,IAAKF","sources":["webpack://application-services-ui/./src/AppEntry.tsx","webpack://application-services-ui/./src/bootstrap.tsx"],"sourcesContent":["import {\n  FunctionComponent,\n  memo,\n  useContext,\n  useEffect,\n  useState,\n} from \"react\";\nimport { Provider, useDispatch } from \"react-redux\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport logger from \"redux-logger\";\nimport { inspect } from \"@xstate/inspect\";\nimport App from \"@app/App\";\nimport { useAuth, useSSOProviders } from \"@app/hooks\";\nimport { EmbeddedConfigProvider } from \"@app/providers/config/EmbeddedConfigContextProvider\";\nimport { ServiceConstantsContextProvider } from \"@app/providers/config/ServiceConstantsContextProvider\";\nimport { FeatureFlagProvider } from \"@app/providers/featureflags/FeatureFlags\";\nimport { init } from \"@app/store\";\nimport getBaseName from \"@app/utils/getBaseName\";\nimport { addNotification } from \"@redhat-cloud-services/frontend-components-notifications\";\nimport {\n  AppServicesLoading,\n  I18nProvider,\n  ModalProvider,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  Alert,\n  AlertContext,\n  AlertProps,\n  AuthContext as SharedAuthContext,\n  ConfigContext,\n} from \"@rhoas/app-services-ui-shared\";\nimport { SsoProviderAllOf } from \"@rhoas/kafka-management-sdk\";\nimport \"@rhoas/app-services-ui-components/dist/esm/index.css\";\nimport { AuthContext } from \"@app/providers/auth\";\n\nif (window.localStorage.getItem(\"xstate-inspect\") !== null) {\n  inspect({\n    iframe: false, // open in new window\n  });\n}\n\nconst AppWithKeycloak: FunctionComponent = () => {\n  const [ssoProviders, setSSOProviders] = useState<SsoProviderAllOf>();\n  const [isFetchingSSOProviders, setIsFetchingSSOProviders] =\n    useState<boolean>();\n\n  console.log(\"starting appwithkeycloak\");\n  let auth = useAuth();\n  const dispatch = useDispatch();\n  const getSSOProviders = useSSOProviders();\n\n  useEffect(() => {\n    (async () => {\n      setIsFetchingSSOProviders(true);\n      const response = await getSSOProviders();\n      setSSOProviders(response);\n      setIsFetchingSSOProviders(false);\n    })();\n  }, [getSSOProviders]);\n\n  const shouldUseMasSSO = (): boolean => {\n    return ssoProviders?.name === \"mas_sso\";\n  };\n\n  /**\n   * This is temporary check.\n   * It will be removed when we will have mas_sso to sso migration fully deployed\n   */\n  if (isFetchingSSOProviders === false && !shouldUseMasSSO()) {\n    const {\n      kas: { getToken },\n    } = auth;\n    auth = {\n      ...auth,\n      kafka: { getToken },\n      apicurio_registry: { getToken },\n    };\n  }\n\n  const addAlert = ({\n    title,\n    variant,\n    description,\n    dataTestId,\n    autoDismiss,\n    dismissable,\n    dismissDelay,\n    requestId,\n    sentryId,\n  }: AlertProps) => {\n    dispatch(\n      addNotification({\n        title,\n        variant,\n        description,\n        dataTestId,\n        autoDismiss: autoDismiss || true,\n        dismissable: dismissable || true,\n        dismissDelay: dismissDelay || 8000,\n        requestId,\n        sentryId,\n      })\n    );\n  };\n\n  const alert: Alert = {\n    addAlert,\n  };\n\n  const baseName = getBaseName(window.location.pathname);\n  const { kas, kafka, getUsername, isOrgAdmin } = auth;\n\n  return (\n    <SharedAuthContext.Provider value={auth}>\n      <AuthContext.Provider\n        value={{\n          getToken: kas.getToken,\n          getMASSSOToken: kafka.getToken,\n          getUsername,\n          isOrgAdmin,\n          tokenEndPointUrl: ssoProviders?.token_url,\n        }}\n      >\n        <AlertContext.Provider value={alert}>\n          <ModalProvider>\n            <Router basename={baseName}>\n              <App />\n            </Router>\n          </ModalProvider>\n        </AlertContext.Provider>\n      </AuthContext.Provider>\n    </SharedAuthContext.Provider>\n  );\n};\n\nconst AppWithConfig: FunctionComponent = () => {\n  const config = useContext(ConfigContext);\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n  return <AppWithKeycloak />;\n};\n\nconst AppEntry: FunctionComponent = memo(() => (\n  <Provider store={init(logger).getStore()}>\n    <I18nProvider\n      lng={\"en\"}\n      resources={{\n        en: {\n          common: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/common.json\"),\n          \"create-kafka-instance\": () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/create-kafka-instance.json\"\n            ),\n          kafka: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/kafka.json\"),\n          metrics: () =>\n            import(\"@rhoas/app-services-ui-components/locales/en/metrics.json\"),\n          overview: () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/overview.json\"\n            ),\n          datascienceoverview: () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/datascienceoverview.json\"\n            ),\n          apimgmtoverview: () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/apimgmtoverview.json\"\n            ),\n          kafkaoverview: () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/kafkaoverview.json\"\n            ),\n          \"message-browser\": () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/message-browser.json\"\n            ),\n          // temporary translations until all user facing visuals are ported to the ui components repo\n          appTemporaryFixMe: () => import(\"./locales/app-services-ui.json\"),\n          kafkaTemporaryFixMe: () => import(\"./locales/kafka-ui.json\"),\n          kasTemporaryFixMe: () => import(\"./locales/kas-ui.json\"),\n          srsTemporaryFixMe: () => import(\"./locales/srs-ui.json\"),\n          \"manage-kafka-permissions\": () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/manage-kafka-permissions.json\"\n            ),\n          \"overview-v2\": () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/overview-v2.json\"\n            ),\n          \"kafkaoverview-v2\": () =>\n            import(\n              \"@rhoas/app-services-ui-components/locales/en/kafkaoverview-v2.json\"\n            ),\n        },\n      }}\n      debug={true}\n    >\n      <FeatureFlagProvider>\n        <EmbeddedConfigProvider>\n          <ServiceConstantsContextProvider>\n            <AppWithConfig />\n          </ServiceConstantsContextProvider>\n        </EmbeddedConfigProvider>\n      </FeatureFlagProvider>\n    </I18nProvider>\n  </Provider>\n));\n\nexport default AppEntry;\n","import ReactDOM from \"react-dom\";\nimport AppEntry from \"./AppEntry\";\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.render(<AppEntry />, root);\n"],"names":["window","localStorage","getItem","iframe","AppWithKeycloak","ssoProviders","setSSOProviders","useState","isFetchingSSOProviders","setIsFetchingSSOProviders","console","log","auth","dispatch","useDispatch","getSSOProviders","useEffect","response","name","kas","getToken","kafka","apicurio_registry","alert","addAlert","title","variant","description","dataTestId","autoDismiss","dismissable","dismissDelay","requestId","sentryId","addNotification","baseName","getBaseName","location","pathname","getUsername","isOrgAdmin","value","getMASSSOToken","tokenEndPointUrl","token_url","AlertContext","ModalProvider","basename","App","AppWithConfig","undefined","useContext","ConfigContext","AppServicesLoading","memo","Provider","store","getStore","I18nProvider","lng","resources","en","common","metrics","overview","datascienceoverview","apimgmtoverview","kafkaoverview","appTemporaryFixMe","kafkaTemporaryFixMe","kasTemporaryFixMe","srsTemporaryFixMe","debug","ServiceConstantsContextProvider","root","document","getElementById"],"sourceRoot":""}