{"version":3,"sources":["webpack://mk-ui-host/./src/app/App.scss","webpack://mk-ui-host/./src/app/store/index.ts","webpack://mk-ui-host/./src/app/App.scss?af09","webpack://mk-ui-host/./src/app/utils/insights.ts","webpack://mk-ui-host/./src/app/utils/useDocumentTitle.ts","webpack://mk-ui-host/./src/app/NotFound/NotFound.tsx","webpack://mk-ui-host/./src/app/Components/Loading/Loading.tsx","webpack://mk-ui-host/./src/app/Components/FederatedModule.tsx","webpack://mk-ui-host/./src/app/Config/Config.tsx","webpack://mk-ui-host/./src/app/ControlPlanePage/ControlPlanePage.tsx","webpack://mk-ui-host/./src/app/Routes.tsx","webpack://mk-ui-host/./src/app/utils/auth/AuthContext.tsx","webpack://mk-ui-host/./src/app/utils/a11y.ts","webpack://mk-ui-host/./src/app/DataPlanePage/DataPlanePage.tsx","webpack://mk-ui-host/./src/app/App.tsx","webpack://mk-ui-host/./src/app/utils/getBaseName.ts","webpack://mk-ui-host/./src/app/utils/keycloakAuth.ts","webpack://mk-ui-host/./src/bootstrap.tsx"],"names":["___CSS_LOADER_EXPORT___","i","push","module","id","registry","options","InsightsContext","useDocumentTitle","title","originalTitle","document","NotFound","PageSection","EmptyState","variant","EmptyStateIcon","icon","ExclamationTriangleIcon","Title","headingLevel","size","EmptyStateBody","history","Button","onClick","Loading","Bullseye","Spinner","FederatedModuleContext","FederatedModuleProvider","configUrl","children","config","setConfig","controller","AbortController","signal","console","log","fetch","json","newConfig","abort","Provider","value","propTypes","FederatedModule","scope","render","url","ready","setReady","failed","setFailed","element","createElement","src","type","async","onload","onerror","error","head","appendChild","removeChild","useDynamicScript","useFederatedModule","Component","window","init","default","get","factory","Module","loadComponent","fallback","ConfigContext","undefined","routeFocusTimer","AuthContext","getToken","Promise","resolve","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","rest","routeProps","PageNotFound","component","flattenedRoutes","insights","useContext","parts","location","pathname","endsWith","split","length","FederatedTopics","getApiOpenshiftComToken","chrome","auth","apiBasePath","dataPlane","uiServerBasePath","exact","label","path","onConnectInstance","event","Error","dispatch","useDispatch","addAlert","message","addNotification","getUsername","getUser","then","user","identity","username","OpenshiftStreamsFederated","onConnectToInstance","basePath","controlPlane","serviceApiBasePath","reduce","flattened","route","routes","AppRoutes","LastLocationProvider","map","idx","key","getRegistry","register","notifications","connect","useEffect","identifyApp","on","navId","store","getStore","NotificationsPortal","release","pathName","shift","keycloak","getKeycloakInstance","onLoad","responseMode","warn","getKeyCloakToken","updateToken","token","middleware","authServerUrl","clientId","realm","setKeycloak","setLoadingKeycloak","useState","loadingKeycloak","basename"],"mappings":"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","file":"900.b0da43b41ac08a57774b.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_variables.scss\",\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_helpers.scss\"],\"names\":[],\"mappings\":\"AAAA,MACI,4BAAA,CCDJ,aACI,YAAA\",\"sourcesContent\":[\":root {\\n    --ins-color--orange: #ec7a08;\\n}\\n\\n// Spacing\\n$ins-padding: var(--pf-global--spacer--lg);\\n$ins-margin: var(--pf-global--spacer--xl);\\n$ins-gutter: var(--pf-global--gutter);\\n\\n// Font Size\\n$ins-fontSize: var(--pf-global--FontSize--md);\\n$ins-fontSize--sm: var(--pf-global--FontSize--sm);\\n$ins-fontSize--lg: var(--pf-global--FontSize--lg);\\n$ins-fontSize--xl: var(--pf-global--FontSize--xl);\\n\\n// Borders\\n$ins-borderRadius: var(--pf-global--BorderRadius--sm);\\n$ins-borderRadius--round: var(--pf-global--BorderRadius--lg);\\n\\n// Grid breakpoints\\n$ins-break--xs: var(--pf-global--breakpoint--xs);\\n$ins-break--sm: var(--pf-global--breakpoint--sm);\\n$ins-break--md: var(--pf-global--breakpoint--md);\\n$ins-break--lg: var(--pf-global--breakpoint--lg);\\n$ins-break--xl: var(--pf-global--breakpoint--xl);\\n\\n// Colors\\n$ins-color--red: var(--pf-global--danger-color--100);\\n$ins-color--critical: $ins-color--red;\\n\\n$ins-color--orange: var(--ins-color--orange);\\n$ins-color--high: $ins-color--orange;\\n\\n$ins-color--yellow: var(--pf-global--warning-color--100);\\n$ins-color--medium: $ins-color--yellow;\\n\\n$ins-color--green: var(--pf-global--success-color--100);\\n$ins-color--low: $ins-color--green;\\n\\n$ins-color--blue: var(--pf-global--info-color--100);\\n\\n$ins-color--gray: var(--pf-global--disabled-color--200);\",\"button:focus {\\n    outline:none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    //If you want to register all of your reducers, this is good place.\n    /*\n     *  registry.register({\n     *    someName: (state, action) => ({...state})\n     *  });\n     */\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\n\nexport type InsightsType = {\n  chrome: {\n    init: () => void;\n    identifyApp: (appId: string) => Promise<void>;\n    getApp: () => string;\n    getBundle: () => string;\n    getEnvironment: () => 'ci' | 'qa' | 'prod' | 'stage';\n    on: (type: string, callback: ((event: any) => void)) => void;\n    auth: {\n      getToken(): Promise<string>;\n      getUser(): Promise<UserType>;\n    };\n    isProd: boolean;\n    isBeta: () => boolean;\n    isPenTest: () => boolean;\n  };\n};\n\nexport type UserType = {\n  entitlements: {\n    [key: string]: {\n      is_entitled: boolean;\n      is_trial: boolean;\n    }\n  },\n  identity: IdentityType;\n};\n\nexport type IdentityType = {\n  account_number: string;\n  type: string;\n  internal: {\n    org_id: string;\n    account_id: string;\n  }\n  user: {\n    username: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n    is_active: boolean;\n  }\n};\n\nexport const InsightsContext = React.createContext({} as InsightsType);\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFound: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFound };\n","import React from 'react';\nimport { PageSection, Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n    <Bullseye>\n        <Spinner />\n    </Bullseye>\n);\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { Loading } from './Loading/Loading';\n\nconst FederatedModuleContext = React.createContext({});\n\nexport function FederatedModuleProvider({ configUrl, children }) {\n    const [config, setConfig] = React.useState({});\n    React.useEffect(() => {\n        const controller = new AbortController();\n        const signal = controller.signal;\n\n        (async () => {\n            console.log('Loading federated modules config');\n            const response = await fetch(configUrl, { signal });\n            const newConfig = await response.json();\n            setConfig(newConfig);\n            console.log('Done loading federated modules config', newConfig);\n        })();\n\n        return () => controller.abort();\n    }, [configUrl]);\n\n    return (\n        <FederatedModuleContext.Provider value={config}>\n            {children}\n        </FederatedModuleContext.Provider>\n    );\n}\n\nFederatedModuleProvider.propTypes = {\n    configUrl: PropTypes.string.isRequired,\n    children: PropTypes.oneOfType([\n        PropTypes.arrayOf(PropTypes.node),\n        PropTypes.node\n    ])\n};\n\nfunction useFederatedModule(module) {\n    const context = React.useContext(FederatedModuleContext);\n    return context[module];\n}\n\nfunction loadComponent(scope, module) {\n    return async () => {\n        // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n        await __webpack_init_sharing__('default');\n        const container = window[scope]; // or get the container somewhere else\n        // Initialize the container, it may provide shared modules\n        await container.init(__webpack_share_scopes__.default);\n        const factory = await window[scope].get(module);\n        const Module = factory();\n        console.log(`${Module} loaded ${module} from ${scope}`);\n        return Module;\n    };\n}\n\nconst useDynamicScript = ({ url }) => {\n    const [ready, setReady] = React.useState(false);\n    const [failed, setFailed] = React.useState(false);\n\n    React.useEffect(() => {\n        if (!url) {\n            return;\n        }\n\n        const element = document.createElement('script');\n\n        element.src = url;\n        element.type = 'text/javascript';\n        element.async = true;\n\n        setReady(false);\n        setFailed(false);\n\n        element.onload = () => {\n            console.log(`Dynamic federated module Loaded: ${url}`);\n            setReady(true);\n        };\n\n        element.onerror = () => {\n            console.error(`Dynamic federated module Error: ${url}`);\n            setReady(false);\n            setFailed(true);\n        };\n\n        document.head.appendChild(element);\n\n        return () => {\n            console.log(`Dynamic federated module Removed: ${url}`);\n            document.head.removeChild(element);\n        };\n    }, [url]);\n\n    return {\n        ready,\n        failed\n    };\n};\n\nexport function FederatedModule({ scope, module, render }) {\n    const url = useFederatedModule(scope);\n    const { ready, failed } = useDynamicScript({ url });\n\n    if (!ready || failed) {\n        return null;\n    }\n\n    const Component = React.lazy(\n        loadComponent(scope, module)\n    );\n\n    return (\n        <React.Suspense fallback={<Loading/>}>\n            {render(Component)}\n        </React.Suspense>\n    );\n}\n\n","import React from \"react\";\n\nexport type Config = {\n  controlPlane: {\n    serviceApiBasePath: string\n  }\n  dataPlane: {\n    uiServerBasePath: string\n    keycloak: {\n      authServerUrl: string,\n      clientId: string,\n      realm: string\n    }\n  }\n};\n\nexport const ConfigContext = React.createContext<Config | undefined>(undefined);\n\nexport function ConfigProvider({ configUrl, children }) {\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  React.useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async () => {\n      console.log('Loading config');\n      const response = await fetch(configUrl, { signal });\n      const newConfig = await response.json();\n      setConfig(newConfig);\n      console.log('Done loading config', newConfig);\n    })();\n\n    return () => controller.abort();\n  }, [configUrl]);\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import React, {useContext, useEffect, useState} from 'react';\nimport {useHistory} from 'react-router';\nimport {InsightsContext} from \"@app/utils/insights\";\nimport {useDispatch} from 'react-redux';\nimport {addNotification} from '@redhat-cloud-services/frontend-components-notifications/';\nimport {AlertVariant} from \"@patternfly/react-core\";\nimport {FederatedModule} from \"../Components/FederatedModule\";\nimport {ConfigContext} from \"@app/Config/Config\";\nimport {Loading} from \"@app/Components/Loading/Loading\";\n\nexport const ControlPlanePage = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n\n  const history = useHistory();\n\n  const onConnectInstance = async (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n\n    history.push(`/kafkas/${event.id}`);\n  };\n\n  const dispatch = useDispatch();\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n\n  };\n\n  if (config === undefined) {\n    return <Loading />\n  }\n\n  const getUsername = () => insights.chrome.auth.getUser().then(user => user.identity.user.username);\n\n  return (\n    <FederatedModule\n      scope=\"mkUiFrontend\"\n      module=\"./OpenshiftStreams\"\n      render={(OpenshiftStreamsFederated) =>\n        <OpenshiftStreamsFederated\n          getToken={insights.chrome.auth.getToken}\n          getUsername={getUsername}\n          onConnectToInstance={onConnectInstance}\n          addAlert={addAlert}\n          basePath={config?.controlPlane.serviceApiBasePath}\n        />}\n    />\n  );\n};\n","import React from 'react';\nimport {Route, RouteComponentProps, Switch} from 'react-router-dom';\nimport {accessibleRouteChangeHandler, useDocumentTitle} from '@app/utils';\nimport {NotFound} from '@app/NotFound/NotFound';\nimport {LastLocationProvider, useLastLocation} from 'react-router-last-location';\nimport {ControlPlanePage} from \"@app/ControlPlanePage/ControlPlanePage\";\nimport {DataPlanePage} from \"@app/DataPlanePage/DataPlanePage\";\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: DataPlanePage,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ControlPlanePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  }\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({component: Component, isAsync = false, title, ...rest}: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return <Component {...rest} {...routeProps} />;\n  }\n\n  return <Route render={routeWithTitle}/>;\n};\n\nconst PageNotFound = ({title}: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFound}/>;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <Switch>\n      {flattenedRoutes.map(({path, exact, component, title, isAsync}, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n        />\n      ))}\n      <PageNotFound title=\"404 Page Not Found\"/>\n    </Switch>\n  </LastLocationProvider>\n);\n\nexport {AppRoutes, routes};\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n    getToken: () => Promise.resolve('')\n  }\n);\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","import React, {useContext} from 'react';\nimport {InsightsContext} from \"@app/utils\";\nimport {RouteComponentProps} from \"react-router-dom\";\nimport {ConfigContext} from \"@app/Config/Config\";\nimport {FederatedModule} from \"../Components/FederatedModule\";\nimport {AuthContext} from \"@app/utils/auth/AuthContext\";\nimport {Loading} from \"@app/Components/Loading/Loading\";\n\ntype DataPlanePageParams = {\n  id: string\n}\n\nexport const DataPlanePage = ({match}: RouteComponentProps<DataPlanePageParams>) => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n  const {getToken} = useContext(AuthContext);\n\n  // TODO useParams is not working?\n  const pathname = window.location.pathname.endsWith(\"/\") ? window.location.pathname : `${window.location.pathname}/`;\n  const parts = pathname.split(\"/\");\n  const id = parts[parts.length - 2];\n\n  if (config === undefined) {\n    return <Loading />\n  }\n\n  return (\n    <FederatedModule\n      scope=\"strimziUi\"\n      module=\"./Panels/Topics.patternfly\"\n      render={(FederatedTopics) => <FederatedTopics\n        getApiOpenshiftComToken={insights.chrome.auth.getToken}\n        getToken={getToken}\n        id={id}\n        apiBasePath={config?.dataPlane.uiServerBasePath}\n      />}\n    />\n  );\n}\n","import React, {useContext, useEffect} from 'react';\nimport {useHistory} from 'react-router-dom';\nimport {connect, Provider} from 'react-redux';\nimport './App.scss';\nimport {getRegistry} from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport {notifications, NotificationsPortal} from '@redhat-cloud-services/frontend-components-notifications/';\nimport {InsightsContext} from \"@app/utils/insights\";\nimport {AppRoutes} from \"@app/Routes\";\nimport {FederatedModuleProvider} from \"./Components/FederatedModule\";\n\ndeclare const __PUBLIC_PATH__: string;\nconst registry = getRegistry();\nregistry.register({notifications});\n\nexport const App = () => {\n\n  const insights = useContext(InsightsContext);\n  const history = useHistory();\n\n  useEffect(() => {\n    insights.chrome.init();\n    insights.chrome.identifyApp('openshift-streams');\n\n    const appNav = insights.chrome.on('APP_NAVIGATION', event => history.push(`/${event.navId}`));\n    return function cleanup() {\n      //appNav();\n    }\n  });\n\n  return (\n    <Provider store={registry.getStore()}>\n      <FederatedModuleProvider configUrl={`${__PUBLIC_PATH__}federated-modules.json`}>\n        <NotificationsPortal/>\n        <AppRoutes/>\n      </FederatedModuleProvider>\n    </Provider>\n  );\n}\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}/${pathName[1] || ''}`;\n}\n\nexport default getBaseName;\n","import Keycloak, {KeycloakConfig, KeycloakInstance} from 'keycloak-js';\n\nexport let keycloak: KeycloakInstance | undefined;\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig) => {\n  if (!keycloak) await init(config);\n  return keycloak;\n}\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (config: KeycloakConfig) => {\n  try {\n    keycloak = new (Keycloak as any)(config);\n    if (keycloak) {\n      await keycloak.init({\n        onLoad: 'login-required',\n        responseMode: \"query\"\n      });\n    }\n  } catch {\n    keycloak = undefined;\n    console.warn('Auth: Unable to initialize keycloak. Client side will not be configured to use authentication');\n  }\n}\n\n\n/**\n * This function keeps getting called by wslink\n * connection param function, so carry out\n * an early return if keycloak is not initialized\n * otherwise get the auth token\n *\n * @return authorization header or empty string\n *\n */\nexport const getAuthHeader = async () => {\n  if (!keycloak) return '';\n  return {\n    'authorization': `Bearer ${await getKeyCloakToken()}`\n  };\n};\n\n\n/**\n * Use keycloak update token function to retrieve\n * keycloak token\n *\n * @return keycloak token or empty string if keycloak\n * isn't configured\n *\n */\nexport const getKeyCloakToken = async (): Promise<string> => {\n  await keycloak?.updateToken(50);\n  if (keycloak?.token) return keycloak.token;\n  console.error('No keycloak token available');\n  return 'foo';\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (keycloak: Keycloak.KeycloakInstance | undefined) => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n}\n","import React, {useContext, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {init} from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport {InsightsContext} from \"@app/utils/insights\";\nimport {Loading} from \"./app/Components/Loading/Loading\";\nimport {ConfigContext, ConfigProvider} from \"@app/Config/Config\";\nimport {KeycloakInstance} from \"keycloak-js\";\nimport {AuthContext, IAuthContext} from \"@app/utils/auth/AuthContext\";\nimport {getKeycloakInstance, getKeyCloakToken} from \"@app/utils/keycloakAuth\";\n\ndeclare const __PUBLIC_PATH__: string;\n\nconst AppWithKeycloak = () => {\n\n  const config = useContext(ConfigContext)\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadToken = async () => {\n        const keycloak = await getKeycloakInstance ({\n          url: config.dataPlane.keycloak.authServerUrl,\n          clientId: config.dataPlane.keycloak.clientId,\n          realm: config.dataPlane.keycloak.realm\n        });\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      }\n      loadToken();\n    }\n  }, [config]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading/>;\n  }\n\n  const getToken = () => {\n    return getKeyCloakToken();\n\n  }\n\n  return (\n    <AuthContext.Provider value={{\n      getToken\n    } as IAuthContext}>\n      <Router basename={getBaseName(window.location.pathname)}>\n        <App/>\n      </Router>\n    </AuthContext.Provider>\n  )\n}\n\n\nReactDOM.render(\n  <Provider store={init(logger).getStore()}>\n    <ConfigProvider configUrl={`${__PUBLIC_PATH__}config.json`}>\n      <InsightsContext.Provider value={window[\"insights\"]}>\n        <AppWithKeycloak/>\n      </InsightsContext.Provider>\n    </ConfigProvider>\n  </Provider>, document.getElementById('root')\n);\n"],"sourceRoot":""}