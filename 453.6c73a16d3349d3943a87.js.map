{"version":3,"sources":["webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/Routes.tsx","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/Loading/Loading.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/components/DevelopmentPreview/DevelopmentPreview.tsx","webpack://application-services-ui/./src/app/components/Dashboard/Metrics.tsx","webpack://application-services-ui/./src/app/i18n/locale/index.ts","webpack://application-services-ui/./src/app/i18n/index.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/CosPage/CosPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederated.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/openapi/ams/api.ts","webpack://application-services-ui/./src/openapi/ams/base.ts","webpack://application-services-ui/./src/openapi/ams/common.ts","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/openapi/ams/configuration.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactVersion.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/Artifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactsRedirect.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/RulesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/SrsLayout.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/QuickStartDrawerWrapper.tsx","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/keycloakAuth.ts"],"names":["useDocumentTitle","title","originalTitle","document","routeFocusTimer","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","CreateTopic","Topics","TopicDetails","UpdateTopic","KasPage","NotFoundPage","OverviewPage","ResourcesPage","RulesPage","ServiceAccountsPage","CosPage","RedirectToStreamsKafkas","Redirect","to","routes","component","exact","label","path","basename","devPreview","getBaseName","window","location","pathname","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","WrappedRoute","Component","rest","getBasename","computedMatch","params","id","replace","Route","render","routeProps","show","BasenameContext","value","PageNotFound","flattenedRoutes","reduce","flattened","route","AppRoutes","LastLocationProvider","fallback","Switch","map","idx","key","connect","insights","history","useHistory","getAppId","defaultAppId","parts","split","length","useEffect","chrome","init","appId","identifyApp","unregister","on","event","push","includes","navId","Loading","Bullseye","Spinner","InstanceDrawer","isExpanded","onClose","kafkaDetail","activeTab","children","setIsOpenDeleteInstanceModal","isOpenDeleteInstanceModal","config","useConfig","undefined","masSso","tokenEndPointUrl","FederatedModule","scope","module","InstanceDrawerFederated","instanceDetail","getModuleInfo","baseUrl","fallbackBasePath","Promise","fetchModuleInfo","basePath","fetch","json","then","fedMods","s","entry","startsWith","entryPoint","useIsMounted","isMounted","useRef","current","federatedModuleContext","FederatedModuleContext","useState","moduleInfo","setModuleInfo","DynamicFederatedModule","url","ready","setReady","failed","setFailed","element","createElement","src","type","async","onload","console","log","onerror","error","head","appendChild","removeChild","useDynamicScript","container","default","get","factory","Module","debug","loadComponent","AssetsContext","getPath","FederatedModuleProvider","Provider","federatedModules","DevelopmentPreview","t","useTranslation","className","style","height","Banner","isSticky","variant","Popover","hasAutoWidth","bodyContent","position","minWidth","maxWidth","Button","Metrics","kafkaId","onCreateTopic","MetricsFederated","resources","en","translation","appServicesi18n","use","initReactI18next","detection","order","caches","fallbackLng","interpolation","escapeValue","PageSection","PageSectionVariants","Stack","hasGutter","Title","headingLevel","size","Text","TextVariants","isWidthLimited","Grid","lg","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","StackItem","ButtonVariant","href","target","TitleSizes","GridItem","md","frameBorder","allow","allowFullScreen","TextContent","List","ListItem","serviceDown","OpenshiftManagedConnectors","KafkaFederated","showMetrics","KafkaPageConnected","auth","useAuth","adminServerUrl","setAdminServerUrl","setKafkaDetail","useParams","topicName","kafkaName","setKafkaName","kas","getToken","accessToken","DefaultApi","apiBasePath","getKafkaById","kafka","data","name","bootstrap_server_host","KafkaPageContent","setError","isInstanceDrawerOpen","setIsInstanceDrawerOpen","activeDrawerTab","setActiveDrawerTab","onError","code","kafkaPageLink","kafkaInstanceLink","handleInstanceDrawer","isOpen","kafkaUIPage","FederatedKafka","AccessReviewActionEnum","AccessReviewResourceTypeEnum","AccessReviewResponseActionEnum","AccessReviewResponseResourceTypeEnum","CapabilityReviewRequestCapabilityEnum","CapabilityReviewRequestTypeEnum","ClusterAuthorizationRequestProductCategoryEnum","ClusterAuthorizationRequestProductIdEnum","OneMetricHealthStateEnum","PermissionActionEnum","PermissionAllOfActionEnum","ResourceQuotaTypeEnum","ResourceQuotaAllOfTypeEnum","ResourceQuotaRequestTypeEnum","ResourceReviewActionEnum","ResourceReviewResourceTypeEnum","ResourceReviewRequestActionEnum","ResourceReviewRequestResourceTypeEnum","RoleBindingTypeEnum","RoleBindingAllOfTypeEnum","SelfAccessReviewActionEnum","SelfAccessReviewResourceTypeEnum","SelfResourceReviewActionEnum","SelfResourceReviewResourceTypeEnum","SelfResourceReviewRequestActionEnum","SelfResourceReviewRequestResourceTypeEnum","SubscriptionProductBundleEnum","SubscriptionServiceLevelEnum","SubscriptionSupportLevelEnum","SubscriptionSystemUnitsEnum","SubscriptionUsageEnum","SubscriptionAllOfProductBundleEnum","SubscriptionAllOfServiceLevelEnum","SubscriptionAllOfSupportLevelEnum","SubscriptionAllOfSystemUnitsEnum","SubscriptionAllOfUsageEnum","SubscriptionCreateRequestPlanIdEnum","SubscriptionCreateRequestStatusEnum","SubscriptionPatchRequestClusterBillingModelEnum","SubscriptionPatchRequestProductBundleEnum","SubscriptionPatchRequestServiceLevelEnum","SubscriptionPatchRequestSupportLevelEnum","SubscriptionPatchRequestSystemUnitsEnum","SubscriptionPatchRequestUsageEnum","SupportCasesRequestSeverityEnum","BASE_PATH","configuration","axios","this","field","msg","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","RequiredError","setBearerAuthToObject","object","setSearchParams","searchParams","URLSearchParams","search","objects","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","hash","createRequestFunction","axiosArgs","globalAxios","axiosRequestArgs","options","request","Status","DefaultApiFp","localVarAxiosParamCreator","apiAccountsMgmtV1AccessTokenPost","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","apiAccountsMgmtV1AccountsGet","page","orderBy","fields","fetchLabels","fetchCapabilities","apiAccountsMgmtV1AccountsIdGet","localVarPath","encodeURIComponent","String","apiAccountsMgmtV1AccountsIdLabelsGet","apiAccountsMgmtV1AccountsIdLabelsKeyDelete","apiAccountsMgmtV1AccountsIdLabelsKeyGet","apiAccountsMgmtV1AccountsIdLabelsKeyPatch","apiAccountsMgmtV1AccountsIdLabelsPost","apiAccountsMgmtV1AccountsIdPatch","accountPatchRequest","apiAccountsMgmtV1AccountsPost","account","dryRun","apiAccountsMgmtV1ClusterAuthorizationsPost","clusterAuthorizationRequest","apiAccountsMgmtV1ClusterRegistrationsPost","clusterRegistrationRequest","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1ErrorsGet","apiAccountsMgmtV1ErrorsIdGet","apiAccountsMgmtV1FeatureTogglesIdQueryPost","featureToggleQueryRequest","apiAccountsMgmtV1LabelsGet","apiAccountsMgmtV1MetricsGet","apiAccountsMgmtV1NotifyPost","notificationRequest","apiAccountsMgmtV1OrganizationsGet","apiAccountsMgmtV1OrganizationsIdGet","apiAccountsMgmtV1OrganizationsIdLabelsGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete","apiAccountsMgmtV1OrganizationsIdLabelsKeyGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch","apiAccountsMgmtV1OrganizationsIdLabelsPost","apiAccountsMgmtV1OrganizationsIdPatch","organizationPatchRequest","apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","orgId","fetchRelatedResources","apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost","resourceQuotaRequest","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete","quotaId","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch","apiAccountsMgmtV1OrganizationsPost","organization","apiAccountsMgmtV1PlansGet","apiAccountsMgmtV1PlansIdGet","apiAccountsMgmtV1PullSecretsExternalResourceIdDelete","externalResourceId","apiAccountsMgmtV1PullSecretsPost","pullSecretRequest","apiAccountsMgmtV1RegistriesGet","apiAccountsMgmtV1RegistriesIdGet","apiAccountsMgmtV1RegistryCredentialsGet","apiAccountsMgmtV1RegistryCredentialsIdDelete","apiAccountsMgmtV1RegistryCredentialsIdGet","apiAccountsMgmtV1RegistryCredentialsIdPatch","registryCredentialPatchRequest","apiAccountsMgmtV1RegistryCredentialsPost","registryCredential","apiAccountsMgmtV1ReservedResourcesGet","apiAccountsMgmtV1ResourceQuotaGet","apiAccountsMgmtV1RoleBindingsGet","apiAccountsMgmtV1RoleBindingsIdDelete","apiAccountsMgmtV1RoleBindingsIdGet","apiAccountsMgmtV1RoleBindingsIdPatch","roleBindingRequest","apiAccountsMgmtV1RoleBindingsPost","roleBindingCreateRequest","apiAccountsMgmtV1RolesGet","apiAccountsMgmtV1RolesIdGet","apiAccountsMgmtV1SkuRulesGet","apiAccountsMgmtV1SkuRulesIdGet","apiAccountsMgmtV1SkusGet","apiAccountsMgmtV1SkusIdGet","apiAccountsMgmtV1SubscriptionsGet","fetchAccounts","labels","apiAccountsMgmtV1SubscriptionsIdDelete","apiAccountsMgmtV1SubscriptionsIdGet","fetchCpuAndSocket","apiAccountsMgmtV1SubscriptionsIdLabelsGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete","apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch","apiAccountsMgmtV1SubscriptionsIdLabelsPost","apiAccountsMgmtV1SubscriptionsIdNotifyPost","apiAccountsMgmtV1SubscriptionsIdPatch","subscriptionPatchRequest","apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet","apiAccountsMgmtV1SubscriptionsIdSupportCasesGet","apiAccountsMgmtV1SubscriptionsPost","subscriptionCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete","subId","accountId","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost","notificationContactCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet","reservedResourceId","apiAccountsMgmtV1SupportCasesCaseIdDelete","caseId","apiAccountsMgmtV1SupportCasesPost","supportCasesRequest","apiAccountsMgmtV1TokenAuthorizationPost","tokenAuthorizationRequest","apiAuthorizationsV1AccessReviewPost","accessReview","apiAuthorizationsV1CapabilityReviewPost","capabilityReviewRequest","apiAuthorizationsV1ExportControlReviewPost","exportControlReviewRequest","apiAuthorizationsV1FeatureReviewPost","featureReview","apiAuthorizationsV1ResourceReviewPost","resourceReviewRequest","apiAuthorizationsV1SelfAccessReviewPost","selfAccessReview","apiAuthorizationsV1SelfFeatureReviewPost","selfFeatureReview","apiAuthorizationsV1SelfResourceReviewPost","selfResourceReviewRequest","apiAuthorizationsV1SelfTermsReviewPost","selfTermsReview","apiAuthorizationsV1TermsReviewPost","termsReview","DefaultApiAxiosParamCreator","localVarAxiosArgs","BaseAPI","param","apiKey","username","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","buildUrlParams","Object","keys","join","fetchTermsReviewFactory","ams","event_code","eventCode","site_code","siteCode","useModalControl","ref","load","loadTermsReview","r","answer","useLocation","shouldOpenCreateModal","parsed","parse","terms_required","preCreateInstance","open","terms_available","redirect_url","redirectURL","stringifyUrl","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","getQuota","productId","setOrgId","orgID","filteredQuota","loading","isServiceDown","amsConfig","trialQuotaId","res","quotaData","Map","kasQuota","items","filter","q","quota_id","trim","kasTrialQuota","allowed","remaining","consumed","QuotaType","catch","useMemo","useQuota","ProductType","getTokenEndPointUrl","authServerUrl","realm","OpenshiftStreamsFederated","ServiceDownPage","QuotaContext","EmptyState","EmptyStateIcon","icon","EmptyStateBody","onClick","isLarge","alt","Label","color","isInline","QuickStartCatalogFederated","ServiceAccountsFederated","ArtifactVersionDetailsConnected","breadcrumbId","registry","ArtifactsConnected","ArtifactRedirectConnected","FederatedApicurioComponent","useBasename","groupId","artifactId","version","apiUrl","navPathPrefix","federateConfig","registryUrl","apicurio_registry","artifacts","features","readOnly","breadcrumbs","multiTenant","ui","navPrefixPath","ServiceRegistryFederated","tenantId","RulesPageConnected","ServiceRegistryPage","ServiceRegistryPageConnected","SrsLayout","GetLink","Link","AccessDeniedPage","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","QuickStartDrawerWrapper","QuickStartDrawerFederated","showDrafts","guides","appendTo","querySelector","root","filterConfig","environmentConfig","federatedModulesConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","entries","forEach","k","v","EmbeddedConfigProvider","ConfigContext","middleware","register","notifications","release","pathName","shift","keycloak","REFRESH_TOKEN_COOKIE_NAME","getKeycloakInstance","getInsightsAccessToken","storeRefreshToken","refreshToken","insightsToken","insightsJWT","rhUserId","storedToken","encoded","Base64","clearRefreshToken","retrieveRefreshToken","storedRefreshToken","refreshJWT","exp","Date","initOptions","responseMode","rk","updateToken","logout","lk","onLoad","getMASSSOToken","token","tokenParsed","info"],"mappings":"+OAGO,SAASA,EAAiBC,GAC/B,aAAgB,WACd,IAAMC,EAAgBC,SAASF,MAG/B,OAFAE,SAASF,MAAQA,EAEV,WACLE,SAASF,MAAQC,KAElB,CAACD,I,ICkBFG,E,sDApBEC,EAAoB,UAAW,WAAM,kDACrCC,EAAmB,UAAW,WAAM,kDACpCC,EAAY,UAAW,WAAM,kDAC7BC,EAAyB,UAAW,WAAM,kDAC1CC,EAAkB,UAAW,WAAM,kDAEnCC,EAAc,UAAW,WAAM,kDAC/BC,EAAS,UAAW,WAAM,kDAC1BC,EAAe,UAAW,WAAM,kDAChCC,EAAc,UAAW,WAAM,iDAE/BC,EAAU,UAAW,WAAM,kDAC3BC,EAAe,UAAW,WAAM,kDAChCC,EAAe,UAAW,WAAM,kDAChCC,EAAgB,UAAW,WAAM,kDACjCC,EAAY,UAAW,WAAM,kDAC7BC,EAAsB,UAAW,WAAM,kDACvCC,EAAU,UAAW,WAAM,kDA2B3BC,EAAmD,WAAM,yBAAC,EAAAC,SAAQ,CAACC,GAAG,qBAEtEC,EAA2B,CAC/B,CACEC,UAAWd,EACXe,OAAO,EACPC,MAAO,6CACPC,KAAM,sBACN3B,MAAO,6CACP4B,SAAU,sBACVC,YAAY,GAEd,CACEL,UAAWb,EACXc,OAAO,EACPC,MAAO,6CACPC,KAAM,wCACN3B,MAAO,6CACP4B,SAAU,sBACVC,YAAY,GAEd,CACEL,UAAWf,EACXgB,OAAO,EACPC,MAAO,6CACPC,KAAM,mCACN3B,MAAO,6CACP4B,SAAU,sBACVC,YAAY,GAEd,CACEL,UAAWZ,EACXa,OAAO,EACPC,MAAO,6CACPC,KAAM,8CACN3B,MAAO,6CACP4B,SAAU,sBACVC,YAAY,GAEd,CAEEL,UAAWJ,EACXK,OAAO,EACPC,MAAO,6CACPC,KAAM,WACN3B,MAAO,8CAET,CACEwB,UAAWJ,EAEXK,OAAO,EACPC,MAAO,6CACPC,KAAM,qBACN3B,MAAO,8CAET,CACEwB,UAAWX,EACXY,OAAO,EACPC,MAAO,6CACPC,KAAM,kBACN3B,MAAO,6CACP4B,SAAU,kBACVC,YAAY,GAEd,CACEL,UA3FwB,UAAW,WAAM,kDA4FzCC,OAAO,EACPC,MAAO,mBACPC,KAAM,MACN3B,MAAO,mBACP4B,SAAU,OAEZ,CACEJ,UAAWlB,EACXmB,OAAO,EACPC,MAAO,mBACPC,KAAM,kBACN3B,MAAO,mBACP4B,SAAU,MACVC,YAAY,GAEd,CACEL,UAAWlB,EACXmB,OAAO,EACPC,MAAO,mBACPC,KAAM,4BACN3B,MAAO,mBACP4B,SAAU,OAEZ,CACEJ,UAAWP,EACXQ,OAAO,EACPC,MAAO,mBACPC,KAAM,wBACN3B,MAAO,mBACP4B,SAAU,MACVC,YAAY,GAEd,CACEL,UAAWnB,EACXoB,OAAO,EACPC,MAAO,mBACPC,KAAM,iDACN3B,MAAO,mBACP4B,SAAU,OAEZ,CACEJ,UAAWjB,EACXkB,OAAO,EACPC,MAAO,mBACPC,KAAM,mEACN3B,MAAO,mBACP4B,SAAU,MACVC,YAAY,GAEd,CACEL,UAAWL,EACXM,OAAO,EACPC,MAAO,MACPC,KAAM,OACN3B,MAAO,MACP4B,UAAa,EAAAE,EAAA,GAAYC,OAAOC,SAASC,UAAS,OAClDJ,YAAY,GAEd,CACEL,UAAWN,EACXO,OAAO,EACPC,MAAO,6CACPC,KAAM,4BACN3B,MAAO,6CACP4B,SAAU,WACVC,YAAY,GAEd,CACEL,UAAWT,EACXU,OAAO,EACPC,MAAO,6CACPC,KAAM,YACN3B,MAAO,8CAET,CACEwB,UA9IgD,WAAM,yBAAC,EAAAH,SAAQ,CAACC,GAAG,eA+InEG,OAAO,EACPC,MAAO,6CACPC,KAAM,IACN3B,MAAO,8CAET,CACEwB,UAAWpB,EACXqB,OAAO,EACPC,MAAO,6CACPC,KAAM,kBACN3B,MAAO,8CAET,CACEwB,UAAWhB,EACXiB,OAAO,EACPC,MAAO,6CACPC,KAAM,gBACN3B,MAAO,8CAET,CACEwB,UAAWR,EACXS,OAAO,EACPC,MAAO,yDACPC,KAAM,qBACN3B,MAAO,yDACP6B,YAAY,IAOVK,EAAqB,SAACC,GAC1B,IAAMC,GAAiB,IAAAC,mBACvB,eAAgB,WAId,OAHKF,GAA8B,OAAnBC,IACdjC,ECtOG4B,OAAOO,YAAW,WACvB,IAAMC,EAAgBrC,SAASsC,eAAe,yBAC1CD,GACFA,EAAcE,UAEf,KDmOM,WACLV,OAAOW,aAAavC,MAErB,CAACgC,EAASC,KAGTO,EAAe,SAAC,GAAE,IAAWC,EAAS,YAAE,IAAAT,eAAO,IAAG,GAAK,EAAEnC,EAAK,QAAE4B,EAAQ,WAAEC,EAAU,aAAKgB,GAAI,cAA7E,yDACpBX,EAAmBC,GACnBpC,EAAiBC,GACjB,IAAM8C,EAAc,W,QACVC,GAAkBF,GAAQ,IAAE,cAEpC,OAAyB,QAArB,EAAAE,aAAa,EAAbA,EAAeC,cAAM,eAAEC,KAAMrB,EACxBA,aAAQ,EAARA,EAAUsB,QAAQ,MAA4B,QAArB,EAAAH,aAAa,EAAbA,EAAeC,cAAM,eAAEC,IAElDrB,GAAY,IAerB,OAAO,kBAAC,EAAAuB,OAAK,eAACC,OAZd,SAAmBC,GACjB,OACE,kBAAC,KAAkB,CAACC,KAAMzB,GACxB,kBAAC,KAAuB,KACtB,kBAAC,EAAA0B,gBAAA,SAAwB,CAACC,MAAO,CAAEV,YAAW,IAC5C,kBAACF,GAAS,iBAAKC,EAAUQ,SAOER,KAGjCY,EAAe,SAAC,GAEpB,OADA1D,EAD2B,SAEpB,kBAAC,EAAAoD,MAAK,CAAC3B,UAAWV,KAGrB4C,EAA+BnC,EAAOoC,QAC1C,SAACC,EAAWC,GAAU,iDAAID,GAAeC,EAAMtC,OAASsC,EAAMtC,OAAS,CAACsC,MACxE,IAGIC,EAAY,WAA0B,OAC1C,kBAAC,EAAAC,qBAAoB,KACnB,kBAAC,aAAc,CAACC,SAAU,kBAAC,KAAO,OAChC,kBAAC,EAAAC,OAAM,KACJP,EAAgBQ,KAAI,SAAC,EAAqDC,GAAnD,IAAAxC,EAAI,OAAEF,EAAK,QAAED,EAAS,YAAExB,EAAK,QAAEmC,EAAO,UAAKU,GAAI,cAAjD,gDAA6D,OACjF,kBAACF,GAAY,eACXhB,KAAMA,EACNF,MAAOA,EACPD,UAAWA,EACX4C,IAAKD,EACLnE,MAAOA,EACPmC,QAASA,GACLU,OAGR,kBAACY,EAAY,CAACzD,MAAM,2BE1O5B,SAAe,IAAAqE,UAAf,EAhD4C,WAC1C,IAAMC,EAAyBvC,OAAiB,SAC1CwC,GAAU,IAAAC,cAEVC,EAAW,WACf,IAAMC,EAAe,WAEfC,EAAQJ,EAAQvC,SAASC,SAAS2C,MAAM,KAC9C,OAAID,EAAME,OAAS,EACA,KAAbF,EAAM,GACDD,EAEU,sBAAbC,EAAM,GACD,UAEFA,EAAM,GAGRD,GAkBX,OAdA,IAAAI,YAAU,WACRR,EAASS,OAAOC,OAChB,IAAMC,EAAQR,IACdH,EAASS,OAAOG,YAAYD,GAE5B,IAAME,EAAab,EAASS,OAAOK,GAAG,kBAAkB,SAACC,GAEvDd,EAAQe,KAAK,KADM,CAAC,SAAU,mBAAoB,aACtBC,SAASF,EAAMG,OAAS,WAAa,IAAKH,EAAMG,UAE9E,OAAO,WACLL,OAED,CAACV,EAAUF,EAASD,EAASS,SAG9B,kBAAC,KAAuB,KACtB,kBAAC,KAAmB,MACpB,kBAACjB,EAAS,W,2FC3CH2B,EAAmC,WAAM,OACpD,kBAAC,EAAAC,SAAQ,KACP,kBAAC,EAAAC,QAAO,S,0ICQCC,EAAgD,SAAC,G,IAC5DC,EAAU,aACVC,EAAO,UACPC,EAAW,cACXC,EAAS,YACTC,EAAQ,WACRC,EAA4B,+BAC5BC,EAAyB,4BAEnBC,GAAS,IAAAC,aACf,QAAeC,IAAXF,EACF,OAAO,kBAACX,EAAA,EAAO,MAGX,OAA2BW,aAAM,EAANA,EAAQG,SAAU,GAC7CC,EADe,gBACoB,WADb,QAC6B,iCAEzD,OACE,kBAACC,EAAe,CACdC,MAAM,MACNC,OAAO,mBACP3C,SAAUiC,EACV7C,OAAQ,SAACwD,GACP,OACE,kBAACA,EAAuB,CACtBJ,iBAAkBA,EAClBX,WAAYA,EACZC,QAASA,EACTe,eAAgBd,EAChBC,UAAWA,EACXG,0BAA2BA,EAC3BD,6BAA8BA,GAE7BD,O,sBC3CAa,EAAgB,SAAOC,EAAiBL,EAAeM,GAAyB,oCAAGC,SAAO,W,uEAEzE,gBAStBC,EAAkB,SAAOC,GAAgB,uD,iEAE5B,SAAMC,MADRD,qB,OAER,SADU,SACKE,OACnBC,MAAK,SAAAD,GAAQ,OAAAA,KACbC,MAAK,SAAAC,GAAW,OAAAA,EAAQb,MACxBY,MAAK,SAAAE,GAAK,OAAAA,EAAEC,MAAM,MAClBH,MAAK,SAAA3F,GACJ,OAAIA,EAAK+F,WAAWP,GACX,CACLQ,WAAYhG,EACZwF,SAAQ,GAGL,CACLQ,WAAY,GAAGR,EAAWxF,EAC1BwF,SAAQ,O,OAbd,MAAO,CAAP,EAAO,kB,iBAoBA,O,sBAAA,GAAMD,EAAgBH,I,OAA7B,MAAO,CAAP,EAAO,U,oBAEHC,EAAA,Y,iBAIO,O,sBAAA,GAAME,EAAgBF,I,OAA7B,MAAO,CAAP,EAAO,U,OAEP,O,SAAO,CAAP,OAAOV,G,0BAIb,MAAO,CAAP,OAAOA,WC3CHsB,EAAe,WACnB,IAAMC,GAAY,IAAAC,SAAO,GAOzB,OANA,IAAAhD,YAAU,WAER,OADA+C,EAAUE,SAAU,EACb,WACLF,EAAUE,SAAU,KAErB,IACIF,GA4BT,IAyDapB,EAAiE,SAAC,G,IAAEC,EAAK,QAAEC,EAAM,SAAEvD,EAAM,SAAEY,EAAQ,WACxG6D,EAAYD,IAEZI,EAAyB,eAAiBC,GAC1C,GAA8B,IAAAC,YAA7BC,EAAU,KAAEC,EAAa,KAYhC,OAVA,IAAAtD,YAAU,YACgB,gD,uEACH,SAAMgC,EAAckB,EAAuBtB,GAAOS,SAAUT,EAAOsB,EAAuBtB,GAAOM,mB,cAA9GmB,EAAa,SACfN,EAAUE,SACZK,EAAcD,G,aAIjB,CAACzB,EAAOsB,SAEQ1B,IAAf6B,EACK,kBAACE,EAAsB,CAAC3B,MAAOA,EAAOC,OAAQA,EAAQvD,OAAQA,EAAQ+E,WAAYA,SAE1E7B,IAAbtC,EACK,oCAAGA,GAEL,MAOHqE,EAA+E,SAAC,G,IACEF,EAAU,aACVnE,EAAQ,WACR0C,EAAK,QACLtD,EAAM,SACNuD,EAAM,SAEtF,EA7FiB,SAAC2B,GACxB,IAAMT,EAAYD,IACZ,EAAoB,cAAe,GAAlCW,EAAK,KAAEC,EAAQ,KAChB,EAAsB,cAAe,GAApCC,EAAM,KAAEC,EAAS,KAyCxB,OAvCA,eAAgB,WACd,IAAIC,EACJ,GAAId,EAAUE,QAAS,CACrB,IAAKO,EAEH,YADAI,GAAU,IAIZC,EAAUzI,SAAS0I,cAAc,WAEzBC,IAAMP,EACdK,EAAQG,KAAO,kBACfH,EAAQI,OAAQ,EAEhBP,GAAS,GACTE,GAAU,GAEVC,EAAQK,OAAS,WACfC,QAAQC,IAAI,oCAAoCZ,GAChDE,GAAS,IAGXG,EAAQQ,QAAU,WAChBF,QAAQG,MAAM,mCAAmCd,GACjDE,GAAS,GACTE,GAAU,IAGZxI,SAASmJ,KAAKC,YAAYX,GAG5B,OAAO,WACDA,IACFM,QAAQC,IAAI,qCAAqCZ,GACjDpI,SAASmJ,KAAKE,YAAYZ,OAG7B,CAACL,IAEG,CACLC,MAAK,EACLE,OAAM,GA+CkBe,CAAiBrB,EAAWR,YAA9CY,EAAK,QAAEE,EAAM,SAErB,GAAIF,IAAUE,EAAQ,CACpB,IAAM7F,EAAY,SA9GtB,SAAuB8D,EAAOC,GAA9B,WACE,OAAO,6D,2EAEL,SAAM,IAAyB,Y,OAG/B,OAHA,SAGA,IAFM8C,EAAY1H,OAAO2E,IAET1B,KAAK,IAAyB0E,U,OAC9B,OADhB,SACgB,GAAMD,EAAUE,IAAIhD,I,OAGpC,OAHMiD,EAAU,SACVC,EAASD,IACfX,QAAQa,MAAM,UAAUnD,EAAM,SAASD,GAChC,CAAP,EAAOmD,WAqGLE,CAAcrD,EAAOC,IAOvB,OACE,kBAAC,EAAAqD,cAAA,SAAsB,CAACxG,MAAO,CAAEyG,QALnB,WACd,OAAO9B,EAAWhB,YAKhB,kBAAC,aAAc,CAACnD,SAAU,kBAACyB,EAAA,EAAO,OAC/BrC,EAAOR,KAMhB,OAAIoB,EACK,oCAAGA,GAEL,MCxJIiE,EAAyB,kBAAiD,IAE1EiC,EAAmD,SAAC,G,IAAEjE,EAAQ,WAEnEG,GAAS,IAAAC,aAEf,YAAeC,IAAXF,EACK,kBAACX,EAAA,EAAO,MAIf,kBAACwC,EAAuBkC,SAAQ,CAAC3G,MAAO4C,EAAOgE,kBAC5CnE,I,sBCZMoE,EAAuE,SAAC,G,IAAEpE,EAAQ,WAAE3C,EAAI,OAC3FgH,GAAM,IAAAC,kBAAgB,EAC9B,OAAIjH,EACK,yBAAKL,GAAG,qBAAqBuH,UAAU,kBAAkBC,MAAO,CAAEC,OAAQ,SAC/E,kBAAC,EAAAC,OAAM,CAACC,UAAQ,EAACC,QAAQ,QACvB,kBAAC,EAAAnF,SAAQ,KACP,kBAAC,EAAAoF,QAAO,cACK,6BACXC,cAAY,EACZC,YACE,6BAAMV,EAAE,qCAEVW,SAAS,SACTC,SAAS,QACTC,SAAS,OACT,kBAAC,EAAAC,OAAM,CAACZ,UAAU,uCAAuCK,QAAQ,QAAQP,EAAE,iCAIhFrE,GAIH,oCAAGA,ICtBMoF,EAAkC,SAAC,G,IAAEC,EAAO,UAAEC,EAAa,gBAGtE,YAAejF,KAFA,IAAAD,aAGN,kBAACZ,EAAA,EAAO,MAIf,kBAACgB,EAAe,CACdC,MAAM,MACNC,OAAO,YACPvD,OAAQ,SAACoI,GAAqB,yBAACA,EAAgB,CAACF,QAASA,EAASC,cAAeA,S,qGClBhF,IAAME,EAAY,CACvBC,GAAI,CACFC,Y,g4JCIEC,EAAkB,qBAExBA,EAEGC,IAAI,EAAAC,kBACJD,IAAI,KAGJ7G,KAAK,CACJ+G,UAAW,CACTC,MAAO,CAAC,UAAW,aACnBC,OAAQ,IAEVC,YAAa,KACbpC,OAAO,EAEPqC,cAAe,CACbC,aAAa,GAEfX,UAAS,IAGb,W,uJCFarL,EAA6C,WAChD,IAAAkK,GAAM,IAAAC,kBAAgB,EAE9B,OACE,oCACE,kBAAC,EAAA8B,YAAW,CACV7B,UAAU,yDACVK,QAAS,EAAAyB,oBAAA,OAET,kBAAC,EAAAC,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,OAC3BrC,EAAE,8BAEL,kBAAC,EAAAmC,MAAK,CAACC,aAAa,KAAKC,KAAK,KAAKnC,UAAU,mDAC1CF,EAAE,gCAEL,kBAAC,EAAAsC,KAAI,CAACpL,UAAW,EAAAqL,aAAA,GAAiBvC,EAAE,sCAIxC,kBAAC,EAAA+B,YAAW,CAAC7B,UAAU,2CAA2CsC,gBAAc,GAC9E,kBAAC,EAAAC,KAAI,CAACP,WAAS,EAACQ,GAAI,GAClB,kBAAC,EAAAC,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAC,eAAc,KACb,kBAAC,EAAAC,UAAS,KACR,kBAAC,EAAAX,MAAK,CAACC,aAAa,MAAMpC,EAAE,4CAIlC,kBAAC,EAAA+C,SAAQ,KAAE/C,EAAE,4CACb,kBAAC,EAAAgD,WAAU,KACT,kBAAC,EAAAf,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAe,UAAS,KACR,kBAAC,EAAAnC,OAAM,eACO,4BACZP,QAAS,EAAA2C,cAAA,UACThM,UAAU,IACViM,KAAK,uCAEJnD,EAAE,uDAGP,kBAAC,EAAAiD,UAAS,KACR,kBAAC,EAAAnC,OAAM,eACO,6BACZP,QAAS,EAAA2C,cAAA,KACThM,UAAU,IACViM,KAAK,sEACLC,OAAO,UAENpD,EAAE,qC,IAAsC,kBAAC,KAAmB,CAACE,UAAU,kBAGrE,MAGb,kBAAC,EAAAyC,KAAI,KACH,kBAAC,EAAAC,WAAU,KACT,kBAAC,EAAAE,UAAS,KACR,kBAAC,EAAAX,MAAK,CAACC,aAAa,MAAMpC,EAAE,yCAGhC,kBAAC,EAAA+C,SAAQ,KAAE/C,EAAE,0CACb,kBAAC,EAAAgD,WAAU,KACT,kBAAC,EAAAf,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAe,UAAS,KACR,kBAAC,EAAAnC,OAAM,eACO,gCACZP,QAAS,EAAA2C,cAAA,UACThM,UAAU,IACViM,KAAK,+DACLC,OAAO,UAENpD,EAAE,mDACH,kBAAC,KAAmB,CAACE,UAAU,iBAGnC,kBAAC,EAAA+C,UAAS,KACR,kBAAC,EAAAnC,OAAM,eACO,4BACZP,QAAS,EAAA2C,cAAA,KACThM,UAAU,IACViM,KAAK,sEACLC,OAAO,UAENpD,EAAE,qC,IAAsC,kBAAC,KAAmB,CAACE,UAAU,sBAStF,kBAAC,EAAA6B,YAAW,CAACxB,QAAS,EAAAyB,oBAAA,MAA2B9B,UAAU,2CAA2CsC,gBAAc,GAClH,kBAAC,EAAAL,MAAK,CAACE,KAAM,EAAAgB,WAAA,GAAejB,aAAa,KAAKlC,UAAU,cACrDF,EAAE,sCAEL,kBAAC,EAAAyC,KAAI,CAACP,WAAS,GACb,kBAAC,EAAAoB,SAAQ,CAACC,GAAI,GACZ,kBAAC,EAAAZ,KAAI,CAACzC,UAAU,gCACd,yBAAKA,UAAU,kCACb,4BACE3B,IAAI,4CACJ7I,MAAOsK,EAAE,qCACTwD,YAAY,IACZC,MAAM,2FACNC,iBAAe,OAKvB,kBAAC,EAAAJ,SAAQ,CAACC,GAAI,GACZ,kBAAC,EAAAI,YAAW,KACV,kBAAC,EAAArB,KAAI,CAACpC,UAAU,6BAA6BF,EAAE,4CAC/C,kBAAC,EAAA4D,KAAI,CAAC1D,UAAU,8BACd,kBAAC,EAAA2D,SAAQ,KAAE7D,EAAE,4CACb,kBAAC,EAAA6D,SAAQ,KAAE7D,EAAE,6CACb,kBAAC,EAAA6D,SAAQ,KAAE7D,EAAE,iDAU7B,W,kICvJanJ,EAAmC,WAC9C,IAAMiF,GAAS,IAAAC,aAEf,OAAID,aAAM,EAANA,EAAQgI,aACH,kBAAC,IAAe,MAIvB,kBAAC,KAAe,CACd1H,MAAM,MACN1C,SAAU,kBAAC,KAAO,MAClB2C,OAAO,+BACPvD,OAAQ,SAACiL,GAA+B,yBAACA,EAA0B,UAKzE,W,0ICFa7N,EAA2C,WAC9C,IAAA8J,GAAM,IAAAC,kBAAgB,EAE9B,OACE,oCACE,kBAAC,EAAA8B,YAAW,CACV7B,UAAU,yDACVK,QAAS,EAAAyB,oBAAA,OAET,kBAAC,EAAAC,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKC,KAAK,OAC3BrC,EAAE,kCAEL,kBAAC,EAAAmC,MAAK,CAACC,aAAa,KAAKC,KAAK,KAAKnC,UAAU,mDAC1CF,EAAE,oCAEL,kBAAC,EAAAsC,KAAI,CAACpL,UAAW,EAAAqL,aAAA,GAAiBvC,EAAE,wCACpC,kBAAC,EAAAiD,UAAS,KACR,kBAAC,EAAAnC,OAAM,eACO,uBACZP,QAAS,EAAA2C,cAAA,UACThM,UAAU,IACViM,KAAK,0FACLC,OAAO,UAENpD,EAAE,8C,IAA+C,kBAAC,KAAmB,CAACE,UAAU,mBAMzF,kBAAC,EAAA6B,YAAW,CAAC7B,UAAU,2CAA2CsC,gBAAc,GAC9E,kBAAC,EAAAC,KAAI,CAACP,WAAS,GACb,kBAAC,EAAAoB,SAAQ,CAACC,GAAI,GACZ,kBAAC,EAAAtB,MAAK,CAACC,WAAS,GACd,kBAAC,EAAAe,UAAS,KACR,kBAAC,EAAAU,YAAW,KACV,kBAAC,EAAAxB,MAAK,CAACE,KAAM,EAAAgB,WAAA,GAAejB,aAAa,KAAKlC,UAAU,cACrDF,EAAE,0CAEL,kBAAC,EAAAsC,KAAI,CAACpC,UAAU,cAAcF,EAAE,kDAGpC,kBAAC,EAAAiD,UAAS,KACR,kBAAC,EAAAnC,OAAM,eACO,qBACZP,QAAS,EAAA2C,cAAA,UACThM,UAAU,IACViM,KAAK,gDACLC,OAAO,UAENpD,EAAE,oC,IAAqC,kBAAC,KAAmB,CAACE,UAAU,mBAK/E,kBAAC,EAAAoD,SAAQ,CAACC,GAAI,GACZ,kBAAC,EAAAZ,KAAI,CAACzC,UAAU,gCACZ,yBAAKA,UAAU,kCACb,4BACE3B,IAAI,4CACJ7I,MAAOsK,EAAE,yCACTwD,YAAY,IACZC,MAAM,2FACNC,iBAAe,WAWnC,W,8FCzFA,QAJ8B,WAC5B,OAAO,kBAAC,IAAc,CAACrH,OAAO,oB,mJCUnB2H,EAA+D,SAAC,G,IAAE3H,EAAM,SAAE4H,EAAW,cAAEvI,EAAS,YACrGI,GAAS,IAAAC,aAEf,OAAID,aAAM,EAANA,EAAQgI,aACH,kBAAC,KAAe,MAGlB,kBAACI,EAAkB,CAAC7H,OAAQA,EAAQ4H,YAAaA,EAAavI,UAAWA,KAG5EwI,EAAmE,SAAC,G,IAAE7H,EAAM,SAAE4H,EAAW,cAAEvI,EAAS,YAClGI,GAAS,IAAAC,aACToI,GAAO,IAAAC,WACP,GAAsC,IAAAxG,YAArCyG,EAAc,KAAEC,EAAiB,KAClC,GAAgC,IAAA1G,YAA/BnC,EAAW,KAAE8I,EAAc,KAE5B,GAAoB,IAAAC,aAAlB7L,EAAE,KAAE8L,EAAS,YACf,GAA4B,IAAA7G,YAA3B8G,EAAS,KAAEC,EAAY,KAkB9B,OAjBA,IAAAnK,YAAU,YACe,gD,yEACD,SAAM2J,aAAI,EAAJA,EAAMS,IAAIC,Y,OAMtB,OANRC,EAAc,SAMN,GALM,IAAI,EAAAC,WAAW,CACjCD,YAAW,EACXjI,UAAUf,aAAM,EAANA,EAAQ8I,IAAII,cAAe,KAGPC,aAAatM,I,cAAvCuM,EAAQ,SACdX,EAAeW,EAAMC,MACrBR,EAAaO,EAAMC,KAAKC,MACxBd,EAAkB,wBAAwBY,EAAMC,KAAKE,sBAAqB,S,aAI3E,CAAClB,EAAMrI,EAAQnD,SAEHqD,IAAXF,QAA2CE,IAAnBqI,EACnB,kBAAC,KAAO,MAIf,kBAACiB,EAAgB,CACfjB,eAAgBA,EAChB1L,GAAIA,EACJ8L,UAAWA,EACXC,UAAWA,EACXjJ,YAAaA,EACbY,OAAQA,EACR4H,YAAaA,EACbvI,UAAWA,KAaX4J,EAAmE,SAAC,G,IACxEjB,EAAc,iBACd1L,EAAE,KACF+L,EAAS,YACTjJ,EAAW,cACXY,EAAM,SACN4H,EAAW,cACXvI,EAAS,YAEHyI,GAAO,IAAAC,WAEP,GAAoB,IAAAxG,YAAnBkB,EAAK,KAAEyG,EAAQ,KAChB,GAAkD,IAAA3H,YAAjD4H,EAAoB,KAAEC,EAAuB,KAC9C,GAAwC,IAAA7H,UAAiB,IAAxD8H,EAAe,KAAEC,EAAkB,KACpC,GAA4D,IAAA/H,WAAkB,GAA7E/B,EAAyB,KAAED,EAA4B,KAExDgK,EAAU,SAACC,GACfN,EAASM,IAGLC,GAAmB,OAAYrO,OAAOC,SAASC,UAAS,mBACxDoO,GAAuB,OAAYtO,OAAOC,SAASC,UAAS,mBAAmBgB,EAE/EqN,EAAuB,SAACC,EAAiBvK,GAC7CA,GAAaiK,EAAmBjK,GAChC+J,EAAwBQ,IAOtBC,EACF,kBAAC,KAAe,oBACG,oBACjB9J,MAAM,QACNC,OAAQA,EACRvD,OAAQ,SAACqN,GAAmB,OAC1B,kBAACA,EAAc,CACbtB,SAAUV,aAAI,EAAJA,EAAMe,MAAML,SACtBG,YAAaX,EACbK,UAAWA,EACXoB,cAAeA,EACfC,kBAAmBA,EACnBH,QAASA,EACTI,qBAAsBA,EACtBpK,6BAA8BA,EAC9BqI,YAAaA,EACbvI,UAAWA,OAUnB,OAJc,MAAVoD,IACFoH,EAAc,kBAAC,KAAgB,OAI/B,yBAAKhG,UAAU,sCAAqC,mBAAkB,qBACpE,kBAAC,KAAkB,KACjB,kBAAC,KAAc,CACb3E,WAAYiK,EACZhK,QAnCsB,WAC5BiK,GAAwB,IAmClBhK,YAAaA,EACbC,UAAWgK,EACX7J,0BAA2BA,EAC3BD,6BAA8BA,GAE7BsK,O,8FCzIX,QAJ+B,WAC7B,OAAO,kBAAC,IAAc,CAAC7J,OAAO,qB,oHCWhC,QAVyB,WACf,IAAA1D,GAAO,IAAA6L,aAA2B,GAM1C,OAAO,kBAAC,IAAc,CAACnI,OAAO,kBAAkB4H,YAHvC,kBAAC,KAAO,CAACjD,QAASrI,Q,6FCF7B,QAJ8B,WAC5B,OAAO,kBAAC,IAAc,CAAC0D,OAAO,oB,+ECmFpB+J,EAWAC,EAuGAC,EAWAC,EA8iBAC,EAOAC,EAoGAC,EAOAC,EAsrCAC,EA6NAC,EAgCAC,EAw3CAC,EAkFAC,EAsFAC,EA4DAC,EAWAC,EAmCAC,EASAC,EA2IAC,EAkEAC,EAkVAC,EAWAC,EAwGAC,EAWAC,EA6BAC,EASAC,EA0aAC,EASAC,EAQAC,EAWAC,EAQAC,EA+NAC,EASAC,EAQAC,EAWAC,EAQAC,EAiDAC,EAOAC,EAwNAC,EAQAC,EASAC,EAQAC,EAWAC,EAQAC,EAkSAC,E,uFCz5LCC,GAAY,4BAA4BrQ,QAAQ,OAAQ,IA4BrE,GAGE,SACEsQ,EACUrM,EACAsM,QADA,IAAAtM,MAAA,SACA,IAAAsM,MAAA,MADA,KAAAtM,WACA,KAAAsM,QAEND,IACFE,KAAKF,cAAgBA,EACrBE,KAAKvM,SAAWqM,EAAcrM,UAAYuM,KAAKvM,WAWrD,eAEE,WAAmBwM,EAAeC,GAAlC,MACE,YAAMA,IAAI,K,OADO,EAAAD,QADnB,EAAAjE,KAAwB,gB,EAI1B,OALmC,oBAKnC,EALA,CAAmCmE,OC9CtBC,GAAiB,sBAOjBC,GAAoB,SAAUC,EAAsBC,EAAmBC,GAClF,GAAIA,QACF,MAAM,IAAIC,GACRF,EACA,sBAAsBA,EAAS,uCAAuCD,EAAY,MAiC3EI,GAAwB,SAAgBC,EAAab,G,qIAC5DA,GAAiBA,EAAcpE,YAEM,mBAA9BoE,EAAcpE,YAArB,MACI,GAAMoE,EAAcpE,eAHxB,M,cAGI,W,aACA,SAAMoE,EAAcpE,a,OAApB,W,iBAHAA,EAAW,EAIjBiF,EAAsB,cAAI,UAAYjF,E,mCA2B7BkF,GAAkB,SAAUhM,G,IAAU,wDAEjD,IADA,IAAMiM,EAAe,IAAIC,gBAAgBlM,EAAImM,QACxB,MAAAC,EAAA,eAAS,CAAzB,IAAML,EAAM,KACf,IAAK,IAAMjQ,KAAOiQ,EAChB,GAAIM,MAAMC,QAAQP,EAAOjQ,IAAO,CAC9BmQ,EAAaM,OAAOzQ,GACpB,IAAmB,UAAAiQ,EAAOjQ,GAAP,eAAa,CAA3B,IAAM0Q,EAAI,KACbP,EAAaQ,OAAO3Q,EAAK0Q,SAG3BP,EAAaS,IAAI5Q,EAAKiQ,EAAOjQ,IAInCkE,EAAImM,OAASF,EAAaU,YAOfC,GAAwB,SAAU1R,EAAY2R,EAAqB3B,GAC9E,IAAM4B,EAA6B,iBAAV5R,EAKzB,OAHE4R,GAAa5B,GAAiBA,EAAc6B,WACxC7B,EAAc6B,WAAWF,EAAeG,QAAQ,iBAChDF,GACsBG,KAAKC,eAAoBlP,IAAV9C,EAAsBA,EAAQ,IAAMA,GAAS,IAO7EiS,GAAe,SAAUnN,GACpC,OAAOA,EAAIrG,SAAWqG,EAAImM,OAASnM,EAAIoN,MAO5BC,GAAwB,SACnCC,EACAC,EACAtC,EACAC,GAEA,OAAO,SAACC,EAAoCtM,QAApC,IAAAsM,MAAA,QAAoC,IAAAtM,MAAA,GAC1C,IAAM2O,GAAmB,gCAAKF,EAAUG,SAAO,CAAEzN,MAAMkL,aAAa,EAAbA,EAAerM,WAAYA,GAAYyO,EAAUtN,MACxG,OAAOmL,EAAMuC,QAAQF,MF9DzB,SAAYpF,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,MAAsB,KAWlC,SAAYC,GACV,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCF,CAAYA,MAA4B,KAuGxC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,MAA8B,KAW1C,SAAYC,GACV,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCF,CAAYA,MAAoC,KA8iBhD,SAAYC,GACV,4CADF,CAAYA,MAAqC,KAOjD,SAAYC,GACV,oBADF,CAAYA,MAA+B,KAoG3C,SAAYC,GACV,oCADF,CAAYA,MAA8C,KAO1D,SAAYC,GACV,YACA,YACA,sBACA,YACA,cALF,CAAYA,MAAwC,KAsrCpD,SAAYC,GACV,oBACA,wBACA,oBAHF,CAAYA,MAAwB,KA6NpC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,MAAoB,KAgChC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,MAAyB,KAw3CrC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,MAAqB,KAkFjC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,MAA0B,KAsFtC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,MAA4B,KA4DxC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,MAAwB,KAWpC,SAAYC,GACV,oBACA,8BAFF,CAAYA,MAA8B,KAmC1C,SAAYC,GACV,YACA,kBACA,kBAHF,CAAYA,MAA+B,KAS3C,SAAYC,GACV,oBACA,8BAFF,CAAYA,MAAqC,KA2IjD,SAAYC,GACV,4BACA,8BACA,8BAHF,CAAYA,MAAmB,KAkE/B,SAAYC,GACV,4BACA,8BACA,8BAHF,CAAYA,MAAwB,KAkVpC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,MAA0B,KAWtC,SAAYC,GACV,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCF,CAAYA,MAAgC,KAwG5C,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,MAA4B,KAWxC,SAAYC,GACV,oBACA,8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","file":"453.6c73a16d3349d3943a87.js","sourcesContent":["import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { BasenameContext } from '@bf2/ui-shared';\nimport getBaseName from './utils/getBaseName';\nimport { DevelopmentPreview, Loading } from '@app/components';\nimport { QuickStartDrawerWrapper } from '@app/pages';\n\nconst APIManagementPage = React.lazy(() => import('@app/pages/APIManagement/APIManagementPage'));\nconst ArtifactRedirect = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactsRedirect'));\nconst Artifacts = React.lazy(() => import('@app/pages/ServiceRegistry/Artifacts'));\nconst ArtifactVersionDetails = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactVersion'));\nconst DataSciencePage = React.lazy(() => import('@app/pages/DataScience/DataSciencePage'));\n\nconst CreateTopic = React.lazy(() => import('@app/pages/Kafka/CreateTopic'));\nconst Topics = React.lazy(() => import('@app/pages/Kafka/Topics'));\nconst TopicDetails = React.lazy(() => import('@app/pages/Kafka/TopicDetails'));\nconst UpdateTopic = React.lazy(() => import('@app/pages/Kafka/UpdateTopic'));\n\nconst KasPage = React.lazy(() => import('@app/pages/Kas/KasPage'));\nconst NotFoundPage = React.lazy(() => import('@app/pages/NotFound/NotFoundPage'));\nconst OverviewPage = React.lazy(() => import('@app/pages/Overview/OverviewPage'));\nconst ResourcesPage = React.lazy(() => import('@app/pages/Resources/ResourcesPage'));\nconst RulesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RulesPage'));\nconst ServiceAccountsPage = React.lazy(() => import('@app/pages/ServiceAccounts/ServiceAccountsPage'));\nconst CosPage = React.lazy(() => import('@app/pages/CosPage/CosPage'));\nconst ServiceRegistryPage = React.lazy(() => import('@app/pages/ServiceRegistry/ServiceRegistryPage'));\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas/:id',\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas/:id',\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id/topic/create',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas/:id',\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id/topic/update/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas/:id',\n    devPreview: true,\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas',\n    devPreview: true,\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr',\n    title: 'Service Registry',\n    basename: '/sr',\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId',\n    title: 'Service Registry',\n    basename: '/sr',\n    devPreview: true,\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts',\n    title: 'Service Registry',\n    basename: '/sr',\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/rules',\n    title: 'Service Registry',\n    basename: '/sr',\n    devPreview: true,\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts/:groupId/:artifactId',\n    title: 'Service Registry',\n    basename: '/sr',\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version',\n    title: 'Service Registry',\n    basename: '/sr',\n    devPreview: true,\n  },\n  {\n    component: CosPage,\n    exact: false,\n    label: 'COS',\n    path: '/cos',\n    title: 'COS',\n    basename: `${getBaseName(window.location.pathname)}/cos`,\n    devPreview: true,\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams',\n    devPreview: true,\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n    devPreview: true,\n  },\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst WrappedRoute = ({ component: Component, isAsync = false, title, basename, devPreview, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const getBasename = () => {\n    const { computedMatch } = rest || {};\n\n    if (computedMatch?.params?.id && basename) {\n      return basename?.replace(':id', computedMatch?.params?.id);\n    }\n    return basename || '';\n  };\n\n  function wrapRoute(routeProps: RouteComponentProps) {\n    return (\n      <DevelopmentPreview show={devPreview}>\n        <QuickStartDrawerWrapper>\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        </QuickStartDrawerWrapper>\n      </DevelopmentPreview>\n    );\n  }\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <React.Suspense fallback={<Loading />}>\n      <Switch>\n        {flattenedRoutes.map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n          <WrappedRoute\n            path={path}\n            exact={exact}\n            component={component}\n            key={idx}\n            title={title}\n            isAsync={isAsync}\n            {...rest}\n          />\n        ))}\n        <PageNotFound title=\"404 Page Not Found\" />\n      </Switch>\n    </React.Suspense>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport { accessibleRouteChangeHandler };\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport './App.scss';\nimport { InsightsType } from '@app/utils';\nimport { AppRoutes } from '@app/Routes';\nimport { FederatedModuleProvider } from \"@app/components\";\n\nexport const App: React.FunctionComponent = () => {\n  const insights: InsightsType = window['insights'];\n  const history = useHistory();\n\n  const getAppId = () => {\n    const defaultAppId = 'overview';\n\n    const parts = history.location.pathname.split('/');\n    if (parts.length > 1) {\n      if (parts[1] === '') {\n        return defaultAppId;\n      } else {\n        if (parts[1] === 'openshift-streams') {\n          return 'streams';\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal />\n      <AppRoutes />\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","import React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\n// import './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner />\n  </Bullseye>\n);\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@openapi/kas';\n\ntype InstanceDrawerProps = {\n  kafkaDetail: KafkaRequest | undefined;\n  isExpanded: boolean | undefined;\n  activeTab: string;\n  onClose: () => void;\n  isOpenDeleteInstanceModal: boolean;\n  setIsOpenDeleteInstanceModal: (isopen: boolean) => void;\n};\n\nexport const InstanceDrawer: React.FC<InstanceDrawerProps> = ({\n  isExpanded,\n  onClose,\n  kafkaDetail,\n  activeTab,\n  children,\n  setIsOpenDeleteInstanceModal,\n  isOpenDeleteInstanceModal,\n}) => {\n  const config = useConfig()\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={children}\n      render={(InstanceDrawerFederated) => {\n        return (\n          <InstanceDrawerFederated\n            tokenEndPointUrl={tokenEndPointUrl}\n            isExpanded={isExpanded}\n            onClose={onClose}\n            instanceDetail={kafkaDetail}\n            activeTab={activeTab}\n            isOpenDeleteInstanceModal={isOpenDeleteInstanceModal}\n            setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n          >\n            {children}\n          </InstanceDrawerFederated>\n        );\n      }}\n    />\n  );\n};\n","export type ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nexport const getModuleInfo = async (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined> => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ComponentType, ReactNode, useEffect, useRef, useState } from 'react';\nimport { AssetsContext } from \"@bf2/ui-shared\";\nimport { Loading } from \"@app/components/Loading/Loading\";\nimport { getModuleInfo, ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\nimport { FederatedModuleContext } from \"@app/components\";\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false)\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n  return isMounted\n}\n\ndeclare function __webpack_init_sharing__(shareScope: string);\n\ndeclare const __webpack_share_scopes__: {\n  default: unknown\n};\n\ntype Container = {\n  init: (shareScopes: unknown) => Promise<void>;\n  get: (module: string) => Promise<{ (): { default: ComponentType<any>; } }>;\n};\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope] as unknown as Container; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await container.get(module);\n    const Module = factory();\n    console.debug(`loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = (url: string) => {\n  const isMounted = useIsMounted()\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    let element;\n    if (isMounted.current) {\n      if (!url) {\n        setFailed(true);\n        return;\n      }\n\n      element = document.createElement('script');\n\n      element.src = url;\n      element.type = 'text/javascript';\n      element.async = true;\n\n      setReady(false);\n      setFailed(false);\n\n      element.onload = () => {\n        console.log(`Dynamic federated module Loaded: ${url}`);\n        setReady(true);\n      };\n\n      element.onerror = () => {\n        console.error(`Dynamic federated module Error: ${url}`);\n        setReady(false);\n        setFailed(true);\n      };\n\n      document.head.appendChild(element);\n    }\n\n    return () => {\n      if (element) {\n        console.log(`Dynamic federated module Removed: ${url}`);\n        document.head.removeChild(element);\n      }\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: React.ReactNode;\n}\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n  const isMounted = useIsMounted()\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(federatedModuleContext[scope].basePath, scope, federatedModuleContext[scope].fallbackBasePath);\n      if (isMounted.current) {\n        setModuleInfo(moduleInfo);\n      }\n    }\n    fetchModuleInfo();\n  }, [scope, federatedModuleContext]);\n\n  if (moduleInfo !== undefined) {\n    return <DynamicFederatedModule scope={scope} module={module} render={render} moduleInfo={moduleInfo}/>\n  }\n  if (fallback !== undefined) {\n    return <>{fallback}</>;\n  }\n  return null;\n}\n\ntype DynamicFederatedModuleProps = FederatedModuleProps & {\n  moduleInfo: ModuleInfo\n}\n\nconst DynamicFederatedModule: React.FunctionComponent<DynamicFederatedModuleProps> = ({\n                                                                                        moduleInfo,\n                                                                                        fallback,\n                                                                                        scope,\n                                                                                        render,\n                                                                                        module\n                                                                                      }) => {\n  const { ready, failed } = useDynamicScript(moduleInfo.entryPoint);\n\n  if (ready && !failed) {\n    const Component = React.lazy(\n      loadComponent(scope, module)\n    );\n\n    const getPath = () => {\n      return moduleInfo.basePath\n    }\n\n    return (\n      <AssetsContext.Provider value={{ getPath }}>\n        <React.Suspense fallback={<Loading/>}>\n          {render(Component)}\n        </React.Suspense>\n      </AssetsContext.Provider>\n    );\n  }\n\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n  return null;\n}\n","import React from \"react\";\nimport { FederatedModuleConfig, useConfig } from \"@bf2/ui-shared\";\nimport { Loading } from \"@app/components\";\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nexport const FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n","import React from 'react';\nimport { Banner, Bullseye, Button, Popover } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type DevelopmentPreviewProps = {\n  show?: boolean\n}\n\nexport const DevelopmentPreview: React.FunctionComponent<DevelopmentPreviewProps> = ({ children, show }) => {\n  const { t } = useTranslation();\n  if (show) {\n    return <div id='scrollablePageMain' className='pf-c-page__main' style={{ height: '100%' }}>\n      <Banner isSticky variant=\"info\">\n        <Bullseye>\n          <Popover\n            aria-label=\"Development Preview Button\"\n            hasAutoWidth\n            bodyContent={\n              <div>{t('common.developmentPreviewTooltip')}</div>\n            }\n            position='bottom'\n            minWidth='300px'\n            maxWidth='25%'>\n            <Button className='app-services-ui--button--dev-preview' variant='link'>{t('common.developmentPreview')}</Button>\n          </Popover>\n        </Bullseye>\n      </Banner>\n      {children}\n    </div>\n  }\n  return (\n    <>{children}</>\n  )\n}\n","import React from 'react';\nimport { useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule } from '@app/components';\n\ntype MetricsProps = {\n  kafkaId: string;\n  onCreateTopic: () => void;\n};\n\nexport const Metrics: React.FC<MetricsProps> = ({ kafkaId, onCreateTopic }) => {\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./Metrics\"\n      render={(MetricsFederated) => <MetricsFederated kafkaId={kafkaId} onCreateTopic={onCreateTopic} />}\n    />\n  );\n};\n","import en from './en.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst appServicesi18n = i18n.createInstance();\n\nappServicesi18n\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    detection: {\n      order: ['htmlTag', 'navigator'],\n      caches: [],\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    resources,\n  });\n\nexport default appServicesi18n;\n","import React from 'react';\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  Card,\n  CardBody,\n  CardHeader,\n  CardFooter,\n  CardHeaderMain,\n  CardTitle,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  TitleSizes,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport '../../App.scss';\nimport { useTranslation } from 'react-i18next';\n\nexport const APIManagementPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhoam\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('apimgmtoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('apimgmtoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('apimgmtoverview.heroDescription')}</Text>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Grid hasGutter lg={6}>\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h3\">{t('apimgmtoverview.alreadyHaveCardTitle')}</Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t('apimgmtoverview.alreadyHaveCardMainText')}</CardBody>\n            <CardFooter>\n              <Stack hasGutter>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardHaveRHOAM-buttonGoOCM\"\n                    variant={ButtonVariant.secondary}\n                    component=\"a\"\n                    href=\"https://cloud.redhat.com/openshift/\"\n                  >\n                    {t('apimgmtoverview.alreadyHaveCardCallToActionButton')}\n                  </Button>\n                </StackItem>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardHaveRHOAM-linkViewDocs\"\n                    variant={ButtonVariant.link}\n                    component=\"a\"\n                    href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                  </Button>\n                </StackItem>\n              </Stack>{' '}\n            </CardFooter>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h3\">{t('apimgmtoverview.wantToTryCardTitle')}</Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t('apimgmtoverview.wantToTryCardMainText')}</CardBody>\n            <CardFooter>\n              <Stack hasGutter>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardTryRHOAM-buttonGetStarted\"\n                    variant={ButtonVariant.secondary}\n                    component=\"a\"\n                    href=\"https://developers.redhat.com/products/rhoam/getting-started\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.wantToTryCardCallToActionButton')}\n                    <ExternalLinkAltIcon className=\"pf-u-ml-md\" />\n                  </Button>\n                </StackItem>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardTryRHOAM-linkViewDocs\"\n                    variant={ButtonVariant.link}\n                    component=\"a\"\n                    href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                  </Button>\n                </StackItem>\n              </Stack>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </PageSection>\n\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n          {t('apimgmtoverview.videoSectionTitle')}\n        </Title>\n        <Grid hasGutter>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n              <div className=\"app-services-ui--video-wrapper\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/NzNgc0f75pc\"\n                  title={t('apimgmtoverview.videoSectionTitle')}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </div>\n            </Card>\n          </GridItem>\n          <GridItem md={5}>\n            <TextContent>\n              <Text className=\"pf-u-color-200 pf-u-ml-md\">{t('apimgmtoverview.videoSectionInThisVideo')}</Text>\n              <List className=\"app-services-ui--icon-list\">\n                <ListItem>{t('apimgmtoverview.videoSectionBulletBuild')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletImport')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletAdd')}</ListItem>\n              </List>\n            </TextContent>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default APIManagementPage;\n","import { DevelopmentPreview, FederatedModule, Loading } from '@app/components';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { useConfig } from '@bf2/ui-shared';\nimport React from 'react';\n\n\nexport const CosPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"cos\"\n      fallback={<Loading />}\n      module=\"./OpenshiftManagedConnectors\"\n      render={(OpenshiftManagedConnectors) => <OpenshiftManagedConnectors/>}\n    />\n  )\n};\n\nexport default CosPage;\n","import React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Card,\n  Grid,\n  GridItem,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport { useTranslation } from 'react-i18next';\n\nexport const DataSciencePage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhods\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('datascienceoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('datascienceoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('datascienceoverview.heroDescription')}</Text>\n          <StackItem>\n            <Button\n              data-testid=\"hero-buttonLearnMore\"\n              variant={ButtonVariant.secondary}\n              component=\"a\"\n              href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\"\n              target=\"_blank\"\n            >\n              {t('datascienceoverview.heroCallToActionButton')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Grid hasGutter>\n          <GridItem md={5}>\n            <Stack hasGutter>\n              <StackItem>\n                <TextContent>\n                  <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n                    {t('datascienceoverview.videoSectionTitle')}\n                  </Title>\n                  <Text className=\"pf-u-mr-md\">{t('datascienceoverview.videoSectionInThisVideo')}</Text>\n                </TextContent>\n              </StackItem>\n              <StackItem>\n                <Button\n                  data-testid=\"CTA-videoRHODSDemo\"\n                  variant={ButtonVariant.secondary}\n                  component=\"a\"\n                  href=\"http://www.openshift.com/DataScienceVideoDemo\"\n                  target=\"_blank\"\n                >\n                  {t('datascienceoverview.heroViewDemo')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                </Button>\n              </StackItem>\n            </Stack>\n          </GridItem>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n                <div className=\"app-services-ui--video-wrapper\">\n                  <iframe\n                    src=\"https://www.youtube.com/embed/joK89xYeuUY\"\n                    title={t('datascienceoverview.videoSectionTitle')}\n                    frameBorder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                  ></iframe>\n                </div>\n              </Card>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default DataSciencePage;\n","import React from 'react';\nimport { KafkaFederated } from './KafkaFederated';\n\nconst CreateTopic: React.FC = () => {\n  return <KafkaFederated module=\"./CreateTopic\" />;\n};\n\nexport default CreateTopic;\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Configuration, DefaultApi, KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport getBaseName from '@app/utils/getBaseName';\nimport { useAuth, useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule, DevelopmentPreview, InstanceDrawer } from '@app/components';\nimport { AccessDeniedPage, ServiceDownPage } from '@app/pages';\n\ntype KafkaFederatedProps = {\n  module: string;\n  showMetrics?: React.ReactNode;\n  activeTab?: number;\n};\n\nexport const KafkaFederated: React.FunctionComponent<KafkaFederatedProps> = ({ module, showMetrics, activeTab }) => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <KafkaPageConnected module={module} showMetrics={showMetrics} activeTab={activeTab} />;\n};\n\nconst KafkaPageConnected: React.FunctionComponent<KafkaFederatedProps> = ({ module, showMetrics, activeTab }) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const [adminServerUrl, setAdminServerUrl] = useState<undefined | string>();\n  const [kafkaDetail, setKafkaDetail] = useState<KafkaRequest | undefined>();\n\n  const { id, topicName } = useParams<{ id: string; topicName: string }>();\n  const [kafkaName, setKafkaName] = useState<undefined | string>();\n  useEffect(() => {\n    const getAdminApiUrl = async () => {\n      const accessToken = await auth?.kas.getToken();\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath: config?.kas.apiBasePath || '',\n      } as Configuration);\n\n      const kafka = await apisService.getKafkaById(id);\n      setKafkaDetail(kafka.data);\n      setKafkaName(kafka.data.name);\n      setAdminServerUrl(`https://admin-server-${kafka.data.bootstrap_server_host}/rest`);\n    };\n\n    getAdminApiUrl();\n  }, [auth, config, id]);\n\n  if (config === undefined || adminServerUrl === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <KafkaPageContent\n      adminServerUrl={adminServerUrl}\n      id={id}\n      topicName={topicName}\n      kafkaName={kafkaName}\n      kafkaDetail={kafkaDetail}\n      module={module}\n      showMetrics={showMetrics}\n      activeTab={activeTab}\n    />\n  );\n};\n\ntype KafkaPageContentProps = KafkaFederatedProps & {\n  adminServerUrl: string;\n  id: string;\n  topicName?: string;\n  kafkaName?: string;\n  kafkaDetail: KafkaRequest | undefined;\n};\n\nconst KafkaPageContent: React.FunctionComponent<KafkaPageContentProps> = ({\n  adminServerUrl,\n  id,\n  kafkaName,\n  kafkaDetail,\n  module,\n  showMetrics,\n  activeTab,\n}) => {\n  const auth = useAuth();\n\n  const [error, setError] = useState<undefined | number>();\n  const [isInstanceDrawerOpen, setIsInstanceDrawerOpen] = useState<boolean | undefined>();\n  const [activeDrawerTab, setActiveDrawerTab] = useState<string>('');\n  const [isOpenDeleteInstanceModal, setIsOpenDeleteInstanceModal] = useState<boolean>(false);\n\n  const onError = (code: number) => {\n    setError(code);\n  };\n\n  const kafkaPageLink = `${getBaseName(window.location.pathname)}/streams/kafkas/`;\n  const kafkaInstanceLink = `${getBaseName(window.location.pathname)}/streams/kafkas/${id}`;\n\n  const handleInstanceDrawer = (isOpen: boolean, activeTab?: string) => {\n    activeTab && setActiveDrawerTab(activeTab);\n    setIsInstanceDrawerOpen(isOpen);\n  };\n\n  const onCloseInstanceDrawer = () => {\n    setIsInstanceDrawerOpen(false);\n  };\n\n  let kafkaUIPage = (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => (\n        <FederatedKafka\n          getToken={auth?.kafka.getToken}\n          apiBasePath={adminServerUrl}\n          kafkaName={kafkaName}\n          kafkaPageLink={kafkaPageLink}\n          kafkaInstanceLink={kafkaInstanceLink}\n          onError={onError}\n          handleInstanceDrawer={handleInstanceDrawer}\n          setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n          showMetrics={showMetrics}\n          activeTab={activeTab}\n        />\n      )}\n    />\n  );\n\n  if (error === 401) {\n    kafkaUIPage = <AccessDeniedPage />;\n  }\n\n  return (\n    <div className=\"app-services-ui--u-display-contents\" data-ouia-app-id=\"dataPlane-streams\">\n      <DevelopmentPreview>\n        <InstanceDrawer\n          isExpanded={isInstanceDrawerOpen}\n          onClose={onCloseInstanceDrawer}\n          kafkaDetail={kafkaDetail}\n          activeTab={activeDrawerTab}\n          isOpenDeleteInstanceModal={isOpenDeleteInstanceModal}\n          setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n        >\n          {kafkaUIPage}\n        </InstanceDrawer>\n      </DevelopmentPreview>\n    </div>\n  );\n};\n","import React from 'react';\nimport { KafkaFederated } from './KafkaFederated';\n\nconst TopicDetails: React.FC = () => {\n  return <KafkaFederated module=\"./TopicDetails\" />;\n};\n\nexport default TopicDetails;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { KafkaFederated } from './KafkaFederated';\nimport { Metrics } from '@app/components';\n\nconst Topics: React.FC = () => {\n  const { id } = useParams<{ id: string }>();\n\n  const showMetrics = () => {\n    return <Metrics kafkaId={id} />;\n  };\n\n  return <KafkaFederated module=\"./KafkaMainView\" showMetrics={showMetrics()} />;\n};\n\nexport default Topics;\n","import React from 'react';\nimport { KafkaFederated } from './KafkaFederated';\n\nconst UpdateTopic: React.FC = () => {\n  return <KafkaFederated module=\"./UpdateTopic\" />;\n};\n\nexport default UpdateTopic;\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n *\n * @export\n * @interface AccessReview\n */\nexport interface AccessReview {\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  action: AccessReviewActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  resource_type: AccessReviewResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface AccessReviewResponse\n */\nexport interface AccessReviewResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  action?: AccessReviewResponseActionEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccessReviewResponse\n   */\n  allowed: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  resource_type?: AccessReviewResponseResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResponseActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResponseResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface AccessTokenCfg\n */\nexport interface AccessTokenCfg {\n  /**\n   *\n   * @type {{ [key: string]: object; }}\n   * @memberof AccessTokenCfg\n   */\n  auths: { [key: string]: object };\n}\n/**\n *\n * @export\n * @interface Account\n */\nexport interface Account {\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Account\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Account\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Account\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {Organization}\n   * @memberof Account\n   */\n  organization?: Organization;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Account\n   */\n  service_account?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  username: string;\n}\n/**\n *\n * @export\n * @interface AccountAllOf\n */\nexport interface AccountAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountAllOf\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof AccountAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof AccountAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {Organization}\n   * @memberof AccountAllOf\n   */\n  organization?: Organization;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountAllOf\n   */\n  service_account?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  username: string;\n}\n/**\n *\n * @export\n * @interface AccountList\n */\nexport interface AccountList {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof AccountList\n   */\n  items: Array<Account>;\n}\n/**\n *\n * @export\n * @interface AccountListAllOf\n */\nexport interface AccountListAllOf {\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof AccountListAllOf\n   */\n  items?: Array<Account>;\n}\n/**\n *\n * @export\n * @interface AccountPatchRequest\n */\nexport interface AccountPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountPatchRequest\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountPatchRequest\n   */\n  service_account?: boolean;\n}\n/**\n *\n * @export\n * @interface AccountReference\n */\nexport interface AccountReference {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface AccountReferenceAllOf\n */\nexport interface AccountReferenceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface Capability\n */\nexport interface Capability {\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Capability\n   */\n  inherited: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface CapabilityAllOf\n */\nexport interface CapabilityAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof CapabilityAllOf\n   */\n  inherited: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityAllOf\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityAllOf\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface CapabilityReview\n */\nexport interface CapabilityReview {\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReview\n   */\n  result: string;\n}\n/**\n *\n * @export\n * @interface CapabilityReviewRequest\n */\nexport interface CapabilityReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  capability: CapabilityReviewRequestCapabilityEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  type: CapabilityReviewRequestTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum CapabilityReviewRequestCapabilityEnum {\n  ManageClusterAdmin = 'manage_cluster_admin',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum CapabilityReviewRequestTypeEnum {\n  Cluster = 'Cluster',\n}\n\n/**\n *\n * @export\n * @interface ClusterAuthorizationRequest\n */\nexport interface ClusterAuthorizationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  availability_zone?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  byoc?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cluster_id: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  disconnected?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  product_category?: ClusterAuthorizationRequestProductCategoryEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  product_id?: ClusterAuthorizationRequestProductIdEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  reserve?: boolean;\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ClusterAuthorizationRequest\n   */\n  resources?: Array<ReservedResource>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ClusterAuthorizationRequestProductCategoryEnum {\n  AssistedInstall = 'assistedInstall',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ClusterAuthorizationRequestProductIdEnum {\n  Ocp = 'ocp',\n  Osd = 'osd',\n  Osdtrial = 'osdtrial',\n  Moa = 'moa',\n  Rhmi = 'rhmi',\n}\n\n/**\n *\n * @export\n * @interface ClusterAuthorizationResponse\n */\nexport interface ClusterAuthorizationResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationResponse\n   */\n  allowed: boolean;\n  /**\n   *\n   * @type {Array<ExcessResource>}\n   * @memberof ClusterAuthorizationResponse\n   */\n  excess_resources: Array<ExcessResource>;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationResponse\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ClusterAuthorizationResponse\n   */\n  subscription?: ObjectReference;\n}\n/**\n *\n * @export\n * @interface ClusterMetricsNodes\n */\nexport interface ClusterMetricsNodes {\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  compute?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  infra?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  master?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  total?: number;\n}\n/**\n *\n * @export\n * @interface ClusterRegistrationRequest\n */\nexport interface ClusterRegistrationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationRequest\n   */\n  authorization_token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationRequest\n   */\n  cluster_id?: string;\n}\n/**\n *\n * @export\n * @interface ClusterRegistrationResponse\n */\nexport interface ClusterRegistrationResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  authorization_token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  cluster_id?: string;\n  /**\n   * Cluster Registration expiration in Unix time\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  expires_at?: string;\n}\n/**\n *\n * @export\n * @interface ClusterResource\n */\nexport interface ClusterResource {\n  /**\n   *\n   * @type {ClusterResourceTotal}\n   * @memberof ClusterResource\n   */\n  total: ClusterResourceTotal;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterResource\n   */\n  updated_timestamp: string;\n  /**\n   *\n   * @type {ClusterResourceTotal}\n   * @memberof ClusterResource\n   */\n  used: ClusterResourceTotal;\n}\n/**\n *\n * @export\n * @interface ClusterResourceTotal\n */\nexport interface ClusterResourceTotal {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterResourceTotal\n   */\n  unit: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterResourceTotal\n   */\n  value: number;\n}\n/**\n *\n * @export\n * @interface ClusterUpgrade\n */\nexport interface ClusterUpgrade {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterUpgrade\n   */\n  available?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  updated_timestamp?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  version?: string;\n}\n/**\n *\n * @export\n * @interface EphemeralResourceQuota\n */\nexport interface EphemeralResourceQuota {\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof EphemeralResourceQuota\n   */\n  byoc?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EphemeralResourceQuota\n   */\n  sku_count?: number;\n}\n/**\n *\n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  operation_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  reason?: string;\n}\n/**\n *\n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Error>}\n   * @memberof ErrorList\n   */\n  items: Array<Error>;\n}\n/**\n *\n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n  /**\n   *\n   * @type {Array<Error>}\n   * @memberof ErrorListAllOf\n   */\n  items?: Array<Error>;\n}\n/**\n *\n * @export\n * @interface ExcessResource\n */\nexport interface ExcessResource {\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExcessResource\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ExcessResource\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  resource_type?: string;\n}\n/**\n *\n * @export\n * @interface ExcessResourceAllOf\n */\nexport interface ExcessResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExcessResourceAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ExcessResourceAllOf\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  resource_type?: string;\n}\n/**\n *\n * @export\n * @interface ExportControlReview\n */\nexport interface ExportControlReview {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExportControlReview\n   */\n  restricted: boolean;\n}\n/**\n *\n * @export\n * @interface ExportControlReviewRequest\n */\nexport interface ExportControlReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ExportControlReviewRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExportControlReviewRequest\n   */\n  ignore_cache?: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureReview\n */\nexport interface FeatureReview {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReview\n   */\n  feature: string;\n}\n/**\n *\n * @export\n * @interface FeatureReviewResponse\n */\nexport interface FeatureReviewResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureReviewResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReviewResponse\n   */\n  feature_id: string;\n}\n/**\n *\n * @export\n * @interface FeatureToggle\n */\nexport interface FeatureToggle {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureToggle\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureToggleAllOf\n */\nexport interface FeatureToggleAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureToggleAllOf\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureToggleQueryRequest\n */\nexport interface FeatureToggleQueryRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggleQueryRequest\n   */\n  organization_id: string;\n}\n/**\n *\n * @export\n * @interface FeatureToggleQueryRequestAllOf\n */\nexport interface FeatureToggleQueryRequestAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggleQueryRequestAllOf\n   */\n  organization_id: string;\n}\n/**\n *\n * @export\n * @interface Label\n */\nexport interface Label {\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Label\n   */\n  internal: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  key: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface LabelAllOf\n */\nexport interface LabelAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof LabelAllOf\n   */\n  internal: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  key: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface LabelList\n */\nexport interface LabelList {\n  /**\n   *\n   * @type {string}\n   * @memberof LabelList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof LabelList\n   */\n  items: Array<Label>;\n}\n/**\n *\n * @export\n * @interface LabelListAllOf\n */\nexport interface LabelListAllOf {\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof LabelListAllOf\n   */\n  items?: Array<Label>;\n}\n/**\n *\n * @export\n * @interface List\n */\nexport interface List {\n  /**\n   *\n   * @type {string}\n   * @memberof List\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  total: number;\n}\n/**\n *\n * @export\n * @interface Metric\n */\nexport interface Metric {\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  health_state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  metrics?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  query_timestamp?: string;\n}\n/**\n *\n * @export\n * @interface MetricAllOf\n */\nexport interface MetricAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  health_state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  metrics?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  query_timestamp?: string;\n}\n/**\n *\n * @export\n * @interface MetricsList\n */\nexport interface MetricsList {\n  /**\n   *\n   * @type {string}\n   * @memberof MetricsList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Metric>}\n   * @memberof MetricsList\n   */\n  items: Array<Metric>;\n}\n/**\n *\n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n  /**\n   *\n   * @type {Array<Metric>}\n   * @memberof MetricsListAllOf\n   */\n  items?: Array<Metric>;\n}\n/**\n *\n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  operation_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  reason?: string;\n}\n/**\n *\n * @export\n * @interface NotificationContactCreateRequest\n */\nexport interface NotificationContactCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationContactCreateRequest\n   */\n  account_identifier?: string;\n}\n/**\n *\n * @export\n * @interface NotificationRequest\n */\nexport interface NotificationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  bcc_address?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof NotificationRequest\n   */\n  include_red_hat_associates?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  subject?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  template_name: string;\n  /**\n   *\n   * @type {Array<TemplateParameter>}\n   * @memberof NotificationRequest\n   */\n  template_parameters?: Array<TemplateParameter>;\n}\n/**\n *\n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  kind?: string;\n}\n/**\n *\n * @export\n * @interface OneMetric\n */\nexport interface OneMetric {\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  cluster_type: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_cpu: ClusterResource;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_memory: ClusterResource;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_sockets: ClusterResource;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  console_url: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  cpu: ClusterResource;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  critical_alerts_firing: number;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  health_state?: OneMetricHealthStateEnum;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  memory: ClusterResource;\n  /**\n   *\n   * @type {ClusterMetricsNodes}\n   * @memberof OneMetric\n   */\n  nodes: ClusterMetricsNodes;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  openshift_version: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  operating_system: string;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  operators_condition_failing: number;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  query_timestamp?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  region: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  sockets: ClusterResource;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  state: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  state_description: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  storage: ClusterResource;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_cpu_total: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_obligation_exists: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_socket_total: number;\n  /**\n   *\n   * @type {ClusterUpgrade}\n   * @memberof OneMetric\n   */\n  upgrade: ClusterUpgrade;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum OneMetricHealthStateEnum {\n  Healthy = 'healthy',\n  Unhealthy = 'unhealthy',\n  Unknown = 'unknown',\n}\n\n/**\n *\n * @export\n * @interface Organization\n */\nexport interface Organization {\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  kind?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Organization\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Organization\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface OrganizationAllOf\n */\nexport interface OrganizationAllOf {\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof OrganizationAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof OrganizationAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface OrganizationList\n */\nexport interface OrganizationList {\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Organization>}\n   * @memberof OrganizationList\n   */\n  items: Array<Organization>;\n}\n/**\n *\n * @export\n * @interface OrganizationListAllOf\n */\nexport interface OrganizationListAllOf {\n  /**\n   *\n   * @type {Array<Organization>}\n   * @memberof OrganizationListAllOf\n   */\n  items?: Array<Organization>;\n}\n/**\n *\n * @export\n * @interface OrganizationPatchRequest\n */\nexport interface OrganizationPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface Permission\n */\nexport interface Permission {\n  /**\n   *\n   * @type {string}\n   * @memberof Permission\n   */\n  action?: PermissionActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Permission\n   */\n  resource?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum PermissionActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n\n/**\n *\n * @export\n * @interface PermissionAllOf\n */\nexport interface PermissionAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionAllOf\n   */\n  action?: PermissionAllOfActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionAllOf\n   */\n  resource?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum PermissionAllOfActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n\n/**\n *\n * @export\n * @interface PermissionList\n */\nexport interface PermissionList {\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof PermissionList\n   */\n  items: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface PermissionListAllOf\n */\nexport interface PermissionListAllOf {\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof PermissionListAllOf\n   */\n  items?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface Plan\n */\nexport interface Plan {\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  category?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface PlanAllOf\n */\nexport interface PlanAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  category?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface PlanList\n */\nexport interface PlanList {\n  /**\n   *\n   * @type {string}\n   * @memberof PlanList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Plan>}\n   * @memberof PlanList\n   */\n  items: Array<Plan>;\n}\n/**\n *\n * @export\n * @interface PlanListAllOf\n */\nexport interface PlanListAllOf {\n  /**\n   *\n   * @type {Array<Plan>}\n   * @memberof PlanListAllOf\n   */\n  items?: Array<Plan>;\n}\n/**\n *\n * @export\n * @interface PullSecretRequest\n */\nexport interface PullSecretRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof PullSecretRequest\n   */\n  external_resource_id: string;\n}\n/**\n *\n * @export\n * @interface QuotaCost\n */\nexport interface QuotaCost {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCost\n   */\n  allowed: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCost\n   */\n  consumed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  quota_id: string;\n  /**\n   *\n   * @type {Array<RelatedResource>}\n   * @memberof QuotaCost\n   */\n  related_resources?: Array<RelatedResource>;\n}\n/**\n *\n * @export\n * @interface QuotaCostAllOf\n */\nexport interface QuotaCostAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostAllOf\n   */\n  allowed: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostAllOf\n   */\n  consumed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostAllOf\n   */\n  quota_id: string;\n  /**\n   *\n   * @type {Array<RelatedResource>}\n   * @memberof QuotaCostAllOf\n   */\n  related_resources?: Array<RelatedResource>;\n}\n/**\n *\n * @export\n * @interface QuotaCostList\n */\nexport interface QuotaCostList {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<QuotaCost>}\n   * @memberof QuotaCostList\n   */\n  items: Array<QuotaCost>;\n}\n/**\n *\n * @export\n * @interface QuotaCostListAllOf\n */\nexport interface QuotaCostListAllOf {\n  /**\n   *\n   * @type {Array<QuotaCost>}\n   * @memberof QuotaCostListAllOf\n   */\n  items?: Array<QuotaCost>;\n}\n/**\n *\n * @export\n * @interface QuotaSummary\n */\nexport interface QuotaSummary {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummary\n   */\n  allowed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof QuotaSummary\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummary\n   */\n  reserved: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryAllOf\n */\nexport interface QuotaSummaryAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryAllOf\n   */\n  allowed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof QuotaSummaryAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryAllOf\n   */\n  reserved: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryList\n */\nexport interface QuotaSummaryList {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<QuotaSummary>}\n   * @memberof QuotaSummaryList\n   */\n  items: Array<QuotaSummary>;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryListAllOf\n */\nexport interface QuotaSummaryListAllOf {\n  /**\n   *\n   * @type {Array<QuotaSummary>}\n   * @memberof QuotaSummaryListAllOf\n   */\n  items?: Array<QuotaSummary>;\n}\n/**\n *\n * @export\n * @interface Registry\n */\nexport interface Registry {\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Registry\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RegistryAllOf\n */\nexport interface RegistryAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryAllOf\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCreateRequest\n */\nexport interface RegistryCreateRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryCreateRequest\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  url: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredential\n */\nexport interface RegistryCredential {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  kind?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredential\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredential\n   */\n  registry?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialAllOf\n */\nexport interface RegistryCredentialAllOf {\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredentialAllOf\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredentialAllOf\n   */\n  registry?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialList\n */\nexport interface RegistryCredentialList {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<RegistryCredential>}\n   * @memberof RegistryCredentialList\n   */\n  items: Array<RegistryCredential>;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialListAllOf\n */\nexport interface RegistryCredentialListAllOf {\n  /**\n   *\n   * @type {Array<RegistryCredential>}\n   * @memberof RegistryCredentialListAllOf\n   */\n  items?: Array<RegistryCredential>;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialPatchRequest\n */\nexport interface RegistryCredentialPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  registry_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryList\n */\nexport interface RegistryList {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Registry>}\n   * @memberof RegistryList\n   */\n  items: Array<Registry>;\n}\n/**\n *\n * @export\n * @interface RegistryListAllOf\n */\nexport interface RegistryListAllOf {\n  /**\n   *\n   * @type {Array<Registry>}\n   * @memberof RegistryListAllOf\n   */\n  items?: Array<Registry>;\n}\n/**\n *\n * @export\n * @interface RegistryRequest\n */\nexport interface RegistryRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryRequest\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RelatedResource\n */\nexport interface RelatedResource {\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  billing_model: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  byoc: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RelatedResource\n   */\n  cost: number;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  product: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  product_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface RelatedResourceAllOf\n */\nexport interface RelatedResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  billing_model: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  byoc: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RelatedResourceAllOf\n   */\n  cost: number;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  product: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  product_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface ReservedResource\n */\nexport interface ReservedResource {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResource\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResource\n   */\n  cluster?: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResource\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ReservedResource\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface ReservedResourceAllOf\n */\nexport interface ReservedResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResourceAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResourceAllOf\n   */\n  cluster?: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceAllOf\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ReservedResourceAllOf\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface ReservedResourceList\n */\nexport interface ReservedResourceList {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ReservedResourceList\n   */\n  items: Array<ReservedResource>;\n}\n/**\n *\n * @export\n * @interface ReservedResourceListAllOf\n */\nexport interface ReservedResourceListAllOf {\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ReservedResourceListAllOf\n   */\n  items?: Array<ReservedResource>;\n}\n/**\n *\n * @export\n * @interface ResourceQuota\n */\nexport interface ResourceQuota {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  resource_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuota\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  type?: ResourceQuotaTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceQuotaAllOf\n */\nexport interface ResourceQuotaAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  resource_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaAllOf\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  type?: ResourceQuotaAllOfTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaAllOfTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceQuotaList\n */\nexport interface ResourceQuotaList {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<ResourceQuota>}\n   * @memberof ResourceQuotaList\n   */\n  items: Array<ResourceQuota>;\n}\n/**\n *\n * @export\n * @interface ResourceQuotaListAllOf\n */\nexport interface ResourceQuotaListAllOf {\n  /**\n   *\n   * @type {Array<ResourceQuota>}\n   * @memberof ResourceQuotaListAllOf\n   */\n  items?: Array<ResourceQuota>;\n}\n/**\n *\n * @export\n * @interface ResourceQuotaRequest\n */\nexport interface ResourceQuotaRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaRequest\n   */\n  sku: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaRequest\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaRequest\n   */\n  type?: ResourceQuotaRequestTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaRequestTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceReview\n */\nexport interface ResourceReview {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  action: ResourceReviewActionEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  cluster_ids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  cluster_uuids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  organization_ids: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  resource_type: ResourceReviewResourceTypeEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  subscription_ids: Array<string>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceReviewRequest\n */\nexport interface ResourceReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  account_username?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  action?: ResourceReviewRequestActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  resource_type?: ResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewRequestActionEnum {\n  Get = 'get',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewRequestResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface Role\n */\nexport interface Role {\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof Role\n   */\n  permissions?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface RoleAllOf\n */\nexport interface RoleAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof RoleAllOf\n   */\n  permissions?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface RoleBinding\n */\nexport interface RoleBinding {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  kind?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBinding\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  organization?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  role?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  type?: RoleBindingTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum RoleBindingTypeEnum {\n  Application = 'Application',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n}\n\n/**\n *\n * @export\n * @interface RoleBindingAllOf\n */\nexport interface RoleBindingAllOf {\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingAllOf\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  organization?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  role?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  type?: RoleBindingAllOfTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum RoleBindingAllOfTypeEnum {\n  Application = 'Application',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n}\n\n/**\n *\n * @export\n * @interface RoleBindingCreateRequest\n */\nexport interface RoleBindingCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  account_id: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingCreateRequest\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  role_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface RoleBindingList\n */\nexport interface RoleBindingList {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<RoleBinding>}\n   * @memberof RoleBindingList\n   */\n  items: Array<RoleBinding>;\n}\n/**\n *\n * @export\n * @interface RoleBindingListAllOf\n */\nexport interface RoleBindingListAllOf {\n  /**\n   *\n   * @type {Array<RoleBinding>}\n   * @memberof RoleBindingListAllOf\n   */\n  items?: Array<RoleBinding>;\n}\n/**\n *\n * @export\n * @interface RoleBindingRequest\n */\nexport interface RoleBindingRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingRequest\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  role_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface RoleList\n */\nexport interface RoleList {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Role>}\n   * @memberof RoleList\n   */\n  items: Array<Role>;\n}\n/**\n *\n * @export\n * @interface RoleListAllOf\n */\nexport interface RoleListAllOf {\n  /**\n   *\n   * @type {Array<Role>}\n   * @memberof RoleListAllOf\n   */\n  items?: Array<Role>;\n}\n/**\n *\n * @export\n * @interface SKU\n */\nexport interface SKU {\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SKU\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {Array<EphemeralResourceQuota>}\n   * @memberof SKU\n   */\n  resources?: Array<EphemeralResourceQuota>;\n}\n/**\n *\n * @export\n * @interface SKUAllOf\n */\nexport interface SKUAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SKUAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {Array<EphemeralResourceQuota>}\n   * @memberof SKUAllOf\n   */\n  resources?: Array<EphemeralResourceQuota>;\n}\n/**\n *\n * @export\n * @interface SelfAccessReview\n */\nexport interface SelfAccessReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  action: SelfAccessReviewActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  resource_type: SelfAccessReviewResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfAccessReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfAccessReviewResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface SelfFeatureReview\n */\nexport interface SelfFeatureReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfFeatureReview\n   */\n  feature: string;\n}\n/**\n *\n * @export\n * @interface SelfResourceReview\n */\nexport interface SelfResourceReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReview\n   */\n  action: SelfResourceReviewActionEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  cluster_ids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  cluster_uuids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  organization_ids: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReview\n   */\n  resource_type: SelfResourceReviewResourceTypeEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  subscription_ids: Array<string>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface SelfResourceReviewRequest\n */\nexport interface SelfResourceReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReviewRequest\n   */\n  action?: SelfResourceReviewRequestActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReviewRequest\n   */\n  resource_type?: SelfResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewRequestActionEnum {\n  Get = 'get',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewRequestResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface SelfTermsReview\n */\nexport interface SelfTermsReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfTermsReview\n   */\n  event_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfTermsReview\n   */\n  site_code?: string;\n}\n/**\n *\n * @export\n * @interface SkuList\n */\nexport interface SkuList {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<SKU>}\n   * @memberof SkuList\n   */\n  items: Array<SKU>;\n}\n/**\n *\n * @export\n * @interface SkuListAllOf\n */\nexport interface SkuListAllOf {\n  /**\n   *\n   * @type {Array<SKU>}\n   * @memberof SkuListAllOf\n   */\n  items?: Array<SKU>;\n}\n/**\n *\n * @export\n * @interface SkuRules\n */\nexport interface SkuRules {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRules\n   */\n  allowed?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  quota_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  sku?: string;\n}\n/**\n *\n * @export\n * @interface SkuRulesAllOf\n */\nexport interface SkuRulesAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesAllOf\n   */\n  allowed?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesAllOf\n   */\n  quota_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesAllOf\n   */\n  sku?: string;\n}\n/**\n *\n * @export\n * @interface SkuRulesList\n */\nexport interface SkuRulesList {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<SkuRules>}\n   * @memberof SkuRulesList\n   */\n  items: Array<SkuRules>;\n}\n/**\n *\n * @export\n * @interface SkuRulesListAllOf\n */\nexport interface SkuRulesListAllOf {\n  /**\n   *\n   * @type {Array<SkuRules>}\n   * @memberof SkuRulesListAllOf\n   */\n  items?: Array<SkuRules>;\n}\n/**\n *\n * @export\n * @interface Subscription\n */\nexport interface Subscription {\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  kind?: string;\n  /**\n   * If set, the date the subscription expires based on the billing model\n   * @type {string}\n   * @memberof Subscription\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Subscription\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cluster_billing_model?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof Subscription\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {AccountReference}\n   * @memberof Subscription\n   */\n  creator?: AccountReference;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Subscription\n   */\n  labels?: Array<Label>;\n  /**\n   * Last time this subscription were reconciled about cluster usage\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_reconcile_date?: string;\n  /**\n   * Last time status was set to Released for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_released_at?: string;\n  /**\n   * Last telemetry authorization request for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_telemetry_date?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Subscription\n   */\n  managed: boolean;\n  /**\n   *\n   * @type {Array<OneMetric>}\n   * @memberof Subscription\n   */\n  metrics?: Array<OneMetric>;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof Subscription\n   */\n  notification_contacts?: Array<Account>;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {Plan}\n   * @memberof Subscription\n   */\n  plan?: Plan;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  product_bundle?: SubscriptionProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Subscription\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  service_level?: SubscriptionServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof Subscription\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  support_level?: SubscriptionSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  system_units?: SubscriptionSystemUnitsEnum;\n  /**\n   * If the subscription is a trial, date the trial ends\n   * @type {string}\n   * @memberof Subscription\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  usage?: SubscriptionUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionAllOf\n */\nexport interface SubscriptionAllOf {\n  /**\n   * If set, the date the subscription expires based on the billing model\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof SubscriptionAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cluster_billing_model?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionAllOf\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {AccountReference}\n   * @memberof SubscriptionAllOf\n   */\n  creator?: AccountReference;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof SubscriptionAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   * Last time this subscription were reconciled about cluster usage\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_reconcile_date?: string;\n  /**\n   * Last time status was set to Released for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_released_at?: string;\n  /**\n   * Last telemetry authorization request for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_telemetry_date?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionAllOf\n   */\n  managed: boolean;\n  /**\n   *\n   * @type {Array<OneMetric>}\n   * @memberof SubscriptionAllOf\n   */\n  metrics?: Array<OneMetric>;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof SubscriptionAllOf\n   */\n  notification_contacts?: Array<Account>;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {Plan}\n   * @memberof SubscriptionAllOf\n   */\n  plan?: Plan;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  product_bundle?: SubscriptionAllOfProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionAllOf\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  service_level?: SubscriptionAllOfServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionAllOf\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  support_level?: SubscriptionAllOfSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  system_units?: SubscriptionAllOfSystemUnitsEnum;\n  /**\n   * If the subscription is a trial, date the trial ends\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  usage?: SubscriptionAllOfUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionCreateRequest\n */\nexport interface SubscriptionCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  cluster_uuid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  plan_id: SubscriptionCreateRequestPlanIdEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  status: SubscriptionCreateRequestStatusEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionCreateRequestPlanIdEnum {\n  Ocp = 'OCP',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionCreateRequestStatusEnum {\n  Disconnected = 'Disconnected',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionList\n */\nexport interface SubscriptionList {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Subscription>}\n   * @memberof SubscriptionList\n   */\n  items: Array<Subscription>;\n}\n/**\n *\n * @export\n * @interface SubscriptionListAllOf\n */\nexport interface SubscriptionListAllOf {\n  /**\n   *\n   * @type {Array<Subscription>}\n   * @memberof SubscriptionListAllOf\n   */\n  items?: Array<Subscription>;\n}\n/**\n *\n * @export\n * @interface SubscriptionPatchRequest\n */\nexport interface SubscriptionPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cluster_billing_model?: SubscriptionPatchRequestClusterBillingModelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionPatchRequest\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  creator_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionPatchRequest\n   */\n  managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  plan_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  product_bundle?: SubscriptionPatchRequestProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionPatchRequest\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  service_level?: SubscriptionPatchRequestServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionPatchRequest\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  support_level?: SubscriptionPatchRequestSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  system_units?: SubscriptionPatchRequestSystemUnitsEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  usage?: SubscriptionPatchRequestUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestClusterBillingModelEnum {\n  Standard = 'standard',\n  Marketplace = 'marketplace',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface Summary\n */\nexport interface Summary {\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  kind?: string;\n  /**\n   *\n   * @type {Array<SummaryMetrics>}\n   * @memberof Summary\n   */\n  metrics: Array<SummaryMetrics>;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface SummaryAllOf\n */\nexport interface SummaryAllOf {\n  /**\n   *\n   * @type {Array<SummaryMetrics>}\n   * @memberof SummaryAllOf\n   */\n  metrics: Array<SummaryMetrics>;\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryAllOf\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface SummaryMetrics\n */\nexport interface SummaryMetrics {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryMetrics\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<SummaryVector>}\n   * @memberof SummaryMetrics\n   */\n  vector?: Array<SummaryVector>;\n}\n/**\n *\n * @export\n * @interface SummaryMetricsAllOf\n */\nexport interface SummaryMetricsAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryMetricsAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<SummaryVector>}\n   * @memberof SummaryMetricsAllOf\n   */\n  vector?: Array<SummaryVector>;\n}\n/**\n *\n * @export\n * @interface SummaryVector\n */\nexport interface SummaryVector {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryVector\n   */\n  time?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SummaryVector\n   */\n  value?: number;\n}\n/**\n *\n * @export\n * @interface SummaryVectorAllOf\n */\nexport interface SummaryVectorAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryVectorAllOf\n   */\n  time?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SummaryVectorAllOf\n   */\n  value?: number;\n}\n/**\n *\n * @export\n * @interface SupportCasesCreatedResponse\n */\nexport interface SupportCasesCreatedResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  caseNumber?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  description?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  severity?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  summary?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  uri?: string;\n}\n/**\n *\n * @export\n * @interface SupportCasesRequest\n */\nexport interface SupportCasesRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  account_number?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  case_language?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  contact_sso_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  description: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  event_stream_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  openshift_cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  product?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  severity: SupportCasesRequestSeverityEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  summary: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  version?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SupportCasesRequestSeverityEnum {\n  _1Urgent = '1 (Urgent)',\n  _2High = '2 (High)',\n  _3Normal = '3 (Normal)',\n  _4Low = '4 (Low)',\n}\n\n/**\n *\n * @export\n * @interface TemplateParameter\n */\nexport interface TemplateParameter {\n  /**\n   *\n   * @type {string}\n   * @memberof TemplateParameter\n   */\n  content: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TemplateParameter\n   */\n  name: string;\n}\n/**\n *\n * @export\n * @interface TermsReview\n */\nexport interface TermsReview {\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  event_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  site_code?: string;\n}\n/**\n *\n * @export\n * @interface TermsReviewResponse\n */\nexport interface TermsReviewResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  account_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  organization_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  redirect_url?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof TermsReviewResponse\n   */\n  terms_available: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof TermsReviewResponse\n   */\n  terms_required: boolean;\n}\n/**\n *\n * @export\n * @interface TokenAuthorizationRequest\n */\nexport interface TokenAuthorizationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof TokenAuthorizationRequest\n   */\n  authorization_token?: string;\n}\n/**\n *\n * @export\n * @interface TokenAuthorizationResponse\n */\nexport interface TokenAuthorizationResponse {\n  /**\n   *\n   * @type {Account}\n   * @memberof TokenAuthorizationResponse\n   */\n  account?: Account;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccessTokenPost: async (options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/access_token`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdGet: async (\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdPatch: async (\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id);\n      // verify required parameter 'accountPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsPost: async (\n      account: Account,\n      dryRun?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'account' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (dryRun !== undefined) {\n        localVarQueryParameter['dryRun'] = dryRun;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost: async (\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'clusterAuthorizationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1ClusterAuthorizationsPost',\n        'clusterAuthorizationRequest',\n        clusterAuthorizationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        clusterAuthorizationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost: async (\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'clusterRegistrationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1ClusterRegistrationsPost',\n        'clusterRegistrationRequest',\n        clusterRegistrationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        clusterRegistrationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1CurrentAccountGet: async (fetchLabels?: boolean, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/current_account`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/errors`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id);\n      // verify required parameter 'featureToggleQueryRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1FeatureTogglesIdQueryPost',\n        'featureToggleQueryRequest',\n        featureToggleQueryRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        featureToggleQueryRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1LabelsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/labels`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1MetricsGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/metrics`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1NotifyPost: async (\n      notificationRequest: NotificationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'notificationRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/notify`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdGet: async (\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch: async (\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id);\n      // verify required parameter 'organizationPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        organizationPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (\n      id: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: async (\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fetchRelatedResources !== undefined) {\n        localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet: async (\n      orgId: string,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_summary`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId);\n      // verify required parameter 'resourceQuotaRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost',\n        'resourceQuotaRequest',\n        resourceQuotaRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (\n      orgId: string,\n      quotaId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (\n      orgId: string,\n      quotaId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId);\n      // verify required parameter 'resourceQuotaRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch',\n        'resourceQuotaRequest',\n        resourceQuotaRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'organization' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/plans`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (\n      externalResourceId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'externalResourceId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1PullSecretsExternalResourceIdDelete',\n        'externalResourceId',\n        externalResourceId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`.replace(\n        `{${'externalResourceId'}}`,\n        encodeURIComponent(String(externalResourceId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsPost: async (\n      pullSecretRequest: PullSecretRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'pullSecretRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/registries`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch: async (\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id);\n      // verify required parameter 'registryCredentialPatchRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1RegistryCredentialsIdPatch',\n        'registryCredentialPatchRequest',\n        registryCredentialPatchRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        registryCredentialPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost: async (\n      registryCredential: RegistryCredential,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'registryCredential' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ReservedResourcesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ResourceQuotaGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch: async (\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id);\n      // verify required parameter 'roleBindingRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsPost: async (\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'roleBindingCreateRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleBindingCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/roles`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/skus`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fetchAccounts !== undefined) {\n        localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (labels !== undefined) {\n        localVarQueryParameter['labels'] = labels;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet: async (\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchAccounts !== undefined) {\n        localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fetchCpuAndSocket !== undefined) {\n        localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (\n      id: string,\n      notificationRequest: NotificationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id);\n      // verify required parameter 'notificationRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch: async (\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id);\n      // verify required parameter 'subscriptionPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        subscriptionPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsPost: async (\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subscriptionCreateRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        subscriptionCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (\n      subId: string,\n      accountId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId);\n      // verify required parameter 'accountId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete',\n        'accountId',\n        accountId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`\n        .replace(`{${'subId'}}`, encodeURIComponent(String(subId)))\n        .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`.replace(\n        `{${'subId'}}`,\n        encodeURIComponent(String(subId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId);\n      // verify required parameter 'notificationContactCreateRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost',\n        'notificationContactCreateRequest',\n        notificationContactCreateRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`.replace(\n        `{${'subId'}}`,\n        encodeURIComponent(String(subId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        notificationContactCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (\n      subId: string,\n      reservedResourceId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId);\n      // verify required parameter 'reservedResourceId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet',\n        'reservedResourceId',\n        reservedResourceId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`\n        .replace(`{${'subId'}}`, encodeURIComponent(String(subId)))\n        .replace(`{${'reservedResourceId'}}`, encodeURIComponent(String(reservedResourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'caseId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId);\n      const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`.replace(\n        `{${'caseId'}}`,\n        encodeURIComponent(String(caseId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesPost: async (\n      supportCasesRequest: SupportCasesRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'supportCasesRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/support_cases`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost: async (\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'tokenAuthorizationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1TokenAuthorizationPost',\n        'tokenAuthorizationRequest',\n        tokenAuthorizationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        tokenAuthorizationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1AccessReviewPost: async (\n      accessReview: AccessReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'accessReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview);\n      const localVarPath = `/api/authorizations/v1/access_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1CapabilityReviewPost: async (\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'capabilityReviewRequest' is not null or undefined\n      assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest);\n      const localVarPath = `/api/authorizations/v1/capability_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        capabilityReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ExportControlReviewPost: async (\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'exportControlReviewRequest' is not null or undefined\n      assertParamExists(\n        'apiAuthorizationsV1ExportControlReviewPost',\n        'exportControlReviewRequest',\n        exportControlReviewRequest\n      );\n      const localVarPath = `/api/authorizations/v1/export_control_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        exportControlReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1FeatureReviewPost: async (\n      featureReview: FeatureReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'featureReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1FeatureReviewPost', 'featureReview', featureReview);\n      const localVarPath = `/api/authorizations/v1/feature_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(featureReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ResourceReviewPost: async (\n      resourceReviewRequest: ResourceReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'resourceReviewRequest' is not null or undefined\n      assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest);\n      const localVarPath = `/api/authorizations/v1/resource_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfAccessReviewPost: async (\n      selfAccessReview: SelfAccessReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfAccessReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfAccessReviewPost', 'selfAccessReview', selfAccessReview);\n      const localVarPath = `/api/authorizations/v1/self_access_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfAccessReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfFeatureReviewPost: async (\n      selfFeatureReview: SelfFeatureReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfFeatureReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfFeatureReviewPost', 'selfFeatureReview', selfFeatureReview);\n      const localVarPath = `/api/authorizations/v1/self_feature_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfFeatureReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfResourceReviewPost: async (\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfResourceReviewRequest' is not null or undefined\n      assertParamExists(\n        'apiAuthorizationsV1SelfResourceReviewPost',\n        'selfResourceReviewRequest',\n        selfResourceReviewRequest\n      );\n      const localVarPath = `/api/authorizations/v1/self_resource_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        selfResourceReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfTermsReviewPost: async (\n      selfTermsReview: SelfTermsReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfTermsReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview);\n      const localVarPath = `/api/authorizations/v1/self_terms_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfTermsReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'termsReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview);\n      const localVarPath = `/api/authorizations/v1/terms_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccessTokenPost(\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        fields,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(\n        id,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdPatch(\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(\n        id,\n        accountPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsPost(\n      account: Account,\n      dryRun?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ClusterAuthorizationsPost(\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(\n        clusterAuthorizationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ClusterRegistrationsPost(\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(\n        clusterRegistrationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1CurrentAccountGet(\n      fetchLabels?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(\n        fetchLabels,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ErrorsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ErrorsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n        id,\n        featureToggleQueryRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1LabelsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1MetricsGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1NotifyPost(\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(\n        notificationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(\n        id,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdPatch(\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(\n        id,\n        organizationPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(\n        id,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n        orgId,\n        search,\n        fetchRelatedResources,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n      orgId: string,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaSummaryList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n        orgId,\n        search,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n        orgId,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n        orgId,\n        resourceQuotaRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n        orgId,\n        quotaId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n        orgId,\n        quotaId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n        orgId,\n        quotaId,\n        resourceQuotaRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsPost(\n      organization: Organization,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(\n        organization,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PlansGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PlansIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n      externalResourceId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n        externalResourceId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PullSecretsPost(\n      pullSecretRequest: PullSecretRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(\n        pullSecretRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistriesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistriesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(\n        id,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdPatch(\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(\n        id,\n        registryCredentialPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsPost(\n      registryCredential: RegistryCredential,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(\n        registryCredential,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ReservedResourcesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ResourceQuotaGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdPatch(\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(\n        id,\n        roleBindingRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsPost(\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(\n        roleBindingCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RolesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RolesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkuRulesGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkuRulesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkusGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkusIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(\n        page,\n        size,\n        search,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        orderBy,\n        labels,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdGet(\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(\n        id,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fetchCpuAndSocket,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n      id: string,\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n        id,\n        notificationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdPatch(\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(\n        id,\n        subscriptionPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n        id,\n        page,\n        size,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsPost(\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(\n        subscriptionCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n      subId: string,\n      accountId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n        subId,\n        accountId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n        subId,\n        page,\n        size,\n        search,\n        fields,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n        subId,\n        notificationContactCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n      subId: string,\n      reservedResourceId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n        subId,\n        reservedResourceId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SupportCasesCaseIdDelete(\n      caseId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(\n        caseId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SupportCasesPost(\n      supportCasesRequest: SupportCasesRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(\n        supportCasesRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1TokenAuthorizationPost(\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(\n        tokenAuthorizationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1AccessReviewPost(\n      accessReview: AccessReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(\n        accessReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1CapabilityReviewPost(\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(\n        capabilityReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1ExportControlReviewPost(\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(\n        exportControlReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1FeatureReviewPost(\n      featureReview: FeatureReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1FeatureReviewPost(\n        featureReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1ResourceReviewPost(\n      resourceReviewRequest: ResourceReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(\n        resourceReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfAccessReviewPost(\n      selfAccessReview: SelfAccessReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfAccessReviewPost(\n        selfAccessReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfFeatureReviewPost(\n      selfFeatureReview: SelfFeatureReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfFeatureReviewPost(\n        selfFeatureReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfResourceReviewPost(\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(\n        selfResourceReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfTermsReviewPost(\n      selfTermsReview: SelfTermsReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(\n        selfTermsReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1TermsReviewPost(\n      termsReview: TermsReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(\n        termsReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n  const localVarFp = DefaultApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg> {\n      return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<AccountList> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdPatch(\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsPost(account, dryRun, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost(\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options?: any\n    ): AxiosPromise<ClusterAuthorizationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost(\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options?: any\n    ): AxiosPromise<ClusterRegistrationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {\n      return localVarFp\n        .apiAccountsMgmtV1ErrorsGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {\n      return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options?: any\n    ): AxiosPromise<FeatureToggle> {\n      return localVarFp\n        .apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1LabelsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {\n      return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1NotifyPost(notificationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options?: any\n    ): AxiosPromise<OrganizationList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch(\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options?: any\n    ): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options?: any\n    ): AxiosPromise<QuotaCostList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n      orgId: string,\n      search?: string,\n      options?: any\n    ): AxiosPromise<QuotaSummaryList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ResourceQuotaList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsPost(organization, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {\n      return localVarFp\n        .apiAccountsMgmtV1PlansGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {\n      return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n      externalResourceId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsPost(\n      pullSecretRequest: PullSecretRequest,\n      options?: any\n    ): AxiosPromise<AccessTokenCfg> {\n      return localVarFp\n        .apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RegistryList> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {\n      return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RegistryCredentialList> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdGet(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch(\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options?: any\n    ): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost(\n      registryCredential: RegistryCredential,\n      options?: any\n    ): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ReservedResourcesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ReservedResourceList> {\n      return localVarFp\n        .apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ResourceQuotaGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ResourceQuotaList> {\n      return localVarFp\n        .apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RoleBindingList> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {\n      return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch(\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options?: any\n    ): AxiosPromise<RoleBinding> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsPost(\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options?: any\n    ): AxiosPromise<RoleBinding> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {\n      return localVarFp\n        .apiAccountsMgmtV1RolesGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {\n      return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {\n      return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {\n      return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {\n      return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {\n      return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options?: any\n    ): AxiosPromise<SubscriptionList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsGet(\n          page,\n          size,\n          search,\n          fetchAccounts,\n          fetchLabels,\n          fetchCapabilities,\n          fields,\n          orderBy,\n          labels,\n          options\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet(\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdGet(\n          id,\n          fetchAccounts,\n          fetchLabels,\n          fetchCapabilities,\n          fetchCpuAndSocket,\n          options\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n      id: string,\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch(\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ReservedResourceList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsPost(\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n      subId: string,\n      accountId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<AccountList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n      subId: string,\n      reservedResourceId: string,\n      options?: any\n    ): AxiosPromise<ReservedResource> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesPost(\n      supportCasesRequest: SupportCasesRequest,\n      options?: any\n    ): AxiosPromise<SupportCasesCreatedResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost(\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options?: any\n    ): AxiosPromise<TokenAuthorizationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1AccessReviewPost(accessReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1CapabilityReviewPost(\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options?: any\n    ): AxiosPromise<CapabilityReview> {\n      return localVarFp\n        .apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ExportControlReviewPost(\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options?: any\n    ): AxiosPromise<ExportControlReview> {\n      return localVarFp\n        .apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1FeatureReviewPost(\n      featureReview: FeatureReview,\n      options?: any\n    ): AxiosPromise<FeatureReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1FeatureReviewPost(featureReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ResourceReviewPost(\n      resourceReviewRequest: ResourceReviewRequest,\n      options?: any\n    ): AxiosPromise<ResourceReview> {\n      return localVarFp\n        .apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfAccessReviewPost(\n      selfAccessReview: SelfAccessReview,\n      options?: any\n    ): AxiosPromise<AccessReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfFeatureReviewPost(\n      selfFeatureReview: SelfFeatureReview,\n      options?: any\n    ): AxiosPromise<FeatureReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfResourceReviewPost(\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options?: any\n    ): AxiosPromise<SelfResourceReview> {\n      return localVarFp\n        .apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfTermsReviewPost(\n      selfTermsReview: SelfTermsReview,\n      options?: any\n    ): AxiosPromise<TermsReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1TermsReviewPost(termsReview, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg>;\n\n  /**\n   *\n   * @summary Returns a list of accounts\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fields?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<AccountList>;\n\n  /**\n   *\n   * @summary Get an account by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Update an account\n   * @param {string} id The id of record\n   * @param {AccountPatchRequest} accountPatchRequest Updated account data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdPatch(\n    id: string,\n    accountPatchRequest: AccountPatchRequest,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Create a new account\n   * @param {Account} account Account data\n   * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n   * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ClusterAuthorizationsPost(\n    clusterAuthorizationRequest: ClusterAuthorizationRequest,\n    options?: any\n  ): AxiosPromise<ClusterAuthorizationResponse>;\n\n  /**\n   *\n   * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n   * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ClusterRegistrationsPost(\n    clusterRegistrationRequest: ClusterRegistrationRequest,\n    options?: any\n  ): AxiosPromise<ClusterRegistrationResponse>;\n\n  /**\n   *\n   * @summary Get the authenticated account\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Returns a list of errors\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList>;\n\n  /**\n   *\n   * @summary Get an error by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error>;\n\n  /**\n   *\n   * @summary Query a feature toggle by id\n   * @param {string} id The id of record\n   * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n    id: string,\n    featureToggleQueryRequest: FeatureToggleQueryRequest,\n    options?: any\n  ): AxiosPromise<FeatureToggle>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1LabelsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Returns a list of metrics\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList>;\n\n  /**\n   *\n   * @summary Notify the owner of cluster/subscription\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Returns a list of organizations\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    options?: any\n  ): AxiosPromise<OrganizationList>;\n\n  /**\n   *\n   * @summary Get an organization by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n    id: string,\n    key: string,\n    label: Label,\n    options?: any\n  ): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Update an organization\n   * @param {string} id The id of record\n   * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdPatch(\n    id: string,\n    organizationPatchRequest: OrganizationPatchRequest,\n    options?: any\n  ): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Returns a summary of organizations clusters based on metrics\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary>;\n\n  /**\n   *\n   * @summary Returns a summary of quota cost\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n    orgId: string,\n    search?: string,\n    fetchRelatedResources?: boolean,\n    options?: any\n  ): AxiosPromise<QuotaCostList>;\n\n  /**\n   *\n   * @summary Returns a summary of resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n    orgId: string,\n    search?: string,\n    options?: any\n  ): AxiosPromise<QuotaSummaryList>;\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {string} orgId The id of organization\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n    orgId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ResourceQuotaList>;\n\n  /**\n   *\n   * @summary Create a new resource quota\n   * @param {string} orgId The id of organization\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n    orgId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Delete a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n    orgId: string,\n    quotaId: string,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a resource quota by id\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n    orgId: string,\n    quotaId: string,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Update a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n    orgId: string,\n    quotaId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Create a new organization\n   * @param {Organization} organization Organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Get all plans\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList>;\n\n  /**\n   *\n   * @summary Get a plan by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan>;\n\n  /**\n   *\n   * @summary Delete a pull secret\n   * @param {string} externalResourceId The external resource id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg>;\n\n  /**\n   *\n   * @summary Returns a list of registries\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistriesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RegistryList>;\n\n  /**\n   *\n   * @summary Get an registry by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry>;\n\n  /**\n   * List Registry Credentials\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RegistryCredentialList>;\n\n  /**\n   *\n   * @summary Delete a registry credential by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a registry credentials by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Update a registry credential\n   * @param {string} id The id of record\n   * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdPatch(\n    id: string,\n    registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n    options?: any\n  ): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Request the creation of a registry credential\n   * @param {RegistryCredential} registryCredential Registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsPost(\n    registryCredential: RegistryCredential,\n    options?: any\n  ): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ReservedResourcesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ReservedResourceList>;\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ResourceQuotaGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ResourceQuotaList>;\n\n  /**\n   *\n   * @summary Returns a list of role bindings\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RoleBindingList>;\n\n  /**\n   *\n   * @summary Delete a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Update a role binding\n   * @param {string} id The id of record\n   * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdPatch(\n    id: string,\n    roleBindingRequest: RoleBindingRequest,\n    options?: any\n  ): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Create a new role binding\n   * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsPost(\n    roleBindingCreateRequest: RoleBindingCreateRequest,\n    options?: any\n  ): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Returns a list of roles\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList>;\n\n  /**\n   *\n   * @summary Get a role by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role>;\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKU Rules\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList>;\n\n  /**\n   *\n   * @summary Get a sku rules by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules>;\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKUs\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList>;\n\n  /**\n   *\n   * @summary Get a sku by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU>;\n\n  /**\n   *\n   * @summary Returns a list of subscriptions\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    orderBy?: string,\n    labels?: string,\n    options?: any\n  ): AxiosPromise<SubscriptionList>;\n\n  /**\n   *\n   * @summary Deletes a subscription by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a subscription by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdGet(\n    id: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fetchCpuAndSocket?: boolean,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n    id: string,\n    key: string,\n    label: Label,\n    options?: any\n  ): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Notify the owner of a subscription\n   * @param {string} id The id of record\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n    id: string,\n    notificationRequest: NotificationRequest,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Update a subscription\n   * @param {string} id The id of record\n   * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdPatch(\n    id: string,\n    subscriptionPatchRequest: SubscriptionPatchRequest,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ReservedResourceList>;\n\n  /**\n   *\n   * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Create a new subscription\n   * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsPost(\n    subscriptionCreateRequest: SubscriptionCreateRequest,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Deletes a notification contact by subscription and account id\n   * @param {string} subId The id of subscription\n   * @param {string} accountId The id of account\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n    subId: string,\n    accountId: string,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Returns a list of notification contacts for the given subscription\n   * @param {string} subId The id of subscription\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n    subId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    fields?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<AccountList>;\n\n  /**\n   *\n   * @summary Add an account as a notification contact to this subscription\n   * @param {string} subId The id of subscription\n   * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n    subId: string,\n    notificationContactCreateRequest: NotificationContactCreateRequest,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Get reserved resources by id\n   * @param {string} subId The id of subscription\n   * @param {string} reservedResourceId The id of reserved resource\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n    subId: string,\n    reservedResourceId: string,\n    options?: any\n  ): AxiosPromise<ReservedResource>;\n\n  /**\n   *\n   * @summary Delete a support case\n   * @param {string} caseId The id of a support case\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary create a support case for the subscription\n   * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SupportCasesPost(\n    supportCasesRequest: SupportCasesRequest,\n    options?: any\n  ): AxiosPromise<SupportCasesCreatedResponse>;\n\n  /**\n   *\n   * @summary Finds the account owner of the provided token\n   * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1TokenAuthorizationPost(\n    tokenAuthorizationRequest: TokenAuthorizationRequest,\n    options?: any\n  ): AxiosPromise<TokenAuthorizationResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n   * @param {AccessReview} accessReview Access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s capabilities\n   * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1CapabilityReviewPost(\n    capabilityReviewRequest: CapabilityReviewRequest,\n    options?: any\n  ): AxiosPromise<CapabilityReview>;\n\n  /**\n   *\n   * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n   * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1ExportControlReviewPost(\n    exportControlReviewRequest: ExportControlReviewRequest,\n    options?: any\n  ): AxiosPromise<ExportControlReview>;\n\n  /**\n   *\n   * @summary Review feature to perform an action on it such as toggle a feature on/off\n   * @param {FeatureReview} featureReview Feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1FeatureReviewPost(\n    featureReview: FeatureReview,\n    options?: any\n  ): AxiosPromise<FeatureReviewResponse>;\n\n  /**\n   *\n   * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1ResourceReviewPost(\n    resourceReviewRequest: ResourceReviewRequest,\n    options?: any\n  ): AxiosPromise<ResourceReview>;\n\n  /**\n   *\n   * @summary Review your ability to perform an action on a particular resource or resource type\n   * @param {SelfAccessReview} selfAccessReview Self access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfAccessReviewPost(\n    selfAccessReview: SelfAccessReview,\n    options?: any\n  ): AxiosPromise<AccessReviewResponse>;\n\n  /**\n   *\n   * @summary Review your ability to toggle a feature\n   * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfFeatureReviewPost(\n    selfFeatureReview: SelfFeatureReview,\n    options?: any\n  ): AxiosPromise<FeatureReviewResponse>;\n\n  /**\n   *\n   * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfResourceReviewPost(\n    selfResourceReviewRequest: SelfResourceReviewRequest,\n    options?: any\n  ): AxiosPromise<SelfResourceReview>;\n\n  /**\n   *\n   * @summary Review your status of Terms\n   * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfTermsReviewPost(\n    selfTermsReview: SelfTermsReview,\n    options?: any\n  ): AxiosPromise<TermsReviewResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s status of Terms\n   * @param {TermsReview} termsReview Data to check terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccessTokenPost(options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccessTokenPost(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of accounts\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fields?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an account by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update an account\n   * @param {string} id The id of record\n   * @param {AccountPatchRequest} accountPatchRequest Updated account data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new account\n   * @param {Account} account Account data\n   * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsPost(account, dryRun, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n   * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ClusterAuthorizationsPost(\n    clusterAuthorizationRequest: ClusterAuthorizationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n   * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ClusterRegistrationsPost(\n    clusterRegistrationRequest: ClusterRegistrationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get the authenticated account\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of errors\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ErrorsGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an error by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ErrorsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Query a feature toggle by id\n   * @param {string} id The id of record\n   * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n    id: string,\n    featureToggleQueryRequest: FeatureToggleQueryRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of metrics\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1MetricsGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1MetricsGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Notify the owner of cluster/subscription\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1NotifyPost(notificationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of organizations\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an organization by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update an organization\n   * @param {string} id The id of record\n   * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdPatch(\n    id: string,\n    organizationPatchRequest: OrganizationPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of organizations clusters based on metrics\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of quota cost\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n    orgId: string,\n    search?: string,\n    fetchRelatedResources?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {string} orgId The id of organization\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n    orgId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new resource quota\n   * @param {string} orgId The id of organization\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n    orgId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a resource quota by id\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n    orgId: string,\n    quotaId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new organization\n   * @param {Organization} organization Organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsPost(organization, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get all plans\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PlansGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a plan by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PlansIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PlansIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a pull secret\n   * @param {string} externalResourceId The external resource id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of registries\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistriesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an registry by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistriesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * List Registry Credentials\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a registry credential by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a registry credentials by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a registry credential\n   * @param {string} id The id of record\n   * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdPatch(\n    id: string,\n    registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Request the creation of a registry credential\n   * @param {RegistryCredential} registryCredential Registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ReservedResourcesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ResourceQuotaGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of role bindings\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a role binding\n   * @param {string} id The id of record\n   * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new role binding\n   * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of roles\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RolesGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a role by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RolesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RolesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKU Rules\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkuRulesGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a sku rules by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkuRulesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKUs\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkusGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkusGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a sku by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkusIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkusIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of subscriptions\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    orderBy?: string,\n    labels?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsGet(\n        page,\n        size,\n        search,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        orderBy,\n        labels,\n        options\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Deletes a subscription by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a subscription by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdGet(\n    id: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fetchCpuAndSocket?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdGet(\n        id,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fetchCpuAndSocket,\n        options\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Notify the owner of a subscription\n   * @param {string} id The id of record\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n    id: string,\n    notificationRequest: NotificationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a subscription\n   * @param {string} id The id of record\n   * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdPatch(\n    id: string,\n    subscriptionPatchRequest: SubscriptionPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new subscription\n   * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Deletes a notification contact by subscription and account id\n   * @param {string} subId The id of subscription\n   * @param {string} accountId The id of account\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n    subId: string,\n    accountId: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of notification contacts for the given subscription\n   * @param {string} subId The id of subscription\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n    subId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    fields?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Add an account as a notification contact to this subscription\n   * @param {string} subId The id of subscription\n   * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n    subId: string,\n    notificationContactCreateRequest: NotificationContactCreateRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get reserved resources by id\n   * @param {string} subId The id of subscription\n   * @param {string} reservedResourceId The id of reserved resource\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n    subId: string,\n    reservedResourceId: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a support case\n   * @param {string} caseId The id of a support case\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary create a support case for the subscription\n   * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Finds the account owner of the provided token\n   * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n   * @param {AccessReview} accessReview Access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1AccessReviewPost(accessReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s capabilities\n   * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n   * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1ExportControlReviewPost(\n    exportControlReviewRequest: ExportControlReviewRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review feature to perform an action on it such as toggle a feature on/off\n   * @param {FeatureReview} featureReview Feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1FeatureReviewPost(featureReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your ability to perform an action on a particular resource or resource type\n   * @param {SelfAccessReview} selfAccessReview Self access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your ability to toggle a feature\n   * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfResourceReviewPost(\n    selfResourceReviewRequest: SelfResourceReviewRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your status of Terms\n   * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s status of Terms\n   * @param {TermsReview} termsReview Data to check terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1TermsReviewPost(termsReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = 'https://api.openshift.com'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  for (const object of objects) {\n    for (const key in object) {\n      if (Array.isArray(object[key])) {\n        searchParams.delete(key);\n        for (const item of object[key]) {\n          searchParams.append(key, item);\n        }\n      } else {\n        searchParams.set(key, object[key]);\n      }\n    }\n  }\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration\n) {\n  return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n    const axiosRequestArgs = { ...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url };\n    return axios.request(axiosRequestArgs);\n  };\n};\n","import { Reducer, useEffect, useReducer, useRef } from 'react';\nimport { AxiosResponse } from 'axios';\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<AxiosResponse<T>>;\n  key: string;\n};\n\nexport const useFetch = <T extends any>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>((states, action: Action<T>) => {\n    switch (action.type) {\n      case Status.FETCHING:\n        return { ...initialState, status: Status.FETCHING };\n      case Status.FETCHED:\n        return { ...initialState, status: Status.FETCHED, data: action.payload };\n      case Status.FETCH_ERROR:\n        return { ...initialState, status: Status.FETCH_ERROR, error: action.error };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response.data;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response.data });\n        } catch (error) {\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCH_ERROR, payload: error.message });\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, []);\n\n  return state;\n};\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n  apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n  username?: string;\n  password?: string;\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  basePath?: string;\n  baseOptions?: any;\n  formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  username?: string;\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  password?: string;\n  /**\n   * parameter for oauth2 security\n   * @param name security name\n   * @param scopes oauth2 scope\n   * @memberof Configuration\n   */\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  /**\n   * override base path\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string;\n  /**\n   * base options for axios calls\n   *\n   * @type {any}\n   * @memberof Configuration\n   */\n  baseOptions?: any;\n  /**\n   * The FormData constructor that will be used to create multipart form data\n   * requests. You can inject this here so that execution environments that\n   * do not support the FormData class can still run the generated client.\n   *\n   * @type {new () => FormData}\n   */\n  formDataCtor?: new () => any;\n\n  constructor(param: ConfigurationParameters = {}) {\n    this.apiKey = param.apiKey;\n    this.username = param.username;\n    this.password = param.password;\n    this.accessToken = param.accessToken;\n    this.basePath = param.basePath;\n    this.baseOptions = param.baseOptions;\n    this.formDataCtor = param.formDataCtor;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n    const jsonMime: RegExp = new RegExp('^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join('&');\n","import { Auth, Config, useAuth, useConfig } from '@bf2/ui-shared';\nimport { Configuration, DefaultApi, TermsReviewResponse } from '@openapi/ams';\nimport { useFetch } from '@app/services/fetch';\nimport { useEffect, useRef } from \"react\";\n\nexport const useTermsReview = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  return useFetch(fetchTermsReviewFactory(config, auth));\n};\n\nexport const useAsyncTermsReview = () => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth).fetch().then(r => r.data);\n    ref.current = answer;\n    return answer;\n  }\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth]);\n  return load;\n}\n\nconst fetchTermsReviewFactory = (config: Config, auth: Auth) => {\n  return {\n    key: 'selfTermsReview',\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new DefaultApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || '',\n      } as Configuration);\n      return await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: config?.ams.eventCode,\n        site_code: config?.ams.siteCode,\n      });\n    },\n  }\n}\n","import React from 'react';\nimport { useConfig, ProductType, QuotaContext } from '@bf2/ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { FederatedModule, Loading } from '@app/components';\nimport { useQuota } from '@app/hooks';\nimport { useLocation } from 'react-router-dom';\nimport { getTermsAppURL } from '@app/utils/termsApp';\nimport { parse as parseQueryString, stringifyUrl } from 'query-string';\nimport { useAsyncTermsReview } from '@app/services/termsReview';\n\nconst useModalControl = () => {\n  const loadTermsReview = useAsyncTermsReview();\n  const location = useLocation();\n\n  const shouldOpenCreateModal = async () => {\n    const parsed = parseQueryString(location.search);\n    const c = parsed['create'] === 'true';\n    if (c) {\n      const termsReview = await loadTermsReview();\n      if (!termsReview.terms_required) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const preCreateInstance = async (open: boolean) => {\n    const termsReview = await loadTermsReview();\n    if (termsReview.terms_available || termsReview.terms_required) {\n      if (termsReview.redirect_url === undefined) {\n        throw new Error('terms must be signed but there is no terms url');\n      }\n      const redirectURL = stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n      const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n      window.location.href = url;\n      return false;\n    }\n    return open;\n  };\n\n  return { shouldOpenCreateModal, preCreateInstance };\n};\n\nexport const KasPage: React.FunctionComponent = () => {\n  const config = useConfig();\n  const { getQuota } = useQuota(ProductType?.kas);\n\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl();\n\n  const getTokenEndPointUrl = () => {\n    if (config) {\n      return `${config.masSso.authServerUrl}/realms/${config.masSso.realm}/protocol/openid-connect/token`;\n    }\n    return undefined;\n  };\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      fallback={<Loading />}\n      render={(OpenshiftStreamsFederated) => {\n        if (config?.serviceDown) {\n          return <ServiceDownPage />;\n        }\n\n        return (\n          <QuotaContext.Provider value={{ getQuota }}>\n            <OpenshiftStreamsFederated\n              preCreateInstance={preCreateInstance}\n              shouldOpenCreateModal={shouldOpenCreateModal}\n              tokenEndPointUrl={getTokenEndPointUrl()}\n            />\n          </QuotaContext.Provider>\n        );\n      }}\n    />\n  );\n};\n\nexport default KasPage;\n","import { useEffect, useState, useMemo } from 'react';\nimport { useAuth, useConfig, Quota, QuotaValue, QuotaType, ProductType } from '@bf2/ui-shared';\nimport { Configuration, DefaultApi } from '@openapi/ams';\n\nexport const useQuota = (productId: ProductType) => {\n    const config = useConfig();\n    const auth = useAuth();\n\n    const [orgId, setOrgId] = useState();\n\n    useEffect(() => {\n        const getCurrentAccount = async () => {\n            if (!orgId) {\n                const accessToken = await auth?.ams.getToken();\n                const ams = new DefaultApi({\n                    accessToken,\n                    basePath: config?.ams.apiBasePath || '',\n                } as Configuration);\n\n                await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n                    const orgID = account?.data?.organization?.id;\n                    setOrgId(orgID);\n                });\n            }\n        };\n\n        getCurrentAccount();\n    }, [config?.ams.apiBasePath, auth]);\n\n    const getQuota = async () => {\n        let filteredQuota: Quota = { loading: true, isServiceDown: false, data: undefined };\n\n        if (orgId) {\n            const {\n                ams: amsConfig\n            } = config || {};\n            const { quotaId, trialQuotaId } = amsConfig || {};\n            const accessToken = await auth?.ams.getToken();\n            const ams = new DefaultApi({\n                accessToken,\n                basePath: config?.ams.apiBasePath || '',\n            } as Configuration);\n\n            await ams\n                .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, undefined, true)\n                .then((res) => {\n                    const quotaData = new Map<QuotaType, QuotaValue>();\n                    const kasQuota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === quotaId\n                    )[0];\n\n                    const kasTrialQuota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === trialQuotaId\n                    )[0];\n\n                    if (kasQuota && kasQuota.allowed > 0) {\n                        const remaining = kasQuota?.allowed - kasQuota?.consumed;\n                        quotaData?.set(QuotaType?.kas, {\n                            allowed: kasQuota?.allowed,\n                            consumed: kasQuota?.consumed,\n                            remaining: remaining < 0 ? 0 : remaining\n                        });\n                    }\n\n                    if (kasTrialQuota) {\n                        quotaData?.set(QuotaType?.kasTrial, {\n                            allowed: kasTrialQuota?.allowed,\n                            consumed: kasTrialQuota?.consumed,\n                            remaining: kasTrialQuota?.allowed - kasTrialQuota?.consumed\n                        });\n                    }\n\n                    filteredQuota.loading = false;\n                    filteredQuota.data = quotaData;\n                })\n                .catch((error) => {\n                    filteredQuota.loading = false;\n                    filteredQuota.isServiceDown = true;\n                });\n        }\n        return filteredQuota;\n    };\n\n    const contextValue = useMemo(() => {\n        return { orgId, getQuota };\n    }, [orgId, getQuota]);\n\n    return contextValue;\n}","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFoundPage: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n\n","export default __webpack_public_path__ + \"d0f2bb14.svg\";","export default __webpack_public_path__ + \"61fdfbf5.svg\";","export default __webpack_public_path__ + \"485bae8d.svg\";","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  Grid,\n  Label,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport ApacheKafkaLogo from \"/static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg\";\nimport APIMgmtLogo from \"/static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg\";\nimport DataScienceLogo from \"static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg\";\n\nimport { useTranslation } from 'react-i18next';\n\nexport const OverviewPage: React.FunctionComponent = () => {\n\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {/* Hero banner with graphic */}\n      <PageSection className=\"app-services-ui--page-section--marketing app-services-ui--banner pf-t-dark pf-u-background-color-dark-100\" variant={PageSectionVariants.dark}>\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('overview.heroTitle')}\n          </Title>\n          <Text className=\"app-services-ui--banner__tagline\">{t('overview.heroTagline')}</Text>\n          <Text component={TextVariants.p}>\n            {t('overview.heroDescription')}\n          </Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('overview.heroDescription2')}\n          </Text>\n          <StackItem>\n            <Button variant={ButtonVariant.primary} isLarge component=\"a\" data-testid=\"hero-buttonTryKafka\" href=\"http://cloud.redhat.com/beta/application-services/streams/kafkas/\">\n              {t('overview.heroCallToActionButton')}\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      {/* Banner with just text */}\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\">\n        <Bullseye>\n          <Text component={TextVariants.p} className=\"app-services-ui--banner--text-only\">\n            {t('overview.banner')}\n          </Text>\n        </Bullseye>\n      </PageSection>\n\n      {/* Cards */}\n      <PageSection isWidthLimited className=\"app-services-ui--page-section--marketing\">\n        <Grid md={6} lg={4} hasGutter>\n\n          {/* Kafka card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={ApacheKafkaLogo}\n                  alt=\"Red Hat OpenShift Streams for Apache Kafka logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhosakTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.developmentPreview')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhosakMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhosakSecondaryText')}\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHOSAK-buttonCreateKafka\" variant={ButtonVariant.secondary} component=\"a\" href=\"http://cloud.redhat.com/beta/application-services/streams/kafkas/\">{t('overview.rhosakCallToActionButton')}</Button>\n            </CardFooter>\n          </Card>\n\n          {/* API Management card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={APIMgmtLogo}\n                  alt=\"Red Hat OpenShift API Management logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhoamTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label color=\"blue\">{t('overview.generalAvailability')}</Label>\n                </StackItem>\n                <StackItem>\n                {t('overview.rhoamMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhoamSecondaryText')} <Button data-testid=\"cardRHOAM-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\">OpenShift\n                  <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button variant={ButtonVariant.secondary} data-testid=\"cardRHOAM-buttonCTA\" component=\"a\" target=\"_blank\" href=\"https://developers.redhat.com/products/rhoam/getting-started\">\n                {t('overview.getStarted')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Data science card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={DataScienceLogo}\n                  alt=\"Red Hat OpenShift Data Science logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n              {t('overview.rhodsTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.beta')}</Label>\n                </StackItem>\n                <StackItem>\n                {t('overview.rhodsMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                {t('overview.rhodsSecondaryText')} <Button data-testid=\"cardRHODS-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\"> OpenShift\n                  <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHODS-buttonCTA\" variant={ButtonVariant.secondary} component=\"a\" target=\"_blank\" href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\">\n                {t('overview.learnMore')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default OverviewPage;\n","import React, { FunctionComponent } from 'react';\nimport { FederatedModule, Loading } from '@app/components';\n\nexport const ResourcesPage: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<Loading />}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n\nexport default ResourcesPage;\n","import React from 'react';\nimport { FederatedModule, Loading } from '@app/components';\nimport { useConfig } from '@bf2/ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\n\nexport const ServiceAccountsPage: React.FunctionComponent = () => {\n  const config = useConfig();\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<Loading/>}\n      render={(ServiceAccountsFederated) => {\n\n\n        if (config?.serviceDown) {\n          return <ServiceDownPage/>;\n        }\n        return <ServiceAccountsFederated/>;\n      }}\n    />\n  );\n};\n\nexport default ServiceAccountsPage;\n","import React from 'react';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const ServiceDownPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t('serviceDown.serviceDownTitle')}\n        </Title>\n        <EmptyStateBody>\n          {t('serviceDown.serviceDownMessage')}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={() => {window.location.href = \"https://status.starter.openshift.com/\"}}>{t('serviceDown.serviceDownButton')}</Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@bf2/ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactVersionDetails: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactVersionDetailsConnected />;\n};\n\nconst ArtifactVersionDetailsConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout breadcrumbId=\"srs.artifacts_details\" render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactVersionPage\" />\n    )}/>\n  );\n};\n\nexport default ArtifactVersionDetails;\n","import { FederatedApicurioComponent } from '@app/pages/ServiceRegistry/FederatedApicurioComponent';\nimport React from 'react';\nimport { SrsLayout } from '@app/pages/ServiceRegistry/SrsLayout';\nimport { useConfig } from '@bf2/ui-shared';\nimport { ServiceDownPage } from '@app/pages';\n\nexport const Artifacts: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactsConnected />;\n};\n\nconst ArtifactsConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts\"\n      render={(registry) => <FederatedApicurioComponent module=\"./FederatedArtifactsPage\" registry={registry} />}\n    />\n  );\n};\n\nexport default Artifacts;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@bf2/ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactRedirect: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactRedirectConnected />;\n};\n\nconst ArtifactRedirectConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactRedirectPage\" />\n    )} />\n  );\n};\n\nexport default ArtifactRedirect;\n","import React from 'react';\nimport { useBasename, useConfig, useAuth } from '@bf2/ui-shared';\nimport { createApicurioConfig, ConfigType } from '@app/pages/ServiceRegistry/utils';\nimport { FederatedModule, Loading } from '@app/components';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: Registry;\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: React.FC<FederatedApicurioComponentProps> = ({ module, registry }) => {\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n\n  if (config === undefined || registry === undefined) {\n    return <Loading />;\n  }\n\n  const federateConfig: ConfigType = createApicurioConfig(\n    registry.registryUrl,\n    `${basename.getBasename()}/t/${registry?.id}`,\n    auth?.apicurio_registry.getToken\n  );\n\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<Loading />}\n      render={(ServiceRegistryFederated) => {\n        return (\n          <ServiceRegistryFederated\n            config={federateConfig}\n            tenantId={registry.id}\n            groupId={groupId}\n            artifactId={artifactId}\n            version={version}\n            history={history}\n          />\n        );\n      }}\n    />\n  );\n};\n","export interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport interface NoneAuthConfig extends AuthConfig {}\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n}\n\nconst createApicurioConfig = (apiUrl: string, navPathPrefix: string, getToken: () => Promise<string>) => {\n  const config: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: 'gettoken',\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      multiTenant: true,\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n  } as ConfigType;\n\n  return config;\n};\n\nexport { createApicurioConfig };\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@bf2/ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const RulesPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RulesPageConnected />;\n};\n\nconst RulesPageConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout breadcrumbId=\"srs.global_rules\" render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedRulesPage\"/>\n    )}/>\n  );\n};\n\nexport default RulesPage;\n","import React from 'react';\nimport { useConfig } from '@bf2/ui-shared';\nimport { DevelopmentPreview, FederatedModule, Loading } from '@app/components';\nimport { ServiceDownPage } from '@app/pages';\n\nexport const ServiceRegistryPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ServiceRegistryPageConnected />;\n};\n\nexport const ServiceRegistryPageConnected: React.FC = () => {\n  const config = useConfig();\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <DevelopmentPreview>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistry\"\n        fallback={<Loading />}\n        render={(ServiceRegistryFederated) => {\n          return <ServiceRegistryFederated />;\n        }}\n      />\n    </DevelopmentPreview>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import React from 'react';\nimport { FederatedModule, Loading } from '@app/components';\nimport { Registry } from \"@rhoas/registry-management-sdk\";\n\ntype SrsLayoutProps = {\n  render: (registry: Registry) => JSX.Element\n  breadcrumbId?: string\n}\n\nexport const SrsLayout: React.FC<SrsLayoutProps> = ({ render, breadcrumbId }) => {\n  return (\n    <FederatedModule\n      scope=\"srs\"\n      module=\"./ApicurioRegistry\"\n      fallback={<Loading/>}\n      render={(ServiceRegistryFederated) => {\n        return (\n          <ServiceRegistryFederated render={render} breadcrumbId={breadcrumbId}/>\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\n\nimport { Main, NotAuthorized } from '@redhat-cloud-services/frontend-components';\n\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: React.FunctionComponent<GetLinkProps> = ({ href, children }) => <Link to={href || ''}>{children}</Link>;\n\nexport const AccessDeniedPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t('accessdenied.accessDeniedTitle')}\n        description={accessDeniedDetails}\n        prevPageButtonText={t('accessdenied.accessDeniedButtonText')}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import React, { FunctionComponent } from 'react';\nimport { useConfig } from '@bf2/ui-shared';\nimport './QuickStartDrawerWrapper.scss';\nimport { FederatedModule } from \"@app/components\";\n\nexport const QuickStartDrawerWrapper: FunctionComponent = ({ children }) => {\n  const config = useConfig();\n  return (<FederatedModule\n      scope=\"guides\"\n      module=\"./QuickStartDrawer\"\n      fallback={children}\n      render={(QuickStartDrawerFederated) => {\n        return (\n          <QuickStartDrawerFederated\n            showDrafts={config?.guides.showDrafts}\n            appendTo={() => document.querySelector(\"#qs-include\")}\n            root={() => document.querySelector('#qs-root')}\n            className=\"mas-quickstart-drawer\"\n          >\n            {children}\n          </QuickStartDrawerFederated>\n        )\n      }}\n    />\n  );\n};\n\nexport default QuickStartDrawerWrapper;\n","import { Config } from '@bf2/ui-shared';\n\nconst defaultHostname = 'console.redhat.com';\n\ntype FederatedModulesConfig = Config['federatedModules'];\n\ntype EnvironmentConfig = {\n  hostnames: string[];\n  type?: string;\n  config: Omit<Config, 'federatedModules'>;\n};\n\nexport type EnvironmentConfigs = Array<EnvironmentConfig>;\n\nexport const filterConfig = (\n  environmentConfig: EnvironmentConfigs,\n  federatedModulesConfig: FederatedModulesConfig\n): Config => {\n  const hostname = window.location.hostname;\n  console.log(`Loading config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(hostname));\n  if (possibleConfigs.length > 1) {\n    throw new Error(`Unable to load config for ${hostname}, more than one config matched ${possibleConfigs}`);\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(defaultHostname));\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      const config = addFederatedModulesToConfig(possibleDefaultConfigs[0], federatedModulesConfig);\n      console.log('Done loading default config', config);\n      return config;\n    }\n  }\n  const config = addFederatedModulesToConfig(possibleConfigs[0], federatedModulesConfig);\n  console.log('Done loading default config', config);\n  return config;\n};\n\nconst addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfig,\n  federatedModulesConfig: FederatedModulesConfig\n): Config => {\n  if (environmentConfig.type !== 'proxy') {\n    const federatedModules = {} as FederatedModulesConfig;\n    Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n      federatedModules[k] = {\n        basePath: v.fallbackBasePath,\n      };\n    });\n    return {\n      ...environmentConfig.config,\n      federatedModules,\n    };\n  }\n  return {\n    ...environmentConfig.config,\n    federatedModules: federatedModulesConfig,\n  };\n};\n","import React from \"react\";\nimport { ConfigContext } from '@bf2/ui-shared';\nimport { config, federatedModules } from '../../../../config/config.json';\nimport { filterConfig } from \"@app/providers/config/utils\";\n\n\nexport const EmbeddedConfigProvider: React.FunctionComponent = ({ children }) => {\n  return (\n    <ConfigContext.Provider value={filterConfig(config, federatedModules)}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (!registry) {\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport jwtDecode, { JwtPayload } from 'jwt-decode';\nimport getUnixTime from 'date-fns/getUnixTime';\nimport { Base64 } from 'js-base64';\n\nlet keycloak: KeycloakInstance | undefined;\n\nconst OLD_REFRESH_TOKEN_COOKIE_NAME = 'masSSORefreshToken';\n// Clean out the old token from cookies\nCookies.remove(OLD_REFRESH_TOKEN_COOKIE_NAME);\n\nconst REFRESH_TOKEN_COOKIE_NAME = 'mrt';\nconst MIN_VALIDITY = 50;\n\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n};\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig, getInsightsAccessToken?: () => Promise<string>) => {\n  if (getInsightsAccessToken === undefined) {\n    return undefined;\n  }\n  if (!keycloak) {\n    keycloak = await init(config, getInsightsAccessToken);\n  }\n  return keycloak;\n};\n\nconst storeRefreshToken = async (refreshToken: string, getInsightsAccessToken: () => Promise<string>) => {\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const rhUserId = insightsJWT['account_id'];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId,\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug('storing refresh token');\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n};\n\nconst clearRefreshToken = () => {\n  console.debug('clearing stored refresh token');\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n};\n\nconst retrieveRefreshToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = (JSON.parse(storedToken) as unknown) as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n};\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nconst init = async (\n  config: KeycloakConfig,\n  getInsightsAccessToken: () => Promise<string>\n): Promise<KeycloakInstance | undefined> => {\n  const initOptions = {\n    responseMode: 'query',\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken) {\n    const rk = Keycloak(config);\n    // Use the refresh token\n    try {\n      // Perform a keycloak init without a login\n      await rk.init(initOptions);\n      // Set the saved refresh token into Keycloak\n      rk.refreshToken = refreshToken;\n      // Then force a token refresh to check if the refresh token is actually valid\n      await rk.updateToken(-1);\n      return rk;\n    } catch {\n      clearRefreshToken();\n      await logout(rk);\n    }\n  }\n  const lk = Keycloak(config);\n  initOptions.onLoad = 'login-required';\n  await lk.init(initOptions);\n  if (lk.refreshToken) {\n    await storeRefreshToken(lk.refreshToken, getInsightsAccessToken);\n  }\n  return lk;\n};\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getMASSSOToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string> => {\n  await keycloak?.updateToken(MIN_VALIDITY);\n  if (!keycloak?.token || !keycloak.tokenParsed) {\n    throw new Error('No token from keycloak!');\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== keycloak.tokenParsed['rh-user-id']) {\n    await logout(keycloak);\n    return '';\n  }\n  if (keycloak?.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak?.token;\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.info('Trigger MASSSO logout');\n    await k.logout();\n  }\n};\n"],"sourceRoot":""}