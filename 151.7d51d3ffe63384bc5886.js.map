{"version":3,"sources":["webpack://mk-ui-host/./src/AppEntry.tsx","webpack://mk-ui-host/./src/bootstrap.tsx"],"names":["AppWithKeycloak","config","useContext","Config","undefined","url","dataPlane","keycloak","authServerUrl","clientId","realm","setKeycloak","setLoadingKeycloak","useState","loadingKeycloak","Loading","baseName","getBaseName","window","location","pathname","AuthContext","value","getToken","basename","App","Provider","store","getStore","configUrl","root","document","getElementById"],"mappings":"uRAgBMA,EAA2C,WAE/C,IAAMC,GAAS,IAAAC,YAAWC,EAAA,GAE1B,eAAgB,WACd,GAAcC,MAAVH,EAAqB,EACL,yC,8DACC,UAAM,QAAqB,CAC1CI,IAAKJ,EAAOK,UAAUC,SAASC,cAC/BC,SAAUR,EAAOK,UAAUC,SAASE,SACpCC,MAAOT,EAAOK,UAAUC,SAASG,S,cAH7BH,EAAW,SAKjBI,EAAYJ,GACZK,GAAmB,G,cAItB,CAACX,IAEE,OAA0B,IAAAY,eAAuCT,GAAhEG,EAAQ,KAAEI,EAAW,KACtB,GAAwC,IAAAE,WAAS,GAAhDC,EAAe,KAAEF,EAAkB,KAG1C,GAAIE,QAAgCV,IAAbG,EACrB,OAAO,kBAACQ,EAAA,EAAO,MAGjB,IAKMC,GAAW,EAAAC,EAAA,GAAYC,OAAOC,SAASC,UAC7C,OACE,kBAACC,EAAA,WAAoB,CAACC,MAAO,CAC3BC,SARa,WACf,OAAO,aASL,kBAAC,gBAAM,CAACC,SAAUR,GAChB,kBAACS,EAAA,EAAG,SAgBZ,QAT0C,WAAM,OAC9C,kBAAC,EAAAC,SAAQ,CAACC,OAAO,QAAK,KAAQC,YAC5B,kBAACzB,EAAA,EAAc,CAAC0B,UAAc,+CAC5B,kBAAC,aAAwB,CAACP,MAAOJ,OAAiB,UAChD,kBAAClB,EAAe,UC7DxB,IAAM8B,EAAOC,SAASC,eAAe,QAErC,WAAgB,kBAAC,EAAQ,MAAKF","file":"151.7d51d3ffe63384bc5886.js","sourcesContent":["import React, { useContext, useState } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { Loading } from \"./app/Components/Loading/Loading\";\nimport { ConfigContext, ConfigProvider } from \"@app/Config/Config\";\nimport { KeycloakInstance } from \"keycloak-js\";\nimport { AuthContext, IAuthContext } from \"@app/utils/auth/AuthContext\";\nimport { getKeycloakInstance, getValidAccessToken } from \"@app/utils/keycloakAuth\";\n\ndeclare const __PUBLIC_PATH__: string;\n\nconst AppWithKeycloak: React.FunctionComponent = () => {\n\n  const config = useContext(ConfigContext)\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadToken = async () => {\n        const keycloak = await getKeycloakInstance ({\n          url: config.dataPlane.keycloak.authServerUrl,\n          clientId: config.dataPlane.keycloak.clientId,\n          realm: config.dataPlane.keycloak.realm\n        });\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      }\n      loadToken();\n    }\n  }, [config]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading/>;\n  }\n\n  const getToken = () => {\n    return getValidAccessToken();\n\n  }\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={{\n      getToken\n    } as IAuthContext}>\n      <Router basename={baseName}>\n        <App/>\n      </Router>\n    </AuthContext.Provider>\n  )\n}\n\n\nconst AppEntry: React.FunctionComponent = () => (\n  <Provider store={init(logger).getStore()}>\n    <ConfigProvider configUrl={`${__PUBLIC_PATH__}config.json`}>\n      <InsightsContext.Provider value={window[\"insights\"]}>\n        <AppWithKeycloak/>\n      </InsightsContext.Provider>\n    </ConfigProvider>\n  </Provider>\n);\nexport default AppEntry;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root);\n"],"sourceRoot":""}