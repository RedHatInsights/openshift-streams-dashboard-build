{"version":3,"file":"182.a67df728f968a35aef5a.js","mappings":"uVAiBMA,EAA2C,WAC/C,IAAMC,EAAyBC,OAAiB,SAC1CC,GAAS,IAAAC,aAEf,eAAgB,WACd,GAAcC,MAAVF,EAAqB,EACF,gD,yEACF,UAAM,QACrB,CACEG,IAAKH,EAAOI,OAAOC,cACnBC,SAAUN,EAAOI,OAAOE,SACxBC,MAAOP,EAAOI,OAAOG,OAEH,QAApB,EAAAT,EAASU,OAAOC,YAAI,eAAEC,W,cANlBC,EAAW,SAQjBC,EAAYD,GACZE,GAAmB,G,cAItB,CAACb,EAAQF,EAASU,OAAOC,OAEtB,OAA0B,IAAAK,eAAuCZ,GAAhES,EAAQ,KAAEC,EAAW,KACtB,GAAwC,IAAAE,WAAS,GAAhDC,EAAe,KAAEF,EAAkB,KAEpCG,GAAW,IAAAC,eAEjB,GAAIF,QAAgCb,IAAbS,EACrB,OAAO,kBAAC,IAAO,MAGjB,IAAMD,EAAW,WACf,OAAO,QAAeZ,EAASU,OAAOC,KAAKC,WAGvCD,EAAa,CACjBS,YAAa,WAAM,OAAApB,EAASU,OAAOC,KAAKU,UAAUC,MAAK,SAACC,GAAU,OAAAA,EAAMC,SAASC,KAAKC,aACtFC,WAAY,WAAM,OAAA3B,EAASU,OAAOC,KAAKU,UAAUC,MAAK,SAACC,GAAU,OAAAA,EAAMC,SAASC,KAAKG,iBACrFC,MAAO,CACLjB,SAAQ,GAEVkB,IAAK,CACHlB,SAAUZ,EAASU,OAAOC,KAAKC,UAEjCmB,IAAK,CACHnB,SAAUZ,EAASU,OAAOC,KAAKC,UAEjCoB,IAAK,CACHpB,SAAUZ,EAASU,OAAOC,KAAKC,UAEjCqB,kBAAmB,CACjBrB,SAAQ,IA8BNsB,EAAe,CACnBC,SA3Be,SAAC,G,IACEC,EAAK,QACLC,EAAO,UACPC,EAAW,cACXC,EAAU,aACVC,EAAW,cACXC,EAAW,cACXC,EAAY,eACZC,EAAS,YACTC,EAAQ,WAE1B1B,GACE,QAAgB,CACdkB,MAAK,EACLC,QAAO,EACPC,YAAW,EACXC,WAAU,EACVC,YAAaA,IAAe,EAC5BC,YAAaA,IAAe,EAC5BC,aAAcA,GAAgB,IAC9BC,UAAS,EACTC,SAAQ,OASRC,EAAc,SAAC,G,IAAEC,EAAQ,WACrBC,GAAa,IAAAC,cAAY,SAGjC,OAFAC,QAAQC,IACN,UAAUH,EAASI,SAAWJ,EAASK,OAAM,YAAYC,KAAKC,UAAUP,EAASQ,QAC5ET,GAGHU,GAAW,OAAYvD,OAAO8C,SAASI,UAC7C,OACE,kBAAC,EAAAM,YAAA,SAAoB,CAAClC,MAAOZ,GAC3B,kBAAC,EAAA+C,aAAA,SAAqB,CAACnC,MAAOW,GAC5B,kBAAC,EAAAyB,cAAa,CAACC,SAAUJ,GACvB,kBAAC,EAAAK,MAAK,CAACC,OAAQ,WACb,OAAO,kBAACjB,EAAW,KACjB,kBAAC,IAAG,cAkBlB,QAT0C,WAAM,OAC9C,kBAAC,EAAAkB,SAAQ,CAACC,OAAO,QAAK,KAAQC,YAC5B,kBAAC,EAAAC,gBAAe,CAACC,KAAM,KACrB,kBAAC,IAAsB,KACrB,kBAACpE,EAAe","sources":["webpack://application-services-ui/./src/AppEntry.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { Provider, useDispatch } from 'react-redux';\nimport { init } from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport { InsightsType } from '@app/utils/insights';\nimport { KeycloakInstance } from 'keycloak-js';\nimport { Alert, AlertContext, AlertProps, Auth, AuthContext, useConfig } from '@bf2/ui-shared';\nimport { getKeycloakInstance, getMASSSOToken } from '@app/utils/keycloakAuth';\nimport { I18nextProvider } from 'react-i18next';\nimport appServicesi18n from '@app/i18n';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Loading } from '@app/components/Loading/Loading';\nimport { EmbeddedConfigProvider } from \"@app/providers/config/EmbeddedConfigContextProvider\";\nimport { BrowserRouter, Route, useHistory } from \"react-router-dom\";\n\nconst AppWithKeycloak: React.FunctionComponent = () => {\n  const insights: InsightsType = window['insights'];\n  const config = useConfig();\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadKeycloak = async () => {\n        const keycloak = await getKeycloakInstance(\n          {\n            url: config.masSso.authServerUrl,\n            clientId: config.masSso.clientId,\n            realm: config.masSso.realm,\n          },\n          insights.chrome.auth?.getToken\n        );\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      };\n      loadKeycloak();\n    }\n  }, [config, insights.chrome.auth]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n  const dispatch = useDispatch();\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading/>;\n  }\n\n  const getToken = () => {\n    return getMASSSOToken(insights.chrome.auth.getToken);\n  };\n\n  const auth: Auth = {\n    getUsername: () => insights.chrome.auth.getUser().then((value) => value.identity.user.username),\n    isOrgAdmin: () => insights.chrome.auth.getUser().then((value) => value.identity.user.is_org_admin),\n    kafka: {\n      getToken,\n    },\n    kas: {\n      getToken: insights.chrome.auth.getToken,\n    },\n    ams: {\n      getToken: insights.chrome.auth.getToken,\n    },\n    srs: {\n      getToken: insights.chrome.auth.getToken,\n    },\n    apicurio_registry: {\n      getToken,\n    },\n  };\n\n  const addAlert = ({\n                      title,\n                      variant,\n                      description,\n                      dataTestId,\n                      autoDismiss,\n                      dismissable,\n                      dismissDelay,\n                      requestId,\n                      sentryId,\n                    }: AlertProps) => {\n    dispatch(\n      addNotification({\n        title,\n        variant,\n        description,\n        dataTestId,\n        autoDismiss: autoDismiss || true,\n        dismissable: dismissable || true,\n        dismissDelay: dismissDelay || 8000,\n        requestId,\n        sentryId,\n      })\n    );\n  };\n\n  const alert: Alert = {\n    addAlert,\n  };\n\n  const DebugRouter = ({ children }: { children: any }) => {\n    const { location } = useHistory();\n    console.log(\n      `Route: ${location.pathname}${location.search}, State: ${JSON.stringify(location.state)}`);\n    return children\n  }\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={auth}>\n      <AlertContext.Provider value={alert}>\n        <BrowserRouter basename={baseName}>\n          <Route render={() => {\n            return <DebugRouter>\n              <App/>\n            </DebugRouter>\n          }}/>\n        </BrowserRouter>\n      </AlertContext.Provider>\n    </AuthContext.Provider>\n  );\n};\n\nconst AppEntry: React.FunctionComponent = () => (\n  <Provider store={init(logger).getStore()}>\n    <I18nextProvider i18n={appServicesi18n}>\n      <EmbeddedConfigProvider>\n        <AppWithKeycloak/>\n      </EmbeddedConfigProvider>\n    </I18nextProvider>\n  </Provider>\n);\nexport default AppEntry;\n"],"names":["AppWithKeycloak","insights","window","config","useConfig","undefined","url","masSso","authServerUrl","clientId","realm","chrome","auth","getToken","keycloak","setKeycloak","setLoadingKeycloak","useState","loadingKeycloak","dispatch","useDispatch","getUsername","getUser","then","value","identity","user","username","isOrgAdmin","is_org_admin","kafka","kas","ams","srs","apicurio_registry","alert","addAlert","title","variant","description","dataTestId","autoDismiss","dismissable","dismissDelay","requestId","sentryId","DebugRouter","children","location","useHistory","console","log","pathname","search","JSON","stringify","state","baseName","AuthContext","AlertContext","BrowserRouter","basename","Route","render","Provider","store","getStore","I18nextProvider","i18n"],"sourceRoot":""}