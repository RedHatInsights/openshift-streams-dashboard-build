{"version":3,"sources":["webpack://mk-ui-host/./src/AppEntry.tsx"],"names":["AppWithKeycloak","config","useContext","undefined","url","dataPlane","keycloak","authServerUrl","clientId","realm","setKeycloak","setLoadingKeycloak","useState","loadingKeycloak","baseName","window","location","pathname","value","getToken","basename","Provider","store","getStore","configUrl"],"mappings":"2RAiBMA,EAAkB,WAEtB,IAAMC,GAAS,IAAAC,YAAW,KAE1B,eAAgB,WACd,GAAcC,MAAVF,EAAqB,EACL,yC,8DACC,UAAM,QAAqB,CAC1CG,IAAKH,EAAOI,UAAUC,SAASC,cAC/BC,SAAUP,EAAOI,UAAUC,SAASE,SACpCC,MAAOR,EAAOI,UAAUC,SAASG,S,cAH7BH,EAAW,SAKjBI,EAAYJ,GACZK,GAAmB,G,cAItB,CAACV,IAEE,OAA0B,IAAAW,eAAuCT,GAAhEG,EAAQ,KAAEI,EAAW,KACtB,GAAwC,IAAAE,WAAS,GAAhDC,EAAe,KAAEF,EAAkB,KAG1C,GAAIE,QAAgCV,IAAbG,EACrB,OAAO,kBAAC,IAAO,MAGjB,IAKMQ,GAAW,OAAYC,OAAOC,SAASC,UAC7C,OACE,kBAAC,aAAoB,CAACC,MAAO,CAC3BC,SARa,WACf,OAAO,aASL,kBAAC,gBAAM,CAACC,SAAUN,GAChB,kBAAC,IAAG,SAgBZ,QATiB,WAAM,OACrB,kBAAC,EAAAO,SAAQ,CAACC,OAAO,QAAK,KAAQC,YAC5B,kBAAC,IAAc,CAACC,UAAc,+CAC5B,kBAAC,aAAwB,CAACN,MAAOH,OAAiB,UAChD,kBAACf,EAAe","file":"917.edcb73618e9d111abcf4.js","sourcesContent":["import React, {useContext, useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {Provider} from 'react-redux';\nimport {init} from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport {InsightsContext} from \"@app/utils/insights\";\nimport {Loading} from \"./app/Components/Loading/Loading\";\nimport {ConfigContext, ConfigProvider} from \"@app/Config/Config\";\nimport {KeycloakInstance} from \"keycloak-js\";\nimport {AuthContext, IAuthContext} from \"@app/utils/auth/AuthContext\";\nimport {getKeycloakInstance, getKeyCloakToken} from \"@app/utils/keycloakAuth\";\n\ndeclare const __PUBLIC_PATH__: string;\n\nconst AppWithKeycloak = () => {\n\n  const config = useContext(ConfigContext)\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadToken = async () => {\n        const keycloak = await getKeycloakInstance ({\n          url: config.dataPlane.keycloak.authServerUrl,\n          clientId: config.dataPlane.keycloak.clientId,\n          realm: config.dataPlane.keycloak.realm\n        });\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      }\n      loadToken();\n    }\n  }, [config]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading/>;\n  }\n\n  const getToken = () => {\n    return getKeyCloakToken();\n\n  }\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={{\n      getToken\n    } as IAuthContext}>\n      <Router basename={baseName}>\n        <App/>\n      </Router>\n    </AuthContext.Provider>\n  )\n}\n\n\nconst AppEntry = () => (\n  <Provider store={init(logger).getStore()}>\n    <ConfigProvider configUrl={`${__PUBLIC_PATH__}config.json`}>\n      <InsightsContext.Provider value={window[\"insights\"]}>\n        <AppWithKeycloak/>\n      </InsightsContext.Provider>\n    </ConfigProvider>\n  </Provider>\n);\nexport default AppEntry;\n\n"],"sourceRoot":""}