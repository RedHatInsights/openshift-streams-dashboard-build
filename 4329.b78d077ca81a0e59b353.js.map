{"version":3,"file":"4329.b78d077ca81a0e59b353.js","mappings":"+UAiBMA,G,SAA2C,WAC/CC,QAAQC,IAAI,4BACZ,IAAMC,GAAO,UACPC,GAAW,IAAAC,eA4BXC,EAAe,CACnBC,SA3Be,SAAC,G,IAChBC,EAAK,QACLC,EAAO,UACPC,EAAW,cACXC,EAAU,aACVC,EAAW,cACXC,EAAW,cACXC,EAAY,eACZC,EAAS,YACTC,EAAQ,WAERZ,GACE,QAAgB,CACdI,MAAK,EACLC,QAAO,EACPC,YAAW,EACXC,WAAU,EACVC,YAAaA,IAAe,EAC5BC,YAAaA,IAAe,EAC5BC,aAAcA,GAAgB,IAC9BC,UAAS,EACTC,SAAQ,OASRC,GAAW,OAAYC,OAAOC,SAASC,UAC7C,OACE,kBAAC,EAAAC,YAAA,SAAoB,CAACC,MAAOnB,GAC3B,kBAAC,EAAAoB,aAAA,SAAqB,CAACD,MAAOhB,GAC5B,kBAAC,EAAAkB,cAAa,KACZ,kBAAC,gBAAM,CAACC,SAAUR,GAChB,kBAAC,IAAG,YAQVS,EAAyC,WAE7C,YAAeC,KADA,IAAAC,YAAW,EAAAC,eAEjB,kBAAC,EAAAC,mBAAkB,MAErB,kBAAC9B,EAAe,OAuCzB,QAnC0C,UAAW,WAAM,OACzD,kBAAC,EAAA+B,SAAQ,CAACC,OAAO,QAAK,KAAQC,YAC5B,kBAAC,EAAAC,aAAY,CACXC,IAAK,KACLC,UAAW,CACTC,GAAI,CACFC,OAAQ,WAAM,4CACd,wBAAyB,WACvB,6CACFC,MAAO,WAAM,6CACbC,QAAS,WAAM,6CACfC,SAAU,WAAM,6CAChBC,oBAAqB,WAAM,4CAC3BC,gBAAiB,WAAM,6CAEvBC,kBAAmB,WAAM,6CACzBC,oBAAqB,WAAM,6CAC3BC,kBAAmB,WAAM,0CACzBC,kBAAmB,WAAM,6CACzB,2BAA4B,WAAM,+CAGtCC,OAAO,GAEP,kBAAC,KAAmB,KAClB,kBAAC,IAAsB,KACrB,kBAAC,IAA+B,KAC9B,kBAACtB,EAAa","sources":["webpack://application-services-ui/./src/AppEntry.tsx"],"sourcesContent":["import App from '@app/App';\nimport { useAuth } from '@app/hooks';\nimport { EmbeddedConfigProvider } from '@app/providers/config/EmbeddedConfigContextProvider';\nimport { ServiceConstantsContextProvider } from '@app/providers/config/ServiceConstantsContextProvider';\nimport { FeatureFlagProvider } from '@app/providers/featureflags/FeatureFlags';\nimport { init } from '@app/store';\nimport getBaseName from '@app/utils/getBaseName';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AppServicesLoading, I18nProvider, ModalProvider } from '@rhoas/app-services-ui-components';\nimport { Alert, AlertContext, AlertProps, AuthContext, ConfigContext } from '@rhoas/app-services-ui-shared';\nimport React, { useContext } from 'react';\nimport { Provider, useDispatch } from 'react-redux';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport logger from 'redux-logger';\n\nimport '@rhoas/app-services-ui-components/dist/esm/index.css';\n\nconst AppWithKeycloak: React.FunctionComponent = () => {\n  console.log('starting appwithkeycloak');\n  const auth = useAuth();\n  const dispatch = useDispatch();\n\n  const addAlert = ({\n    title,\n    variant,\n    description,\n    dataTestId,\n    autoDismiss,\n    dismissable,\n    dismissDelay,\n    requestId,\n    sentryId,\n  }: AlertProps) => {\n    dispatch(\n      addNotification({\n        title,\n        variant,\n        description,\n        dataTestId,\n        autoDismiss: autoDismiss || true,\n        dismissable: dismissable || true,\n        dismissDelay: dismissDelay || 8000,\n        requestId,\n        sentryId,\n      })\n    );\n  };\n\n  const alert: Alert = {\n    addAlert,\n  };\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={auth}>\n      <AlertContext.Provider value={alert}>\n        <ModalProvider>\n          <Router basename={baseName}>\n            <App />\n          </Router>\n        </ModalProvider>\n      </AlertContext.Provider>\n    </AuthContext.Provider>\n  );\n};\n\nconst AppWithConfig: React.FunctionComponent = () => {\n  const config = useContext(ConfigContext);\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n  return <AppWithKeycloak />;\n};\n\n// eslint-disable-next-line react/display-name\nconst AppEntry: React.FunctionComponent = React.memo(() => (\n  <Provider store={init(logger).getStore()}>\n    <I18nProvider\n      lng={'en'}\n      resources={{\n        en: {\n          common: () => import('@rhoas/app-services-ui-components/locales/en/common.json'),\n          'create-kafka-instance': () =>\n            import('@rhoas/app-services-ui-components/locales/en/create-kafka-instance.json'),\n          kafka: () => import('@rhoas/app-services-ui-components/locales/en/kafka.json'),\n          metrics: () => import('@rhoas/app-services-ui-components/locales/en/metrics.json'),\n          overview: () => import('@rhoas/app-services-ui-components/locales/en/overview.json'),\n          datascienceoverview: () => import('@rhoas/app-services-ui-components/locales/en/datascienceoverview.json'),\n          apimgmtoverview: () => import('@rhoas/app-services-ui-components/locales/en/apimgmtoverview.json'),\n          // temporary translations until all user facing visuals are ported to the ui components repo\n          appTemporaryFixMe: () => import('./locales/app-services-ui.json'),\n          kafkaTemporaryFixMe: () => import('./locales/kafka-ui.json'),\n          kasTemporaryFixMe: () => import('./locales/kas-ui.json'),\n          srsTemporaryFixMe: () => import('./locales/srs-ui.json'),\n          \"manage-kafka-permissions\": () => import(\"@rhoas/app-services-ui-components/locales/en/manage-kafka-permissions.json\"),\n        },\n      }}\n      debug={true}\n    >\n      <FeatureFlagProvider>\n        <EmbeddedConfigProvider>\n          <ServiceConstantsContextProvider>\n            <AppWithConfig />\n          </ServiceConstantsContextProvider>\n        </EmbeddedConfigProvider>\n      </FeatureFlagProvider>\n    </I18nProvider>\n  </Provider>\n));\n\nexport default AppEntry;\n"],"names":["AppWithKeycloak","console","log","auth","dispatch","useDispatch","alert","addAlert","title","variant","description","dataTestId","autoDismiss","dismissable","dismissDelay","requestId","sentryId","baseName","window","location","pathname","AuthContext","value","AlertContext","ModalProvider","basename","AppWithConfig","undefined","useContext","ConfigContext","AppServicesLoading","Provider","store","getStore","I18nProvider","lng","resources","en","common","kafka","metrics","overview","datascienceoverview","apimgmtoverview","appTemporaryFixMe","kafkaTemporaryFixMe","kasTemporaryFixMe","srsTemporaryFixMe","debug"],"sourceRoot":""}