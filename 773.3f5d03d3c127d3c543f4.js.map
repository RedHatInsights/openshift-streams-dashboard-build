{"version":3,"sources":["webpack://application-services-ui/./src/app/App.scss","webpack://application-services-ui/./src/app/ResourcesPage/QuickStartDrawerFederated.scss","webpack://application-services-ui/./static/images/APIManagement_MECH_API_FullColor_Pink.svg","webpack://application-services-ui/./static/images/AppServicesOverview-IconPattern.svg","webpack://application-services-ui/./static/images/RHODS-ML-Technology.svg","webpack://application-services-ui/./static/images/icon__plus-solid.svg","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/App.scss?af09","webpack://application-services-ui/./src/app/utils/insights.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/NotFound/NotFound.tsx","webpack://application-services-ui/./src/app/Components/Loading/Loading.tsx","webpack://application-services-ui/./src/app/Config/Config.tsx","webpack://application-services-ui/./src/app/Components/FederatedModule/utils.ts","webpack://application-services-ui/./src/app/Components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/openapi/ams/api.ts","webpack://application-services-ui/./src/openapi/ams/base.ts","webpack://application-services-ui/./src/openapi/ams/common.ts","webpack://application-services-ui/./src/app/KafkaPage/KafkaPage.tsx","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/openapi/ams/configuration.ts","webpack://application-services-ui/./src/app/utils/auth/AuthContext.tsx","webpack://application-services-ui/./src/openapi/kas/base.ts","webpack://application-services-ui/./src/openapi/kas/common.ts","webpack://application-services-ui/./src/openapi/kas/api.ts","webpack://application-services-ui/./src/app/KafkaPage/utils.ts","webpack://application-services-ui/./src/openapi/kas/configuration.ts","webpack://application-services-ui/./src/app/ResourcesPage/QuickStartDrawerFederated.scss?181b","webpack://application-services-ui/./src/app/ResourcesPage/QuickStartDrawerFederated.tsx","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Videoplaceholder.svg","webpack://application-services-ui/./src/app/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/KafkaPage/KafkaDetailPage.tsx","webpack://application-services-ui/./src/app/Routes.tsx","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/KasPage/KasPage.tsx","webpack://application-services-ui/./src/app/ServiceAccountsPage/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/ResourcesPage/ResourcesPage.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/keycloakAuth.ts","webpack://application-services-ui/./src/app/i18n/locale/index.ts","webpack://application-services-ui/./src/app/i18n/index.ts","webpack://application-services-ui/./src/AppEntry.tsx","webpack://application-services-ui/./src/bootstrap.tsx"],"names":["___CSS_LOADER_EXPORT___","i","___CSS_LOADER_URL_REPLACEMENT_0___","___CSS_LOADER_URL_REPLACEMENT_1___","___CSS_LOADER_URL_REPLACEMENT_2___","___CSS_LOADER_URL_REPLACEMENT_3___","push","module","id","registry","init","Error","ReducerRegistry","middleware","options","InsightsContext","useDocumentTitle","title","originalTitle","document","NotFound","PageSection","EmptyState","variant","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","history","Button","onClick","Loading","Bullseye","Spinner","ConfigContext","undefined","ConfigProvider","configUrl","children","config","setConfig","controller","AbortController","signal","hostname","window","location","console","log","fetch","json","environmentConfig","possibleConfigs","filter","entry","hostnames","includes","length","possibleDefaultConfigs","abort","Provider","value","getEntryPoint","baseUrl","fileName","scope","Promise","endsWith","url","then","fedMods","s","path","startsWith","FederatedModuleContext","FederatedModuleProvider","useContext","federatedModules","AccessReviewActionEnum","AccessReviewResourceTypeEnum","AccessReviewResponseActionEnum","AccessReviewResponseResourceTypeEnum","CapabilityReviewRequestCapabilityEnum","CapabilityReviewRequestTypeEnum","ClusterAuthorizationRequestProductCategoryEnum","ClusterAuthorizationRequestProductIdEnum","OneMetricHealthStateEnum","PermissionActionEnum","PermissionAllOfActionEnum","ResourceQuotaTypeEnum","ResourceQuotaAllOfTypeEnum","ResourceQuotaRequestTypeEnum","ResourceReviewActionEnum","ResourceReviewResourceTypeEnum","ResourceReviewRequestActionEnum","ResourceReviewRequestResourceTypeEnum","RoleBindingTypeEnum","RoleBindingAllOfTypeEnum","SelfAccessReviewActionEnum","SelfAccessReviewResourceTypeEnum","SelfResourceReviewActionEnum","SelfResourceReviewResourceTypeEnum","SelfResourceReviewRequestActionEnum","SelfResourceReviewRequestResourceTypeEnum","SubscriptionProductBundleEnum","SubscriptionServiceLevelEnum","SubscriptionSupportLevelEnum","SubscriptionSystemUnitsEnum","SubscriptionUsageEnum","SubscriptionAllOfProductBundleEnum","SubscriptionAllOfServiceLevelEnum","SubscriptionAllOfSupportLevelEnum","SubscriptionAllOfSystemUnitsEnum","SubscriptionAllOfUsageEnum","SubscriptionCreateRequestPlanIdEnum","SubscriptionCreateRequestStatusEnum","SubscriptionPatchRequestClusterBillingModelEnum","SubscriptionPatchRequestProductBundleEnum","SubscriptionPatchRequestServiceLevelEnum","SubscriptionPatchRequestSupportLevelEnum","SubscriptionPatchRequestSystemUnitsEnum","SubscriptionPatchRequestUsageEnum","SupportCasesRequestSeverityEnum","FederatedModule","render","fallback","federatedModuleContext","useState","setUrl","useEffect","basePath","entryPoint","ready","setReady","failed","setFailed","element","createElement","src","type","async","onload","onerror","error","head","appendChild","removeChild","useDynamicScript","Component","default","get","factory","Module","loadComponent","BASE_PATH","replace","configuration","axios","this","field","msg","name","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","RequiredError","setBearerAuthToObject","object","accessToken","setSearchParams","searchParams","URLSearchParams","search","objects","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","pathname","hash","createRequestFunction","axiosArgs","globalAxios","axiosRequestArgs","request","KafkaUITopicModules","DefaultApiFp","localVarAxiosParamCreator","apiAccountsMgmtV1AccessTokenPost","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","apiAccountsMgmtV1AccountsGet","page","orderBy","fields","fetchLabels","fetchCapabilities","apiAccountsMgmtV1AccountsIdGet","localVarPath","encodeURIComponent","String","apiAccountsMgmtV1AccountsIdLabelsGet","apiAccountsMgmtV1AccountsIdLabelsKeyDelete","apiAccountsMgmtV1AccountsIdLabelsKeyGet","apiAccountsMgmtV1AccountsIdLabelsKeyPatch","label","data","apiAccountsMgmtV1AccountsIdLabelsPost","apiAccountsMgmtV1AccountsIdPatch","accountPatchRequest","apiAccountsMgmtV1AccountsPost","account","dryRun","apiAccountsMgmtV1ClusterAuthorizationsPost","clusterAuthorizationRequest","apiAccountsMgmtV1ClusterRegistrationsPost","clusterRegistrationRequest","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1ErrorsGet","apiAccountsMgmtV1ErrorsIdGet","apiAccountsMgmtV1FeatureTogglesIdQueryPost","featureToggleQueryRequest","apiAccountsMgmtV1LabelsGet","apiAccountsMgmtV1MetricsGet","apiAccountsMgmtV1NotifyPost","notificationRequest","apiAccountsMgmtV1OrganizationsGet","apiAccountsMgmtV1OrganizationsIdGet","apiAccountsMgmtV1OrganizationsIdLabelsGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete","apiAccountsMgmtV1OrganizationsIdLabelsKeyGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch","apiAccountsMgmtV1OrganizationsIdLabelsPost","apiAccountsMgmtV1OrganizationsIdPatch","organizationPatchRequest","apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","orgId","fetchRelatedResources","apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost","resourceQuotaRequest","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete","quotaId","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch","apiAccountsMgmtV1OrganizationsPost","organization","apiAccountsMgmtV1PlansGet","apiAccountsMgmtV1PlansIdGet","apiAccountsMgmtV1PullSecretsExternalResourceIdDelete","externalResourceId","apiAccountsMgmtV1PullSecretsPost","pullSecretRequest","apiAccountsMgmtV1RegistriesGet","apiAccountsMgmtV1RegistriesIdGet","apiAccountsMgmtV1RegistryCredentialsGet","apiAccountsMgmtV1RegistryCredentialsIdDelete","apiAccountsMgmtV1RegistryCredentialsIdGet","apiAccountsMgmtV1RegistryCredentialsIdPatch","registryCredentialPatchRequest","apiAccountsMgmtV1RegistryCredentialsPost","registryCredential","apiAccountsMgmtV1ReservedResourcesGet","apiAccountsMgmtV1ResourceQuotaGet","apiAccountsMgmtV1RoleBindingsGet","apiAccountsMgmtV1RoleBindingsIdDelete","apiAccountsMgmtV1RoleBindingsIdGet","apiAccountsMgmtV1RoleBindingsIdPatch","roleBindingRequest","apiAccountsMgmtV1RoleBindingsPost","roleBindingCreateRequest","apiAccountsMgmtV1RolesGet","apiAccountsMgmtV1RolesIdGet","apiAccountsMgmtV1SkuRulesGet","apiAccountsMgmtV1SkuRulesIdGet","apiAccountsMgmtV1SkusGet","apiAccountsMgmtV1SkusIdGet","apiAccountsMgmtV1SubscriptionsGet","fetchAccounts","labels","apiAccountsMgmtV1SubscriptionsIdDelete","apiAccountsMgmtV1SubscriptionsIdGet","fetchCpuAndSocket","apiAccountsMgmtV1SubscriptionsIdLabelsGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete","apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch","apiAccountsMgmtV1SubscriptionsIdLabelsPost","apiAccountsMgmtV1SubscriptionsIdNotifyPost","apiAccountsMgmtV1SubscriptionsIdPatch","subscriptionPatchRequest","apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet","apiAccountsMgmtV1SubscriptionsIdSupportCasesGet","apiAccountsMgmtV1SubscriptionsPost","subscriptionCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete","subId","accountId","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost","notificationContactCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet","reservedResourceId","apiAccountsMgmtV1SupportCasesCaseIdDelete","caseId","apiAccountsMgmtV1SupportCasesPost","supportCasesRequest","apiAccountsMgmtV1TokenAuthorizationPost","tokenAuthorizationRequest","apiAuthorizationsV1AccessReviewPost","accessReview","apiAuthorizationsV1CapabilityReviewPost","capabilityReviewRequest","apiAuthorizationsV1ExportControlReviewPost","exportControlReviewRequest","apiAuthorizationsV1ResourceReviewPost","resourceReviewRequest","apiAuthorizationsV1SelfAccessReviewPost","selfAccessReview","apiAuthorizationsV1SelfResourceReviewPost","selfResourceReviewRequest","apiAuthorizationsV1SelfTermsReviewPost","selfTermsReview","apiAuthorizationsV1TermsReviewPost","termsReview","DefaultApiAxiosParamCreator","localVarAxiosArgs","BaseAPI","buildUrlParams","param","apiKey","username","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","params","Object","keys","map","join","AuthContext","getToken","resolve","createKafka","kafkaRequestPayload","createServiceAccount","serviceAccountRequest","deleteKafkaById","deleteServiceAccount","getKafkaById","getMetricsByInstantQuery","filters","getMetricsByRangeQuery","duration","interval","getServiceAccountById","listCloudProviderRegions","listCloudProviders","listKafkas","listServiceAccounts","resetServiceAccountCreds","getParams","matches","exec","groups","topicName","KafkaPageContent","adminServerUrl","showCreate","setShowCreate","showUpdate","setShowUpdate","dispatch","useDispatch","onCreateTopic","onClickTopic","onCloseCreateTopic","getTopicDetailsPath","createHref","onUpdateTopic","onDeleteTopic","addAlert","message","topicModule","topicListModule","topicCreateModule","topicUpdateModule","topicListDetailModule","FederatedTopics","apiBasePath","currentTopic","QuickStartDrawerFederated","guides","showDrafts","resources","className","routeFocusTimer","KafkaDetailPageContent","onCancelUpdateTopic","onSaveTopic","getTopicListPath","onClickTopicList","RedirectToStreamsKafkas","to","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","rest","routeProps","PageNotFound","component","flattenedRoutes","insights","setAdminServerUrl","chrome","auth","controlPlane","serviceApiBasePath","kafka","bootstrapServerHost","exact","create","setCreate","setTermsReview","ams","DefaultApi","amsBasePath","event_code","eventCode","site_code","siteCode","resp","onConnectInstance","event","getConnectToInstancePath","preCreateInstance","open","terms_available","terms_required","redirect_url","redirectURL","href","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","createDialogOpen","getUsername","getUser","user","identity","OpenshiftStreamsFederated","onConnectToInstance","ServiceAccountsFederated","t","useTranslation","PageSectionVariants","Stack","hasGutter","Text","TextVariants","StackItem","ButtonVariant","isLarge","Gallery","Card","CardHeader","CardHeaderMain","alt","style","height","CardTitle","CardBody","Label","CardFooter","color","isInline","target","TitleSizes","Grid","GridItem","md","frameborder","allow","allowfullscreen","TextContent","List","ListItem","QuickStartCatalogFederated","reduce","flattened","route","routes","AppRoutes","LastLocationProvider","idx","register","notifications","connect","defaultAppId","parts","appId","split","identifyApp","on","navId","store","getStore","release","pathName","shift","keycloak","REFRESH_TOKEN_COOKIE_NAME","getKeycloakInstance","k","initOptions","responseMode","storedRefreshToken","refreshJWT","exp","Date","refreshToken","updateToken","onLoad","getValidAccessToken","token","en","translation","appServicesi18n","use","initReactI18next","detection","order","caches","fallbackLng","debug","interpolation","escapeValue","AppWithKeycloak","dataPlane","authServerUrl","clientId","realm","setKeycloak","setLoadingKeycloak","loadingKeycloak","baseName","basename","I18nextProvider","i18n","root"],"mappings":"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","file":"773.3f5d03d3c127d3c543f4.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nimport ___CSS_LOADER_GET_URL_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/getUrl.js\";\nimport ___CSS_LOADER_URL_IMPORT_0___ from \"../../static/images/AppServicesOverview-IconPattern.svg\";\nimport ___CSS_LOADER_URL_IMPORT_1___ from \"../../static/images/APIManagement_MECH_API_FullColor_Pink.svg\";\nimport ___CSS_LOADER_URL_IMPORT_2___ from \"../../static/images/RHODS-ML-Technology.svg\";\nimport ___CSS_LOADER_URL_IMPORT_3___ from \"../../static/images/icon__plus-solid.svg\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_0___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_0___);\nvar ___CSS_LOADER_URL_REPLACEMENT_1___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_1___);\nvar ___CSS_LOADER_URL_REPLACEMENT_2___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_2___);\nvar ___CSS_LOADER_URL_REPLACEMENT_3___ = ___CSS_LOADER_GET_URL_IMPORT___(___CSS_LOADER_URL_IMPORT_3___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}.pf-u-font-size-xs{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl{font-size:var(--pf-global--FontSize--4xl) !important}@media screen and (min-width: 576px){.pf-u-font-size-xs-on-sm{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-sm{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-sm{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-sm{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-sm{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-sm{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-sm{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-sm{font-size:var(--pf-global--FontSize--4xl) !important}}@media screen and (min-width: 768px){.pf-u-font-size-xs-on-md{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-md{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-md{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-md{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-md{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-md{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-md{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-md{font-size:var(--pf-global--FontSize--4xl) !important}}@media screen and (min-width: 992px){.pf-u-font-size-xs-on-lg{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-lg{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-lg{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-lg{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-lg{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-lg{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-lg{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-lg{font-size:var(--pf-global--FontSize--4xl) !important}}@media screen and (min-width: 1200px){.pf-u-font-size-xs-on-xl{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-xl{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-xl{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-xl{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-xl{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-xl{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-xl{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-xl{font-size:var(--pf-global--FontSize--4xl) !important}}@media screen and (min-width: 1450px){.pf-u-font-size-xs-on-2xl{font-size:var(--pf-global--FontSize--xs) !important}.pf-u-font-size-sm-on-2xl{font-size:var(--pf-global--FontSize--sm) !important}.pf-u-font-size-md-on-2xl{font-size:var(--pf-global--FontSize--md) !important}.pf-u-font-size-lg-on-2xl{font-size:var(--pf-global--FontSize--lg) !important}.pf-u-font-size-xl-on-2xl{font-size:var(--pf-global--FontSize--xl) !important}.pf-u-font-size-2xl-on-2xl{font-size:var(--pf-global--FontSize--2xl) !important}.pf-u-font-size-3xl-on-2xl{font-size:var(--pf-global--FontSize--3xl) !important}.pf-u-font-size-4xl-on-2xl{font-size:var(--pf-global--FontSize--4xl) !important}}.pf-u-font-weight-light{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold{font-weight:var(--pf-global--FontWeight--bold) !important}@media screen and (min-width: 576px){.pf-u-font-weight-light-on-sm{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-sm{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-sm{font-weight:var(--pf-global--FontWeight--bold) !important}}@media screen and (min-width: 768px){.pf-u-font-weight-light-on-md{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-md{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-md{font-weight:var(--pf-global--FontWeight--bold) !important}}@media screen and (min-width: 992px){.pf-u-font-weight-light-on-lg{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-lg{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-lg{font-weight:var(--pf-global--FontWeight--bold) !important}}@media screen and (min-width: 1200px){.pf-u-font-weight-light-on-xl{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-xl{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-xl{font-weight:var(--pf-global--FontWeight--bold) !important}}@media screen and (min-width: 1450px){.pf-u-font-weight-light-on-2xl{font-weight:var(--pf-global--FontWeight--light) !important}.pf-u-font-weight-normal-on-2xl{font-weight:var(--pf-global--FontWeight--normal) !important}.pf-u-font-weight-bold-on-2xl{font-weight:var(--pf-global--FontWeight--bold) !important}}.pf-u-color-100{color:var(--pf-global--Color--100) !important}.pf-u-color-200{color:var(--pf-global--Color--200) !important}.pf-u-color-300{color:var(--pf-global--Color--300) !important}.pf-u-color-400{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300{color:var(--pf-global--danger-color--300) !important}@media screen and (min-width: 576px){.pf-u-color-100-on-sm{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-sm{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-sm{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-sm{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-sm{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-sm{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-sm{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-sm{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-sm{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-sm{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-sm{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-sm{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-sm{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-sm{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-sm{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-sm{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-sm{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-sm{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-sm{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-sm{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-sm{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-sm{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-sm{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-sm{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-sm{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-sm{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-sm{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-sm{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-sm{color:var(--pf-global--danger-color--300) !important}}@media screen and (min-width: 768px){.pf-u-color-100-on-md{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-md{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-md{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-md{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-md{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-md{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-md{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-md{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-md{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-md{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-md{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-md{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-md{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-md{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-md{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-md{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-md{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-md{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-md{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-md{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-md{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-md{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-md{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-md{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-md{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-md{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-md{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-md{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-md{color:var(--pf-global--danger-color--300) !important}}@media screen and (min-width: 992px){.pf-u-color-100-on-lg{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-lg{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-lg{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-lg{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-lg{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-lg{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-lg{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-lg{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-lg{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-lg{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-lg{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-lg{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-lg{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-lg{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-lg{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-lg{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-lg{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-lg{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-lg{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-lg{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-lg{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-lg{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-lg{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-lg{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-lg{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-lg{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-lg{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-lg{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-lg{color:var(--pf-global--danger-color--300) !important}}@media screen and (min-width: 1200px){.pf-u-color-100-on-xl{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-xl{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-xl{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-xl{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-xl{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-xl{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-xl{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-xl{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-xl{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-xl{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-xl{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-xl{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-xl{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-xl{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-xl{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-xl{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-xl{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-xl{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-xl{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-xl{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-xl{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-xl{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-xl{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-xl{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-xl{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-xl{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-xl{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-xl{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-xl{color:var(--pf-global--danger-color--300) !important}}@media screen and (min-width: 1450px){.pf-u-color-100-on-2xl{color:var(--pf-global--Color--100) !important}.pf-u-color-200-on-2xl{color:var(--pf-global--Color--200) !important}.pf-u-color-300-on-2xl{color:var(--pf-global--Color--300) !important}.pf-u-color-400-on-2xl{color:var(--pf-global--Color--400) !important}.pf-u-icon-color-light-on-2xl{color:var(--pf-global--icon--Color--light) !important}.pf-u-icon-color-dark-on-2xl{color:var(--pf-global--icon--Color--dark) !important}.pf-u-link-color-on-2xl{color:var(--pf-global--link--Color) !important}.pf-u-active-color-100-on-2xl{color:var(--pf-global--active-color--100) !important}.pf-u-active-color-200-on-2xl{color:var(--pf-global--active-color--200) !important}.pf-u-active-color-300-on-2xl{color:var(--pf-global--active-color--300) !important}.pf-u-active-color-400-on-2xl{color:var(--pf-global--active-color--400) !important}.pf-u-disabled-color-100-on-2xl{color:var(--pf-global--disabled-color--100) !important}.pf-u-disabled-color-200-on-2xl{color:var(--pf-global--disabled-color--200) !important}.pf-u-disabled-color-300-on-2xl{color:var(--pf-global--disabled-color--300) !important}.pf-u-primary-color-100-on-2xl{color:var(--pf-global--primary-color--100) !important}.pf-u-primary-color-200-on-2xl{color:var(--pf-global--primary-color--200) !important}.pf-u-secondary-color-100-on-2xl{color:var(--pf-global--secondary-color--100) !important}.pf-u-default-color-100-on-2xl{color:var(--pf-global--default-color--100) !important}.pf-u-default-color-200-on-2xl{color:var(--pf-global--default-color--200) !important}.pf-u-default-color-300-on-2xl{color:var(--pf-global--default-color--300) !important}.pf-u-success-color-100-on-2xl{color:var(--pf-global--success-color--100) !important}.pf-u-success-color-200-on-2xl{color:var(--pf-global--success-color--200) !important}.pf-u-info-color-100-on-2xl{color:var(--pf-global--info-color--100) !important}.pf-u-info-color-200-on-2xl{color:var(--pf-global--info-color--200) !important}.pf-u-warning-color-100-on-2xl{color:var(--pf-global--warning-color--100) !important}.pf-u-warning-color-200-on-2xl{color:var(--pf-global--warning-color--200) !important}.pf-u-danger-color-100-on-2xl{color:var(--pf-global--danger-color--100) !important}.pf-u-danger-color-200-on-2xl{color:var(--pf-global--danger-color--200) !important}.pf-u-danger-color-300-on-2xl{color:var(--pf-global--danger-color--300) !important}}.pf-u-text-break-word{word-break:break-word !important}.pf-u-text-nowrap{white-space:nowrap !important}.pf-u-text-wrap{white-space:normal !important}@media screen and (min-width: 576px){.pf-u-text-break-word-on-sm{word-break:break-word !important}.pf-u-text-nowrap-on-sm{white-space:nowrap !important}.pf-u-text-wrap-on-sm{white-space:normal !important}}@media screen and (min-width: 768px){.pf-u-text-break-word-on-md{word-break:break-word !important}.pf-u-text-nowrap-on-md{white-space:nowrap !important}.pf-u-text-wrap-on-md{white-space:normal !important}}@media screen and (min-width: 992px){.pf-u-text-break-word-on-lg{word-break:break-word !important}.pf-u-text-nowrap-on-lg{white-space:nowrap !important}.pf-u-text-wrap-on-lg{white-space:normal !important}}@media screen and (min-width: 1200px){.pf-u-text-break-word-on-xl{word-break:break-word !important}.pf-u-text-nowrap-on-xl{white-space:nowrap !important}.pf-u-text-wrap-on-xl{white-space:normal !important}}@media screen and (min-width: 1450px){.pf-u-text-break-word-on-2xl{word-break:break-word !important}.pf-u-text-nowrap-on-2xl{white-space:nowrap !important}.pf-u-text-wrap-on-2xl{white-space:normal !important}}.pf-u-text-truncate{min-width:0 !important;max-width:100% !important;overflow:hidden !important;text-overflow:ellipsis !important;white-space:nowrap !important}.pf-u-background-color-100{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400{background-color:var(--pf-global--BackgroundColor--dark-400) !important}@media screen and (min-width: 576px){.pf-u-background-color-100-on-sm{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-sm{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-sm{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-sm{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-sm{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-sm{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}@media screen and (min-width: 768px){.pf-u-background-color-100-on-md{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-md{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-md{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-md{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-md{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-md{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}@media screen and (min-width: 992px){.pf-u-background-color-100-on-lg{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-lg{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-lg{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-lg{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-lg{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-lg{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}@media screen and (min-width: 1200px){.pf-u-background-color-100-on-xl{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-xl{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-xl{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-xl{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-xl{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-xl{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}@media screen and (min-width: 1450px){.pf-u-background-color-100-on-2xl{background-color:var(--pf-global--BackgroundColor--100) !important}.pf-u-background-color-200-on-2xl{background-color:var(--pf-global--BackgroundColor--200) !important}.pf-u-background-color-dark-100-on-2xl{background-color:var(--pf-global--BackgroundColor--dark-100) !important}.pf-u-background-color-dark-200-on-2xl{background-color:var(--pf-global--BackgroundColor--dark-200) !important}.pf-u-background-color-dark-300-on-2xl{background-color:var(--pf-global--BackgroundColor--dark-300) !important}.pf-u-background-color-dark-400-on-2xl{background-color:var(--pf-global--BackgroundColor--dark-400) !important}}.pf-c-page__main-section.app-services-ui--banner{--app-services-ui--banner--before--GridTemplateColumns: 1fr;--app-services-ui--banner--ColumnGap: var(--pf-global--spacer--2xl);--app-services-ui--banner__tagline--Color: var(--pf-global--Color--light-300);--app-services-ui--banner--Padding: var(--pf-global--spacer--lg);--app-services-ui--banner--PaddingTop: var(--app-services-ui--banner--Padding);--app-services-ui--banner--PaddingRight: var(--app-services-ui--banner--Padding);--app-services-ui--banner--PaddingBottom: var(--app-services-ui--banner--Padding);--app-services-ui--banner--PaddingLeft: var(--app-services-ui--banner--Padding);--app-services-ui--banner--before--BackgroundImage: url(\" + ___CSS_LOADER_URL_REPLACEMENT_0___ + \");--app-services-ui--banner--before--BackgroundImage--rhoam: url(\" + ___CSS_LOADER_URL_REPLACEMENT_1___ + \");--app-services-ui--banner--before--BackgroundImage--rhods: url(\" + ___CSS_LOADER_URL_REPLACEMENT_2___ + \");--app-services-ui--banner--before--BackgroundSize: 42.375rem;--app-services-ui--banner--before--BackgroundSize--rhoam: 30rem;--app-services-ui--banner--before--BackgroundSize--rhods: 30rem;--app-services-ui--banner--before--Offset--top: calc(var(--app-services-ui--banner--PaddingTop) * -1);--app-services-ui--banner--before--Offset--bottom: calc(var(--app-services-ui--banner--PaddingBottom) * -1);--app-services-ui--banner--before--Offset--right: calc(var(--app-services-ui--banner--PaddingRight) * -1);--app-services-ui--banner--before--Offset--left: calc(var(--app-services-ui--banner--PaddingLeft) * -1);display:grid;grid-template-columns:var(--app-services-ui--banner--before--GridTemplateColumns);grid-template-areas:content;grid-gap:var(--app-services-ui--banner--ColumnGap);padding-top:var(--app-services-ui--banner--PaddingTop);padding-right:var(--app-services-ui--banner--PaddingRight);padding-bottom:var(--app-services-ui--banner--PaddingBottom);padding-left:var(--app-services-ui--banner--PaddingLeft)}@media screen and (min-width: 768px){.pf-c-page__main-section.app-services-ui--banner{--app-services-ui--banner--Padding: var(--pf-global--spacer--2xl);--app-services-ui--banner--before--Opacity: 0.65;--app-services-ui--banner--before--GridTemplateColumns: 2fr 1fr;grid-template-areas:\\\"content graphic\\\"}}@media screen and (min-width: 992px){.pf-c-page__main-section.app-services-ui--banner{--app-services-ui--banner--before--GridTemplateColumns: 2fr 1fr}}@media screen and (min-width: 1200px){.pf-c-page__main-section.app-services-ui--banner{--app-services-ui--banner--before--Opacity: 1}}.pf-c-page__main-section.app-services-ui--banner:before{content:\\\"\\\";grid-area:graphic;margin-top:var(--app-services-ui--banner--before--Offset--top);margin-right:var(--app-services-ui--banner--before--Offset--right);margin-bottom:var(--app-services-ui--banner--before--Offset--bottom);background-image:var(--app-services-ui--banner--before--BackgroundImage);background-size:var(--app-services-ui--banner--before--BackgroundSize);opacity:var(--app-services-ui--banner--before--Opacity)}.pf-c-page__main-section.app-services-ui--banner[class*=pf-m-dark-].pf-c-page__main-section .pf-c-button.pf-m-primary{color:var(--pf-global--primary-color-100);background-color:var(--pf-global--palette--blue-400)}.pf-c-page__main-section.app-services-ui--banner[class*=pf-m-dark-].pf-c-page__main-section .pf-c-button.pf-m-primary:hover,.pf-c-page__main-section.app-services-ui--banner[class*=pf-m-dark-].pf-c-page__main-section .pf-c-button.pf-m-primary:focus,.pf-c-page__main-section.app-services-ui--banner[class*=pf-m-dark-].pf-c-page__main-section .pf-c-button.pf-m-primary:active{color:var(--pf-global--primary-color-100);background-color:var(--pf-global--palette--blue-500)}.app-services-ui--banner__tagline{color:var(--app-services-ui--banner__tagline--Color);font-size:var(--pf-global--FontSize--lg);margin-bottom:var(--pf-global--spacer--lg)}.app-services-ui--banner--text-only{font-size:var(--pf-global--FontSize--xl);text-align:center;max-width:800px}.app-services-ui--page-section--gallery,.app-services-ui--page-section--video{--pf-c-page__main-section--PaddingTop: var(--pf-global--spacer--xl);--pf-c-page__main-section--PaddingRight: var(--pf-global--spacer--lg);--pf-c-page__main-section--PaddingBottom: var(--pf-global--spacer--xl);--pf-c-page__main-section--PaddingLeft: var(--pf-global--spacer--lg)}.app-services-ui--page-section--gallery.pf-m-gutter,.app-services-ui--page-section--video.pf-m-gutter{--pf-l-gallery--m-gutter--GridGap: var(--pf-global--spacer--lg)}@media screen and (min-width: 768px){.app-services-ui--page-section--gallery,.app-services-ui--page-section--video{--pf-c-page__main-section--PaddingRight: var(--pf-global--spacer--2xl);--pf-c-page__main-section--PaddingLeft: var(--pf-global--spacer--2xl)}}.app-services-ui--gallery-hero{--pf-l-gallery--GridTemplateColumns--min: 100%;--pf-l-gallery--GridTemplateColumns--max: 500px;--pf-l-gallery--GridTemplateColumns--min-on-md: 250px;--pf-l-gallery--GridTemplateColumns--min-on-xl: 350px}.app-services-ui--gallery-hero--rhoam{--pf-l-gallery--GridTemplateColumns--min: 100%;--pf-l-gallery--GridTemplateColumns--max: 500px;--pf-l-gallery--GridTemplateColumns--min-on-sm: 350px;--pf-l-gallery--GridTemplateColumns--min-on-md: 350px;--pf-l-gallery--GridTemplateColumns--min-on-xl: 350px}.app-services-ui--banner--rhoam:before{--app-services-ui--banner--before--BackgroundImage: var(--app-services-ui--banner--before--BackgroundImage--rhoam);--app-services-ui--banner--before--BackgroundSize: var(--app-services-ui--banner--before--BackgroundSize--rhoam);background-position-y:-99px;background-repeat:no-repeat}.app-services-ui--banner--rhods:before{--app-services-ui--banner--before--BackgroundImage: var(--app-services-ui--banner--before--BackgroundImage--rhods);--app-services-ui--banner--before--BackgroundSize: var(--app-services-ui--banner--before--BackgroundSize--rhods);background-repeat:no-repeat}.app-services-ui--icon-list{--app-services-ui--icon-list--RowGap: var(--pf-global--spacer--lg);--app-services-ui--icon-list--item--ColumnGap: var(--pf-global--spacer--md);--app-services-ui--icon-list--item--before--Content--width: 1rem;--app-services-ui--icon-list--item--before--Content--height: 1rem;--app-services-ui--icon-list--item--before--Content--url: url(\" + ___CSS_LOADER_URL_REPLACEMENT_3___ + \");list-style:none;display:grid;row-gap:var(--app-services-ui--icon-list--RowGap);--pf-c-content--ul--MarginLeft: 0}.app-services-ui--icon-list li{display:grid;column-gap:var(--app-services-ui--icon-list--item--ColumnGap);grid-template-columns:1rem auto;align-content:start}.app-services-ui--icon-list li::before{grid-column:1;content:var(--app-services-ui--icon-list--item--before--Content--url);width:var(--app-services-ui--icon-list--item--before--Content--width);height:var(--app-services-ui--icon-list--item--before--Content--height);color:var(--pf-global--palette--red-100);transform:translateY(2px)}.app-services-ui--card--video{position:relative;padding-bottom:56.25% !important;height:0}.app-services-ui--card--video iframe{position:absolute;top:0;left:0;width:100%;height:100%}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_variables.scss\",\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_helpers.scss\",\"webpack://./node_modules/@patternfly/patternfly/sass-utilities/mixins.scss\",\"webpack://./node_modules/@patternfly/patternfly/utilities/Text/text.scss\",\"webpack://./src/app/App.scss\"],\"names\":[],\"mappings\":\"AAAA,MACI,4BAAA,CCDJ,aACI,YAAA,CCqEE,mBACE,mDAAA,CADF,mBACE,mDAAA,CADF,mBACE,mDAAA,CADF,mBACE,mDAAA,CADF,mBACE,mDAAA,CADF,oBACE,oDAAA,CADF,oBACE,oDAAA,CADF,oBACE,oDAAA,CAhEJ,qCA8EQ,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CAAA,CAzEV,qCAwEQ,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CAAA,CAnEV,qCAkEQ,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CAAA,CA7DV,sCA4DQ,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,yBACE,mDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CADF,0BACE,oDAAA,CAAA,CAvDV,sCAsDQ,0BACE,mDAAA,CADF,0BACE,mDAAA,CADF,0BACE,mDAAA,CADF,0BACE,mDAAA,CADF,0BACE,mDAAA,CADF,2BACE,oDAAA,CADF,2BACE,oDAAA,CADF,2BACE,oDAAA,CAAA,CAhBR,wBACE,0DAAA,CADF,yBACE,2DAAA,CADF,uBACE,yDAAA,CAhEJ,qCA8EQ,8BACE,0DAAA,CADF,+BACE,2DAAA,CADF,6BACE,yDAAA,CAAA,CAzEV,qCAwEQ,8BACE,0DAAA,CADF,+BACE,2DAAA,CADF,6BACE,yDAAA,CAAA,CAnEV,qCAkEQ,8BACE,0DAAA,CADF,+BACE,2DAAA,CADF,6BACE,yDAAA,CAAA,CA7DV,sCA4DQ,8BACE,0DAAA,CADF,+BACE,2DAAA,CADF,6BACE,yDAAA,CAAA,CAvDV,sCAsDQ,+BACE,0DAAA,CADF,gCACE,2DAAA,CADF,8BACE,yDAAA,CAAA,CAhBR,gBACE,6CAAA,CADF,gBACE,6CAAA,CADF,gBACE,6CAAA,CADF,gBACE,6CAAA,CADF,uBACE,qDAAA,CADF,sBACE,oDAAA,CADF,iBACE,8CAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CADF,yBACE,sDAAA,CADF,yBACE,sDAAA,CADF,yBACE,sDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,0BACE,uDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,qBACE,kDAAA,CADF,qBACE,kDAAA,CADF,wBACE,qDAAA,CADF,wBACE,qDAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CADF,uBACE,oDAAA,CAhEJ,qCA8EQ,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,6BACE,qDAAA,CADF,4BACE,oDAAA,CADF,uBACE,8CAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,gCACE,uDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,2BACE,kDAAA,CADF,2BACE,kDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CAAA,CAzEV,qCAwEQ,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,6BACE,qDAAA,CADF,4BACE,oDAAA,CADF,uBACE,8CAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,gCACE,uDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,2BACE,kDAAA,CADF,2BACE,kDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CAAA,CAnEV,qCAkEQ,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,6BACE,qDAAA,CADF,4BACE,oDAAA,CADF,uBACE,8CAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,gCACE,uDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,2BACE,kDAAA,CADF,2BACE,kDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CAAA,CA7DV,sCA4DQ,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,sBACE,6CAAA,CADF,6BACE,qDAAA,CADF,4BACE,oDAAA,CADF,uBACE,8CAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,+BACE,sDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,gCACE,uDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,2BACE,kDAAA,CADF,2BACE,kDAAA,CADF,8BACE,qDAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CADF,6BACE,oDAAA,CAAA,CAvDV,sCAsDQ,uBACE,6CAAA,CADF,uBACE,6CAAA,CADF,uBACE,6CAAA,CADF,uBACE,6CAAA,CADF,8BACE,qDAAA,CADF,6BACE,oDAAA,CADF,wBACE,8CAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CADF,gCACE,sDAAA,CADF,gCACE,sDAAA,CADF,gCACE,sDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,iCACE,uDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,4BACE,kDAAA,CADF,4BACE,kDAAA,CADF,+BACE,qDAAA,CADF,+BACE,qDAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CADF,8BACE,oDAAA,CAAA,CAhBR,sBACE,gCAAA,CADF,kBACE,6BAAA,CADF,gBACE,6BAAA,CAhEJ,qCA8EQ,4BACE,gCAAA,CADF,wBACE,6BAAA,CADF,sBACE,6BAAA,CAAA,CAzEV,qCAwEQ,4BACE,gCAAA,CADF,wBACE,6BAAA,CADF,sBACE,6BAAA,CAAA,CAnEV,qCAkEQ,4BACE,gCAAA,CADF,wBACE,6BAAA,CADF,sBACE,6BAAA,CAAA,CA7DV,sCA4DQ,4BACE,gCAAA,CADF,wBACE,6BAAA,CADF,sBACE,6BAAA,CAAA,CAvDV,sCAsDQ,6BACE,gCAAA,CADF,yBACE,6BAAA,CADF,uBACE,6BAAA,CAAA,CCqEd,oBACE,sBAAA,CACA,yBAAA,CACA,0BAAA,CACA,iCAAA,CACA,6BAAA,CD1FI,2BACE,kEAAA,CADF,2BACE,kEAAA,CADF,gCACE,uEAAA,CADF,gCACE,uEAAA,CADF,gCACE,uEAAA,CADF,gCACE,uEAAA,CAhEJ,qCA8EQ,iCACE,kEAAA,CADF,iCACE,kEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CAAA,CAzEV,qCAwEQ,iCACE,kEAAA,CADF,iCACE,kEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CAAA,CAnEV,qCAkEQ,iCACE,kEAAA,CADF,iCACE,kEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CAAA,CA7DV,sCA4DQ,iCACE,kEAAA,CADF,iCACE,kEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CADF,sCACE,uEAAA,CAAA,CAvDV,sCAsDQ,kCACE,kEAAA,CADF,kCACE,kEAAA,CADF,uCACE,uEAAA,CADF,uCACE,uEAAA,CADF,uCACE,uEAAA,CADF,uCACE,uEAAA,CAAA,CE7Ed,iDAEE,2DAAA,CACA,mEAAA,CAEA,6EAAA,CAGA,gEAAA,CACA,8EAAA,CACA,gFAAA,CACA,iFAAA,CACA,+EAAA,CAGA,2FAAA,CACA,kGAAA,CACA,kGAAA,CAGA,4DAAA,CACA,+DAAA,CACA,+DAAA,CAGA,qGAAA,CACA,2GAAA,CACA,yGAAA,CACA,uGAAA,CAqBA,YAAA,CACA,iFAAA,CACA,2BAAA,CACA,kDAAA,CACA,sDAAA,CACA,0DAAA,CACA,4DAAA,CACA,wDAAA,CAzBA,qCA/BF,iDAgCI,iEAAA,CACA,gDAAA,CACA,+DAAA,CACA,qCAAA,CAAA,CAIF,qCAvCF,iDAwCI,+DAAA,CAAA,CAIF,sCA5CF,iDA6CI,6CAAA,CAAA,CAcF,wDACE,UAAA,CACA,iBAAA,CACA,8DAAA,CACA,kEAAA,CACA,oEAAA,CAEA,wEAAA,CACA,sEAAA,CACA,uDAAA,CAIF,sHACI,yCAAA,CACA,oDAAA,CAEJ,qXAGE,yCAAA,CACA,oDAAA,CAIJ,kCACE,oDAAA,CACA,wCAAA,CACA,0CAAA,CAGF,oCACE,wCAAA,CACA,iBAAA,CACA,eAAA,CAIF,8EAEE,mEAAA,CACA,qEAAA,CACA,sEAAA,CACA,oEAAA,CAEA,sGACA,+DAAA,CAGA,qCAXF,8EAYI,sEAAA,CACA,qEAAA,CAAA,CAMJ,+BACE,8CAAA,CACA,+CAAA,CACA,qDAAA,CACA,qDAAA,CAIF,sCACE,8CAAA,CACA,+CAAA,CACA,qDAAA,CACA,qDAAA,CACA,qDAAA,CAKA,uCACE,kHAAA,CACA,gHAAA,CACA,2BAAA,CACA,2BAAA,CAKF,uCACE,kHAAA,CACA,gHAAA,CACA,2BAAA,CAKJ,4BACE,kEAAA,CACA,2EAAA,CACA,gEAAA,CACA,iEAAA,CACA,iGAAA,CAEA,eAAA,CACA,YAAA,CACA,iDAAA,CACA,iCAAA,CAEA,+BACE,YAAA,CACA,6DAAA,CACA,+BAAA,CACA,mBAAA,CAEA,uCACE,aAAA,CACA,qEAAA,CACA,qEAAA,CACA,uEAAA,CACA,wCAAA,CACA,yBAAA,CAMN,8BACE,iBAAA,CAEA,gCAAA,CACA,QAAA,CAGF,qCACE,iBAAA,CACA,KAAA,CACA,MAAA,CACA,UAAA,CACA,WAAA\",\"sourcesContent\":[\":root {\\n    --ins-color--orange: #ec7a08;\\n}\\n\\n// Spacing\\n$ins-padding: var(--pf-global--spacer--lg);\\n$ins-margin: var(--pf-global--spacer--xl);\\n$ins-gutter: var(--pf-global--gutter);\\n\\n// Font Size\\n$ins-fontSize: var(--pf-global--FontSize--md);\\n$ins-fontSize--sm: var(--pf-global--FontSize--sm);\\n$ins-fontSize--lg: var(--pf-global--FontSize--lg);\\n$ins-fontSize--xl: var(--pf-global--FontSize--xl);\\n\\n// Borders\\n$ins-borderRadius: var(--pf-global--BorderRadius--sm);\\n$ins-borderRadius--round: var(--pf-global--BorderRadius--lg);\\n\\n// Grid breakpoints\\n$ins-break--xs: var(--pf-global--breakpoint--xs);\\n$ins-break--sm: var(--pf-global--breakpoint--sm);\\n$ins-break--md: var(--pf-global--breakpoint--md);\\n$ins-break--lg: var(--pf-global--breakpoint--lg);\\n$ins-break--xl: var(--pf-global--breakpoint--xl);\\n\\n// Colors\\n$ins-color--red: var(--pf-global--danger-color--100);\\n$ins-color--critical: $ins-color--red;\\n\\n$ins-color--orange: var(--ins-color--orange);\\n$ins-color--high: $ins-color--orange;\\n\\n$ins-color--yellow: var(--pf-global--warning-color--100);\\n$ins-color--medium: $ins-color--yellow;\\n\\n$ins-color--green: var(--pf-global--success-color--100);\\n$ins-color--low: $ins-color--green;\\n\\n$ins-color--blue: var(--pf-global--info-color--100);\\n\\n$ins-color--gray: var(--pf-global--disabled-color--200);\",\"button:focus {\\n    outline:none;\\n}\\n\",\"// Media query used to create responsive classes\\n@mixin pf-media-query($point) {\\n  @if $point == \\\"\\\" or $point == null or $point == \\\"base\\\" {\\n    @content;\\n  }\\n\\n  @else if $point == \\\"sm\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--sm) {\\n      @content;\\n    }\\n  }\\n\\n  @else if $point == \\\"md\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--md) {\\n      @content;\\n    }\\n  }\\n\\n  @else if $point == \\\"lg\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--lg) {\\n      @content;\\n    }\\n  }\\n\\n  @else if $point == \\\"xl\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--xl) {\\n      @content;\\n    }\\n  }\\n\\n  @else if $point == \\\"2xl\\\" {\\n    @media screen and (min-width: $pf-global--breakpoint--2xl) {\\n      @content;\\n    }\\n  }\\n}\\n\\n// Create single prop / value classes, optionally add responsive suffix\\n// @group mixins\\n// @moduleType mixin\\n// @parameter: {Suffix} xs, sm, md, lg, xl, base or null\\n// @usage: @include pf-utility-builder(class-name, base sm md lg xl);\\n// ===============================================================================================\\n//\\n// ## Example sass map:\\n// this must be used when order matters or a cluster of similar utilties need to overwrite each other\\n//\\n// Justify content options\\n// $pf-u-flex-options: (\\n//   flex-none:  (flex none),\\n//   flex-1:     (flex 1)\\n// );\\n//\\n// non-responsive, base only                @include pf-utility-builder($sass-map)\\n// responsive, including all breakpoints    @include pf-utility-builder($sass-map, $pf-global--breakpoint-list)\\n//\\n// ## Passing individual utilities values\\n// ===============================================================================================\\n// Example individual utility:\\n// @include pf-utility-builder(flex-fill flex \\\"1 1 auto\\\", $pf-global--breakpoint-list);\\n\\n@mixin pf-utility-builder($props, $breakpoints: null) {\\n  // if $class-name is a map\\n\\n  // stylelint-disable\\n  @if type-of($props) == map {\\n    @each $class, $val in $props {\\n      $property: nth($val, 1);\\n      $value: #{nth($val, 2) !important};\\n\\n      .pf-u-#{$class} {\\n        #{$property}: #{$value};\\n      }\\n    }\\n\\n    // if breakpoints are requested\\n    @if $breakpoints != null {\\n      @each $breakpoint in $breakpoints {\\n        $suffix: -on-#{$breakpoint};\\n\\n        @include pf-media-query($breakpoint) {\\n          @each $class, $val in $props {\\n            $property: nth($val, 1);\\n            $value: #{nth($val, 2) !important};\\n\\n            .pf-u-#{$class}#{$suffix} {\\n              #{$property}: #{$value};\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n\\n  @else if type-of($props) == list {\\n    $class: nth($props, 1);\\n    $property: nth($props, 2);\\n    $value: nth($props, 3) !important;\\n\\n    .pf-u-#{$class} {\\n      #{$property}: #{$value};\\n    }\\n\\n    @if $breakpoints != null {\\n      @each $breakpoint in $breakpoints {\\n        $suffix: -on-#{$breakpoint};\\n\\n        .pf-u-#{$class}#{$suffix} {\\n          @include pf-media-query($breakpoint) {\\n            #{$property}: #{$value};\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n// stylelint-enable\\n\\n@mixin pf-u-screen-reader {\\n  position: fixed;\\n  top: 0;\\n  left: 0;\\n  overflow: hidden;\\n  clip: rect(0, 0, 0, 0);\\n  white-space: nowrap;\\n  border: 0;\\n}\\n\\n@mixin pf-u-visible {\\n  position: static;\\n  overflow: visible;\\n  clip: auto;\\n  white-space: normal;\\n  border: inherit;\\n}\\n\\n@mixin pf-t-light($color: \\\"--pf-global--Color--100\\\") {\\n  color: var(#{$color});\\n\\n  @extend %pf-t-light;\\n}\\n\\n@mixin pf-t-dark($color: \\\"--pf-global--Color--100\\\") {\\n  color: var(#{$color});\\n\\n  @extend %pf-t-dark;\\n}\\n\\n@mixin pf-text-overflow {\\n  overflow: hidden;\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n}\\n\\n@mixin pf-line-clamp($line-clamp-val: 1) {\\n  // stylelint-disable\\n  display: -webkit-box;\\n  -webkit-box-orient: vertical;\\n  -webkit-line-clamp: #{$line-clamp-val};\\n  // stylelint-enable\\n  overflow: hidden;\\n}\\n\\n@mixin pf-overflow-hide-scroll {\\n  &::-webkit-scrollbar {\\n    display: none;\\n  } // hides scrollbars in Chrome\\n\\n  scrollbar-width: none; // hides scrollbars in Firefox 64 and up\\n  -ms-overflow-style: -ms-autohiding-scrollbar; // auto hides scrollbars in Edge\\n}\\n\\n@mixin pf-hidden-visible($val: \\\"block\\\") {\\n  // stylelint-disable-next-line\\n  --pf-hidden-visible--visible--Display: #{$val};\\n\\n  @extend %pf-hidden-visible;\\n}\\n\\n@mixin pf-m-overpass-font {\\n  .pf-m-overpass-font {\\n    @content;\\n  }\\n}\\n\\n// Apply media query if value is passed\\n@mixin pf-apply-breakpoint($breakpoint) {\\n  @if ($breakpoint == \\\"null\\\" or $breakpoint == \\\"base\\\" or $breakpoint == \\\"\\\") {\\n    @content;\\n  }\\n\\n  @else {\\n    $breakpoint: pf-breakpoint-value($breakpoint);\\n\\n    @media (min-width: $breakpoint) {\\n      @content;\\n    }\\n  }\\n}\\n\\n@mixin pf-emit-properties($map) {\\n  @each $prop, $value in $map {\\n    #{$value}: #{$prop};\\n  }\\n}\\n\\n// Animate tab focus removal\\n@mixin pf-animate-remove-tab-focus($element, $delay: $pf-global--TransitionDuration) {\\n  @keyframes pf-remove-tab-focus {\\n    to {\\n      visibility: hidden;\\n    }\\n  }\\n\\n  #{$element}[hidden] {\\n    animation-name: pf-remove-tab-focus;\\n    animation-delay: #{$delay};\\n    animation-fill-mode: forwards;\\n  }\\n}\\n\\n// Build variable stack\\n@mixin pf-build-css-variable-stack($prop, $css-var, $breakpoint-map: $pf-global--breakpoint-map) {\\n  $list: ();\\n\\n  @each $breakpoint, $breakpoint-value in $breakpoint-map {\\n    $variable-list: ();\\n\\n    // Build variable list\\n    @if $breakpoint != \\\"base\\\" {\\n      $list: append($list, $css-var + \\\"-on-\\\" + $breakpoint);\\n    } @else {\\n      $list: append($list, $css-var);\\n    }\\n\\n    // Construct variable stack\\n    @each $list-item in $list {\\n      @if length($variable-list) == 0 {\\n        $variable-list: var(#{$list-item});\\n      } @else {\\n        $variable-list: var(#{$list-item}, $variable-list);\\n      }\\n    }\\n\\n    // Assign variable stack to $prop\\n    @include pf-apply-breakpoint($breakpoint) {\\n      #{$prop}: #{$variable-list};\\n    }\\n  }\\n}\\n\",\"// stylelint-disable\\n\\n// Font size options\\n$pf-u-font-size-options: (\\n  font-size-xs: (\\n    font-size var(--pf-global--FontSize--xs)\\n  ),\\n  font-size-sm: (\\n    font-size var(--pf-global--FontSize--sm)\\n  ),\\n  font-size-md: (\\n    font-size var(--pf-global--FontSize--md)\\n  ),\\n  font-size-lg: (\\n    font-size var(--pf-global--FontSize--lg)\\n  ),\\n  font-size-xl: (\\n    font-size var(--pf-global--FontSize--xl)\\n  ),\\n  font-size-2xl: (\\n    font-size var(--pf-global--FontSize--2xl)\\n  ),\\n  font-size-3xl: (\\n    font-size var(--pf-global--FontSize--3xl)\\n  ),\\n  font-size-4xl: (\\n    font-size var(--pf-global--FontSize--4xl)\\n  )\\n);\\n\\n@include pf-utility-builder($pf-u-font-size-options, $pf-global--breakpoint-list);\\n\\n// Font weight options\\n$pf-u-font-weight-options: (\\n  font-weight-light: (\\n    font-weight var(--pf-global--FontWeight--light)\\n  ),\\n  font-weight-normal: (\\n    font-weight var(--pf-global--FontWeight--normal)\\n  ),\\n  font-weight-bold: (\\n    font-weight var(--pf-global--FontWeight--bold)\\n  )\\n);\\n\\n@include pf-utility-builder($pf-u-font-weight-options, $pf-global--breakpoint-list);\\n\\n// Font color options\\n$pf-u-font-color-options: (\\n  color-100: (\\n    color var(--pf-global--Color--100)\\n  ),\\n  color-200: (\\n    color var(--pf-global--Color--200)\\n  ),\\n  color-300: (\\n    color var(--pf-global--Color--300)\\n  ),\\n  color-400: (\\n    color var(--pf-global--Color--400)\\n  ),\\n  icon-color-light: (\\n    color var(--pf-global--icon--Color--light)\\n  ),\\n  icon-color-dark: (\\n    color var(--pf-global--icon--Color--dark)\\n  ),\\n  link-color: (\\n    color var(--pf-global--link--Color)\\n  ),\\n  active-color-100: (\\n    color var(--pf-global--active-color--100)\\n  ),\\n  active-color-200: (\\n    color var(--pf-global--active-color--200)\\n  ),\\n  active-color-300: (\\n    color var(--pf-global--active-color--300)\\n  ),\\n  active-color-400: (\\n    color var(--pf-global--active-color--400)\\n  ),\\n  disabled-color-100: (\\n    color var(--pf-global--disabled-color--100)\\n  ),\\n  disabled-color-200: (\\n    color var(--pf-global--disabled-color--200)\\n  ),\\n  disabled-color-300: (\\n    color var(--pf-global--disabled-color--300)\\n  ),\\n  primary-color-100: (\\n    color var(--pf-global--primary-color--100)\\n  ),\\n  primary-color-200: (\\n    color var(--pf-global--primary-color--200)\\n  ),\\n  secondary-color-100: (\\n    color var(--pf-global--secondary-color--100)\\n  ),\\n  default-color-100: (\\n    color var(--pf-global--default-color--100)\\n  ),\\n  default-color-200: (\\n    color var(--pf-global--default-color--200)\\n  ),\\n  default-color-300: (\\n    color var(--pf-global--default-color--300)\\n  ),\\n  success-color-100: (\\n    color var(--pf-global--success-color--100)\\n  ),\\n  success-color-200: (\\n    color var(--pf-global--success-color--200)\\n  ),\\n  info-color-100: (\\n    color var(--pf-global--info-color--100)\\n  ),\\n  info-color-200: (\\n    color var(--pf-global--info-color--200)\\n  ),\\n  warning-color-100: (\\n    color var(--pf-global--warning-color--100)\\n  ),\\n  warning-color-200: (\\n    color var(--pf-global--warning-color--200)\\n  ),\\n  danger-color-100: (\\n    color var(--pf-global--danger-color--100)\\n  ),\\n  danger-color-200: (\\n    color var(--pf-global--danger-color--200)\\n  ),\\n  danger-color-300: (\\n    color var(--pf-global--danger-color--300)\\n  )\\n);\\n\\n@include pf-utility-builder($pf-u-font-color-options, $pf-global--breakpoint-list);\\n\\n// Font layout options\\n$pf-u-font-alignment-options: (\\n  text-break-word: (\\n    word-break break-word\\n  ),\\n  text-nowrap: (\\n    white-space nowrap\\n  ),\\n  text-wrap: (\\n    white-space normal\\n  )\\n);\\n\\n@include pf-utility-builder($pf-u-font-alignment-options, $pf-global--breakpoint-list);\\n\\n.pf-u-text-truncate {\\n  min-width: 0 !important;\\n  max-width: 100% !important;\\n  overflow: hidden !important;\\n  text-overflow: ellipsis !important;\\n  white-space: nowrap !important;\\n}\\n\\n// stylelint-enable\\n\",\"/* Importing Global Variables */\\n@import 'node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/all';\\n@import 'node_modules/@redhat-cloud-services/frontend-components-notifications/index.css';\\n\\n@import '~@patternfly/patternfly/sass-utilities/_all.scss';\\n@import '~@patternfly/patternfly/utilities/Text/text.scss';\\n@import '~@patternfly/patternfly/utilities/BackgroundColor/BackgroundColor.scss';\\n\\n\\n.pf-c-page__main-section.app-services-ui--banner {\\n\\n  --app-services-ui--banner--before--GridTemplateColumns: 1fr;\\n  --app-services-ui--banner--ColumnGap: var(--pf-global--spacer--2xl);\\n\\n  --app-services-ui--banner__tagline--Color: var(--pf-global--Color--light-300);\\n\\n  // padding on the banner\\n  --app-services-ui--banner--Padding: var(--pf-global--spacer--lg);\\n  --app-services-ui--banner--PaddingTop: var(--app-services-ui--banner--Padding);\\n  --app-services-ui--banner--PaddingRight: var(--app-services-ui--banner--Padding);\\n  --app-services-ui--banner--PaddingBottom: var(--app-services-ui--banner--Padding);\\n  --app-services-ui--banner--PaddingLeft: var(--app-services-ui--banner--Padding);\\n\\n  // background graphics for the hero banner\\n  --app-services-ui--banner--before--BackgroundImage: url('static/images/AppServicesOverview-IconPattern.svg');\\n  --app-services-ui--banner--before--BackgroundImage--rhoam: url('static/images/APIManagement_MECH_API_FullColor_Pink.svg');\\n  --app-services-ui--banner--before--BackgroundImage--rhods: url('static/images/RHODS-ML-Technology.svg');\\n\\n  // background graphic sizes\\n  --app-services-ui--banner--before--BackgroundSize: #{pf-size-prem(678px)};\\n  --app-services-ui--banner--before--BackgroundSize--rhoam: #{pf-size-prem(480px)};\\n  --app-services-ui--banner--before--BackgroundSize--rhods: #{pf-size-prem(480px)};\\n  \\n  // give the graphic negative margins for full bleed\\n  --app-services-ui--banner--before--Offset--top: calc(var(--app-services-ui--banner--PaddingTop) * -1);\\n  --app-services-ui--banner--before--Offset--bottom: calc(var(--app-services-ui--banner--PaddingBottom) * -1);\\n  --app-services-ui--banner--before--Offset--right: calc(var(--app-services-ui--banner--PaddingRight) * -1);\\n  --app-services-ui--banner--before--Offset--left: calc(var(--app-services-ui--banner--PaddingLeft) * -1);\\n\\n  // at medium, show the graphic but move it into another grid cell with less opacity\\n  @media screen and (min-width: $pf-global--breakpoint--md) {\\n    --app-services-ui--banner--Padding: var(--pf-global--spacer--2xl);\\n    --app-services-ui--banner--before--Opacity: 0.65;\\n    --app-services-ui--banner--before--GridTemplateColumns: 2fr 1fr;\\n    grid-template-areas: 'content graphic';\\n  }\\n\\n  // at large, adjust the proportion\\n  @media screen and (min-width: $pf-global--breakpoint--lg) {\\n    --app-services-ui--banner--before--GridTemplateColumns: 2fr 1fr;\\n  }\\n\\n  // at xl, full opacity for the graphic\\n  @media screen and (min-width: $pf-global--breakpoint--xl) {\\n    --app-services-ui--banner--before--Opacity: 1;\\n  }\\n\\n  // set up the content area\\n  display: grid;\\n  grid-template-columns: var(--app-services-ui--banner--before--GridTemplateColumns);\\n  grid-template-areas: content;\\n  grid-gap: var(--app-services-ui--banner--ColumnGap);\\n  padding-top: var(--app-services-ui--banner--PaddingTop);\\n  padding-right: var(--app-services-ui--banner--PaddingRight);\\n  padding-bottom: var(--app-services-ui--banner--PaddingBottom);\\n  padding-left: var(--app-services-ui--banner--PaddingLeft);\\n\\n  // set up the image area\\n  &:before {\\n    content: '';\\n    grid-area: graphic; // there won't be a graphic grid element until md breakpoint\\n    margin-top: var(--app-services-ui--banner--before--Offset--top);\\n    margin-right: var(--app-services-ui--banner--before--Offset--right);\\n    margin-bottom: var(--app-services-ui--banner--before--Offset--bottom);\\n    // margin-left: var(--app-services-ui--banner--before--Offset--left);\\n    background-image: var(--app-services-ui--banner--before--BackgroundImage);\\n    background-size: var(--app-services-ui--banner--before--BackgroundSize);\\n    opacity: var(--app-services-ui--banner--before--Opacity);\\n  }\\n\\n  // fix the color of the primary button on the dark background\\n  &[class*='pf-m-dark-'].pf-c-page__main-section .pf-c-button.pf-m-primary {\\n      color: var(--pf-global--primary-color-100);\\n      background-color: var(--pf-global--palette--blue-400);\\n    }\\n  &[class*='pf-m-dark-'].pf-c-page__main-section .pf-c-button.pf-m-primary:hover,\\n  &[class*='pf-m-dark-'].pf-c-page__main-section .pf-c-button.pf-m-primary:focus,\\n  &[class*='pf-m-dark-'].pf-c-page__main-section .pf-c-button.pf-m-primary:active {\\n    color: var(--pf-global--primary-color-100);\\n    background-color: var(--pf-global--palette--blue-500);\\n  }\\n}\\n\\n.app-services-ui--banner__tagline {\\n  color: var(--app-services-ui--banner__tagline--Color);\\n  font-size: var(--pf-global--FontSize--lg);\\n  margin-bottom: var(--pf-global--spacer--lg);\\n}\\n\\n.app-services-ui--banner--text-only {\\n  font-size: var(--pf-global--FontSize--xl);\\n  text-align: center;\\n  max-width: 800px;\\n}\\n\\n// Set up the card gallery\\n.app-services-ui--page-section--gallery,\\n.app-services-ui--page-section--video {\\n  --pf-c-page__main-section--PaddingTop: var(--pf-global--spacer--xl);\\n  --pf-c-page__main-section--PaddingRight: var(--pf-global--spacer--lg);\\n  --pf-c-page__main-section--PaddingBottom: var(--pf-global--spacer--xl);\\n  --pf-c-page__main-section--PaddingLeft: var(--pf-global--spacer--lg);\\n\\n  &.pf-m-gutter {\\n  --pf-l-gallery--m-gutter--GridGap: var(--pf-global--spacer--lg);\\n  }\\n\\n  @media screen and (min-width: $pf-global--breakpoint--md) {\\n    --pf-c-page__main-section--PaddingRight: var(--pf-global--spacer--2xl);\\n    --pf-c-page__main-section--PaddingLeft: var(--pf-global--spacer--2xl);\\n  }\\n\\n}\\n\\n// Adjust card sizes for each page\\n.app-services-ui--gallery-hero {\\n  --pf-l-gallery--GridTemplateColumns--min: 100%;\\n  --pf-l-gallery--GridTemplateColumns--max: 500px;\\n  --pf-l-gallery--GridTemplateColumns--min-on-md: 250px;\\n  --pf-l-gallery--GridTemplateColumns--min-on-xl: 350px;\\n\\n}\\n\\n.app-services-ui--gallery-hero--rhoam {\\n  --pf-l-gallery--GridTemplateColumns--min: 100%;\\n  --pf-l-gallery--GridTemplateColumns--max: 500px;\\n  --pf-l-gallery--GridTemplateColumns--min-on-sm: 350px;\\n  --pf-l-gallery--GridTemplateColumns--min-on-md: 350px;\\n  --pf-l-gallery--GridTemplateColumns--min-on-xl: 350px;\\n}\\n\\n// bring in the correct image and adjust size for each page\\n.app-services-ui--banner--rhoam {\\n  &:before {\\n    --app-services-ui--banner--before--BackgroundImage: var(--app-services-ui--banner--before--BackgroundImage--rhoam);\\n    --app-services-ui--banner--before--BackgroundSize: var(--app-services-ui--banner--before--BackgroundSize--rhoam);\\n    background-position-y: -99px;\\n    background-repeat: no-repeat;\\n  }\\n}\\n\\n.app-services-ui--banner--rhods {\\n  &:before {\\n    --app-services-ui--banner--before--BackgroundImage: var(--app-services-ui--banner--before--BackgroundImage--rhods);\\n    --app-services-ui--banner--before--BackgroundSize: var(--app-services-ui--banner--before--BackgroundSize--rhods);\\n    background-repeat: no-repeat;\\n  }\\n}\\n\\n// + icon list\\n.app-services-ui--icon-list {\\n  --app-services-ui--icon-list--RowGap: var(--pf-global--spacer--lg);\\n  --app-services-ui--icon-list--item--ColumnGap: var(--pf-global--spacer--md);\\n  --app-services-ui--icon-list--item--before--Content--width: 1rem;\\n  --app-services-ui--icon-list--item--before--Content--height: 1rem;\\n  --app-services-ui--icon-list--item--before--Content--url: url('static/images/icon__plus-solid.svg');;\\n\\n  list-style: none;\\n  display: grid;\\n  row-gap: var(--app-services-ui--icon-list--RowGap);\\n  --pf-c-content--ul--MarginLeft: 0;\\n  \\n  li {\\n    display: grid;\\n    column-gap: var(--app-services-ui--icon-list--item--ColumnGap);\\n    grid-template-columns: 1rem auto;\\n    align-content: start;\\n\\n    &::before {\\n      grid-column: 1;\\n      content: var(--app-services-ui--icon-list--item--before--Content--url);\\n      width: var(--app-services-ui--icon-list--item--before--Content--width);\\n      height: var(--app-services-ui--icon-list--item--before--Content--height);\\n      color: var(--pf-global--palette--red-100);\\n      transform: translateY(2px);\\n    }\\n  }\\n}\\n\\n// Wrap the video to preserve aspect ratio\\n.app-services-ui--card--video {\\n  position: relative;\\n  /* important only because somehow PF styles are coming in again after */\\n  padding-bottom: 56.25% !important; /* 16:9 */\\n  height: 0;\\n}\\n\\n.app-services-ui--card--video iframe {\\n  position: absolute;\\n  top: 0;\\n  left: 0;\\n  width: 100%;\\n  height: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../../node_modules/css-loader/dist/runtime/api.js\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \".mas-quickstart-drawer{height:calc(100vh - 76px) !important}\", \"\",{\"version\":3,\"sources\":[\"webpack://./src/app/ResourcesPage/QuickStartDrawerFederated.scss\"],\"names\":[],\"mappings\":\"AAAA,uBAEI,oCAAA\",\"sourcesContent\":[\".mas-quickstart-drawer {\\n    // subtract the header height\\n    height: calc(100vh - 76px) !important;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","export default __webpack_public_path__ + \"566a9f44.svg\";","export default __webpack_public_path__ + \"64e45f61.svg\";","export default __webpack_public_path__ + \"a99d8fc1.svg\";","export default __webpack_public_path__ + \"819010d9.svg\";","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    //If you want to register all of your reducers, this is good place.\n    /*\n     *  registry.register({\n     *    someName: (state, action) => ({...state})\n     *  });\n     */\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\n\nexport type InsightsType = {\n  chrome: {\n    init: () => void;\n    identifyApp: (appId: string) => Promise<void>;\n    getApp: () => string;\n    getBundle: () => string;\n    getEnvironment: () => 'ci' | 'qa' | 'prod' | 'stage';\n    on: (type: string, callback: ((event: any) => void)) => void;\n    auth: {\n      getToken(): Promise<string>;\n      getUser(): Promise<UserType>;\n    };\n    isProd: boolean;\n    isBeta: () => boolean;\n    isPenTest: () => boolean;\n  };\n};\n\nexport type UserType = {\n  entitlements: {\n    [key: string]: {\n      is_entitled: boolean;\n      is_trial: boolean;\n    }\n  },\n  identity: IdentityType;\n};\n\nexport type IdentityType = {\n  account_number: string;\n  type: string;\n  internal: {\n    org_id: string;\n    account_id: string;\n  }\n  user: {\n    username: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n    is_active: boolean;\n  }\n};\n\nexport const InsightsContext = React.createContext({} as InsightsType);\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFound: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFound };\n","import React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner/>\n  </Bullseye>\n);\n","import React from \"react\";\n\nconst defaultHostname = \"cloud.redhat.com\";\n\nexport type Config = {\n  resources: {\n    showDrafts: boolean\n  }\n  controlPlane: {\n    serviceApiBasePath: string,\n    amsBasePath: string,\n    eventCode: string,\n    siteCode: string\n  }\n  dataPlane: {\n    keycloak: {\n      authServerUrl: string,\n      clientId: string,\n      realm: string\n    }\n  }\n  federatedModules: {\n    strimziUI: FederatedModuleConfig\n    mkUiFrontend: FederatedModuleConfig\n    guides: FederatedModuleConfig\n  }\n};\n\nexport type EnviromentConfigs = [\n  {\n    hostnames: string[],\n    config: Config\n  }\n];\n\nexport type FederatedModuleConfig = {\n  basePath: string\n  entryPoint: string\n}\n\nexport const ConfigContext = React.createContext<Config | undefined>(undefined);\n\nexport type ConfigProviderProps = {\n  configUrl: string\n}\n\n\nexport const ConfigProvider: React.FunctionComponent<ConfigProviderProps> = ({ configUrl, children }) => {\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  React.useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async () => {\n      const hostname = window.location.hostname;\n      console.log(`Loading config for ${hostname}`);\n      const response = await fetch(configUrl, { signal });\n      const environmentConfig = await response.json() as EnviromentConfigs;\n      const possibleConfigs = environmentConfig.filter(entry => entry.hostnames.includes(hostname))\n      if (possibleConfigs.length > 1) {\n        throw new Error(`Unable to load config for ${hostname}, more than one config matched ${possibleConfigs}`);\n      } else if (possibleConfigs.length < 1) {\n        // Use the default config\n        const possibleDefaultConfigs = environmentConfig.filter(entry => entry.hostnames.includes(defaultHostname))\n        if (possibleDefaultConfigs.length > 1) {\n          throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n        } else if (possibleDefaultConfigs.length < 1) {\n          throw new Error(`Unable to load default config, no configs matched`);\n        } else {\n          setConfig(possibleDefaultConfigs[0].config);\n          console.log('Done loading default config', possibleDefaultConfigs[0]);\n        }\n      } else {\n        setConfig(possibleConfigs[0].config);\n        console.log('Done loading config', possibleConfigs[0].config);\n      }\n    })();\n\n    return () => controller.abort();\n  }, [configUrl]);\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","export type Utils = {\n  [key: string]: {\n    entry: string[],\n    modules: string[]\n  };\n};\n\n\nexport const getEntryPoint = async (baseUrl: string, fileName: string, scope: string): Promise<string | undefined> => {\n  if (fileName.endsWith(\"json\") ){\n    const url = `${baseUrl}/${fileName}`;\n    try {\n      const response = await fetch(url);\n      return await response.json().then(json => json as Utils).then(fedMods => fedMods[scope]).then(s => s.entry[0]).then(path => {\n        if (path.startsWith(baseUrl)) {\n          return path;\n        }\n        return `${baseUrl}/${path}`\n      });\n    } catch (error) {\n      return undefined;\n    }\n  } else {\n    return `${baseUrl}/${fileName}`;\n  }\n}\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ReactNode, useContext, useEffect, useState } from 'react';\nimport { Loading } from '../Loading/Loading';\nimport { ConfigContext, FederatedModuleConfig } from \"@app/Config/Config\";\nimport { getEntryPoint } from \"@app/Components/FederatedModule/utils\";\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nconst FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({\n                                                                   children\n                                                                 }) => {\n\n  const config = useContext(ConfigContext);\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope]; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await window[scope].get(module);\n    const Module = factory();\n    console.log(`${Module} loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = ({ url }) => {\n\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!url) {\n      setFailed(true);\n      return;\n    }\n\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    setReady(false);\n    setFailed(false);\n\n    element.onload = () => {\n      console.log(`Dynamic federated module Loaded: ${url}`);\n      setReady(true);\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      setReady(false);\n      setFailed(true);\n    };\n\n    document.head.appendChild(element);\n\n    return () => {\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: any;\n}\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    const fetchUrl = async () => {\n      const entryPoint = await getEntryPoint(federatedModuleContext[scope].basePath, federatedModuleContext[scope].entryPoint, scope);\n      setUrl(entryPoint);\n    }\n    fetchUrl();\n  }, [scope, federatedModuleContext]);\n\n  const { ready, failed } = useDynamicScript({ url });\n\n  if (!ready || failed) {\n    if (failed && fallback) {\n      return fallback;\n    }\n    return null;\n  }\n\n  const Component = React.lazy(\n    loadComponent(scope, module)\n  );\n\n  return (\n    <React.Suspense fallback={null}>\n      {render(Component)}\n    </React.Suspense>\n  );\n}\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AccessReview\n */\nexport interface AccessReview {\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    action: AccessReviewActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    resource_type: AccessReviewResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface AccessReviewResponse\n */\nexport interface AccessReviewResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    action?: AccessReviewResponseActionEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccessReviewResponse\n     */\n    allowed: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    resource_type?: AccessReviewResponseResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResponseActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResponseResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface AccessTokenCfg\n */\nexport interface AccessTokenCfg {\n    /**\n     * \n     * @type {{ [key: string]: object; }}\n     * @memberof AccessTokenCfg\n     */\n    auths: { [key: string]: object; };\n}\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Account\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Account\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Account\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {Organization}\n     * @memberof Account\n     */\n    organization?: Organization;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Account\n     */\n    service_account?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    username: string;\n}\n/**\n * \n * @export\n * @interface AccountAllOf\n */\nexport interface AccountAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountAllOf\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof AccountAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof AccountAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {Organization}\n     * @memberof AccountAllOf\n     */\n    organization?: Organization;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountAllOf\n     */\n    service_account?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    username: string;\n}\n/**\n * \n * @export\n * @interface AccountList\n */\nexport interface AccountList {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof AccountList\n     */\n    items: Array<Account>;\n}\n/**\n * \n * @export\n * @interface AccountListAllOf\n */\nexport interface AccountListAllOf {\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof AccountListAllOf\n     */\n    items?: Array<Account>;\n}\n/**\n * \n * @export\n * @interface AccountPatchRequest\n */\nexport interface AccountPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountPatchRequest\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountPatchRequest\n     */\n    service_account?: boolean;\n}\n/**\n * \n * @export\n * @interface AccountReference\n */\nexport interface AccountReference {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface AccountReferenceAllOf\n */\nexport interface AccountReferenceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface Capability\n */\nexport interface Capability {\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Capability\n     */\n    inherited: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface CapabilityAllOf\n */\nexport interface CapabilityAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof CapabilityAllOf\n     */\n    inherited: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityAllOf\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityAllOf\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface CapabilityReview\n */\nexport interface CapabilityReview {\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReview\n     */\n    result: string;\n}\n/**\n * \n * @export\n * @interface CapabilityReviewRequest\n */\nexport interface CapabilityReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    capability: CapabilityReviewRequestCapabilityEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    type: CapabilityReviewRequestTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CapabilityReviewRequestCapabilityEnum {\n    ManageClusterAdmin = 'manage_cluster_admin'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CapabilityReviewRequestTypeEnum {\n    Cluster = 'Cluster'\n}\n\n/**\n * \n * @export\n * @interface ClusterAuthorizationRequest\n */\nexport interface ClusterAuthorizationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    availability_zone?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    byoc?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cluster_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    disconnected?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    product_category?: ClusterAuthorizationRequestProductCategoryEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    product_id?: ClusterAuthorizationRequestProductIdEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    reserve?: boolean;\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ClusterAuthorizationRequest\n     */\n    resources?: Array<ReservedResource>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ClusterAuthorizationRequestProductCategoryEnum {\n    AssistedInstall = 'assistedInstall'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ClusterAuthorizationRequestProductIdEnum {\n    Ocp = 'ocp',\n    Osd = 'osd',\n    Osdtrial = 'osdtrial',\n    Moa = 'moa',\n    Rhmi = 'rhmi'\n}\n\n/**\n * \n * @export\n * @interface ClusterAuthorizationResponse\n */\nexport interface ClusterAuthorizationResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationResponse\n     */\n    allowed: boolean;\n    /**\n     * \n     * @type {Array<ExcessResource>}\n     * @memberof ClusterAuthorizationResponse\n     */\n    excess_resources: Array<ExcessResource>;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationResponse\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ClusterAuthorizationResponse\n     */\n    subscription?: ObjectReference;\n}\n/**\n * \n * @export\n * @interface ClusterMetricsNodes\n */\nexport interface ClusterMetricsNodes {\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    compute?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    infra?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    master?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface ClusterRegistrationRequest\n */\nexport interface ClusterRegistrationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationRequest\n     */\n    authorization_token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationRequest\n     */\n    cluster_id?: string;\n}\n/**\n * \n * @export\n * @interface ClusterRegistrationResponse\n */\nexport interface ClusterRegistrationResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    authorization_token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    cluster_id?: string;\n    /**\n     * Cluster Registration expiration in Unix time\n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    expires_at?: string;\n}\n/**\n * \n * @export\n * @interface ClusterResource\n */\nexport interface ClusterResource {\n    /**\n     * \n     * @type {ClusterResourceTotal}\n     * @memberof ClusterResource\n     */\n    total: ClusterResourceTotal;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterResource\n     */\n    updated_timestamp: string;\n    /**\n     * \n     * @type {ClusterResourceTotal}\n     * @memberof ClusterResource\n     */\n    used: ClusterResourceTotal;\n}\n/**\n * \n * @export\n * @interface ClusterResourceTotal\n */\nexport interface ClusterResourceTotal {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterResourceTotal\n     */\n    unit: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterResourceTotal\n     */\n    value: number;\n}\n/**\n * \n * @export\n * @interface ClusterUpgrade\n */\nexport interface ClusterUpgrade {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterUpgrade\n     */\n    available?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    updated_timestamp?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface EphemeralResourceQuota\n */\nexport interface EphemeralResourceQuota {\n    /**\n     * \n     * @type {number}\n     * @memberof EphemeralResourceQuota\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof EphemeralResourceQuota\n     */\n    byoc?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof EphemeralResourceQuota\n     */\n    sku_count?: number;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ExcessResource\n */\nexport interface ExcessResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExcessResource\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ExcessResource\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    resource_type?: string;\n}\n/**\n * \n * @export\n * @interface ExcessResourceAllOf\n */\nexport interface ExcessResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExcessResourceAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ExcessResourceAllOf\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    resource_type?: string;\n}\n/**\n * \n * @export\n * @interface ExportControlReview\n */\nexport interface ExportControlReview {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExportControlReview\n     */\n    restricted: boolean;\n}\n/**\n * \n * @export\n * @interface ExportControlReviewRequest\n */\nexport interface ExportControlReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ExportControlReviewRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExportControlReviewRequest\n     */\n    ignore_cache?: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggle\n */\nexport interface FeatureToggle {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureToggle\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggleAllOf\n */\nexport interface FeatureToggleAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureToggleAllOf\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggleQueryRequest\n */\nexport interface FeatureToggleQueryRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggleQueryRequest\n     */\n    organization_id: string;\n}\n/**\n * \n * @export\n * @interface FeatureToggleQueryRequestAllOf\n */\nexport interface FeatureToggleQueryRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggleQueryRequestAllOf\n     */\n    organization_id: string;\n}\n/**\n * \n * @export\n * @interface Label\n */\nexport interface Label {\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Label\n     */\n    internal: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface LabelAllOf\n */\nexport interface LabelAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof LabelAllOf\n     */\n    internal: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface LabelList\n */\nexport interface LabelList {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof LabelList\n     */\n    items: Array<Label>;\n}\n/**\n * \n * @export\n * @interface LabelListAllOf\n */\nexport interface LabelListAllOf {\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof LabelListAllOf\n     */\n    items?: Array<Label>;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    health_state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    metrics?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    query_timestamp?: string;\n}\n/**\n * \n * @export\n * @interface MetricAllOf\n */\nexport interface MetricAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    health_state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    metrics?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    query_timestamp?: string;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsList\n     */\n    items: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n}\n/**\n * \n * @export\n * @interface NotificationContactCreateRequest\n */\nexport interface NotificationContactCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationContactCreateRequest\n     */\n    account_identifier?: string;\n}\n/**\n * \n * @export\n * @interface NotificationRequest\n */\nexport interface NotificationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    bcc_address?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NotificationRequest\n     */\n    include_red_hat_associates?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    subject: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    template_name: string;\n    /**\n     * \n     * @type {Array<TemplateParameter>}\n     * @memberof NotificationRequest\n     */\n    template_parameters?: Array<TemplateParameter>;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n}\n/**\n * \n * @export\n * @interface OneMetric\n */\nexport interface OneMetric {\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    cluster_type: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_cpu: ClusterResource;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_memory: ClusterResource;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_sockets: ClusterResource;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    console_url: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    cpu: ClusterResource;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    critical_alerts_firing: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    health_state?: OneMetricHealthStateEnum;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    memory: ClusterResource;\n    /**\n     * \n     * @type {ClusterMetricsNodes}\n     * @memberof OneMetric\n     */\n    nodes: ClusterMetricsNodes;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    openshift_version: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    operating_system: string;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    operators_condition_failing: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    region: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    sockets: ClusterResource;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    state: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    state_description: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    storage: ClusterResource;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_cpu_total: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_obligation_exists: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_socket_total: number;\n    /**\n     * \n     * @type {ClusterUpgrade}\n     * @memberof OneMetric\n     */\n    upgrade: ClusterUpgrade;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum OneMetricHealthStateEnum {\n    Healthy = 'healthy',\n    Unhealthy = 'unhealthy',\n    Unknown = 'unknown'\n}\n\n/**\n * \n * @export\n * @interface Organization\n */\nexport interface Organization {\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Organization\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Organization\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface OrganizationAllOf\n */\nexport interface OrganizationAllOf {\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof OrganizationAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof OrganizationAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface OrganizationList\n */\nexport interface OrganizationList {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Organization>}\n     * @memberof OrganizationList\n     */\n    items: Array<Organization>;\n}\n/**\n * \n * @export\n * @interface OrganizationListAllOf\n */\nexport interface OrganizationListAllOf {\n    /**\n     * \n     * @type {Array<Organization>}\n     * @memberof OrganizationListAllOf\n     */\n    items?: Array<Organization>;\n}\n/**\n * \n * @export\n * @interface OrganizationPatchRequest\n */\nexport interface OrganizationPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface Permission\n */\nexport interface Permission {\n    /**\n     * \n     * @type {string}\n     * @memberof Permission\n     */\n    action?: PermissionActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Permission\n     */\n    resource?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PermissionActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n\n/**\n * \n * @export\n * @interface PermissionAllOf\n */\nexport interface PermissionAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionAllOf\n     */\n    action?: PermissionAllOfActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionAllOf\n     */\n    resource?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PermissionAllOfActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n\n/**\n * \n * @export\n * @interface PermissionList\n */\nexport interface PermissionList {\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof PermissionList\n     */\n    items: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface PermissionListAllOf\n */\nexport interface PermissionListAllOf {\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof PermissionListAllOf\n     */\n    items?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface Plan\n */\nexport interface Plan {\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface PlanAllOf\n */\nexport interface PlanAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface PlanList\n */\nexport interface PlanList {\n    /**\n     * \n     * @type {string}\n     * @memberof PlanList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Plan>}\n     * @memberof PlanList\n     */\n    items: Array<Plan>;\n}\n/**\n * \n * @export\n * @interface PlanListAllOf\n */\nexport interface PlanListAllOf {\n    /**\n     * \n     * @type {Array<Plan>}\n     * @memberof PlanListAllOf\n     */\n    items?: Array<Plan>;\n}\n/**\n * \n * @export\n * @interface PullSecretRequest\n */\nexport interface PullSecretRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof PullSecretRequest\n     */\n    external_resource_id: string;\n}\n/**\n * \n * @export\n * @interface QuotaCost\n */\nexport interface QuotaCost {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCost\n     */\n    allowed: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCost\n     */\n    consumed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    quota_id: string;\n    /**\n     * \n     * @type {Array<RelatedResource>}\n     * @memberof QuotaCost\n     */\n    related_resources?: Array<RelatedResource>;\n}\n/**\n * \n * @export\n * @interface QuotaCostAllOf\n */\nexport interface QuotaCostAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostAllOf\n     */\n    consumed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostAllOf\n     */\n    quota_id: string;\n    /**\n     * \n     * @type {Array<RelatedResource>}\n     * @memberof QuotaCostAllOf\n     */\n    related_resources?: Array<RelatedResource>;\n}\n/**\n * \n * @export\n * @interface QuotaCostList\n */\nexport interface QuotaCostList {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<QuotaCost>}\n     * @memberof QuotaCostList\n     */\n    items: Array<QuotaCost>;\n}\n/**\n * \n * @export\n * @interface QuotaCostListAllOf\n */\nexport interface QuotaCostListAllOf {\n    /**\n     * \n     * @type {Array<QuotaCost>}\n     * @memberof QuotaCostListAllOf\n     */\n    items?: Array<QuotaCost>;\n}\n/**\n * \n * @export\n * @interface QuotaSummary\n */\nexport interface QuotaSummary {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummary\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof QuotaSummary\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummary\n     */\n    reserved: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryAllOf\n */\nexport interface QuotaSummaryAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof QuotaSummaryAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryAllOf\n     */\n    reserved: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryList\n */\nexport interface QuotaSummaryList {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<QuotaSummary>}\n     * @memberof QuotaSummaryList\n     */\n    items: Array<QuotaSummary>;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryListAllOf\n */\nexport interface QuotaSummaryListAllOf {\n    /**\n     * \n     * @type {Array<QuotaSummary>}\n     * @memberof QuotaSummaryListAllOf\n     */\n    items?: Array<QuotaSummary>;\n}\n/**\n * \n * @export\n * @interface Registry\n */\nexport interface Registry {\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Registry\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RegistryAllOf\n */\nexport interface RegistryAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryAllOf\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCreateRequest\n */\nexport interface RegistryCreateRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryCreateRequest\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredential\n */\nexport interface RegistryCredential {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    kind?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredential\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredential\n     */\n    registry?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialAllOf\n */\nexport interface RegistryCredentialAllOf {\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredentialAllOf\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredentialAllOf\n     */\n    registry?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialList\n */\nexport interface RegistryCredentialList {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<RegistryCredential>}\n     * @memberof RegistryCredentialList\n     */\n    items: Array<RegistryCredential>;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialListAllOf\n */\nexport interface RegistryCredentialListAllOf {\n    /**\n     * \n     * @type {Array<RegistryCredential>}\n     * @memberof RegistryCredentialListAllOf\n     */\n    items?: Array<RegistryCredential>;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialPatchRequest\n */\nexport interface RegistryCredentialPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    registry_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryList\n */\nexport interface RegistryList {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Registry>}\n     * @memberof RegistryList\n     */\n    items: Array<Registry>;\n}\n/**\n * \n * @export\n * @interface RegistryListAllOf\n */\nexport interface RegistryListAllOf {\n    /**\n     * \n     * @type {Array<Registry>}\n     * @memberof RegistryListAllOf\n     */\n    items?: Array<Registry>;\n}\n/**\n * \n * @export\n * @interface RegistryRequest\n */\nexport interface RegistryRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryRequest\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RelatedResource\n */\nexport interface RelatedResource {\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    billing_model: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    byoc: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RelatedResource\n     */\n    cost: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    product: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    product_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface RelatedResourceAllOf\n */\nexport interface RelatedResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    billing_model: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    byoc: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RelatedResourceAllOf\n     */\n    cost: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    product: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    product_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface ReservedResource\n */\nexport interface ReservedResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResource\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResource\n     */\n    cluster?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResource\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ReservedResource\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface ReservedResourceAllOf\n */\nexport interface ReservedResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResourceAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResourceAllOf\n     */\n    cluster?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceAllOf\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ReservedResourceAllOf\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface ReservedResourceList\n */\nexport interface ReservedResourceList {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ReservedResourceList\n     */\n    items: Array<ReservedResource>;\n}\n/**\n * \n * @export\n * @interface ReservedResourceListAllOf\n */\nexport interface ReservedResourceListAllOf {\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ReservedResourceListAllOf\n     */\n    items?: Array<ReservedResource>;\n}\n/**\n * \n * @export\n * @interface ResourceQuota\n */\nexport interface ResourceQuota {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuota\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResourceQuota\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    resource_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuota\n     */\n    sku_count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    type?: ResourceQuotaTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceQuotaAllOf\n */\nexport interface ResourceQuotaAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResourceQuotaAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    resource_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaAllOf\n     */\n    sku_count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    type?: ResourceQuotaAllOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaAllOfTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceQuotaList\n */\nexport interface ResourceQuotaList {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<ResourceQuota>}\n     * @memberof ResourceQuotaList\n     */\n    items: Array<ResourceQuota>;\n}\n/**\n * \n * @export\n * @interface ResourceQuotaListAllOf\n */\nexport interface ResourceQuotaListAllOf {\n    /**\n     * \n     * @type {Array<ResourceQuota>}\n     * @memberof ResourceQuotaListAllOf\n     */\n    items?: Array<ResourceQuota>;\n}\n/**\n * \n * @export\n * @interface ResourceQuotaRequest\n */\nexport interface ResourceQuotaRequest {\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaRequest\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaRequest\n     */\n    sku: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaRequest\n     */\n    sku_count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaRequest\n     */\n    type?: ResourceQuotaRequestTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaRequestTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceReview\n */\nexport interface ResourceReview {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    action: ResourceReviewActionEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    cluster_ids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    cluster_uuids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    organization_ids: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    resource_type: ResourceReviewResourceTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    subscription_ids: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceReviewRequest\n */\nexport interface ResourceReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    account_username?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    action?: ResourceReviewRequestActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    resource_type?: ResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewRequestActionEnum {\n    Get = 'get',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewRequestResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface Role\n */\nexport interface Role {\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof Role\n     */\n    permissions?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface RoleAllOf\n */\nexport interface RoleAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof RoleAllOf\n     */\n    permissions?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface RoleBinding\n */\nexport interface RoleBinding {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    kind?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBinding\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    organization?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    role?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    type?: RoleBindingTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum RoleBindingTypeEnum {\n    Application = 'Application',\n    Subscription = 'Subscription',\n    Organization = 'Organization'\n}\n\n/**\n * \n * @export\n * @interface RoleBindingAllOf\n */\nexport interface RoleBindingAllOf {\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingAllOf\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    organization?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    role?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    type?: RoleBindingAllOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum RoleBindingAllOfTypeEnum {\n    Application = 'Application',\n    Subscription = 'Subscription',\n    Organization = 'Organization'\n}\n\n/**\n * \n * @export\n * @interface RoleBindingCreateRequest\n */\nexport interface RoleBindingCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    account_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingCreateRequest\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    role_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    type: string;\n}\n/**\n * \n * @export\n * @interface RoleBindingList\n */\nexport interface RoleBindingList {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<RoleBinding>}\n     * @memberof RoleBindingList\n     */\n    items: Array<RoleBinding>;\n}\n/**\n * \n * @export\n * @interface RoleBindingListAllOf\n */\nexport interface RoleBindingListAllOf {\n    /**\n     * \n     * @type {Array<RoleBinding>}\n     * @memberof RoleBindingListAllOf\n     */\n    items?: Array<RoleBinding>;\n}\n/**\n * \n * @export\n * @interface RoleBindingRequest\n */\nexport interface RoleBindingRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingRequest\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    role_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface RoleList\n */\nexport interface RoleList {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Role>}\n     * @memberof RoleList\n     */\n    items: Array<Role>;\n}\n/**\n * \n * @export\n * @interface RoleListAllOf\n */\nexport interface RoleListAllOf {\n    /**\n     * \n     * @type {Array<Role>}\n     * @memberof RoleListAllOf\n     */\n    items?: Array<Role>;\n}\n/**\n * \n * @export\n * @interface SKU\n */\nexport interface SKU {\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SKU\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {Array<EphemeralResourceQuota>}\n     * @memberof SKU\n     */\n    resources?: Array<EphemeralResourceQuota>;\n}\n/**\n * \n * @export\n * @interface SKUAllOf\n */\nexport interface SKUAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SKUAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {Array<EphemeralResourceQuota>}\n     * @memberof SKUAllOf\n     */\n    resources?: Array<EphemeralResourceQuota>;\n}\n/**\n * \n * @export\n * @interface SelfAccessReview\n */\nexport interface SelfAccessReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    action: SelfAccessReviewActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    resource_type: SelfAccessReviewResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfAccessReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfAccessReviewResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface SelfResourceReview\n */\nexport interface SelfResourceReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReview\n     */\n    action: SelfResourceReviewActionEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    cluster_ids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    cluster_uuids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    organization_ids: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReview\n     */\n    resource_type: SelfResourceReviewResourceTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    subscription_ids: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface SelfResourceReviewRequest\n */\nexport interface SelfResourceReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReviewRequest\n     */\n    action?: SelfResourceReviewRequestActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReviewRequest\n     */\n    resource_type?: SelfResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewRequestActionEnum {\n    Get = 'get',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewRequestResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface SelfTermsReview\n */\nexport interface SelfTermsReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfTermsReview\n     */\n    event_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfTermsReview\n     */\n    site_code?: string;\n}\n/**\n * \n * @export\n * @interface SkuList\n */\nexport interface SkuList {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<SKU>}\n     * @memberof SkuList\n     */\n    items: Array<SKU>;\n}\n/**\n * \n * @export\n * @interface SkuListAllOf\n */\nexport interface SkuListAllOf {\n    /**\n     * \n     * @type {Array<SKU>}\n     * @memberof SkuListAllOf\n     */\n    items?: Array<SKU>;\n}\n/**\n * \n * @export\n * @interface SkuRules\n */\nexport interface SkuRules {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRules\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    quota_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    sku?: string;\n}\n/**\n * \n * @export\n * @interface SkuRulesAllOf\n */\nexport interface SkuRulesAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesAllOf\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesAllOf\n     */\n    quota_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesAllOf\n     */\n    sku?: string;\n}\n/**\n * \n * @export\n * @interface SkuRulesList\n */\nexport interface SkuRulesList {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<SkuRules>}\n     * @memberof SkuRulesList\n     */\n    items: Array<SkuRules>;\n}\n/**\n * \n * @export\n * @interface SkuRulesListAllOf\n */\nexport interface SkuRulesListAllOf {\n    /**\n     * \n     * @type {Array<SkuRules>}\n     * @memberof SkuRulesListAllOf\n     */\n    items?: Array<SkuRules>;\n}\n/**\n * \n * @export\n * @interface Subscription\n */\nexport interface Subscription {\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Subscription\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cluster_billing_model?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Subscription\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {AccountReference}\n     * @memberof Subscription\n     */\n    creator?: AccountReference;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Subscription\n     */\n    labels?: Array<Label>;\n    /**\n     * Last time this subscription were reconciled about cluster usage\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_reconcile_date?: string;\n    /**\n     * Last time status was set to Released for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_released_at?: string;\n    /**\n     * Last telemetry authorization request for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_telemetry_date?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    managed: boolean;\n    /**\n     * \n     * @type {Array<OneMetric>}\n     * @memberof Subscription\n     */\n    metrics?: Array<OneMetric>;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof Subscription\n     */\n    notification_contacts?: Array<Account>;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {Plan}\n     * @memberof Subscription\n     */\n    plan?: Plan;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    product_bundle?: SubscriptionProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    service_level?: SubscriptionServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Subscription\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    support_level?: SubscriptionSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    system_units?: SubscriptionSystemUnitsEnum;\n    /**\n     * If the subscription is a trial, date the trial ends\n     * @type {string}\n     * @memberof Subscription\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    usage?: SubscriptionUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionAllOf\n */\nexport interface SubscriptionAllOf {\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof SubscriptionAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cluster_billing_model?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionAllOf\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {AccountReference}\n     * @memberof SubscriptionAllOf\n     */\n    creator?: AccountReference;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof SubscriptionAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * Last time this subscription were reconciled about cluster usage\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_reconcile_date?: string;\n    /**\n     * Last time status was set to Released for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_released_at?: string;\n    /**\n     * Last telemetry authorization request for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_telemetry_date?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionAllOf\n     */\n    managed: boolean;\n    /**\n     * \n     * @type {Array<OneMetric>}\n     * @memberof SubscriptionAllOf\n     */\n    metrics?: Array<OneMetric>;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof SubscriptionAllOf\n     */\n    notification_contacts?: Array<Account>;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {Plan}\n     * @memberof SubscriptionAllOf\n     */\n    plan?: Plan;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    product_bundle?: SubscriptionAllOfProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionAllOf\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    service_level?: SubscriptionAllOfServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionAllOf\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    support_level?: SubscriptionAllOfSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    system_units?: SubscriptionAllOfSystemUnitsEnum;\n    /**\n     * If the subscription is a trial, date the trial ends\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    usage?: SubscriptionAllOfUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionCreateRequest\n */\nexport interface SubscriptionCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    cluster_uuid: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    plan_id: SubscriptionCreateRequestPlanIdEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    status: SubscriptionCreateRequestStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionCreateRequestPlanIdEnum {\n    Ocp = 'OCP'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionCreateRequestStatusEnum {\n    Disconnected = 'Disconnected'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionList\n */\nexport interface SubscriptionList {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Subscription>}\n     * @memberof SubscriptionList\n     */\n    items: Array<Subscription>;\n}\n/**\n * \n * @export\n * @interface SubscriptionListAllOf\n */\nexport interface SubscriptionListAllOf {\n    /**\n     * \n     * @type {Array<Subscription>}\n     * @memberof SubscriptionListAllOf\n     */\n    items?: Array<Subscription>;\n}\n/**\n * \n * @export\n * @interface SubscriptionPatchRequest\n */\nexport interface SubscriptionPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cluster_billing_model?: SubscriptionPatchRequestClusterBillingModelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionPatchRequest\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    creator_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionPatchRequest\n     */\n    managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    plan_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    product_bundle?: SubscriptionPatchRequestProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionPatchRequest\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    service_level?: SubscriptionPatchRequestServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionPatchRequest\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    support_level?: SubscriptionPatchRequestSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    system_units?: SubscriptionPatchRequestSystemUnitsEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    usage?: SubscriptionPatchRequestUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestClusterBillingModelEnum {\n    Standard = 'standard',\n    Marketplace = 'marketplace'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface Summary\n */\nexport interface Summary {\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<SummaryMetrics>}\n     * @memberof Summary\n     */\n    metrics: Array<SummaryMetrics>;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface SummaryAllOf\n */\nexport interface SummaryAllOf {\n    /**\n     * \n     * @type {Array<SummaryMetrics>}\n     * @memberof SummaryAllOf\n     */\n    metrics: Array<SummaryMetrics>;\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryAllOf\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface SummaryMetrics\n */\nexport interface SummaryMetrics {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryMetrics\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<SummaryVector>}\n     * @memberof SummaryMetrics\n     */\n    vector?: Array<SummaryVector>;\n}\n/**\n * \n * @export\n * @interface SummaryMetricsAllOf\n */\nexport interface SummaryMetricsAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryMetricsAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<SummaryVector>}\n     * @memberof SummaryMetricsAllOf\n     */\n    vector?: Array<SummaryVector>;\n}\n/**\n * \n * @export\n * @interface SummaryVector\n */\nexport interface SummaryVector {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryVector\n     */\n    time?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SummaryVector\n     */\n    value?: number;\n}\n/**\n * \n * @export\n * @interface SummaryVectorAllOf\n */\nexport interface SummaryVectorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryVectorAllOf\n     */\n    time?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SummaryVectorAllOf\n     */\n    value?: number;\n}\n/**\n * \n * @export\n * @interface SupportCasesCreatedResponse\n */\nexport interface SupportCasesCreatedResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    caseNumber?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    severity?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    summary?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface SupportCasesRequest\n */\nexport interface SupportCasesRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    account_number?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    case_language?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    contact_sso_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    event_stream_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    openshift_cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    product?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    severity: SupportCasesRequestSeverityEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    summary: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    version?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SupportCasesRequestSeverityEnum {\n    _1Urgent = '1 (Urgent)',\n    _2High = '2 (High)',\n    _3Normal = '3 (Normal)',\n    _4Low = '4 (Low)'\n}\n\n/**\n * \n * @export\n * @interface TemplateParameter\n */\nexport interface TemplateParameter {\n    /**\n     * \n     * @type {string}\n     * @memberof TemplateParameter\n     */\n    content: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemplateParameter\n     */\n    name: string;\n}\n/**\n * \n * @export\n * @interface TermsReview\n */\nexport interface TermsReview {\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    event_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    site_code?: string;\n}\n/**\n * \n * @export\n * @interface TermsReviewResponse\n */\nexport interface TermsReviewResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    account_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    organization_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    redirect_url?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TermsReviewResponse\n     */\n    terms_available: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TermsReviewResponse\n     */\n    terms_required: boolean;\n}\n/**\n * \n * @export\n * @interface TokenAuthorizationRequest\n */\nexport interface TokenAuthorizationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenAuthorizationRequest\n     */\n    authorization_token?: string;\n}\n/**\n * \n * @export\n * @interface TokenAuthorizationResponse\n */\nexport interface TokenAuthorizationResponse {\n    /**\n     * \n     * @type {Account}\n     * @memberof TokenAuthorizationResponse\n     */\n    account?: Account;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccessTokenPost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/access_token`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdPatch: async (id: string, accountPatchRequest: AccountPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id)\n            // verify required parameter 'accountPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsPost: async (account: Account, dryRun?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'account' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (dryRun !== undefined) {\n                localVarQueryParameter['dryRun'] = dryRun;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterAuthorizationsPost: async (clusterAuthorizationRequest: ClusterAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'clusterAuthorizationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ClusterAuthorizationsPost', 'clusterAuthorizationRequest', clusterAuthorizationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(clusterAuthorizationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterRegistrationsPost: async (clusterRegistrationRequest: ClusterRegistrationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'clusterRegistrationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ClusterRegistrationsPost', 'clusterRegistrationRequest', clusterRegistrationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(clusterRegistrationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1CurrentAccountGet: async (fetchLabels?: boolean, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/current_account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/errors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id)\n            // verify required parameter 'featureToggleQueryRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'featureToggleQueryRequest', featureToggleQueryRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(featureToggleQueryRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1LabelsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/labels`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1MetricsGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1NotifyPost: async (notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'notificationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/notify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdPatch: async (id: string, organizationPatchRequest: OrganizationPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id)\n            // verify required parameter 'organizationPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(organizationPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: async (orgId: string, search?: string, fetchRelatedResources?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fetchRelatedResources !== undefined) {\n                localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet: async (orgId: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_summary`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId)\n            // verify required parameter 'resourceQuotaRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'resourceQuotaRequest', resourceQuotaRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId)\n            // verify required parameter 'resourceQuotaRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'resourceQuotaRequest', resourceQuotaRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'organization' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/plans`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (externalResourceId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'externalResourceId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PullSecretsExternalResourceIdDelete', 'externalResourceId', externalResourceId)\n            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`\n                .replace(`{${\"externalResourceId\"}}`, encodeURIComponent(String(externalResourceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsPost: async (pullSecretRequest: PullSecretRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pullSecretRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/registries`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdPatch: async (id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id)\n            // verify required parameter 'registryCredentialPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'registryCredentialPatchRequest', registryCredentialPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(registryCredentialPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsPost: async (registryCredential: RegistryCredential, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'registryCredential' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ReservedResourcesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ResourceQuotaGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdPatch: async (id: string, roleBindingRequest: RoleBindingRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id)\n            // verify required parameter 'roleBindingRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsPost: async (roleBindingCreateRequest: RoleBindingCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roleBindingCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/roles`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/skus`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsGet: async (page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fetchAccounts !== undefined) {\n                localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (labels !== undefined) {\n                localVarQueryParameter['labels'] = labels;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdGet: async (id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchAccounts !== undefined) {\n                localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fetchCpuAndSocket !== undefined) {\n                localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (id: string, notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id)\n            // verify required parameter 'notificationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdPatch: async (id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id)\n            // verify required parameter 'subscriptionPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (id: string, page?: number, size?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsPost: async (subscriptionCreateRequest: SubscriptionCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subscriptionCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (subId: string, accountId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId)\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'accountId', accountId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)))\n                .replace(`{${\"accountId\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId)\n            // verify required parameter 'notificationContactCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'notificationContactCreateRequest', notificationContactCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationContactCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (subId: string, reservedResourceId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId)\n            // verify required parameter 'reservedResourceId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'reservedResourceId', reservedResourceId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)))\n                .replace(`{${\"reservedResourceId\"}}`, encodeURIComponent(String(reservedResourceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'caseId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId)\n            const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`\n                .replace(`{${\"caseId\"}}`, encodeURIComponent(String(caseId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesPost: async (supportCasesRequest: SupportCasesRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'supportCasesRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/support_cases`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1TokenAuthorizationPost: async (tokenAuthorizationRequest: TokenAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'tokenAuthorizationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1TokenAuthorizationPost', 'tokenAuthorizationRequest', tokenAuthorizationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(tokenAuthorizationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1AccessReviewPost: async (accessReview: AccessReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accessReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview)\n            const localVarPath = `/api/authorizations/v1/access_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1CapabilityReviewPost: async (capabilityReviewRequest: CapabilityReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'capabilityReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest)\n            const localVarPath = `/api/authorizations/v1/capability_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(capabilityReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ExportControlReviewPost: async (exportControlReviewRequest: ExportControlReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'exportControlReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1ExportControlReviewPost', 'exportControlReviewRequest', exportControlReviewRequest)\n            const localVarPath = `/api/authorizations/v1/export_control_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(exportControlReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ResourceReviewPost: async (resourceReviewRequest: ResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'resourceReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest)\n            const localVarPath = `/api/authorizations/v1/resource_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfAccessReviewPost: async (selfAccessReview: SelfAccessReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfAccessReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfAccessReviewPost', 'selfAccessReview', selfAccessReview)\n            const localVarPath = `/api/authorizations/v1/self_access_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfAccessReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfResourceReviewPost: async (selfResourceReviewRequest: SelfResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfResourceReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfResourceReviewPost', 'selfResourceReviewRequest', selfResourceReviewRequest)\n            const localVarPath = `/api/authorizations/v1/self_resource_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfResourceReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfTermsReviewPost: async (selfTermsReview: SelfTermsReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfTermsReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview)\n            const localVarPath = `/api/authorizations/v1/self_terms_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfTermsReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'termsReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview)\n            const localVarPath = `/api/authorizations/v1/terms_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccessTokenPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1MetricsGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(notificationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaSummaryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(organization, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PlansIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RolesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkusGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkusIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(accessReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(termsReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg> {\n            return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList> {\n            return localVarFp.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse> {\n            return localVarFp.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse> {\n            return localVarFp.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {\n            return localVarFp.apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {\n            return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle> {\n            return localVarFp.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {\n            return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): AxiosPromise<QuotaCostList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {\n            return localVarFp.apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {\n            return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg> {\n            return localVarFp.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList> {\n            return localVarFp.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {\n            return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {\n            return localVarFp.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {\n            return localVarFp.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {\n            return localVarFp.apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {\n            return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {\n            return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {\n            return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {\n            return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {\n            return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse> {\n            return localVarFp.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse> {\n            return localVarFp.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n            return localVarFp.apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview> {\n            return localVarFp.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview> {\n            return localVarFp.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview> {\n            return localVarFp.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview> {\n            return localVarFp.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n            return localVarFp.apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg>;\n\n    /**\n     * \n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList>;\n\n    /**\n     * \n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse>;\n\n    /**\n     * \n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse>;\n\n    /**\n     * \n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList>;\n\n    /**\n     * \n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList>;\n\n    /**\n     * \n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary>;\n\n    /**\n     * \n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): AxiosPromise<QuotaCostList>;\n\n    /**\n     * \n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList>;\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;\n\n    /**\n     * \n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList>;\n\n    /**\n     * \n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan>;\n\n    /**\n     * \n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg>;\n\n    /**\n     * \n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList>;\n\n    /**\n     * \n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry>;\n\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList>;\n\n    /**\n     * \n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;\n\n    /**\n     * \n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList>;\n\n    /**\n     * \n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList>;\n\n    /**\n     * \n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role>;\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList>;\n\n    /**\n     * \n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules>;\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList>;\n\n    /**\n     * \n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU>;\n\n    /**\n     * \n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList>;\n\n    /**\n     * \n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;\n\n    /**\n     * \n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList>;\n\n    /**\n     * \n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource>;\n\n    /**\n     * \n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse>;\n\n    /**\n     * \n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview>;\n\n    /**\n     * \n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview>;\n\n    /**\n     * \n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview>;\n\n    /**\n     * \n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n    /**\n     * \n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview>;\n\n    /**\n     * \n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccessTokenPost(options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1MetricsGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PlansIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RolesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkusGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkusIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","import React, { useContext, useEffect, useState } from 'react';\nimport { InsightsContext } from \"@app/utils\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { FederatedModule } from \"../Components/FederatedModule/FederatedModule\";\nimport { AuthContext } from \"@app/utils/auth/AuthContext\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport { Configuration, DefaultApi } from \"../../openapi/kas\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from \"react-router-dom\";\nimport { getParams } from \"@app/KafkaPage/utils\";\n\nenum KafkaUITopicModules {\n  topicListModule = \"./Panels/Topics\",\n  topicListDetailModule = \"./Panels/TopicDetails\",\n  topicCreateModule = \"./Panels/CreateTopic\",\n  topicUpdateModule = \"./Panels/UpdateTopic\"\n}\n\nexport const KafkaPage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n  const [adminServerUrl, setAdminServerUrl] = useState<undefined | string>();\n\n  const { id, topicName } = getParams();\n\n  useEffect(() => {\n    const getAdminApiUrl = async () => {\n      const accessToken = await insights.chrome.auth.getToken();\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath: config?.controlPlane.serviceApiBasePath || '',\n      } as Configuration);\n\n      const kafka = await apisService.getKafkaById(id);\n      setAdminServerUrl(`https://admin-server-${kafka.data.bootstrapServerHost}/rest`);\n    }\n\n    getAdminApiUrl();\n  }, [insights, config, id]);\n\n  if (config === undefined || adminServerUrl === undefined) {\n    return <Loading/>\n  }\n\n  return <KafkaPageContent adminServerUrl={adminServerUrl} id={id} topicName={topicName}/>\n\n}\n\ntype KafkaPageContentProps = {\n  adminServerUrl: string;\n  id: string;\n  topicName?: string;\n}\n\nconst KafkaPageContent: React.FunctionComponent<KafkaPageContentProps> = ({ adminServerUrl, id, topicName }) => {\n  const { getToken } = useContext(AuthContext);\n  const history = useHistory();\n  const [showCreate, setShowCreate] = useState<boolean>(false);\n  const [showUpdate, setShowUpdate] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  const onCreateTopic = () => {\n    setShowCreate(true);\n  }\n\n  const onClickTopic = (topicName) => {\n    history.push(`/streams/kafkas/${id}/topics/${topicName}`);\n  }\n\n  const onCloseCreateTopic = () => {\n    setShowCreate(false);\n  }\n\n  const getTopicDetailsPath = (topicName: string | undefined) => {\n    if (topicName === undefined) {\n      return history.createHref({ pathname: `streams/kafkas/${id}` });\n    }\n    return history.createHref({ pathname: `/streams/kafkas/${id}/topics/${topicName}`, key: topicName });\n  };\n\n  const onUpdateTopic = () => {\n    setShowUpdate(true);\n  }\n\n  const onDeleteTopic = () => {\n    history.push(`/streams/kafkas/${id}`);\n  }\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n\n  };\n\n  let topicModule = KafkaUITopicModules.topicListModule;\n  if (showCreate) {\n    topicModule = KafkaUITopicModules.topicCreateModule\n  } else if (topicName && showUpdate) {\n    topicModule = KafkaUITopicModules.topicUpdateModule\n  } else if (topicName) {\n    topicModule = KafkaUITopicModules.topicListDetailModule\n  }\n\n\n  const kafkaUITopicPage = <FederatedModule\n    scope=\"kafka\"\n    module={topicModule}\n    render={(FederatedTopics) => <FederatedTopics\n      getToken={getToken}\n      apiBasePath={adminServerUrl}\n      onCreateTopic={onCreateTopic}\n      onClickTopic={onClickTopic}\n      getTopicDetailsPath={getTopicDetailsPath}\n      onCloseCreateTopic={onCloseCreateTopic}\n      onUpdateTopic={onUpdateTopic}\n      currentTopic={topicName}\n      addAlert={addAlert}\n      onDeleteTopic={onDeleteTopic}\n    />}\n  />;\n\n  return kafkaUITopicPage;\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = params => Object.keys(params)\n  .map(key => `${key}=${encodeURIComponent(params[key])}`)\n  .join('&');\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n    getToken: () => Promise.resolve('')\n  }\n);\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface InstantQuery\n */\nexport interface InstantQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof InstantQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof InstantQuery\n     */\n    Value: number;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryList\n */\nexport interface MetricsInstantQueryList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryList\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryList\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryList\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsInstantQueryListAllOf\n */\nexport interface MetricsInstantQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<InstantQuery>}\n     * @memberof MetricsInstantQueryListAllOf\n     */\n    items?: Array<InstantQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryList\n */\nexport interface MetricsRangeQueryList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryList\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryList\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryList\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface MetricsRangeQueryListAllOf\n */\nexport interface MetricsRangeQueryListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<RangeQuery>}\n     * @memberof MetricsRangeQueryListAllOf\n     */\n    items?: Array<RangeQuery>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * \n * @export\n * @interface RangeQuery\n */\nexport interface RangeQuery {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof RangeQuery\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof RangeQuery\n     */\n    values?: Array<Values>;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountList\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountList\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {any}\n     * @memberof ServiceAccountListItem\n     */\n    description?: any | null;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {any}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: any | null;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            assertParamExists('createKafka', 'async', async)\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            assertParamExists('createKafka', 'kafkaRequestPayload', kafkaRequestPayload)\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(kafkaRequestPayload, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            assertParamExists('createServiceAccount', 'serviceAccountRequest', serviceAccountRequest)\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(serviceAccountRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteKafkaById', 'id', id)\n            // verify required parameter 'async' is not null or undefined\n            assertParamExists('deleteKafkaById', 'async', async)\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('deleteServiceAccount', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getKafkaById', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery: async (id: string, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMetricsByInstantQuery', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'id', id)\n            // verify required parameter 'duration' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'duration', duration)\n            // verify required parameter 'interval' is not null or undefined\n            assertParamExists('getMetricsByRangeQuery', 'interval', interval)\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics/query_range`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('getServiceAccountById', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('listCloudProviderRegions', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('resetServiceAccountCreds', 'id', id)\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createKafka(async, kafkaRequestPayload, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.createServiceAccount(serviceAccountRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteKafkaById(id, async, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteServiceAccount(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getKafkaById(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsInstantQueryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsByInstantQuery(id, filters, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsRangeQueryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getMetricsByRangeQuery(id, duration, interval, filters, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getServiceAccountById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.getServiceAccountById(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudProviderRegions(id, page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listCloudProviders(page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listKafkas(page, size, orderBy, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.listServiceAccounts(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.resetServiceAccountCreds(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return localVarFp.createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return localVarFp.deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return localVarFp.deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return localVarFp.getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with instant query by kafka id.\n         * @param {string} id The id of record\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList> {\n            return localVarFp.getMetricsByInstantQuery(id, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics with timeseries range query by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList> {\n            return localVarFp.getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary get service account by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.getServiceAccountById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return localVarFp.listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return localVarFp.listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return localVarFp.listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return localVarFp.listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return localVarFp.resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any): AxiosPromise<MetricsInstantQueryList>;\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsRangeQueryList>;\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getServiceAccountById(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with instant query by kafka id.\n     * @param {string} id The id of record\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByInstantQuery(id: string, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByInstantQuery(id, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics with timeseries range query by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByRangeQuery(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByRangeQuery(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary get service account by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getServiceAccountById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getServiceAccountById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","export const getParams = () => {\n  const pathRegex = /^.*\\/kafkas\\/(?<id>[a-zA-Z0-9]+)(\\/topics\\/(?<topicName>[a-zA-Z0-9-_]+))?$/gm\n  const matches = pathRegex.exec(window.location.pathname)\n  if (matches === null || matches.groups === undefined) {\n    throw new Error(\"matches is null or groups are undefined\")\n  }\n  const { id, topicName } = matches.groups;\n  if (id === undefined) {\n    throw new Error(\"id cannot be null\")\n  }\n  return { id, topicName };\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Kafka Service Fleet Manager\n * Kafka Service Fleet Manager is a Rest API to manage kafka instances and connectors.\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import api from \"!../../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../../node_modules/css-loader/dist/cjs.js!../../../node_modules/sass-loader/dist/cjs.js!./QuickStartDrawerFederated.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import { FederatedModule } from \"@app/Components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent, useContext } from \"react\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport \"./QuickStartDrawerFederated.scss\";\n\nexport const QuickStartDrawerFederated: FunctionComponent = ({ children }) => {\n\n  const config = useContext(ConfigContext);\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"guides\"\n      module=\"./QuickStartDrawer\"\n      fallback={children}\n      render={(QuickStartDrawerFederated) => (\n        <QuickStartDrawerFederated basePath={config?.federatedModules.guides.basePath} showDrafts={config?.resources.showDrafts} className=\"mas-quickstart-drawer\">\n          {children}\n        </QuickStartDrawerFederated>\n      )}/>)\n};\n","export default __webpack_public_path__ + \"d0f2bb14.svg\";","export default __webpack_public_path__ + \"61fdfbf5.svg\";","export default __webpack_public_path__ + \"485bae8d.svg\";","export default __webpack_public_path__ + \"0eca67f2.svg\";","import React from 'react';\nimport { Loading } from '@app/Components/Loading/Loading';\nimport LoremIpsum from 'react-lorem-ipsum';\nimport {\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardActions,\n  CardBody,\n  CardHeader,\n  CardTitle,\n  Gallery,\n  GalleryItem,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport videoPlaceholder from 'static/images/Videoplaceholder.svg';\n\nimport { useTranslation } from 'react-i18next';\n\nexport const DataSciencePage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhods\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('datascienceoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('datascienceoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('datascienceoverview.heroDescription')}</Text>\n          <StackItem>\n            <Button\n              data-testid=\"hero-buttonLearnMore\"\n              variant={ButtonVariant.secondary}\n              component=\"a\"\n              href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\"\n              target=\"_blank\"\n              >\n              {t('datascienceoverview.heroCallToActionButton')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--video\">\n        <Grid hasGutter>\n          <GridItem md={5}>\n            <TextContent>\n              <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n                {t('datascienceoverview.videoSectionTitle')}\n              </Title>\n              <Text className=\"pf-u-mr-md\">{t('datascienceoverview.videoSectionInThisVideo')}</Text>\n            </TextContent>\n          </GridItem>\n          <GridItem md={7}>\n            <Card>\n              <Bullseye>\n                <img src={videoPlaceholder} />\n              </Bullseye>\n            </Card>\n              {/* Replace the card above with this once there is a video */}\n              {/* <Card className=\"app-services-ui--card--video\">\n                <div className=\"app-services-ui--video-wrapper\">\n                  <iframe\n                    src=\"URL HERE\"\n                    title={t('datascienceoverview.videoSectionTitle')}\n                    frameborder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowfullscreen\n                  ></iframe>\n                </div>\n              </Card> */}\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { InsightsContext } from \"@app/utils\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { FederatedModule } from \"../Components/FederatedModule/FederatedModule\";\nimport { AuthContext } from \"@app/utils/auth/AuthContext\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport { Configuration, DefaultApi } from \"../../openapi/kas\";\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { useHistory } from \"react-router-dom\";\nimport { getParams } from \"@app/KafkaPage/utils\";\n\nenum KafkaUITopicModules {\n  topicListDetailModule = \"./Panels/TopicDetails\",\n  topicUpdateModule = \"./Panels/UpdateTopic\"\n}\n\nexport const KafkaDetailPage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n  const [adminServerUrl, setAdminServerUrl] = useState<undefined | string>();\n\n  const { id, topicName } = getParams();\n\n  useEffect(() => {\n    const getAdminApiUrl = async () => {\n      const accessToken = await insights.chrome.auth.getToken();\n      const apisService = new DefaultApi({\n        accessToken,\n        basePath: config?.controlPlane.serviceApiBasePath || '',\n      } as Configuration);\n\n      const kafka = await apisService.getKafkaById(id);\n      setAdminServerUrl(`https://admin-server-${kafka.data.bootstrapServerHost}/rest`);\n    }\n\n    getAdminApiUrl();\n  }, [insights, config, id]);\n\n  if (config === undefined || adminServerUrl === undefined) {\n    return <Loading/>\n  }\n\n  return <KafkaDetailPageContent adminServerUrl={adminServerUrl} id={id} topicName={topicName}/>\n\n}\n\ntype KafkaDetailPageContentProps = {\n  adminServerUrl: string;\n  id: string;\n  topicName?: string;\n}\n\nconst KafkaDetailPageContent: React.FunctionComponent<KafkaDetailPageContentProps> = ({\n                                                                                        adminServerUrl,\n                                                                                        id,\n                                                                                        topicName\n                                                                                      }) => {\n  const { getToken } = useContext(AuthContext);\n  const history = useHistory();\n  const [showUpdate, setShowUpdate] = useState<boolean>(false);\n  const dispatch = useDispatch();\n\n  const onUpdateTopic = () => {\n    setShowUpdate(true);\n  }\n\n  const onCancelUpdateTopic = () => {\n    setShowUpdate(false);\n  }\n\n  const onDeleteTopic = () => {\n    history.push(`/streams/kafkas/${id}`);\n  }\n\n  const onSaveTopic = () => {\n    setShowUpdate(false);\n  }\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n\n  };\n\n  const getTopicListPath = () => {\n    return history.createHref({ pathname: `/streams/kafkas/${id}` });\n  }\n\n  const onClickTopicList = () => {\n    history.push(`/streams/kafkas/${id}`);\n  }\n\n  let topicModule = KafkaUITopicModules.topicListDetailModule;\n  if (showUpdate) {\n    topicModule = KafkaUITopicModules.topicUpdateModule\n  }\n\n  const kafkaUITopicPage = <FederatedModule\n    scope=\"kafka\"\n    module={topicModule}\n    render={(FederatedTopics) => <FederatedTopics\n      getToken={getToken}\n      apiBasePath={adminServerUrl}\n      onUpdateTopic={onUpdateTopic}\n      onCancelUpdateTopic={onCancelUpdateTopic}\n      currentTopic={topicName}\n      addAlert={addAlert}\n      getTopicListPath={getTopicListPath}\n      onClickTopicList={onClickTopicList}\n      onDeleteTopic={onDeleteTopic}\n      onSaveTopic={onSaveTopic}\n    />}\n  />;\n\n  return kafkaUITopicPage;\n}\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { NotFound } from '@app/NotFound/NotFound';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { KasPage } from '@app/KasPage/KasPage';\nimport { KafkaPage } from '@app/KafkaPage/KafkaPage';\nimport { QuickStartDrawerFederated } from '@app/ResourcesPage/QuickStartDrawerFederated';\nimport { ResourcesPage } from '@app/ResourcesPage/ResourcesPage';\nimport { OverviewPage } from '@app/Overview/OverviewPage';\nimport { APIManagementPage } from '@app/APIManagement/APIManagementPage';\nimport { DataSciencePage } from '@app/DataScience/DataSciencePage';\nimport { ServiceAccountsPage } from '@app/ServiceAccountsPage/ServiceAccountsPage';\nimport { KafkaDetailPage } from \"@app/KafkaPage/KafkaDetailPage\";\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: KafkaPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KafkaDetailPage,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n  },\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return (\n      <QuickStartDrawerFederated>\n        <Component {...rest} {...routeProps} />\n      </QuickStartDrawerFederated>\n    );\n  }\n\n  return <Route render={routeWithTitle} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFound} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <Switch>\n      {flattenedRoutes.map(({ path, exact, component, title, isAsync }, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n        />\n      ))}\n      <PageNotFound title=\"404 Page Not Found\" />\n    </Switch>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { FederatedModule } from \"../Components/FederatedModule/FederatedModule\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport { Configuration, DefaultApi,TermsReviewResponse } from \"../../openapi/ams\";\nimport { getTermsAppURL } from \"@app/utils/termsApp\";\nimport queryString from 'query-string';\n\nexport const KasPage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const [create, setCreate] = useState<boolean>(false);\n  const [termsReview, setTermsReview] = useState<TermsReviewResponse | undefined>();\n\n  useEffect(() => {\n    // Handle being passed ?create=true by setting the create state, then removing it from the search params\n    const handleCreateParam = () => {\n      const parsed = queryString.parse(location.search);\n      const c = parsed['create'] === 'true';\n      if (c) {\n        setCreate(true);\n      }\n    };\n\n    handleCreateParam();\n  }, [create, location.search]);\n\n  useEffect(() => {\n    // Load the terms review state asynchronously, to avoid the user waiting when they press the Create Kafka Instance button\n    const selfTermsReview = async() => {\n      const accessToken = await insights.chrome.auth.getToken();\n      const ams = new DefaultApi({\n        accessToken,\n        basePath: config?.controlPlane.amsBasePath || '',\n      } as Configuration);\n      setTermsReview(await ams.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: config?.controlPlane.eventCode,\n        site_code: config?.controlPlane.siteCode\n      }).then(resp => resp.data));\n    }\n\n    selfTermsReview();\n  },[config?.controlPlane.amsBasePath, insights.chrome.auth]);\n\n  const onConnectInstance = async (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n    history.push(`/streams/kafkas/${event.id}`);\n  };\n\n  const getConnectToInstancePath = (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n    return history.createHref({ pathname: `/streams/kafkas/${event.id}` });\n  }\n\n  const preCreateInstance = async (open: boolean) => {\n    // if termsReview is set, we can proceed, otherwise wait for the effect to complete - the state update will cause the page to rerender\n    if (termsReview) {\n      if (termsReview.terms_available || termsReview.terms_required) {\n        if (termsReview.redirect_url === undefined) {\n          throw new Error(\"terms must be signed but there is no terms url\");\n        }\n        const redirectURL = queryString.stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n        const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n        window.location.href = url;\n        return false;\n      }\n      return open;\n    }\n    return false;\n\n  }\n\n  const createDialogOpen = () => {\n    return create;\n  }\n\n  const dispatch = useDispatch();\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n\n  };\n\n  if (config === undefined || termsReview === undefined) {\n    return <Loading/>\n  }\n\n  const getUsername = () => insights.chrome.auth.getUser().then(user => user.identity.user.username);\n\n  const osStreams = (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      render={(OpenshiftStreamsFederated) => {\n        return (\n          <OpenshiftStreamsFederated\n            getToken={insights.chrome.auth.getToken}\n            getUsername={getUsername}\n            onConnectToInstance={onConnectInstance}\n            getConnectToInstancePath={getConnectToInstancePath}\n            preCreateInstance={preCreateInstance}\n            createDialogOpen={createDialogOpen}\n            addAlert={addAlert}\n            basePath={config?.controlPlane.serviceApiBasePath}\n          />\n        );\n      }}\n    />\n  );\n\n  return osStreams;\n};\n","import React, { useContext } from 'react';\nimport { InsightsContext } from '@app/utils/insights';\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AlertVariant } from '@patternfly/react-core';\nimport { FederatedModule } from '../Components/FederatedModule/FederatedModule';\nimport { ConfigContext } from '@app/Config/Config';\nimport { Loading } from '@app/Components/Loading/Loading';\n\nexport const ServiceAccountsPage: React.FunctionComponent = () => {\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n  const dispatch = useDispatch();\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message,\n      })\n    );\n  };\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  const getUsername = () => insights.chrome.auth.getUser().then((user) => user.identity.user.username);\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      render={(ServiceAccountsFederated) => {\n        return (\n          <ServiceAccountsFederated\n            getToken={insights.chrome.auth.getToken}\n            getUsername={getUsername}\n            addAlert={addAlert}\n            basePath={config?.controlPlane.serviceApiBasePath}            \n          />\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport {\n  Brand,\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  Gallery,\n  Label,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport ApacheKafkaLogo from \"/static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg\";\nimport APIMgmtLogo from \"/static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg\";\nimport DataScienceLogo from \"static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg\";\n\nimport { useTranslation } from 'react-i18next';\n\nexport const OverviewPage: React.FunctionComponent = () => {\n\n  const { t } = useTranslation();\n\n  return (\n    <>\n      {/* Hero banner with graphic */}\n      <PageSection className=\"app-services-ui--page-section--marketing app-services-ui--banner pf-t-dark pf-u-background-color-dark-100\" variant={PageSectionVariants.dark}>\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('overview.heroTitle')}\n          </Title>\n          <Text className=\"app-services-ui--banner__tagline\">{t('overview.heroTagline')}</Text>\n          <Text component={TextVariants.p}>\n            {t('overview.heroDescription')}\n          </Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('overview.heroDescription2')}\n          </Text>\n          <StackItem>\n            <Button variant={ButtonVariant.primary} isLarge component=\"a\" data-testid=\"hero-buttonTryKafka\" href=\"http://cloud.redhat.com/beta/application-services/streams/kafkas/\">\n              {t('overview.heroCallToActionButton')}\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      {/* Banner with just text */}\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\">\n        <Bullseye>\n          <Text component={TextVariants.p} className=\"app-services-ui--banner--text-only\">\n            {t('overview.banner')}\n          </Text>\n        </Bullseye>\n      </PageSection>\n\n      {/* Gallery */}\n      <PageSection className=\"app-services-ui--page-section--gallery app-services-ui--page-section--marketing\">\n        <Gallery hasGutter className=\"app-services-ui--gallery-hero\">\n\n          {/* Kafka card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={ApacheKafkaLogo}\n                  alt=\"Red Hat OpenShift Streams for Apache Kafka logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhosakTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.developmentPreview')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhosakMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhosakSecondaryText')}\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHOSAK-buttonCreateKafka\" variant={ButtonVariant.secondary} href=\"http://cloud.redhat.com/beta/application-services/streams/kafkas/\">{t('overview.rhosakCallToActionButton')}</Button>\n            </CardFooter>\n          </Card>\n\n          {/* API Management card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={APIMgmtLogo}\n                  alt=\"Red Hat OpenShift API Management logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhoamTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label color=\"blue\">{t('overview.generalAvailability')}</Label>\n                </StackItem>\n                <StackItem>\n                {t('overview.rhoamMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhoamSecondaryText')} <Button data-testid=\"cardRHOAM-linkOpenShift\" isInline variant={ButtonVariant.link} target=\"_blank\" href=\"http://openshift.com\">OpenShift\n                  <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button variant={ButtonVariant.secondary} data-testid=\"cardRHOAM-buttonCTA\" target=\"_blank\" href=\"https://developers.redhat.com/products/rhoam/getting-started\">\n                {t('overview.getStarted')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Data science card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={DataScienceLogo}\n                  alt=\"Red Hat OpenShift Data Science logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n              {t('overview.rhodsTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.developmentPreview')}</Label>\n                </StackItem>\n                <StackItem>\n                {t('overview.rhodsMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                {t('overview.rhodsSecondaryText')} <Button data-testid=\"cardRHODS-linkOpenShift\" isInline variant={ButtonVariant.link} target=\"_blank\" href=\"http://openshift.com\"> OpenShift\n                  <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHODS-buttonCTA\" variant={ButtonVariant.secondary} target=\"_blank\" href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\">\n                {t('overview.learnMore')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n        </Gallery>\n      </PageSection>\n    </>\n  );\n};\n","import React from 'react';\nimport { Loading } from '@app/Components/Loading/Loading';\nimport LoremIpsum from 'react-lorem-ipsum';\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  Gallery,\n  Card,\n  CardBody,\n  CardHeader,\n  CardFooter,\n  CardHeaderMain,\n  CardTitle,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  TitleSizes,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport '../App.scss';\nimport { useTranslation } from 'react-i18next';\n\nexport const APIManagementPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhoam\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('apimgmtoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('apimgmtoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('apimgmtoverview.heroDescription')}</Text>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--gallery\">\n        <Gallery hasGutter className=\"app-services-ui--gallery-hero app-services-ui--gallery-hero--rhoam\">\n            <Card>\n              <CardHeader>\n                <CardHeaderMain>\n                  <CardTitle>\n                    <Title headingLevel=\"h3\">{t('apimgmtoverview.alreadyHaveCardTitle')}</Title>\n                  </CardTitle>\n                </CardHeaderMain>\n              </CardHeader>\n              <CardBody>{t('apimgmtoverview.alreadyHaveCardMainText')}</CardBody>\n              <CardFooter>\n                <Stack hasGutter>\n                  <StackItem>\n                    <Button\n                    data-testid=\"cardHaveRHOAM-buttonGoOCM\"\n                      variant={ButtonVariant.secondary}\n                      component=\"a\"\n                      href=\"https://cloud.redhat.com/openshift/clusters\"\n                    >\n                      {t('apimgmtoverview.alreadyHaveCardCallToActionButton')}\n                    </Button>\n                  </StackItem>\n                  <StackItem>\n                    <Button\n                    data-testid=\"cardHaveRHOAM-linkViewDocs\"\n                      variant={ButtonVariant.link}\n                      component=\"a\"\n                      href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                      target=\"_blank\"\n                    >\n                      {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                    </Button>\n                  </StackItem>\n                </Stack>{' '}\n              </CardFooter>\n            </Card>\n            <Card>\n              <CardHeader>\n                <CardTitle>\n                  <Title headingLevel=\"h3\">{t('apimgmtoverview.wantToTryCardTitle')}</Title>\n                </CardTitle>\n              </CardHeader>\n              <CardBody>{t('apimgmtoverview.wantToTryCardMainText')}</CardBody>\n              <CardFooter>\n                <Stack hasGutter>\n                  <StackItem>\n                    <Button\n                    data-testid=\"cardTryRHOAM-buttonGetStarted\"\n                      variant={ButtonVariant.secondary}\n                      component=\"a\"\n                      href=\"https://developers.redhat.com/products/rhoam/getting-started\"\n                    >\n                      {t('apimgmtoverview.wantToTryCardCallToActionButton')}\n                      <ExternalLinkAltIcon className=\"pf-u-ml-md\" />\n                    </Button>\n                  </StackItem>\n                  <StackItem>\n                    <Button\n                    data-testid=\"cardTryRHOAM-linkViewDocs\"\n                      variant={ButtonVariant.link}\n                      component=\"a\"\n                      href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                      target=\"_blank\"\n                    >\n                      {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                    </Button>\n                  </StackItem>\n                </Stack>\n              </CardFooter>\n            </Card>\n        </Gallery>\n      </PageSection>\n\n      <PageSection variant={PageSectionVariants.light}  className=\"app-services-ui--page-section--video\">\n        <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n          {t('apimgmtoverview.videoSectionTitle')}\n        </Title>\n        <Grid hasGutter>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n              <div className=\"app-services-ui--video-wrapper\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/NzNgc0f75pc\"\n                  title={t('apimgmtoverview.videoSectionTitle')}\n                  frameborder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowfullscreen\n                ></iframe>\n              </div>\n            </Card>\n          </GridItem>\n          <GridItem md={5}>\n            <TextContent>\n              <Text className=\"pf-u-color-200 pf-u-ml-md\">{t('apimgmtoverview.videoSectionInThisVideo')}</Text>\n              <List className=\"app-services-ui--icon-list\">\n                <ListItem>{t('apimgmtoverview.videoSectionBulletBuild')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletImport')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletAdd')}</ListItem>\n              </List>\n            </TextContent>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n","import { FederatedModule } from \"@app/Components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent } from 'react';\n\nexport const ResourcesPage: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux';\nimport './App.scss';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { notifications, NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { AppRoutes } from \"@app/Routes\";\nimport { FederatedModuleProvider } from \"./Components/FederatedModule/FederatedModule\";\n\nconst registry = getRegistry();\nregistry.register({ notifications });\n\nexport const App: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const history = useHistory();\n\n  const getAppId = () => {\n\n    const defaultAppId = \"overview\";\n\n    const parts = history.location.pathname.split(\"/\");\n    if (parts.length > 1) {\n      if (parts[1] === \"\") {\n        return defaultAppId\n      } else {\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  }\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    insights.chrome.on('APP_NAVIGATION', event => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n  });\n\n  return (\n    <Provider store={registry.getStore()}>\n      <FederatedModuleProvider>\n        <NotificationsPortal/>\n        <AppRoutes/>\n      </FederatedModuleProvider>\n    </Provider>\n  );\n}\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\n\nlet keycloak: KeycloakInstance | undefined;\n\nconst REFRESH_TOKEN_COOKIE_NAME = \"masSSORefreshToken\";\nconst MIN_VALIDITY = 50;\n\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig) => {\n  if (!keycloak) {\n    keycloak = await init(config);\n  }\n  return keycloak;\n}\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (config: KeycloakConfig): Promise<KeycloakInstance | undefined> => {\n  const k = Keycloak(config);\n\n  const initOptions = {\n    responseMode: \"query\",\n  } as KeycloakInitOptions;\n\n  const storedRefreshToken = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  if (storedRefreshToken) {\n    try {\n      refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken);\n    } catch {\n      console.log(\"unable to parse refresh token from cookie\")\n      Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n    }\n  }\n\n  if (refreshJWT && refreshJWT.exp) {\n    // if the JWT exists, and has an expiry\n    const now = getUnixTime(new Date());\n    if (now < refreshJWT.exp + MIN_VALIDITY) {\n      // Use the refresh token if it's still valid (make sure it's valid for at least MIN_VALIDITY)\n      try {\n        // Perform a keycloak init without a login\n        await k.init(initOptions);\n        // Set the saved refresh token into Keycloak\n        k.refreshToken = storedRefreshToken\n        // Then force a token refresh to check if the refresh token is actually valid\n        k.updateToken(-1);\n        if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n          // If we get back a refresh token that has changed, then save it\n          Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n        }\n        return k;\n      } catch {\n        // If any of the methods above error, then perform a login\n        console.log(\"refresh token is not valid, performing full login\");\n        Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n      }\n    }\n  }\n\n  initOptions.onLoad = \"login-required\";\n  await k.init(initOptions);\n  if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n  }\n  return k;\n\n}\n\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getValidAccessToken = async (): Promise<string> => {\n  await keycloak?.updateToken(MIN_VALIDITY);\n  if (!keycloak?.token) {\n    throw new Error(\"No token from keycloak!\");\n  }\n  if (keycloak?.refreshToken) {\n    // Save the most recent refresh token\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, keycloak?.refreshToken);\n  }\n  return keycloak?.token;\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (keycloak: Keycloak.KeycloakInstance | undefined) => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n}\n","import en from './en.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nlet appServicesi18n = i18n.createInstance();\n\nappServicesi18n\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      detection: {\n        order: ['htmlTag', 'navigator'],\n        caches: [],\n      },\n      fallbackLng: 'en',\n      debug: true,\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      resources,\n    });\n\nexport default appServicesi18n;\n","import React, { useContext, useState } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { Loading } from \"./app/Components/Loading/Loading\";\nimport { ConfigContext, ConfigProvider } from \"@app/Config/Config\";\nimport { KeycloakInstance } from \"keycloak-js\";\nimport { AuthContext, IAuthContext } from \"@app/utils/auth/AuthContext\";\nimport { getKeycloakInstance, getValidAccessToken } from \"@app/utils/keycloakAuth\";\nimport {I18nextProvider} from 'react-i18next';\nimport appServicesi18n from '@app/i18n';\n\ndeclare const __webpack_public_path__: string;\n\nconst AppWithKeycloak: React.FunctionComponent = () => {\n\n  const config = useContext(ConfigContext)\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadToken = async () => {\n        const keycloak = await getKeycloakInstance ({\n          url: config.dataPlane.keycloak.authServerUrl,\n          clientId: config.dataPlane.keycloak.clientId,\n          realm: config.dataPlane.keycloak.realm\n        });\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      }\n      loadToken();\n    }\n  }, [config]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading/>;\n  }\n\n  const getToken = () => {\n    return getValidAccessToken();\n\n  }\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={{\n      getToken\n    } as IAuthContext}>\n      <Router basename={baseName}>\n        <App/>\n      </Router>\n    </AuthContext.Provider>\n  )\n}\n\n\nconst AppEntry: React.FunctionComponent = () => (\n  <Provider store={init(logger).getStore()}>\n    <I18nextProvider i18n = {appServicesi18n}>\n    <ConfigProvider configUrl={`${__webpack_public_path__}config.json`}>\n      <InsightsContext.Provider value={window[\"insights\"]}>\n        <AppWithKeycloak/>\n      </InsightsContext.Provider>\n    </ConfigProvider>\n    </I18nextProvider>\n  </Provider>\n);\nexport default AppEntry;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root);\n"],"sourceRoot":""}