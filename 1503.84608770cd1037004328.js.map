{"version":3,"file":"1503.84608770cd1037004328.js","mappings":"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","sources":["webpack://application-services-ui/./src/app/AppRoutes.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/PrincipalsProvider/PrincipalsProvider.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/components/KasModalLoader/KasModalLoader.tsx","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/hooks/modal.ts","webpack://application-services-ui/./src/app/hooks/insights.ts","webpack://application-services-ui/./src/app/hooks/keycloak.ts","webpack://application-services-ui/./src/app/hooks/useMASToken.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/CosPage/CosPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederatedComponent.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Dashboard.tsx","webpack://application-services-ui/./src/app/pages/Kafka/ConsumerGroups.tsx","webpack://application-services-ui/./src/app/pages/Kafka/AclPermissions.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaRoutes.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaMainView.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaTopicsFromAdmin.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchTopicsMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/ConnectedMetrics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaInstanceMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchMetricsKpi.ts","webpack://application-services-ui/./src/app/pages/Kafka/kafka-instance.ts","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactVersion.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/Artifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactsRedirect.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/DownloadArtifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/RulesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/SrsLayout.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistrySchemaMapping.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/providers/config/ServiceConstants.ts","webpack://application-services-ui/./src/app/providers/config/ServiceConstantsContextProvider.tsx","webpack://application-services-ui/./src/app/providers/featureflags/FeatureFlags.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/Routing.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/utils/keycloak/keycloakUtils.ts"],"sourcesContent":["import {\n  FunctionComponent,\n  lazy,\n  useCallback,\n  VoidFunctionComponent,\n  Suspense,\n} from \"react\";\nimport {\n  Redirect,\n  Route,\n  RouteComponentProps,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport getBaseName from \"./utils/getBaseName\";\nimport {\n  DevelopmentPreview,\n  AppServicesPageNotFound,\n  AppServicesEmptyState,\n  AppServicesEmptyStateVariant,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  AppRouteConfig,\n  flattenedRoutes,\n  IAppRoute,\n  PageNotFoundRoute,\n} from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport { KafkaMainView } from \"@app/pages/Kafka\";\nimport { BasenameContext } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@patternfly/react-core\";\n\nconst QuickStartLoaderFederated = lazy(\n  () => import(\"@app/pages/Resources/QuickStartLoaderFederated\")\n);\n\nconst APIManagementPage = lazy(\n  () => import(\"@app/pages/APIManagement/APIManagementPage\")\n);\nconst ArtifactRedirect = lazy(\n  () => import(\"@app/pages/ServiceRegistry/ArtifactsRedirect\")\n);\nconst Artifacts = lazy(() => import(\"@app/pages/ServiceRegistry/Artifacts\"));\nconst ArtifactVersionDetails = lazy(\n  () => import(\"@app/pages/ServiceRegistry/ArtifactVersion\")\n);\nconst DataSciencePage = lazy(\n  () => import(\"@app/pages/DataScience/DataSciencePage\")\n);\nconst KafkaOverviewPage = lazy(\n  () => import(\"@app/pages/KafkaOverview/KafkaOverviewPage\")\n);\n\nconst KasPage = lazy(() => import(\"@app/pages/Kas/KasPage\"));\nconst OverviewPage = lazy(() => import(\"@app/pages/Overview/OverviewPage\"));\nconst ResourcesPage = lazy(() => import(\"@app/pages/Resources/ResourcesPage\"));\nconst RulesPage = lazy(() => import(\"@app/pages/ServiceRegistry/RulesPage\"));\nconst RolesPage = lazy(() => import(\"@app/pages/ServiceRegistry/RolesPage\"));\nconst SettingsPage = lazy(\n  () => import(\"@app/pages/ServiceRegistry/SettingsPage\")\n);\nconst ServiceAccountsPage = lazy(\n  () => import(\"@app/pages/ServiceAccounts/ServiceAccountsPage\")\n);\nconst CosPage = lazy(() => import(\"@app/pages/CosPage/CosPage\"));\nconst ServiceRegistryPage = lazy(\n  () => import(\"@app/pages/ServiceRegistry/ServiceRegistryPage\")\n);\n\nconst RedirectToOverview: FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: FunctionComponent = () => (\n  <Redirect to=\"/streams/kafkas\" />\n);\nconst RedirectToServiceAccounts: FunctionComponent = () => (\n  <Redirect to=\"/service-accounts\" />\n);\nconst RedirectToResources: FunctionComponent = () => (\n  <Redirect to=\"/learning-resources\" />\n);\n\nconst appRoutes: AppRouteConfig<unknown>[] = [\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: \"Overview\",\n    path: \"/\",\n    title: \"Overview | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: \"Overview\",\n    path: \"/overview\",\n    title: \"Overview | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: \"API Management\",\n    path: \"/api-management\",\n    title: \"API Management | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: \"Data Science\",\n    path: \"/data-science\",\n    title: \"Data Science | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: \"Learning Resources | Red Hat OpenShift Application Services\",\n    path: \"/learning-resources\",\n    title: \"Learning Resources | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n  /**\n   * STREAMS SECTION\n   */\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: KafkaOverviewPage,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/overview\",\n    title:\n      \"Overview | Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/kafkas\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n    basename: \"/streams/kafkas\",\n    devPreview: false,\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: RedirectToServiceAccounts,\n    exact: true,\n    label: \"Service Accounts\",\n    path: \"/streams/service-accounts\",\n    title: \"Service Accounts | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n  {\n    // Handle the redirect for the old url application-services/streams/resources to application-services/learning-resources\n    component: RedirectToResources,\n    label: \"QuickStarts for Red Hat OpenShift Application Services\",\n    path: \"/streams/resources\",\n    title: \"QuickStarts for Red Hat OpenShift Application Services\",\n    devPreview: true,\n  },\n  // this needs to be the last route for the streams section since it's the catch-all one\n  {\n    component: KafkaMainView,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/kafkas/:id\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n    basename: \"/streams/kafkas/:id\",\n    devPreview: false,\n  },\n  /**\n   * END OF STREAMS SECTION\n   */\n\n  /**\n   * SERVICE REGISTRY SECTION\n   */\n  {\n    component: Artifacts,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/artifacts\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/rules\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: RolesPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/roles\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: SettingsPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/settings\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/artifacts/:groupId/:artifactId\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  /**\n   * END OF SERVICE REGISTRY SECTION\n   */\n\n  {\n    component: CosPage,\n    exact: false,\n    label: \"COS\",\n    path: \"/connectors\",\n    title: \"Connectors | Red Hat OpenShift Application Services\",\n    basename: `${getBaseName(window.location.pathname)}/connectors`,\n    devPreview: true,\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: \"Service Accounts\",\n    path: \"/service-accounts\",\n    title: \"Service Accounts | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n\n  // old url handling\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/openshift-streams\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n];\n\nconst WrappedRoute: FunctionComponent<IAppRoute<unknown>> = ({\n  component: Component,\n  title,\n  basename,\n  devPreview,\n  ...rest\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  useDocumentTitle(title);\n  const getBasename = useCallback(() => {\n    return basename || \"\";\n  }, [basename]);\n  const onClickButton = useCallback(() => history.push(\"/\"), [history]);\n\n  const wrapRoute = useCallback(\n    (routeProps: RouteComponentProps) => {\n      return (\n        <ErrorBoundary\n          fallbackRender={({ error }) =>\n            error.message === \"404\" ? (\n              <AppServicesPageNotFound />\n            ) : (\n              <AppServicesEmptyState\n                emptyStateProps={{\n                  variant: AppServicesEmptyStateVariant.UnexpectedError,\n                }}\n                emptyStateIconProps={{\n                  className: \"icon-color\",\n                }}\n                titleProps={{\n                  title: t(\"common:something_went_wrong\"),\n                }}\n                emptyStateBodyProps={{\n                  body: t(\"common:unexpected_error\"),\n                }}\n              >\n                <Button onClick={onClickButton}>\n                  {t(\"common:return_to_home_page\")}\n                </Button>\n              </AppServicesEmptyState>\n            )\n          }\n        >\n          <DevelopmentPreview show={devPreview}>\n            <BasenameContext.Provider value={{ getBasename }}>\n              <Component {...rest} {...routeProps} />\n            </BasenameContext.Provider>\n          </DevelopmentPreview>\n        </ErrorBoundary>\n      );\n    },\n    [Component, devPreview, getBasename, onClickButton, rest, t]\n  );\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst AppRoutes: VoidFunctionComponent = () => {\n  return (\n    <>\n      <Suspense fallback={<AppServicesLoading />}>\n        <Switch>\n          {flattenedRoutes(appRoutes).map(\n            ({ path, exact, component, title, isAsync, ...rest }, idx) => (\n              <WrappedRoute\n                path={path}\n                exact={exact}\n                component={component}\n                key={idx}\n                title={title}\n                isAsync={isAsync}\n                {...rest}\n              />\n            )\n          )}\n          <PageNotFoundRoute title=\"404 Page Not Found\" />\n        </Switch>\n      </Suspense>\n      <QuickStartLoaderFederated />\n    </>\n  );\n};\n\nexport { AppRoutes, appRoutes };\n","import { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { NotificationsPortal } from \"@redhat-cloud-services/frontend-components-notifications\";\nimport { AppRoutes } from \"@app/AppRoutes\";\nimport { FederatedModuleProvider } from \"@app/components\";\nimport { useInsights } from \"@app/hooks\";\nimport { Page } from \"@patternfly/react-core\";\nimport \"./App.css\";\n\nexport const App: FunctionComponent = () => {\n  const insights = useInsights();\n  const history = useHistory();\n\n  const getAppId = useCallback(() => {\n    const defaultAppId = \"overview\";\n\n    const parts = history.location.pathname.split(\"/\");\n    if (parts.length > 1) {\n      if (parts[1] === \"\") {\n        return defaultAppId;\n      } else {\n        if (parts[1] === \"openshift-streams\") {\n          return \"streams\";\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  }, [history]);\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on(\"APP_NAVIGATION\", (event) => {\n      const streamUrls = [\"kafkas\", \"service-accounts\", \"resources\"];\n      history.push(\n        `/${streamUrls.includes(event.navId) ? \"streams/\" : \"\"}${event.navId}`\n      );\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal />\n      <Page>\n        <AppRoutes />\n      </Page>\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","import {\n  ComponentType,\n  FunctionComponent,\n  lazy,\n  LazyExoticComponent,\n  ReactNode,\n  useEffect,\n  useRef,\n  useState,\n  VoidFunctionComponent,\n  Suspense,\n} from \"react\";\nimport { AssetsContext } from \"@rhoas/app-services-ui-shared\";\nimport { ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\nimport { useFederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\ntype Container = {\n  init: (shareScopes: unknown) => Promise<void>;\n  get: (module: string) => Promise<{ (): { default: ComponentType<unknown> } }>;\n};\n\nfunction loadComponent(scope: string, module: string) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__(\"default\");\n    const container = (window as any)[scope] as unknown as Container; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await container.get(module);\n    const Module = factory();\n    console.debug(`loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = (url: string) => {\n  const isMounted = useIsMounted();\n  const [ready, setReady] = useState(false);\n  const [failed, setFailed] = useState(false);\n\n  useEffect(() => {\n    let element: HTMLScriptElement;\n    if (isMounted.current) {\n      if (!url) {\n        setFailed(true);\n        return;\n      }\n\n      element = document.createElement(\"script\");\n\n      element.src = url;\n      element.type = \"text/javascript\";\n      element.async = true;\n\n      setReady(false);\n      setFailed(false);\n\n      element.onload = () => {\n        console.log(`Dynamic federated module Loaded: ${url}`);\n        setReady(true);\n      };\n\n      element.onerror = () => {\n        console.error(`Dynamic federated module Error: ${url}`);\n        setReady(false);\n        setFailed(true);\n      };\n\n      document.head.appendChild(element);\n    }\n\n    return () => {\n      if (element) {\n        console.log(`Dynamic federated module Removed: ${url}`);\n        document.head.removeChild(element);\n      }\n    };\n  }, [isMounted, url]);\n\n  return {\n    ready,\n    failed,\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: LazyExoticComponent<ComponentType<any>>) => ReactNode;\n  fallback?: ReactNode;\n};\n\nexport const FederatedModule: VoidFunctionComponent<FederatedModuleProps> = ({\n  scope,\n  module,\n  render,\n  fallback,\n}) => {\n  console.log(\"Dynamic federated module\", scope, module);\n  const isMounted = useIsMounted();\n\n  const { getModuleInfo, modules } = useFederatedModule();\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(\n        modules[scope].basePath,\n        scope,\n        modules[scope].fallbackBasePath\n      );\n      if (isMounted.current) {\n        setModuleInfo(moduleInfo);\n      }\n    };\n    fetchModuleInfo();\n  }, [scope, modules, getModuleInfo, isMounted]);\n\n  if (moduleInfo !== undefined) {\n    return (\n      <DynamicFederatedModule\n        scope={scope}\n        module={module}\n        render={render}\n        moduleInfo={moduleInfo}\n      />\n    );\n  }\n  if (fallback !== undefined) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n\ntype DynamicFederatedModuleProps = FederatedModuleProps & {\n  moduleInfo: ModuleInfo;\n};\n\nconst DynamicFederatedModule: FunctionComponent<\n  DynamicFederatedModuleProps\n> = ({ moduleInfo, fallback, scope, render, module }) => {\n  const { ready, failed } = useDynamicScript(moduleInfo.entryPoint);\n\n  if (ready && !failed) {\n    const Component = lazy(loadComponent(scope, module));\n\n    const getPath = () => {\n      return moduleInfo.basePath;\n    };\n\n    return (\n      <AssetsContext.Provider value={{ getPath }}>\n        <Suspense fallback={<AppServicesLoading />}>\n          {render(Component)}\n        </Suspense>\n      </AssetsContext.Provider>\n    );\n  }\n\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport {\n  Configuration,\n  KafkaRequest,\n  SecurityApi,\n} from \"@rhoas/kafka-management-sdk\";\nimport {\n  Principal,\n  PrincipalsContext,\n  PrincipalType,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { PrincipalApi } from \"@redhat-cloud-services/rbac-client\";\n\nexport type PrincipalsProviderProps = {\n  kafkaInstance?: KafkaRequest;\n};\n\nexport const usePrincipal = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [serviceAccountPrincipals, setServiceAccountPrincipals] = useState<\n    Principal[] | undefined\n  >();\n  const [userAcountPrincipals, setUserAccountPrincipals] = useState<\n    Principal[] | undefined\n  >();\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      if (\n        config !== undefined &&\n        auth !== undefined &&\n        config.rbac.basePath !== undefined\n      ) {\n        const accessToken = await auth.kas.getToken();\n        const principalApi = new PrincipalApi({\n          accessToken,\n          basePath: config?.rbac.basePath,\n        });\n\n        try {\n          const userAccounts = await principalApi\n            .listPrincipals(-1)\n            .then((response) =>\n              response.data.data.map((p) => {\n                return {\n                  id: p.username,\n                  principalType: PrincipalType.UserAccount,\n                  displayName: `${p.first_name} ${p.last_name}`,\n                  emailAddress: p.email,\n                } as Principal;\n              })\n            );\n          setUserAccountPrincipals(userAccounts);\n        } catch (e) {\n          // temp fix - this API is only available to org admins\n          // needs a proper approach longer term\n        }\n      }\n    };\n    fetchUserAccounts();\n  }, [auth, config]);\n\n  useEffect(() => {\n    const fetchServiceAccounts = async () => {\n      if (\n        config !== undefined &&\n        auth !== undefined &&\n        config.rbac.basePath !== undefined\n      ) {\n        const accessToken = await auth.kas.getToken();\n        const securityApi = new SecurityApi({\n          accessToken,\n          basePath: config.kas.apiBasePath,\n        } as Configuration);\n        const serviceAccounts = await securityApi\n          .getServiceAccounts()\n          .then((response) =>\n            response.data.items.map((sa) => {\n              return {\n                id: sa.client_id,\n                displayName: sa.name,\n                principalType: PrincipalType.ServiceAccount,\n              } as Principal;\n            })\n          );\n\n        setServiceAccountPrincipals(serviceAccounts);\n      }\n    };\n    fetchServiceAccounts();\n  }, [auth, config]);\n\n  const getAllPrincipals = useCallback(() => {\n    let answer: Principal[] = [];\n    if (\n      userAcountPrincipals !== undefined &&\n      serviceAccountPrincipals !== undefined\n    ) {\n      answer = answer.concat(userAcountPrincipals);\n    }\n    if (serviceAccountPrincipals !== undefined) {\n      answer = answer.concat(serviceAccountPrincipals);\n    }\n    return answer;\n  }, [serviceAccountPrincipals, userAcountPrincipals]);\n\n  const getAllUserAccounts = useCallback(\n    () => userAcountPrincipals || [],\n    [userAcountPrincipals]\n  );\n  const getAllServiceAccounts = useCallback(\n    () => serviceAccountPrincipals || [],\n    [serviceAccountPrincipals]\n  );\n\n  return {\n    getAllPrincipals,\n    getAllUserAccounts,\n    getAllServiceAccounts,\n  };\n};\n\nexport const PrincipalsProvider: FunctionComponent<PrincipalsProviderProps> = ({\n  children,\n}) => {\n  const value = usePrincipal();\n  return (\n    <PrincipalsContext.Provider value={value}>\n      {children}\n    </PrincipalsContext.Provider>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useMASToken } from \"@app/hooks\";\n\nexport function useKafkaInstanceDrawer() {\n  const history = useHistory();\n\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [drawerActiveTab, setDrawerActiveTab] = useState<string | undefined>(\n    undefined\n  );\n\n  const openDrawer = useCallback((tab: string | undefined) => {\n    if (tab) {\n      setDrawerActiveTab(tab);\n    }\n    setIsDrawerOpen(true);\n  }, []);\n\n  const closeDrawer = useCallback(() => {\n    setDrawerActiveTab(undefined);\n    setIsDrawerOpen(false);\n  }, []);\n\n  const { getTokenEndPointUrl } = useMASToken();\n\n  const onDeleteInstance = () => {\n    history.push(\"/streams/kafkas\");\n  };\n\n  return {\n    isDrawerOpen,\n    drawerActiveTab,\n    setDrawerActiveTab,\n    openDrawer,\n    closeDrawer,\n    tokenEndPointUrl: getTokenEndPointUrl(),\n    onDeleteInstance,\n  };\n}\n","export type ModuleInfo = {\n  entryPoint: string;\n  basePath: string;\n};\n\nexport type FetchModuleInfoFunction = {\n  (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<\n    ModuleInfo | undefined\n  >;\n};\n\nexport const fetchModuleInfo: FetchModuleInfoFunction = async (\n  baseUrl,\n  scope,\n  fallbackBasePath\n) => {\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[];\n      modules: string[];\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}?ts=${Date.now()}`;\n    const response = await fetch(url);\n    return await response\n      .json()\n      .then((json) => json as FedMods)\n      .then((fedMods) => fedMods[scope])\n      .then((s) => s.entry[0])\n      .then((path) => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath,\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath,\n        };\n      });\n  };\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath);\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n};\n","import { createContext, FunctionComponent, useContext, useRef } from \"react\";\nimport {\n  FederatedModuleConfig,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport {\n  fetchModuleInfo,\n  FetchModuleInfoFunction,\n  ModuleInfo,\n} from \"@app/components/FederatedModule/moduleInfo\";\n\nexport type FederatedModuleContextProps = {\n  modules: {\n    [module: string]: FederatedModuleConfig;\n  };\n  getModuleInfo: FetchModuleInfoFunction;\n};\n\nexport const FederatedModuleContext = createContext<\n  FederatedModuleContextProps | undefined\n>(undefined);\n\nexport const FederatedModuleProvider: FunctionComponent = ({ children }) => {\n  type ModuleInfoCache = {\n    [key: string]: ModuleInfo;\n  };\n\n  const moduleInfoCache = useRef<ModuleInfoCache>({} as ModuleInfoCache);\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const getModuleInfo: FetchModuleInfoFunction = async (\n    baseUrl,\n    scope,\n    fallbackBasePath\n  ) => {\n    if (moduleInfoCache.current[scope] !== undefined) {\n      return moduleInfoCache.current[scope];\n    }\n    const answer = await fetchModuleInfo(baseUrl, scope, fallbackBasePath);\n    if (answer !== undefined) {\n      moduleInfoCache.current[scope] = answer;\n    }\n    return answer;\n  };\n\n  return (\n    <FederatedModuleContext.Provider\n      value={{\n        modules: config.federatedModules,\n        getModuleInfo,\n      }}\n    >\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n};\n\nexport const useFederatedModule = (): FederatedModuleContextProps => {\n  const answer = useContext(FederatedModuleContext);\n  if (answer === undefined) {\n    throw new Error(\"must be used inside FederatedModuleContext provider\");\n  }\n  return answer;\n};\n","import { FC } from \"react\";\nimport { FederatedModule } from \"@app/components\";\n\nexport const KasModalLoader: FC = ({ children }) => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./KasModalLoader\"\n      fallback={null}\n      render={(KasModalLoaderFederated) => {\n        return <KasModalLoaderFederated>{children}</KasModalLoaderFederated>;\n      }}\n    />\n  );\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport {\n  useAuth,\n  useConfig,\n  Quota,\n  QuotaValue,\n  QuotaType,\n  ProductType,\n} from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\n\nexport const useQuota = (productId: ProductType) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const constants = useConstants();\n\n  const [orgId, setOrgId] = useState<string>();\n\n  useEffect(() => {\n    const getCurrentAccount = async () => {\n      if (!orgId) {\n        const accessToken = await auth?.ams.getToken();\n        const ams = new AppServicesApi({\n          accessToken,\n          basePath: config?.ams.apiBasePath || \"\",\n        } as Configuration);\n\n        await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n          const orgID = account?.data?.organization?.id;\n          setOrgId(orgID);\n        });\n      }\n    };\n\n    getCurrentAccount();\n  }, [config, auth, orgId]);\n\n  const getQuotaTypesByProductId = useCallback(() => {\n    const kasQuotaProductId = constants.kafka.ams.quotaProductId;\n    const kasTrialQuotaProductId = constants.kafka.ams.trialQuotaProductId;\n    const kasResourceName = constants.kafka.ams.resourceName;\n\n    const srsQuotaProductId = constants.serviceRegistry.ams.quotaProductId;\n    const srsTrialQuotaProductId =\n      constants.serviceRegistry.ams.trialQuotaProductId;\n    const srsResourceName = constants.serviceRegistry.ams.resourceName;\n\n    if (productId === ProductType.kas) {\n      return {\n        quotaProductId: kasQuotaProductId,\n        trialQuotaProductId: kasTrialQuotaProductId,\n        resourceName: kasResourceName,\n        quotaKey: QuotaType.kas,\n        trialQuotaKey: QuotaType.kasTrial,\n      };\n    } else if (productId === ProductType.srs) {\n      return {\n        quotaProductId: srsQuotaProductId,\n        trialQuotaProductId: srsTrialQuotaProductId,\n        resourceName: srsResourceName,\n        quotaKey: QuotaType.srs,\n        trialQuotaKey: QuotaType.srsTrial,\n      };\n    }\n    throw new Error(\n      `getQuotaTypesByProductId error, unrecognized productId ${productId}`\n    );\n  }, [constants, productId]);\n\n  const getQuota = useCallback(async () => {\n    const quotaData = new Map<QuotaType, QuotaValue>();\n    const filteredQuota: Quota = {\n      loading: true,\n      isServiceDown: false,\n      data: undefined,\n    };\n\n    if (orgId) {\n      const {\n        quotaProductId,\n        trialQuotaProductId,\n        resourceName,\n        quotaKey,\n        trialQuotaKey,\n      } = getQuotaTypesByProductId() || {};\n\n      const accessToken = await auth?.ams.getToken();\n      const ams = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || \"\",\n      } as Configuration);\n\n      try {\n        const response =\n          await ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n            orgId,\n            undefined,\n            true\n          );\n\n        const quota = response?.data?.items?.find((q) =>\n          q.related_resources?.find(\n            (r) =>\n              r.resource_name === resourceName && r.product === quotaProductId\n          )\n        );\n        const trialQuota = response?.data?.items?.find((q) =>\n          q.related_resources?.find(\n            (r) =>\n              r.resource_name === resourceName &&\n              r.product === trialQuotaProductId\n          )\n        );\n\n        if (quota && quota.allowed > 0) {\n          const remaining = quota?.allowed - quota?.consumed;\n          quotaData?.set(quotaKey, {\n            allowed: quota?.allowed,\n            consumed: quota?.consumed,\n            remaining: remaining < 0 ? 0 : remaining,\n          });\n        }\n\n        if (trialQuota) {\n          quotaData?.set(trialQuotaKey, {\n            allowed: trialQuota?.allowed,\n            consumed: trialQuota?.consumed,\n            remaining: trialQuota?.allowed - trialQuota?.consumed,\n          });\n        }\n\n        filteredQuota.loading = false;\n        filteredQuota.data = quotaData;\n      } catch (error) {\n        filteredQuota.loading = false;\n        filteredQuota.isServiceDown = true;\n        console.error(error);\n      }\n    }\n\n    return filteredQuota;\n  }, [auth, config, getQuotaTypesByProductId, orgId]);\n\n  return { orgId, getQuota };\n};\n","import { Reducer, useEffect, useReducer, useRef } from \"react\";\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<T>;\n  key: string;\n};\n\nexport const useFetch = <T>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef<{ [key: string]: T }>({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>(\n    (state, action: Action<T>) => {\n      switch (action.type) {\n        case Status.FETCHING:\n          return { ...state, status: Status.FETCHING };\n        case Status.FETCHED:\n          return { ...state, status: Status.FETCHED, data: action.payload };\n        case Status.FETCH_ERROR:\n          return { ...state, status: Status.FETCH_ERROR, error: action.error };\n        default:\n          return state;\n      }\n    },\n    initialState\n  );\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response });\n        } catch (error) {\n          if (cancelRequest) return;\n          if (error instanceof Error) {\n            dispatch({ type: Status.FETCH_ERROR, error });\n          } else if (typeof error === \"string\") {\n            dispatch({\n              type: Status.FETCH_ERROR,\n              error: new Error(error),\n            });\n          } else {\n            dispatch({\n              type: Status.FETCH_ERROR,\n              error: new Error(\"unknown error\"),\n            });\n          }\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, [fetch, key]);\n\n  return state;\n};\n","import {\n  Auth,\n  Config,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport {\n  Configuration,\n  AppServicesApi,\n  TermsReviewResponse,\n} from \"@rhoas/account-management-sdk\";\nimport { ServiceProps, useFetch } from \"@app/services/fetch\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\n\nexport type ITermsConfig = {\n  eventCode: string;\n  siteCode: string;\n};\n\nexport const useTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const fetchProps = useMemo(\n    () => fetchTermsReviewFactory(config, auth, termsConfig),\n    [auth, config, termsConfig]\n  );\n\n  return useFetch(fetchProps);\n};\n\nexport const useAsyncTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = useCallback(async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth, termsConfig)\n      .fetch()\n      .then((r) => r);\n    ref.current = answer;\n    return answer;\n  }, [auth, config, termsConfig]);\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth, load]);\n  return load;\n};\n\nconst fetchTermsReviewFactory = (\n  config: Config,\n  auth: Auth,\n  termsConfig: ITermsConfig\n): ServiceProps<TermsReviewResponse> => {\n  return {\n    key: \"selfTermsReview\",\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || \"\",\n      } as Configuration);\n      const response = await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: termsConfig.eventCode,\n        site_code: termsConfig.siteCode,\n      });\n      return response.data;\n    },\n  };\n};\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (\n  baseURL: string,\n  redirectURL: string,\n  cancelURL: string\n) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params: { [key: string]: string }) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join(\"&\");\n","import { useLocation } from \"react-router-dom\";\nimport { parse as parseQueryString, stringifyUrl } from \"query-string\";\nimport { useAsyncTermsReview, ITermsConfig } from \"@app/services/termsReview\";\nimport { getTermsAppURL } from \"@app/utils/termsApp\";\n\nexport const useModalControl = (termsConfig: ITermsConfig) => {\n  const loadTermsReview = useAsyncTermsReview(termsConfig);\n  const location = useLocation();\n\n  const shouldOpenCreateModal = async () => {\n    const parsed = parseQueryString(location.search);\n    const c = parsed[\"create\"] === \"true\";\n    if (c) {\n      const termsReview = await loadTermsReview();\n      if (!termsReview.terms_required) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const preCreateInstance = async (open: boolean) => {\n    const termsReview = await loadTermsReview();\n    if (termsReview.terms_available || termsReview.terms_required) {\n      if (termsReview.redirect_url === undefined) {\n        throw new Error(\"terms must be signed but there is no terms url\");\n      }\n      const redirectURL = stringifyUrl({\n        url: window.location.href,\n        query: { create: \"true\" },\n      });\n      const url = getTermsAppURL(\n        termsReview.redirect_url,\n        redirectURL,\n        window.location.href\n      );\n      window.location.href = url;\n      return false;\n    }\n    return open;\n  };\n\n  return { shouldOpenCreateModal, preCreateInstance };\n};\n","import { InsightsType } from \"@app/utils\";\n\nexport const useInsights = () => {\n  const insights = (window as any)[\"insights\"] as InsightsType;\n  if (insights === undefined) {\n    throw new Error(\"must be used inside an initialized insights context\");\n  }\n  return insights;\n};\n","import { KeycloakConfig, KeycloakInstance } from \"keycloak-js\";\nimport { Auth, Config, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { getAccessToken, initKeycloak } from \"@app/utils\";\nimport { useCallback, useEffect, useRef } from \"react\";\nimport { useInsights } from \"@app/hooks/insights\";\n\nconst init = async (\n  config: Config,\n  getInsightsAccessToken: () => Promise<string>\n) => {\n  const keycloakConfig = {\n    url: config.masSso.authServerUrl,\n    clientId: config.masSso.clientId,\n    realm: config.masSso.realm,\n  } as KeycloakConfig;\n  return await initKeycloak(keycloakConfig, getInsightsAccessToken);\n};\n\nexport const useAuth = (): Auth => {\n  const keycloakInstance = useRef<KeycloakInstance>();\n  const config = useConfig();\n  const insights = useInsights();\n\n  if (config === undefined || insights.chrome.auth === undefined) {\n    throw new Error(\n      \"useAuth must be used inside a config provider, and insights auth\"\n    );\n  }\n\n  const insightsChromeAuth = insights.chrome.auth;\n\n  const getKeycloakInstance = useCallback(async () => {\n    const instance = keycloakInstance.current;\n    if (instance === undefined) {\n      const answer = await init(config, insightsChromeAuth.getToken);\n      keycloakInstance.current = answer;\n      return answer;\n    }\n    return instance;\n  }, [config, insightsChromeAuth]);\n\n  useEffect(() => {\n    // Start loading keycloak immediately\n    getKeycloakInstance();\n  }, [config, getKeycloakInstance, insightsChromeAuth]);\n\n  const getMASSSOToken = async () => {\n    const keycloakInstance = await getKeycloakInstance();\n    return getAccessToken(keycloakInstance, insightsChromeAuth.getToken);\n  };\n\n  const getUsername = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.username;\n  };\n\n  const isOrgAdmin = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.is_org_admin;\n  };\n\n  const getToken = insightsChromeAuth.getToken;\n\n  return {\n    getUsername,\n    isOrgAdmin,\n    kafka: {\n      getToken: getMASSSOToken,\n    },\n    kas: {\n      getToken,\n    },\n    ams: {\n      getToken,\n    },\n    srs: {\n      getToken,\n    },\n    apicurio_registry: {\n      getToken: getMASSSOToken,\n    },\n    smart_events: {\n      getToken,\n    },\n  };\n};\n","import {} from \"react\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { buildTokenEndPointUrl } from \"@app/utils\";\n\nexport const useMASToken = () => {\n  const config = useConfig();\n  const getTokenEndPointUrl = () => {\n    if (config) {\n      return buildTokenEndPointUrl(\n        config.masSso.authServerUrl,\n        config.masSso.realm\n      );\n    }\n    return undefined;\n  };\n\n  return { getTokenEndPointUrl };\n};\n","import { APIManagementPage } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const APIManagementOverviewPage: FunctionComponent = () => {\n  return <APIManagementPage />;\n};\n\nexport default APIManagementOverviewPage;\n","import { FederatedModule } from \"@app/components\";\nimport { ServiceDownPage } from \"@app/pages/ServiceDown/ServiceDownPage\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const CosPage: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"cos\"\n      fallback={<AppServicesLoading />}\n      module=\"./OpenshiftManagedConnectors\"\n      render={(OpenshiftManagedConnectors) => <OpenshiftManagedConnectors />}\n    />\n  );\n};\n\nexport default CosPage;\n","import { DataSciencePage } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const DataScienceOverViewPage: FunctionComponent = () => {\n  return <DataSciencePage />;\n};\n\nexport default DataScienceOverViewPage;\n","import { FederatedModule } from \"@app/components\";\nimport { KafkaRequestWithSize } from \"@app/pages/Kafka/kafka-instance\";\nimport { FunctionComponent } from \"react\";\n\nexport type KafkaFederatedComponentProps = UnderlyingProps & {\n  module: string;\n};\n\nexport type UnderlyingProps = {\n  activeTab?: number;\n  getToken?: () => Promise<string> | undefined;\n  apiBasePath?: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  showMetrics?: JSX.Element;\n  showSchemas?: JSX.Element;\n  kafka?: Required<KafkaRequestWithSize>;\n  redirectAfterDeleteInstance?: () => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n};\n\n// Provides properties for component path and it's underlying properties\nexport const KafkaFederatedComponent: FunctionComponent<\n  KafkaFederatedComponentProps\n> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => <FederatedKafka {...rest} />}\n    />\n  );\n};\n","import { FunctionComponent } from \"react\";\nimport {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const Topics: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./Topics\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const TopicDetails: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./TopicDetails\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const CreateTopic: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./CreateTopic\" {...props} />\n);\n","import { FunctionComponent } from \"react\";\nimport {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const UpdateTopic: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./UpdateTopic\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const Dashboard: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./Dashboard\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const ConsumerGroups: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./ConsumerGroups\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const AclPermissions: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./AclPermissions\" {...props} />\n);\n","import {\n  ComponentType,\n  FunctionComponent,\n  ReactElement,\n  useCallback,\n  VoidFunctionComponent,\n} from \"react\";\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport {\n  AppRouteConfig,\n  flattenedRoutes,\n  IAppRoute,\n  PageNotFoundRoute,\n} from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport {\n  CreateTopic,\n  TopicDetails,\n  Topics,\n  UpdateTopic,\n  Dashboard,\n  ConsumerGroups,\n  AclPermissions,\n} from \"@app/pages\";\nimport { UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { BasenameContext } from \"@rhoas/app-services-ui-shared\";\nimport { useKafkaInstanceDrawer } from \"@app/components\";\n\nconst kafkaRoutes: AppRouteConfig<UnderlyingProps>[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topics\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topics/:topicName\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topic/create\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topic/update/:topicName\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/dashboard\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: ConsumerGroups,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/consumer-groups\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: AclPermissions,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/acls\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n];\nconst flatRoutes = flattenedRoutes(kafkaRoutes);\n\ntype WrappedRouteProps = IAppRoute<UnderlyingProps> & {\n  underlyingProps: UnderlyingProps;\n  url: string;\n  InstanceDrawer: ComponentType;\n};\n\n/**\n * The wrapped route allows us to apply the basename, document title and accessible route change for all components\n * without having to add these to each component. They must happen inside the route.\n */\nconst WrappedRoute: FunctionComponent<WrappedRouteProps> = ({\n  component: Component,\n  InstanceDrawer,\n  isAsync = false,\n  title,\n  underlyingProps,\n  url,\n  ...rest\n}) => {\n  useDocumentTitle(title);\n\n  const getBasename = () => {\n    return url;\n  };\n\n  return (\n    <Route\n      render={(routeProps) => {\n        return (\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...underlyingProps} {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        );\n      }}\n      {...rest}\n    />\n  );\n};\n\nconst KafkaRoutes: VoidFunctionComponent<\n  UnderlyingProps & { InstanceDrawer: ComponentType<any> }\n> = ({ InstanceDrawer, ...props }): ReactElement => {\n  const routeMatch = useRouteMatch();\n  const { kafka } = props;\n\n  const drawerProps = useKafkaInstanceDrawer();\n  const handleInstanceDrawer: (isOpen: boolean, activeTab?: string) => void =\n    useCallback(\n      (isOpen, activeTab) => {\n        if (isOpen) {\n          drawerProps.openDrawer(activeTab);\n        } else {\n          drawerProps.closeDrawer();\n        }\n      },\n      [drawerProps]\n    );\n\n  return (\n    <InstanceDrawer\n      data-ouia-app-id=\"dataPlane-streams\"\n      drawerInstance={kafka}\n      setDrawerInstance={() => false} // can't change the instance from the data plane\n      {...drawerProps}\n    >\n      <Switch>\n        {flatRoutes.map(\n          ({ path, exact, component, title, isAsync, ...rest }, idx) => {\n            const routePath = `${routeMatch.path}${path}`;\n            console.log(`Creating route for ${routePath}`);\n            return (\n              <WrappedRoute\n                path={routePath}\n                exact={exact}\n                component={component}\n                key={idx}\n                title={title}\n                isAsync={isAsync}\n                underlyingProps={{\n                  ...props,\n                  handleInstanceDrawer,\n                }}\n                url={routeMatch.url}\n                InstanceDrawer={InstanceDrawer}\n                {...rest}\n              />\n            );\n          }\n        )}\n        <PageNotFoundRoute title=\"404 Page Not Found\" />\n      </Switch>\n    </InstanceDrawer>\n  );\n};\n\nexport { KafkaRoutes, kafkaRoutes };\n","import { useCallback, useMemo, useState, VoidFunctionComponent } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  AccessDeniedPage,\n  ConnectedMetrics,\n  ServiceDownPage,\n} from \"@app/pages\";\nimport {\n  KafkaInstance,\n  useKafkaInstance,\n} from \"@app/pages/Kafka/kafka-instance\";\nimport { UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { PrincipalsProvider } from \"@app/components/PrincipalsProvider/PrincipalsProvider\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { ServiceRegistrySchemaMapping } from \"@app/pages/ServiceRegistry\";\nimport { KafkaRoutes } from \"./KafkaRoutes\";\nimport { FederatedModule } from \"@app/components\";\n\nexport const KafkaMainView: VoidFunctionComponent = () => {\n  const config = useConfig();\n  const { id: kafkaInstanceId } = useParams<{ id: string }>();\n  const kafka = useKafkaInstance(kafkaInstanceId);\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  if (kafka === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (kafka === false) {\n    throw new Error(\"404\");\n  }\n\n  return <KafkaMainViewConnected kafka={kafka} />;\n};\n\nexport const KafkaMainViewConnected: VoidFunctionComponent<{\n  kafka: KafkaInstance;\n}> = ({ kafka }) => {\n  return (\n    <PrincipalsProvider kafkaInstance={kafka.kafkaDetail}>\n      <ConnectedKafkaRoutes kafka={kafka} />\n    </PrincipalsProvider>\n  );\n};\n\nconst ConnectedKafkaRoutes: VoidFunctionComponent<{\n  kafka: KafkaInstance;\n}> = ({ kafka: { kafkaDetail, adminServerUrl } }) => {\n  const {\n    kafka: { getToken },\n  } = useAuth();\n  const history = useHistory();\n  const [error, setError] = useState<undefined | number>();\n\n  const onError = useCallback((code: number) => {\n    setError(code);\n  }, []);\n\n  const redirectAfterDeleteInstance = useCallback(() => {\n    history.push(\"/streams/kafkas\");\n  }, [history]);\n\n  const showMetrics = useMemo(\n    () => (\n      <ConnectedMetrics\n        kafkaId={kafkaDetail.id}\n        kafkaAdminUrl={adminServerUrl}\n        totalMaxConnections={kafkaDetail.size.total_max_connections || 0}\n        maxConnections={kafkaDetail.size.max_connection_attempts_per_sec || 0}\n        maxPartitions={kafkaDetail.size.max_partitions || 0}\n        kafkaStorageBytes={\n          parseInt(kafkaDetail.kafka_storage_size.replace(\"Gi\", \"\")) *\n          1073741824\n        }\n      />\n    ),\n    [adminServerUrl, kafkaDetail]\n  );\n  const showSchemas = useMemo(() => <ServiceRegistrySchemaMapping />, []);\n\n  const props = useMemo<Partial<UnderlyingProps>>(\n    () => ({\n      kafkaPageLink: \"/streams/kafkas\",\n      kafkaInstanceLink: `/streams/kafkas/${kafkaDetail.id}/topics`,\n      showMetrics,\n      onError,\n      kafkaName: kafkaDetail.name,\n      apiBasePath: adminServerUrl,\n      getToken: getToken,\n      showSchemas,\n      kafka: kafkaDetail,\n      redirectAfterDeleteInstance,\n    }),\n    [\n      adminServerUrl,\n      getToken,\n      kafkaDetail,\n      onError,\n      redirectAfterDeleteInstance,\n      showMetrics,\n      showSchemas,\n    ]\n  );\n\n  if (error === 401) {\n    return <AccessDeniedPage />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={null}\n      render={(InstanceDrawer) => (\n        <KafkaRoutes {...props} InstanceDrawer={InstanceDrawer} />\n      )}\n    />\n  );\n};\n","import { TopicsApi } from \"@rhoas/kafka-instance-sdk\";\nimport { Configuration } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters } from \"./types\";\n\nexport async function fetchKafkaTopisFromAdmin({\n  accessToken,\n  basePath,\n}: BasicApiConfigurationParameters): Promise<string[]> {\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  const response = await api.getTopics(\n    undefined,\n    100,\n    100,\n    undefined,\n    undefined,\n    undefined,\n    undefined\n  );\n  return (response.data.items || []).map((t) => t.name as string);\n}\n","import {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from \"./types\";\n\nexport type FetchTopicsMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchTopicMetrics({\n  accessToken,\n  basePath,\n  kafkaId,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(\n    kafkaId,\n    duration,\n    interval,\n    [\n      \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n      \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n      \"kafka_topic:kafka_log_log_size:sum\",\n      \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n    ]\n  );\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import { useCallback, useState, VoidFunctionComponent } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth, useBasename, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport {\n  AppServicesLoading,\n  Metrics,\n  MetricsProps,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  fetchKafkaInstanceMetrics,\n  fetchKafkaTopisFromAdmin,\n  fetchMetricsKpi,\n  fetchTopicMetrics,\n} from \"./api\";\n\ntype ConnectedMetricsProps = {\n  kafkaId: string;\n  kafkaAdminUrl: string;\n  totalMaxConnections: number;\n  maxConnections: number;\n  maxPartitions: number;\n  kafkaStorageBytes: number;\n};\n\nexport const ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  kafkaId,\n  kafkaAdminUrl,\n  totalMaxConnections,\n  maxConnections,\n  maxPartitions,\n  kafkaStorageBytes,\n}) => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n\n  const storageKey = `metrics-alert-${kafkaId}`;\n\n  const [isAlertClosed, setIsAlertClosed] = useState<boolean>(\n    localStorage.getItem(storageKey) !== null\n  );\n\n  const onAlertClose = () => {\n    setIsAlertClosed(true);\n    localStorage.setItem(storageKey, \"true\");\n  };\n\n  const onCreateTopic = () => {\n    history.push(`${basename}/topic/create`);\n  };\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async (props) => {\n        const kafkaResponse = await fetchKafkaInstanceMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        });\n\n        return {\n          ...kafkaResponse,\n          diskSpaceLimit: kafkaStorageBytes / 1073741824,\n          connectionsLimit: totalMaxConnections,\n          connectionRateLimit: maxConnections,\n        };\n      },\n      [\n        auth,\n        config,\n        kafkaId,\n        kafkaStorageBytes,\n        totalMaxConnections,\n        maxConnections,\n      ]\n    );\n\n  const getTopicMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async (props) => {\n      const [kafkaTopics, metrics] = await Promise.all([\n        fetchKafkaTopisFromAdmin({\n          accessToken: auth?.kafka.getToken(),\n          basePath: kafkaAdminUrl,\n        }),\n        fetchTopicMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        }),\n      ]);\n      const {\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      } = metrics;\n      return {\n        kafkaTopics,\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      };\n    },\n    [auth?.kafka, auth?.kas, config.kas.apiBasePath, kafkaAdminUrl, kafkaId]\n  );\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpiResponse = await fetchMetricsKpi({\n      kafkaId,\n      basePath: config.kas.apiBasePath,\n      accessToken: auth?.kas.getToken(),\n    });\n\n    return { ...kpiResponse, topicPartitionsLimit: maxPartitions };\n  }, [auth?.kas, config.kas.apiBasePath, kafkaId, maxPartitions]);\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <Metrics\n      onCreateTopic={onCreateTopic}\n      getTopicsMetrics={getTopicMetrics}\n      getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      getMetricsKpi={getMetricsKpi}\n      isClosed={isAlertClosed}\n      onClickClose={onAlertClose}\n    />\n  );\n};\n","import {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from \"./types\";\n\ntype FetchKafkaInstanceMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n} & BasicApiConfigurationParameters;\nexport async function fetchKafkaInstanceMetrics({\n  kafkaId,\n  duration,\n  interval,\n  accessToken,\n  basePath,\n}: FetchKafkaInstanceMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(\n    kafkaId,\n    duration,\n    interval,\n    [\n      \"kubelet_volume_stats_used_bytes\",\n      \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n      \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n    ]\n  );\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","import { GetMetricsKpiResponse } from \"@rhoas/app-services-ui-components\";\nimport {\n  Configuration,\n  DefaultApi,\n  InstantQuery,\n} from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, NoUndefinedField } from \"./types\";\n\nexport type FetchMetricsKpiProps = {\n  kafkaId: string;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchMetricsKpi({\n  accessToken,\n  basePath,\n  kafkaId,\n}: FetchMetricsKpiProps): Promise<\n  Omit<GetMetricsKpiResponse, \"kafkaTopics\" | \"topicPartitionsLimit\">\n> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await apisService.getMetricsByInstantQuery(kafkaId, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import { useEffect, useState, useCallback } from \"react\";\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\n\nconst DEFAULT_ADMIN_SERVER_URL_TEMPLATE = \"https://admin-server-{}\";\n\n/**\n * Join admin server url template with the kafka bootstrap host and return the kafka admin url.\n *\n * @param adminServerUrlTemplate The template that will be used to generate the full admin url from the kafka bootstrap_server_host.\n *                               The template must have a '{}' placeholder that will be substitute with the bootstrap_server_host.\n * @param kafkaRequest KafkaRequest\n * @returns The admin server full URL included the protocol and base path\n */\n\nexport const getAdminServerUrl = (\n  adminServerUrlTemplate: string,\n  kafkaRequest?: KafkaRequest\n): string => {\n  if (kafkaRequest === undefined) {\n    throw new Error(\"kafkaRequest cannot be undefined\");\n  }\n  return adminServerUrlTemplate.replace(\n    \"{}\",\n    kafkaRequest.bootstrap_server_host || \"\"\n  );\n};\n\nexport type KafkaInstance = {\n  kafkaDetail: Required<KafkaRequestWithSize>;\n  adminServerUrl: string;\n};\n\nexport type KafkaRequestWithSize = KafkaRequest & {\n  size: SupportedKafkaSize;\n};\n\nexport const useKafkaInstance = (\n  id: string | undefined\n): KafkaInstance | false | undefined => {\n  const {\n    kas: { apiBasePath },\n    kafka,\n  } = useConfig();\n  const {\n    kas: { getToken },\n  } = useAuth();\n  const [kafkaRequest, setKafkaRequest] = useState<\n    KafkaRequestWithSize | false | undefined\n  >();\n  const getKafkaSize = useGetAvailableSizes();\n\n  const fetchKafka = useCallback(\n    async (id: string) => {\n      setKafkaRequest(undefined);\n      const kasService = new DefaultApi({\n        accessToken: getToken,\n        basePath: apiBasePath,\n      } as Configuration);\n      try {\n        const kafka = await kasService.getKafkaById(id);\n\n        const { cloud_provider, region, instance_type, size_id } = kafka.data;\n        if (!cloud_provider || !region || !size_id || !instance_type) {\n          throw new Error(\n            `Kafka instance ${kafka.data.id} missing some required info: ${cloud_provider}, ${region}, ${instance_type}, ${size_id}`\n          );\n        }\n        const size = await getKafkaSize(\n          cloud_provider,\n          region,\n          size_id,\n          instance_type\n        );\n\n        setKafkaRequest({\n          ...kafka.data,\n          size,\n        });\n      } catch (e) {\n        setKafkaRequest(false);\n      }\n    },\n    [apiBasePath, getKafkaSize, getToken]\n  );\n\n  useEffect(() => {\n    if (id) {\n      fetchKafka(id);\n    } else {\n      setKafkaRequest(undefined);\n    }\n  }, [fetchKafka, id]);\n\n  return kafkaRequest\n    ? {\n        kafkaDetail: kafkaRequest as Required<KafkaRequestWithSize>,\n        adminServerUrl: getAdminServerUrl(\n          kafka?.adminServerUrlTemplate || DEFAULT_ADMIN_SERVER_URL_TEMPLATE,\n          kafkaRequest\n        ),\n      }\n    : kafkaRequest;\n};\n\n/**\n * Return list of the instance types available for the current user\n *\n * @returns {Promise<InstanceType[]>}\n */\n\nexport const useGetAvailableSizes = () => {\n  const {\n    kas: { getToken },\n  } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  return useCallback(\n    async (\n      provider: string,\n      region: string,\n      sizeId: string,\n      instanceType: string\n    ): Promise<SupportedKafkaSize> => {\n      try {\n        const api = new DefaultApi(\n          new Configuration({\n            accessToken: getToken(),\n            basePath,\n          })\n        );\n\n        const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n          provider,\n          region\n        );\n\n        if (!sizes?.data?.instance_types) {\n          throw new Error(\n            `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}, no instance_types returned`\n          );\n        }\n        const instanceTypesSizes = sizes?.data?.instance_types.find(\n          (i) => i.id === instanceType\n        )?.sizes;\n        const size = instanceTypesSizes?.find((s) => s.id === sizeId);\n\n        if (!size) {\n          throw new Error(\n            `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}, can't find a size matching ${sizeId}`\n          );\n        }\n\n        return size;\n      } catch (e: unknown) {\n        throw new Error(\n          `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}: ${e}`\n        );\n      }\n    },\n    [getToken, basePath]\n  );\n};\n","import { LazyExoticComponent, useState, VoidFunctionComponent } from \"react\";\nimport {\n  ProductType,\n  QuotaContext,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages/ServiceDown/ServiceDownPage\";\nimport {\n  FederatedModule,\n  usePrincipal,\n  useKafkaInstanceDrawer,\n} from \"@app/components\";\nimport { useModalControl, useQuota } from \"@app/hooks\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { ITermsConfig } from \"@app/services\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\nimport { useKafkaInstance } from \"@app/pages/Kafka/kafka-instance\";\n\nconst KasPage: VoidFunctionComponent = () => {\n  const { getQuota } = useQuota(ProductType?.kas);\n\n  return (\n    <QuotaContext.Provider value={{ getQuota }}>\n      <FederatedModule\n        scope=\"kas\"\n        module=\"./OpenshiftStreams\"\n        fallback={<AppServicesLoading />}\n        render={(component) => <KasPageConnected Component={component} />}\n      />\n    </QuotaContext.Provider>\n  );\n};\n\nconst KasPageConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const config = useConfig();\n  const constants = useConstants();\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.kafka.ams.termsAndConditionsEventCode,\n    siteCode: constants.kafka.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getAllUserAccounts } = usePrincipal();\n\n  const [drawerInstanceId, setDrawerInstanceId] = useState<string | undefined>(\n    undefined\n  );\n  const drawerInstance = useKafkaInstance(drawerInstanceId);\n  const drawerInstanceDetails = drawerInstance\n    ? drawerInstance.kafkaDetail\n    : undefined;\n\n  const drawerProps = useKafkaInstanceDrawer();\n\n  if (config.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <Component\n      preCreateInstance={preCreateInstance}\n      shouldOpenCreateModal={shouldOpenCreateModal}\n      drawerInstance={drawerInstanceDetails}\n      setDrawerInstance={setDrawerInstanceId}\n      {...drawerProps}\n      getAllUserAccounts={getAllUserAccounts}\n    />\n  );\n};\n\nexport default KasPage;\n","import { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from \"@patternfly/react-core\";\nimport { useHistory } from \"react-router-dom\";\nimport { FunctionComponent } from \"react\";\n\nconst NotFoundPage: FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push(\"/\");\n    }\n    return <Button onClick={handleClick}>Take me home</Button>;\n  }\n\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={ExclamationTriangleIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          404 Page not found\n        </Title>\n        <EmptyStateBody>\n          We didn&apos;t find a page that matches the address you navigated to.\n        </EmptyStateBody>\n        <GoHomeBtn />\n      </EmptyState>\n    </PageSection>\n  );\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n","import { OverviewPageV2 } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const ConnectedOverviewPage: FunctionComponent = () => {\n  const kafkaHref = \"/streams/kafkas\";\n  const serviceRegistryHref = \"/service-registry\";\n\n  const connectorHref = \"/connectors\";\n\n  return (\n    <OverviewPageV2\n      toKafkaHref={kafkaHref}\n      toServiceRegistryHref={serviceRegistryHref}\n      toConnectorsHref={connectorHref}\n    />\n  );\n};\n\nexport default ConnectedOverviewPage;\n","import { VoidFunctionComponent } from \"react\";\nimport { FederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ResourcesPage: VoidFunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<AppServicesLoading />}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n\nexport default ResourcesPage;\n","import { LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport { FederatedModule } from \"@app/components\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages/ServiceDown/ServiceDownPage\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceAccountsPage: VoidFunctionComponent = () => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<AppServicesLoading />}\n      render={(component) => (\n        <ServiceAccountsPageConnected Component={component} />\n      )}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const config = useConfig();\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n  return <Component />;\n};\nexport default ServiceAccountsPage;\n","import { WrenchIcon } from \"@patternfly/react-icons\";\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { FunctionComponent } from \"react\";\n\nexport const ServiceDownPage: FunctionComponent = () => {\n  const { t } = useTranslation([\"appTemporaryFixMe\"]);\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t(\"serviceDown.serviceDownTitle\")}\n        </Title>\n        <EmptyStateBody>{t(\"serviceDown.serviceDownMessage\")}</EmptyStateBody>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            window.location.href = \"https://status.starter.openshift.com/\";\n          }}\n        >\n          {t(\"serviceDown.serviceDownButton\")}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { FunctionComponent } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactVersionDetails: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactVersionDetailsConnected />;\n};\n\nconst ArtifactVersionDetailsConnected: FunctionComponent = () => {\n  let { artifactId } = useParams<{ artifactId: string }>();\n  artifactId = decodeURIComponent(artifactId);\n\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts_details\"\n      artifactId={artifactId}\n      render={(registry) => (\n        <FederatedApicurioComponent\n          registry={registry}\n          module=\"./FederatedArtifactVersionPage\"\n        />\n      )}\n    />\n  );\n};\n\nexport default ArtifactVersionDetails;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { FunctionComponent } from \"react\";\n\nexport const Artifacts: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactsConnected />;\n};\n\nconst ArtifactsConnected: FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts\"\n      render={(registry) => (\n        <FederatedApicurioComponent\n          module=\"./FederatedArtifactsPage\"\n          registry={registry}\n        />\n      )}\n    />\n  );\n};\n\nexport default Artifacts;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { FunctionComponent } from \"react\";\n\nexport const ArtifactRedirect: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactRedirectConnected />;\n};\n\nconst ArtifactRedirectConnected: FunctionComponent = () => {\n  return (\n    <SrsLayout\n      render={(registry) => (\n        <FederatedApicurioComponent\n          registry={registry}\n          module=\"./FederatedArtifactRedirectPage\"\n        />\n      )}\n    />\n  );\n};\n\nexport default ArtifactRedirect;\n","import { Registry } from \"@rhoas/registry-management-sdk\";\nimport { FederatedApicurioComponent } from \"./FederatedApicurioComponent\";\nimport { FC } from \"react\";\n\ntype DownloadArtifactsProps = {\n  registry: Registry;\n  downloadLabel?: string;\n};\n\nexport const DownloadArtifacts: FC<DownloadArtifactsProps> = ({\n  registry,\n  downloadLabel,\n}) => {\n  return (\n    <FederatedApicurioComponent\n      module=\"./FederatedDownloadArtifacts\"\n      registry={registry}\n      fileName={registry.name}\n      downloadLinkLabel={downloadLabel}\n    />\n  );\n};\n","import { FC, LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport {\n  ConfigType,\n  createApicurioConfig,\n} from \"@app/pages/ServiceRegistry/utils\";\nimport { FederatedModule } from \"@app/components\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport {\n  useAuth,\n  useBasename,\n  useConfig,\n  Principal,\n} from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: Registry | undefined;\n  topicName?: string;\n  groupId?: string | null | undefined;\n  version?: string;\n  registryId?: string;\n  basename?: string;\n  fileName?: string;\n  downloadLinkLabel?: string;\n  principals?: Principal[];\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: FC<\n  FederatedApicurioComponentProps\n> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<AppServicesLoading />}\n      render={(component) => (\n        <ServiceAccountsPageConnected Component={component} {...rest} />\n      )}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<\n  { Component: LazyExoticComponent<any> } & Omit<\n    FederatedApicurioComponentProps,\n    \"module\"\n  >\n> = ({ Component, registry, principals, ...rest }) => {\n  let federateConfig: ConfigType;\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const getToken = auth?.apicurio_registry.getToken;\n\n  let { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n  groupId = decodeURIComponent(groupId);\n  artifactId = decodeURIComponent(artifactId);\n  version = decodeURIComponent(version);\n\n  if (config === undefined || registry === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (getToken && basename) {\n    federateConfig = createApicurioConfig(\n      config,\n      registry.registryUrl as string,\n      `${basename.getBasename()}/t/${registry?.id}`,\n      getToken,\n      principals\n    );\n    return (\n      <Component\n        config={federateConfig}\n        tenantId={registry.id}\n        groupId={groupId}\n        artifactId={artifactId}\n        version={version}\n        history={history}\n        {...rest}\n      />\n    );\n  }\n  return null;\n};\n","import { Principal } from \"@rhoas/app-services-ui-shared\";\nimport { Config } from \"@rhoas/app-services-ui-shared\";\n\nexport interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport type NoneAuthConfig = AuthConfig;\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n  principals?: Principal[] | undefined;\n}\n\nconst createApicurioConfig = (\n  _config: Config,\n  apiUrl: string,\n  navPathPrefix: string,\n  getToken: () => Promise<string> | undefined,\n  principals?: Principal[] | undefined\n) => {\n  const apicurioConfig: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: \"gettoken\",\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      roleManagement: true,\n      multiTenant: true,\n      settings: true,\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n    principals,\n  } as ConfigType;\n\n  return apicurioConfig;\n};\n\nexport { createApicurioConfig };\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { FunctionComponent } from \"react\";\n\nexport const RulesPage: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RulesPageConnected />;\n};\n\nconst RulesPageConnected: FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.global_rules\"\n      render={(registry) => (\n        <FederatedApicurioComponent\n          registry={registry}\n          module=\"./FederatedRulesPage\"\n        />\n      )}\n    />\n  );\n};\n\nexport default RulesPage;\n","import { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { FederatedModule, KasModalLoader } from \"@app/components\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { useModalControl, useQuota, useMASToken } from \"@app/hooks\";\nimport {\n  AppServicesLoading,\n  DevelopmentPreview,\n} from \"@rhoas/app-services-ui-components\";\nimport { ProductType, QuotaContext } from \"@rhoas/app-services-ui-shared\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { ITermsConfig } from \"@app/services\";\nimport { DownloadArtifacts } from \"./DownloadArtifacts\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\nimport { FC, FunctionComponent } from \"react\";\n\nexport const ServiceRegistryPage: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ServiceRegistryPageConnected />;\n};\n\nexport const ServiceRegistryPageConnected: FC = () => {\n  const config = useConfig();\n  const constants = useConstants();\n  const { getQuota } = useQuota(ProductType.srs);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.serviceRegistry.ams.termsAndConditionsEventCode,\n    siteCode: constants.serviceRegistry.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getTokenEndPointUrl } = useMASToken();\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <DevelopmentPreview>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistry\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <QuotaContext.Provider value={{ getQuota }}>\n              <KasModalLoader>\n                <ServiceRegistryFederated\n                  preCreateInstance={preCreateInstance}\n                  shouldOpenCreateModal={shouldOpenCreateModal}\n                  tokenEndPointUrl={getTokenEndPointUrl()}\n                  renderDownloadArtifacts={(\n                    registry: Registry,\n                    downloadLabel?: string\n                  ) => (\n                    <DownloadArtifacts\n                      registry={registry}\n                      downloadLabel={downloadLabel}\n                    />\n                  )}\n                />\n              </KasModalLoader>\n            </QuotaContext.Provider>\n          );\n        }}\n      />\n    </DevelopmentPreview>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import { FC, LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport { FederatedModule, KasModalLoader } from \"@app/components\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { useMASToken } from \"@app/hooks\";\nimport { DownloadArtifacts } from \"./DownloadArtifacts\";\n\ntype SrsLayoutProps = {\n  render: (registry: Registry) => JSX.Element;\n  breadcrumbId?: string;\n  artifactId?: string;\n};\n\nexport const SrsLayout: FC<SrsLayoutProps> = (props) => {\n  return (\n    <FederatedModule\n      scope=\"srs\"\n      module=\"./ApicurioRegistry\"\n      fallback={<AppServicesLoading />}\n      render={(component) => (\n        <SrsLayoutConnected Component={component} {...props} />\n      )}\n    />\n  );\n};\n\nconst SrsLayoutConnected: VoidFunctionComponent<\n  { Component: LazyExoticComponent<any> } & SrsLayoutProps\n> = ({ Component, render, breadcrumbId, artifactId }) => {\n  const { getTokenEndPointUrl } = useMASToken();\n\n  return (\n    <KasModalLoader>\n      <Component\n        render={render}\n        breadcrumbId={breadcrumbId}\n        tokenEndPointUrl={getTokenEndPointUrl()}\n        artifactId={artifactId}\n        renderDownloadArtifacts={(\n          registry: Registry,\n          downloadLabel?: string\n        ) => (\n          <DownloadArtifacts\n            registry={registry}\n            downloadLabel={downloadLabel}\n          />\n        )}\n      />\n    </KasModalLoader>\n  );\n};\n","import { FC, LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { FederatedApicurioComponent } from \"./FederatedApicurioComponent\";\nimport { FederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceRegistrySchemaMapping: FC = () => {\n  return (\n    <>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistryMapping\"\n        fallback={<AppServicesLoading />}\n        render={(component) => (\n          <ServiceRegistrySchemaMappingConnected Component={component} />\n        )}\n      />\n    </>\n  );\n};\n\nconst ServiceRegistrySchemaMappingConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const { topicName } = useParams<{ topicName: string }>();\n  const basename = \"/service-registry\";\n\n  return (\n    <Component\n      basename={basename}\n      topicName={topicName}\n      renderSchema={(registry: Registry) => (\n        <FederatedApicurioComponent\n          module=\"./FederatedSchemaMapping\"\n          registry={registry}\n          topicName={topicName}\n          groupId={null}\n          version={\"latest\"}\n          registryId={registry?.id}\n          basename={basename}\n        />\n      )}\n    />\n  );\n};\n","import {\n  Main,\n  NotAuthorized,\n} from \"@redhat-cloud-services/frontend-components\";\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { FunctionComponent } from \"react\";\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: FunctionComponent<GetLinkProps> = ({ href, children }) => (\n  <Link to={href || \"\"}>{children}</Link>\n);\n\nexport const AccessDeniedPage: FunctionComponent = () => {\n  const { t } = useTranslation([\"appTemporaryFixMe\"]);\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t(\"accessdenied.accessDeniedTitle\")}\n        description={accessDeniedDetails}\n        prevPageButtonText={t(\"accessdenied.accessDeniedButtonText\")}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import { Config } from \"@rhoas/app-services-ui-shared\";\n\nconst defaultHostname = \"console.redhat.com\";\n\ntype FederatedModulesConfig = Config[\"federatedModules\"];\n\ntype EnvironmentConfigWithoutFederatedModules = {\n  hostnames: string[];\n  fetchConfig?: boolean;\n  type?: string;\n  config: Omit<Config, \"federatedModules\">;\n};\n\nexport type EnvironmentConfigsWithoutFederatedModules =\n  Array<EnvironmentConfigWithoutFederatedModules>;\n\nexport const filterEnvironmentConfig = (\n  environmentConfig: EnvironmentConfigsWithoutFederatedModules\n): EnvironmentConfigWithoutFederatedModules => {\n  const hostname = window.location.hostname;\n  console.log(`Filter config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) =>\n    entry.hostnames.includes(hostname)\n  );\n  if (possibleConfigs.length > 1) {\n    throw new Error(\n      `Unable to find config for ${hostname}, more than one config matched ${possibleConfigs}`\n    );\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) =>\n      entry.hostnames.includes(defaultHostname)\n    );\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(\n        `Unable to load default config, more than one config matched ${possibleConfigs}`\n      );\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      return possibleDefaultConfigs[0];\n    }\n  }\n  return possibleConfigs[0];\n};\n\nexport const addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfigWithoutFederatedModules,\n  federatedModulesConfig: FederatedModulesConfig,\n  beta: boolean\n): Config => {\n  const federatedModules = {} as FederatedModulesConfig;\n  Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n    let { basePath } = v;\n    let fallbackBasePath: string | undefined = undefined;\n    if (environmentConfig.type !== \"proxy\") {\n      basePath = v.fallbackBasePath;\n    } else {\n      fallbackBasePath = v.fallbackBasePath;\n    }\n    if (!beta) {\n      if (basePath.startsWith(\"/beta\")) {\n        basePath = basePath.substring(5);\n      }\n      if (fallbackBasePath?.startsWith(\"/beta\")) {\n        fallbackBasePath = fallbackBasePath.substring(5);\n      }\n    }\n    federatedModules[k as keyof FederatedModulesConfig] = {\n      basePath,\n      fallbackBasePath: fallbackBasePath!,\n    };\n  });\n  return {\n    ...environmentConfig.config,\n    federatedModules,\n  };\n};\n","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { Config, ConfigContext } from \"@rhoas/app-services-ui-shared\";\nimport configs from \"../../../../config/config.json\";\nimport {\n  addFederatedModulesToConfig,\n  EnvironmentConfigsWithoutFederatedModules,\n  filterEnvironmentConfig,\n} from \"@app/providers/config/utils\";\nimport { useFeatureFlags } from \"@app/providers/featureflags/FeatureFlags\";\n\nexport const EmbeddedConfigProvider: FunctionComponent = ({ children }) => {\n  const { beta } = useFeatureFlags();\n\n  const [value, setValue] = useState<Config | undefined>(() => {\n    const configFromJson: EnvironmentConfigsWithoutFederatedModules =\n      configs.config;\n    const environmentConfig = filterEnvironmentConfig(configFromJson);\n    if (environmentConfig.fetchConfig) {\n      return undefined;\n    }\n    const config = addFederatedModulesToConfig(\n      environmentConfig,\n      configs.federatedModules,\n      beta\n    );\n    console.log(\"Done loading config\", config);\n    return config;\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (value === undefined) {\n        const response = await fetch(`${__webpack_public_path__}config.json`);\n        const jsonConfig = await response.json();\n        const environmentConfig = filterEnvironmentConfig(jsonConfig.config);\n        const config = addFederatedModulesToConfig(\n          environmentConfig,\n          jsonConfig.federatedModules,\n          beta\n        );\n        console.debug(\"Done loading config\", config);\n        setValue(config);\n      }\n    })();\n  }, [beta, value]);\n  return (\n    <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>\n  );\n};\n","import { Context, createContext, useContext } from \"react\";\n\n/**\n * Configuration for AMS\n */\nexport type AmsConfig = {\n  termsAndConditionsEventCode: string;\n  termsAndConditionsSiteCode: string;\n  quotaProductId: string;\n  trialQuotaProductId: string;\n  resourceName: string;\n};\n\nexport type ServiceConstants = {\n  version: number;\n  kafka: {\n    ams: AmsConfig;\n  };\n  serviceRegistry: {\n    ams: AmsConfig;\n  };\n};\n\n/**\n * The ConstantContext allows access to the constants for the application.\n */\nexport const ConstantContext: Context<ServiceConstants | undefined> =\n  createContext<ServiceConstants | undefined>(undefined);\n\n/**\n * useConstants is a custom hook that is a shorthand for useContext(ConfigContext)\n */\nexport const useConstants = (): ServiceConstants => {\n  const answer = useContext(ConstantContext);\n  if (answer === undefined) {\n    throw new Error(\n      \"useConstants must be used inside an ServiceConstantsContextProvider\"\n    );\n  }\n  return answer;\n};\n","import { ConstantContext, ServiceConstants } from \"./ServiceConstants\";\nimport constantsFallback from \"../../../../static/configs/service-constants.json\";\nimport { FunctionComponent } from \"react\";\n\nexport const ServiceConstantsContextProvider: FunctionComponent = ({\n  children,\n}) => {\n  return (\n    <ConstantContext.Provider value={constantsFallback as ServiceConstants}>\n      {children}\n    </ConstantContext.Provider>\n  );\n};\n","import { createContext, FunctionComponent, useContext } from \"react\";\n\nexport type FeatureFlags = {\n  beta: boolean;\n};\n\nexport const FeatureFlagsContext = createContext<FeatureFlags | undefined>(\n  undefined\n);\n\nexport const useFeatureFlags = (): FeatureFlags => {\n  const answer = useContext(FeatureFlagsContext);\n  if (answer === undefined) {\n    throw new Error(\n      \"useFeatureFlags must be used inside a FeatureFlagContext provider\"\n    );\n  }\n  return answer;\n};\n\nexport const FeatureFlagProvider: FunctionComponent = ({ children }) => {\n  const value = {\n    beta: window.location.pathname.startsWith(\"/beta\"),\n  } as FeatureFlags;\n  return (\n    <FeatureFlagsContext.Provider value={value}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  );\n};\n","import ReducerRegistry from \"@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry\";\nimport promiseMiddleware from \"redux-promise-middleware\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\n\nlet registry: ReducerRegistry;\n\nexport function init(...middleware: any) {\n  if (!registry) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n","import { ComponentType, FunctionComponent, lazy } from \"react\";\nimport { Route, RouteComponentProps } from \"react-router-dom\";\nimport { useDocumentTitle } from \"@app/utils\";\n\nconst NotFoundPage = lazy(() => import(\"@app/pages/NotFound/NotFoundPage\"));\n\nexport interface IAppRoute<T> {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: ComponentType<RouteComponentProps> | ComponentType<T>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup<T> {\n  label: string;\n  routes: IAppRoute<T>[];\n}\n\nexport type AppRouteConfig<T> = IAppRoute<T> | IAppRouteGroup<T>;\n\nexport const PageNotFoundRoute: FunctionComponent<{ title: string }> = ({\n  title,\n}: {\n  title: string;\n}) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage} />;\n};\n\nexport const flattenedRoutes = <T,>(routes: AppRouteConfig<T>[]) =>\n  routes.reduce(\n    (flattened, route) => [\n      ...flattened,\n      ...(route.routes ? route.routes : [route]),\n    ],\n    [] as IAppRoute<T>[]\n  );\n","function getBaseName(pathname: string) {\n  let release = \"/\";\n  const pathName = pathname.split(\"/\");\n\n  pathName.shift();\n\n  if (pathName[0] === \"beta\") {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import { useEffect } from \"react\";\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import Keycloak, {\n  KeycloakConfig,\n  KeycloakInitOptions,\n  KeycloakInstance,\n} from \"keycloak-js\";\nimport Cookies from \"js-cookie\";\nimport { Base64 } from \"js-base64\";\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\n\ntype MASJwtPayload = JwtPayload & {\n  account_id: string;\n};\n\nconst REFRESH_TOKEN_COOKIE_NAME = \"mrt\";\nconst MIN_VALIDITY = 50;\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n};\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const initKeycloak = async (\n  config: KeycloakConfig,\n  getInsightsAccessToken: () => Promise<string>\n): Promise<KeycloakInstance> => {\n  const initOptions = {\n    responseMode: \"query\",\n    enableLogging: false,\n    checkLoginIframe: false,\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken !== undefined && config.url !== undefined) {\n    // try to get an access token from the token endpoint so that we can pass it to initOptions\n    const url = buildTokenEndPointUrl(config.url, config.realm);\n    const body = new URLSearchParams();\n    body.append(\"grant_type\", \"refresh_token\");\n    body.append(\"refresh_token\", refreshToken);\n    body.append(\"client_id\", config.clientId);\n\n    const response = await fetch(url, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/x-www-form-urlencoded\",\n      },\n      body,\n    });\n    if (response.status === 200) {\n      console.debug(\"[KEYCLOAK] found valid access token\");\n      const json = await response.json();\n      const accessToken = json[\"access_token\"];\n      initOptions.token = accessToken;\n      initOptions.refreshToken = refreshToken;\n    } else {\n      console.debug(\"[KEYCLOAK] error getting access token from endpoint\");\n      initOptions.onLoad = \"login-required\";\n    }\n  } else {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (!urlParams.has(\"state\")) {\n      // only when this isn't a redirect back from MASSSO\n      console.debug(\n        \"[KEYCLOAK] did not find refresh token, will require a full login\"\n      );\n      initOptions.onLoad = \"login-required\";\n    }\n  }\n  console.debug(\"[KEYCLOAK] initOptions \" + JSON.stringify(initOptions));\n  const keycloak = Keycloak(config);\n  const keycloakSucess = await keycloak.init(initOptions);\n  console.log(\"[KEYCLOAK] keycloakSuccess \" + keycloakSucess);\n  if (keycloak.refreshToken) {\n    console.log(\"[KEYCLOAK] initKeycloak \" + keycloak.refreshToken);\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  } else {\n    console.log(\"[KEYCLOAK] no refresh token\");\n  }\n  console.log(\"[KEYCLOAK] init complete\");\n  return keycloak;\n};\n\nconst retrieveRefreshToken = async (\n  getInsightsAccessToken: () => Promise<string>\n): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = JSON.parse(storedToken) as unknown as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: MASJwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<MASJwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<MASJwtPayload>(insightsToken);\n  if (insightsJWT[\"account_id\"] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n};\n\nconst clearRefreshToken = () => {\n  console.debug(\"clearing stored refresh token\");\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n};\n\nconst storeRefreshToken = async (\n  refreshToken: string,\n  getInsightsAccessToken: () => Promise<string>\n) => {\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<MASJwtPayload>(insightsToken);\n  const rhUserId = insightsJWT[\"account_id\"];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId,\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug(\"storing refresh token\");\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n};\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getAccessToken = async (\n  keycloak: KeycloakInstance,\n  getInsightsAccessToken: () => Promise<string>\n): Promise<string> => {\n  console.log(\"keycloak.refreshToken \" + keycloak.refreshToken);\n  console.log(\"keycloak.token \" + keycloak.token);\n  console.log(\"keycloak.tokenParsed \" + keycloak.tokenParsed);\n  await keycloak.updateToken(MIN_VALIDITY);\n  console.log(\"keycloak.token \" + keycloak.token);\n  console.log(\"keycloak.tokenParsed \" + keycloak.tokenParsed);\n  if (!keycloak.token || !keycloak.tokenParsed) {\n    throw new Error(\"No token from keycloak!\");\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<MASJwtPayload>(insightsToken);\n  const accountId = insightsJWT[\"account_id\"];\n  const rhUserId = keycloak.tokenParsed[\"rh-user-id\"];\n  if (accountId !== rhUserId) {\n    console.debug(\n      `Triggering MASSSO logout because sso.redhat.com account_id claim does not match the MASSSO rh-user-id claim. account_id: ${accountId}, rh-user-id ${rhUserId}`\n    );\n    await logout(keycloak);\n    return \"\";\n  }\n  if (keycloak.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak.token;\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nconst logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.debug(\"Performing MASSSO logout\");\n    await k.logout();\n  }\n};\n\nexport const buildTokenEndPointUrl = (authServerUrl: string, realm: string) => {\n  return `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n};\n"],"names":["QuickStartLoaderFederated","lazy","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","KafkaOverviewPage","KasPage","OverviewPage","ResourcesPage","RulesPage","RolesPage","SettingsPage","ServiceAccountsPage","CosPage","RedirectToStreamsKafkas","Redirect","to","appRoutes","component","exact","label","path","title","devPreview","basename","Kafka","getBaseName","window","location","pathname","WrappedRoute","Component","rest","t","useTranslation","history","useHistory","getBasename","useCallback","onClickButton","push","wrapRoute","routeProps","ErrorBoundary","fallbackRender","error","message","AppServicesPageNotFound","AppServicesEmptyState","emptyStateProps","variant","AppServicesEmptyStateVariant","emptyStateIconProps","className","titleProps","emptyStateBodyProps","body","Button","onClick","DevelopmentPreview","show","BasenameContext","value","Route","render","AppRoutes","Suspense","fallback","AppServicesLoading","Switch","map","idx","isAsync","connect","insights","getAppId","defaultAppId","parts","split","length","useEffect","chrome","init","appId","identifyApp","unregister","on","event","includes","navId","NotificationsPortal","Page","useIsMounted","isMounted","useRef","current","FederatedModule","scope","module","console","log","getModuleInfo","modules","moduleInfo","setModuleInfo","useState","basePath","fallbackBasePath","undefined","DynamicFederatedModule","ready","failed","url","setReady","setFailed","element","document","createElement","src","type","async","onload","onerror","head","appendChild","removeChild","useDynamicScript","entryPoint","container","default","Module","get","debug","loadComponent","getPath","AssetsContext","usePrincipal","config","useConfig","auth","useAuth","serviceAccountPrincipals","setServiceAccountPrincipals","userAcountPrincipals","setUserAccountPrincipals","rbac","accessToken","kas","getToken","principalApi","PrincipalApi","userAccounts","listPrincipals","then","response","data","p","id","username","principalType","PrincipalType","displayName","first_name","last_name","emailAddress","email","e","securityApi","SecurityApi","apiBasePath","serviceAccounts","getServiceAccounts","items","sa","client_id","name","getAllPrincipals","answer","concat","getAllUserAccounts","getAllServiceAccounts","PrincipalsProvider","children","PrincipalsContext","useKafkaInstanceDrawer","isDrawerOpen","setIsDrawerOpen","drawerActiveTab","setDrawerActiveTab","openDrawer","tab","closeDrawer","getTokenEndPointUrl","tokenEndPointUrl","onDeleteInstance","FederatedModuleContext","createContext","FederatedModuleProvider","moduleInfoCache","Provider","federatedModules","baseUrl","fetchModuleInfo","Date","now","fetch","json","fedMods","s","entry","startsWith","e1","useFederatedModule","useContext","Error","KasModalLoader","KasModalLoaderFederated","useQuota","productId","constants","orgId","setOrgId","ams","AppServicesApi","apiAccountsMgmtV1CurrentAccountGet","account","orgID","organization","getQuotaTypesByProductId","kasQuotaProductId","kafka","quotaProductId","kasTrialQuotaProductId","trialQuotaProductId","kasResourceName","resourceName","srsQuotaProductId","serviceRegistry","srsTrialQuotaProductId","srsResourceName","ProductType","quotaKey","QuotaType","trialQuotaKey","getQuota","quotaData","Map","filteredQuota","loading","isServiceDown","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","quota","find","q","related_resources","r","resource_name","product","trialQuota","allowed","remaining","consumed","set","Status","fetchTermsReviewFactory","termsConfig","key","defaultApi","apiAuthorizationsV1SelfTermsReviewPost","event_code","eventCode","site_code","siteCode","buildUrlParams","params","Object","keys","encodeURIComponent","join","useModalControl","loadTermsReview","ref","load","useAsyncTermsReview","useLocation","shouldOpenCreateModal","parse","search","terms_required","preCreateInstance","open","termsReview","terms_available","redirect_url","redirectURL","stringifyUrl","href","query","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","useInsights","keycloakInstance","insightsChromeAuth","getKeycloakInstance","instance","getInsightsAccessToken","keycloakConfig","masSso","authServerUrl","clientId","realm","getMASSSOToken","getUsername","getUser","identity","user","isOrgAdmin","is_org_admin","srs","apicurio_registry","smart_events","useMASToken","APIManagementOverviewPage","serviceDown","OpenshiftManagedConnectors","DataScienceOverViewPage","KafkaFederatedComponent","FederatedKafka","Topics","props","TopicDetails","CreateTopic","UpdateTopic","Dashboard","ConsumerGroups","AclPermissions","kafkaRoutes","flatRoutes","InstanceDrawer","underlyingProps","KafkaRoutes","routeMatch","useRouteMatch","drawerProps","handleInstanceDrawer","isOpen","activeTab","drawerInstance","setDrawerInstance","routePath","KafkaMainView","kafkaInstanceId","useParams","KafkaMainViewConnected","kafkaInstance","kafkaDetail","ConnectedKafkaRoutes","adminServerUrl","setError","onError","code","redirectAfterDeleteInstance","showMetrics","useMemo","kafkaId","kafkaAdminUrl","totalMaxConnections","size","total_max_connections","maxConnections","max_connection_attempts_per_sec","maxPartitions","max_partitions","kafkaStorageBytes","parseInt","kafka_storage_size","replace","showSchemas","ServiceRegistry","kafkaPageLink","kafkaInstanceLink","kafkaName","fetchKafkaTopisFromAdmin","api","TopicsApi","Configuration","getTopics","fetchTopicMetrics","duration","interval","selectedTopic","apisService","DefaultApi","safeMetrics","getMetricsByRangeQuery","filter","m","values","metric","topic","filteredMetrics","topics","Array","from","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","forEach","__name__","addAggregatedTotalBytesTo","timestamp","partition","addAggregatePartitionBytes","metricsTopics","ConnectedMetrics","useBasename","storageKey","isAlertClosed","setIsAlertClosed","localStorage","getItem","getKafkaInstanceMetrics","kafkaResponse","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","diskSpaceLimit","connectionRateLimit","connectionsLimit","fetchKafkaInstanceMetrics","getTopicMetrics","kafkaTopics","metrics","Promise","all","getMetricsKpi","kpiResponse","topicPartitions","consumerGroups","getMetricsByInstantQuery","fetchMetricsKpi","topicPartitionsLimit","Metrics","onCreateTopic","getTopicsMetrics","isClosed","onClickClose","setItem","getAdminServerUrl","adminServerUrlTemplate","kafkaRequest","bootstrap_server_host","useKafkaInstance","setKafkaRequest","getKafkaSize","useGetAvailableSizes","fetchKafka","kasService","getKafkaById","cloud_provider","region","instance_type","size_id","provider","sizeId","instanceType","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","instanceTypesSizes","i","KasPageConnected","termsAndConditionsEventCode","termsAndConditionsSiteCode","drawerInstanceId","setDrawerInstanceId","drawerInstanceDetails","QuotaContext","NotFoundPage","PageSection","EmptyState","EmptyStateIcon","icon","ExclamationTriangleIcon","Title","headingLevel","EmptyStateBody","ConnectedOverviewPage","OverviewPageV2","toKafkaHref","toServiceRegistryHref","toConnectorsHref","QuickStartCatalogFederated","ServiceAccountsPageConnected","ServiceDownPage","WrenchIcon","ArtifactVersionDetailsConnected","artifactId","decodeURIComponent","breadcrumbId","registry","ArtifactsConnected","ArtifactRedirectConnected","DownloadArtifacts","downloadLabel","fileName","downloadLinkLabel","FederatedApicurioComponent","principals","federateConfig","groupId","version","_config","apiUrl","navPathPrefix","artifacts","features","readOnly","breadcrumbs","roleManagement","multiTenant","settings","ui","navPrefixPath","createApicurioConfig","registryUrl","tenantId","RulesPageConnected","ServiceRegistryPage","ServiceRegistryPageConnected","ServiceRegistryFederated","renderDownloadArtifacts","SrsLayout","SrsLayoutConnected","ServiceRegistrySchemaMapping","ServiceRegistrySchemaMappingConnected","topicName","renderSchema","registryId","GetLink","Link","AccessDeniedPage","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","filterEnvironmentConfig","environmentConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","federatedModulesConfig","beta","entries","k","v","substring","EmbeddedConfigProvider","setValue","configFromJson","fetchConfig","jsonConfig","ConfigContext","ConstantContext","useConstants","ServiceConstantsContextProvider","FeatureFlagsContext","useFeatureFlags","FeatureFlagProvider","middleware","register","notifications","PageNotFoundRoute","flattenedRoutes","routes","reduce","flattened","route","release","pathName","shift","useDocumentTitle","originalTitle","REFRESH_TOKEN_COOKIE_NAME","initKeycloak","initOptions","responseMode","enableLogging","checkLoginIframe","refreshToken","retrieveRefreshToken","buildTokenEndPointUrl","URLSearchParams","append","method","headers","status","token","onLoad","has","JSON","stringify","keycloak","keycloakSucess","storeRefreshToken","encoded","storedToken","Base64","storedRefreshToken","refreshJWT","clearRefreshToken","exp","getUnixTime","insightsToken","rhUserId","getAccessToken","tokenParsed","updateToken","accountId","logout"],"sourceRoot":""}