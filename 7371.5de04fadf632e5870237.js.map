{"version":3,"file":"7371.5de04fadf632e5870237.js","mappings":"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0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCF,CAAYA,IAAAA,EAA4B,KAuGxC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAA8B,KAW1C,SAAYC,GACV,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCF,CAAYA,IAAAA,EAAoC,KA8iBhD,SAAYC,GACV,4CADF,CAAYA,IAAAA,EAAqC,KAOjD,SAAYC,GACV,oBADF,CAAYA,IAAAA,EAA+B,KAoG3C,SAAYC,GACV,oCADF,CAAYA,IAAAA,EAA8C,KAO1D,SAAYC,GACV,YACA,YACA,sBACA,YACA,cALF,CAAYA,IAAAA,EAAwC,KAsrCpD,SAAYC,GACV,oBACA,wBACA,oBAHF,CAAYA,IAAAA,EAAwB,KA6NpC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAAoB,KAgChC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAAyB,KAw3CrC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,IAAAA,EAAqB,KAkFjC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,IAAAA,EAA0B,KAsFtC,SAAYC,GACV,kBACA,kBACA,8BAHF,CAAYA,IAAAA,EAA4B,KA4DxC,SAAYC,GACV,YACA,cACA,kBACA,kBACA,kBALF,CAAYA,IAAAA,EAAwB,KAWpC,SAAYC,GACV,oBACA,8BAFF,CAAYA,IAAAA,EAA8B,KAmC1C,SAAYC,GACV,YACA,kBACA,kBAHF,CAAYA,IAAAA,EAA+B,KAS3C,SAAYC,GACV,oBACA,8BAFF,CAAYA,IAAAA,EAAqC,KA2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","sources":["webpack://application-services-ui/./src/app/utils/Routing.tsx","webpack://application-services-ui/./src/app/pages/Kafka/kafka-instance.ts","webpack://application-services-ui/./src/app/pages/Kafka/KafkaRoutes.tsx","webpack://application-services-ui/./src/app/AppRoutes.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/PrincipalsProvider/PrincipalsProvider.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/components/DevelopmentPreview/DevelopmentPreview.tsx","webpack://application-services-ui/./src/openapi/ams/api.ts","webpack://application-services-ui/./src/openapi/ams/base.ts","webpack://application-services-ui/./src/openapi/ams/common.ts","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/openapi/ams/configuration.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/hooks/modal.ts","webpack://application-services-ui/./src/app/hooks/insights.ts","webpack://application-services-ui/./src/app/hooks/keycloak.ts","webpack://application-services-ui/./src/app/hooks/useMASToken.ts","webpack://application-services-ui/./src/app/i18n/locale/index.ts","webpack://application-services-ui/./src/app/i18n/index.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/CosPage/CosPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg","webpack://application-services-ui/./static/images/Logo-Red_Hat-OpenShift_Service_Registry-A-Standard-RGB.png","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactVersion.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/Artifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactsRedirect.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/RulesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/SrsLayout.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistrySchemaMapping.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederatedComponent.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kas/Metrics.tsx","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/utils/keycloak/keycloakUtils.ts"],"sourcesContent":["import React from 'react';\nimport { Route, RouteComponentProps } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { useLastLocation } from 'react-router-last-location';\n\nconst NotFoundPage = React.lazy(() => import('@app/pages/NotFound/NotFoundPage'));\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute<T> {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps> | React.ComponentType<T>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup<T> {\n  label: string;\n  routes: IAppRoute<T>[];\n}\n\nexport type AppRouteConfig<T> = IAppRoute<T> | IAppRouteGroup<T>;\n\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nexport const useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nexport const PageNotFoundRoute: React.FunctionComponent<{ title: string }> = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage}/>;\n};\n\nexport const flattenedRoutes = <T, >(routes: AppRouteConfig<T>[]) => routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute<T>[]\n);\n","import { useEffect, useState } from \"react\";\nimport { Configuration, DefaultApi, KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport { useParams } from \"react-router-dom\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\n\nexport const getAdminServerUrl = (kafkaRequest?: KafkaRequest): string => {\n  if (kafkaRequest === undefined) {\n    throw new Error('kafkaRequest cannot be undefined');\n  }\n  return `https://admin-server-${kafkaRequest?.bootstrap_server_host}/rest`;\n}\n\nexport type KafkaInstance = {\n  kafkaDetail?: KafkaRequest\n  adminServerUrl?: string\n}\n\nexport const useKafkaInstance = (): KafkaInstance | undefined => {\n  const config = useConfig();\n  const auth = useAuth();\n  const [kafkaRequest, setKafkaRequest] = useState<KafkaRequest | undefined>();\n  const { id } = useParams<{ id: string }>();\n\n  useEffect(() => {\n    const getAdminApiUrl = async () => {\n      if (auth === undefined || config === undefined) {\n        return;\n      }\n      const accessToken = await auth.kas.getToken();\n      const kasService = new DefaultApi({\n        accessToken,\n        basePath: config.kas.apiBasePath || '',\n      } as Configuration);\n\n      const kafka = await kasService.getKafkaById(id);\n      setKafkaRequest(kafka.data);\n    };\n\n    getAdminApiUrl();\n  }, [auth, config, id]);\n\n  return kafkaRequest === undefined ? undefined : {\n    kafkaDetail: kafkaRequest,\n    adminServerUrl: getAdminServerUrl(kafkaRequest),\n  }\n}\n","import React, { useState } from 'react';\nimport { Route, Switch, useHistory, useRouteMatch } from 'react-router-dom';\nimport { InstanceDrawer } from '@app/components';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange } from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport { AccessDeniedPage, CreateTopic, Metrics, ServiceDownPage, TopicDetails, Topics, UpdateTopic } from \"@app/pages\";\nimport { useKafkaInstance } from \"@app/pages/Kafka/kafka-instance\";\nimport { UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { PrincipalsProvider } from \"@app/components/PrincipalsProvider/PrincipalsProvider\";\nimport { BasenameContext, useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { ServiceRegistrySchemaMapping } from '@app/pages/ServiceRegistry';\n\nconst kafkaRoutes: AppRouteConfig<UnderlyingProps>[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/create',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/update/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  }\n];\n\ntype WrappedRouteProps = IAppRoute<UnderlyingProps> & {\n  underlyingProps: UnderlyingProps\n  url: string\n}\n\n/**\n * The wrapped route allows us to apply the basename, document title and accessible route change for all components\n * without having to add these to each component. They must happen inside the route.\n */\nconst WrappedRoute: React.FunctionComponent<WrappedRouteProps> = ({\n                                                                    component: Component,\n                                                                    isAsync = false,\n                                                                    title,                                                                   \n                                                                    underlyingProps,\n                                                                    url,\n                                                                    ...rest\n                                                                  }) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  const getBasename = () => {\n    return url;\n  };\n\n  return (\n    <Route\n      render={\n        (routeProps) => {\n          return (\n            <BasenameContext.Provider value={{ getBasename }}>\n              <Component {...underlyingProps} {...rest} {...routeProps}  />\n            </BasenameContext.Provider>\n          );\n        }\n      }\n      {...rest}\n    />\n  );\n};\n\nconst KafkaRoutes = (): React.ReactElement => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const { adminServerUrl, kafkaDetail } = useKafkaInstance() || {};\n  const routeMatch = useRouteMatch();\n\n  const [error, setError] = useState<undefined | number>();\n  const [isInstanceDrawerOpen, setIsInstanceDrawerOpen] = useState<boolean | undefined>();\n  const [activeDrawerTab, setActiveDrawerTab] = useState<string>('');\n  const [isOpenDeleteInstanceModal, setIsOpenDeleteInstanceModal] = useState<boolean>(false);\n\n  const handleInstanceDrawer = (isOpen: boolean, activeTab?: string) => {\n    activeTab && setActiveDrawerTab(activeTab);\n    setIsInstanceDrawerOpen(isOpen);\n  };\n\n  const onCloseInstanceDrawer = () => {\n    setIsInstanceDrawerOpen(false);\n  };\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage/>;\n  }\n\n  if (kafkaDetail === undefined || kafkaDetail.id === undefined || adminServerUrl === undefined) {\n    return <AppServicesLoading/>;\n  }\n\n  const props = {\n    kafkaPageLink: history.createHref({\n      pathname: '/streams/kafkas'\n    }),\n    kafkaInstanceLink: history.createHref({\n      pathname: `/streams/kafkas/${kafkaDetail.id}`\n    }),\n    showMetrics: <Metrics kafkaId={kafkaDetail.id}/>,\n    onError: (code: number) => {\n      setError(code);\n    },\n    kafkaName: kafkaDetail.name,\n    apiBasePath: adminServerUrl,\n    getToken: auth?.kafka.getToken,\n    handleInstanceDrawer,\n    setIsOpenDeleteInstanceModal,\n    showSchemas:<ServiceRegistrySchemaMapping/>\n  } as UnderlyingProps;\n\n  if (error === 401) {\n    return (\n      <AccessDeniedPage/>\n    )\n  }\n\n  return (\n    <div className=\"app-services-ui--u-display-contents\" data-ouia-app-id=\"dataPlane-streams\">\n      <PrincipalsProvider kafkaInstance={kafkaDetail}>\n        <InstanceDrawer\n          isExpanded={isInstanceDrawerOpen}\n          onClose={onCloseInstanceDrawer}\n          kafkaDetail={kafkaDetail}\n          activeTab={activeDrawerTab}\n          isOpenDeleteInstanceModal={isOpenDeleteInstanceModal}\n          setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n        >\n          <Switch>\n            {flattenedRoutes(kafkaRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => {\n              const routePath = `${routeMatch.path}${path}`;\n              console.log(`Creating route for ${routePath}`);\n              return (\n                <WrappedRoute\n                  path={routePath}\n                  exact={exact}\n                  component={component}\n                  key={idx}\n                  title={title}\n                  isAsync={isAsync}\n                  underlyingProps={props}\n                  url={routeMatch.url}\n                  {...rest}\n                />\n              )\n            })}\n            <PageNotFoundRoute title=\"404 Page Not Found\"/>\n          </Switch>\n        </InstanceDrawer>\n      </PrincipalsProvider>\n    </div>\n\n  );\n}\n\n\nexport { KafkaRoutes, kafkaRoutes };\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { LastLocationProvider } from 'react-router-last-location';\nimport getBaseName from './utils/getBaseName';\nimport { DevelopmentPreview } from '@app/components';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange, } from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport { KafkaRoutes } from \"@app/pages/Kafka/KafkaRoutes\";\nimport { BasenameContext } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nconst QuickStartLoaderFederated = React.lazy(() => import('@app/pages/Resources/QuickStartLoaderFederated'));\n\nconst APIManagementPage = React.lazy(() => import('@app/pages/APIManagement/APIManagementPage'));\nconst ArtifactRedirect = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactsRedirect'));\nconst Artifacts = React.lazy(() => import('@app/pages/ServiceRegistry/Artifacts'));\nconst ArtifactVersionDetails = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactVersion'));\nconst DataSciencePage = React.lazy(() => import('@app/pages/DataScience/DataSciencePage'));\n\nconst KasPage = React.lazy(() => import('@app/pages/Kas/KasPage'));\nconst OverviewPage = React.lazy(() => import('@app/pages/Overview/OverviewPage'));\nconst ResourcesPage = React.lazy(() => import('@app/pages/Resources/ResourcesPage'));\nconst RulesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RulesPage'));\nconst RolesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RolesPage'))\nconst ServiceAccountsPage = React.lazy(() => import('@app/pages/ServiceAccounts/ServiceAccountsPage'));\nconst CosPage = React.lazy(() => import('@app/pages/CosPage/CosPage'));\nconst ServiceRegistryPage = React.lazy(() => import('@app/pages/ServiceRegistry/ServiceRegistryPage'));\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\"/>;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\"/>;\nconst RedirectToServiceAccounts: React.FunctionComponent = () => <Redirect to=\"/service-accounts\"/>;\nconst RedirectToResources: React.FunctionComponent = () => <Redirect to=\"/learning-resources\" />;\n\nconst appRoutes: AppRouteConfig<any>[] = [\n  {\n    component: KafkaRoutes,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas/:id',\n    devPreview: true,\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas',\n    devPreview: true,\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/rules',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: RolesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/roles',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n    devPreview: true,\n  },\n  {\n    component: CosPage,\n    exact: false,\n    label: 'COS',\n    path: '/cos',\n    title: 'COS',\n    basename: `${getBaseName(window.location.pathname)}/cos`,\n    devPreview: true,\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: RedirectToServiceAccounts,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    // Handle the redirect for the old url application-services/streams/resources to application-services/learning-resources\n    component: RedirectToResources,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n    devPreview: true,\n\n\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'Learning Resources | Red Hat OpenShift Application Services',\n    path: '/learning-resources',\n    title: 'Learning Resources | Red Hat OpenShift Application Services',\n    devPreview: true,\n  },\n];\n\nconst WrappedRoute: React.FunctionComponent<IAppRoute<any>> = ({\n  component: Component,\n  isAsync = false,\n  title,\n  basename,\n  devPreview,\n  ...rest\n}) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const getBasename = () => {\n    return basename || '';\n  };\n\n  function wrapRoute(routeProps: RouteComponentProps) {\n    return (\n      <DevelopmentPreview show={devPreview}>\n        <BasenameContext.Provider value={{ getBasename }}>\n          <Component {...rest} {...routeProps} />\n        </BasenameContext.Provider>\n      </DevelopmentPreview>\n    );\n  }\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst AppRoutes = (): React.ReactElement => (\n  <>\n    <LastLocationProvider>\n      <React.Suspense fallback={<AppServicesLoading />}>\n        <Switch>\n          {flattenedRoutes(appRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n            <WrappedRoute\n              path={path}\n              exact={exact}\n              component={component}\n              key={idx}\n              title={title}\n              isAsync={isAsync}\n              {...rest}\n            />\n          ))}\n          <PageNotFoundRoute title=\"404 Page Not Found\" />\n        </Switch>\n      </React.Suspense>\n    </LastLocationProvider>\n    <QuickStartLoaderFederated />\n  </>\n);\n\nexport { AppRoutes, appRoutes };\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport './App.scss';\nimport { AppRoutes } from '@app/AppRoutes';\nimport { FederatedModuleProvider } from \"@app/components\";\nimport { useInsights } from \"@app/hooks\";\n\nexport const App: React.FunctionComponent = () => {\n  const insights = useInsights();\n  const history = useHistory();\n\n  const getAppId = () => {\n    const defaultAppId = 'overview';\n\n    const parts = history.location.pathname.split('/');\n    if (parts.length > 1) {\n      if (parts[1] === '') {\n        return defaultAppId;\n      } else {\n        if (parts[1] === 'openshift-streams') {\n          return 'streams';\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal/>\n      <AppRoutes/>\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","export type ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nexport const getModuleInfo = async (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined> => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ComponentType, ReactNode, useEffect, useRef, useState } from 'react';\nimport { AssetsContext } from \"@rhoas/app-services-ui-shared\";\nimport { getModuleInfo, ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\nimport { FederatedModuleContext } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\ndeclare function __webpack_init_sharing__(shareScope: string);\n\ndeclare const __webpack_share_scopes__: {\n  default: unknown;\n};\n\ntype Container = {\n  init: (shareScopes: unknown) => Promise<void>;\n  get: (module: string) => Promise<{ (): { default: ComponentType<any> } }>;\n};\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope] as unknown as Container; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await container.get(module);\n    const Module = factory();\n    console.debug(`loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = (url: string) => {\n  const isMounted = useIsMounted();\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    let element;\n    if (isMounted.current) {\n      if (!url) {\n        setFailed(true);\n        return;\n      }\n\n      element = document.createElement('script');\n\n      element.src = url;\n      element.type = 'text/javascript';\n      element.async = true;\n\n      setReady(false);\n      setFailed(false);\n\n      element.onload = () => {\n        console.log(`Dynamic federated module Loaded: ${url}`);\n        setReady(true);\n      };\n\n      element.onerror = () => {\n        console.error(`Dynamic federated module Error: ${url}`);\n        setReady(false);\n        setFailed(true);\n      };\n\n      document.head.appendChild(element);\n    }\n\n    return () => {\n      if (element) {\n        console.log(`Dynamic federated module Removed: ${url}`);\n        document.head.removeChild(element);\n      }\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed,\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: React.ReactNode;\n};\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n  const isMounted = useIsMounted();\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(\n        federatedModuleContext[scope].basePath,\n        scope,\n        federatedModuleContext[scope].fallbackBasePath\n      );\n      if (isMounted.current) {\n        setModuleInfo(moduleInfo);\n      }\n    };\n    fetchModuleInfo();\n  }, [scope, federatedModuleContext]);\n\n  if (moduleInfo !== undefined) {\n    return <DynamicFederatedModule scope={scope} module={module} render={render} moduleInfo={moduleInfo} />;\n  }\n  if (fallback !== undefined) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n\ntype DynamicFederatedModuleProps = FederatedModuleProps & {\n  moduleInfo: ModuleInfo;\n};\n\nconst DynamicFederatedModule: React.FunctionComponent<DynamicFederatedModuleProps> = ({\n  moduleInfo,\n  fallback,\n  scope,\n  render,\n  module,\n}) => {\n  const { ready, failed } = useDynamicScript(moduleInfo.entryPoint);\n\n  if (ready && !failed) {\n    const Component = React.lazy(loadComponent(scope, module));\n\n    const getPath = () => {\n      return moduleInfo.basePath;\n    };\n\n    return (\n      <AssetsContext.Provider value={{ getPath }}>\n        <React.Suspense fallback={<AppServicesLoading />}>{render(Component)}</React.Suspense>\n      </AssetsContext.Provider>\n    );\n  }\n\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n","import React, { useEffect, useState } from 'react';\nimport { Configuration, KafkaRequest, SecurityApi } from '@rhoas/kafka-management-sdk';\nimport {\n  Principal,\n  Principals,\n  PrincipalsContext,\n  PrincipalType,\n  useAuth,\n  useConfig,\n} from '@rhoas/app-services-ui-shared';\nimport { PrincipalApi } from '@redhat-cloud-services/rbac-client';\n\nexport type PrincipalsProviderProps = {\n  kafkaInstance?: KafkaRequest;\n};\n\nexport const usePrincipal = (instanceOwner: string | undefined) => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [serviceAccountPrincipals, setServiceAccountPrincipals] = useState<Principal[] | undefined>();\n  const [userAcountPrincipals, setUserAccountPrincipals] = useState<Principal[] | undefined>();\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      if (\n        config !== undefined &&\n        auth !== undefined &&\n        config.rbac.basePath !== undefined &&\n        instanceOwner !== undefined\n      ) {\n        const accessToken = await auth.kas.getToken();\n        const principalApi = new PrincipalApi({\n          accessToken,\n          basePath: config?.rbac.basePath,\n        });\n\n        const currentlyLoggedInuser = await auth?.getUsername();\n\n        try {\n          const userAccounts = await principalApi.listPrincipals(-1).then((response) =>\n            response.data.data\n              .map((p) => {\n                return {\n                  id: p.username,\n                  principalType: PrincipalType.UserAccount,\n                  displayName: `${p.first_name} ${p.last_name}`,\n                  emailAddress: p.email,\n                } as Principal;\n              })\n              .filter((p) => p.id !== currentlyLoggedInuser && p.id !== instanceOwner)\n          );\n          setUserAccountPrincipals(userAccounts);\n        } catch (e) {\n          // temp fix - this API is only available to org admins\n          // needs a proper approach longer term\n        }\n      }\n    };\n    fetchUserAccounts();\n  }, [auth, config, instanceOwner]);\n\n  useEffect(() => {\n    const fetchServiceAccounts = async () => {\n      if (\n        config !== undefined &&\n        auth !== undefined &&\n        config.rbac.basePath !== undefined &&\n        instanceOwner !== undefined\n      ) {\n        const accessToken = await auth.kas.getToken();\n        const securityApi = new SecurityApi({\n          accessToken,\n          basePath: config.kas.apiBasePath,\n        } as Configuration);\n        const serviceAccounts = await securityApi.getServiceAccounts().then((response) =>\n          response.data.items.map((sa) => {\n            return {\n              id: sa.client_id,\n              displayName: sa.name,\n              principalType: PrincipalType.ServiceAccount,\n            } as Principal;\n          })\n        );\n\n        setServiceAccountPrincipals(serviceAccounts);\n      }\n    };\n    fetchServiceAccounts();\n  }, [auth, config, instanceOwner]);\n\n  const value = serviceAccountPrincipals\n    ? ({\n        getAllPrincipals: () => {\n          let answer: Principal[] = [];\n          if (userAcountPrincipals !== undefined) {\n            answer = answer.concat(userAcountPrincipals);\n          }\n          if (serviceAccountPrincipals !== undefined) {\n            answer = answer.concat(serviceAccountPrincipals);\n          }\n          return answer;\n        },\n      } as Principals)\n    : undefined;\n\n  return value;\n};\n\nexport const PrincipalsProvider: React.FunctionComponent<PrincipalsProviderProps> = ({ children, kafkaInstance }) => {\n  const value = usePrincipal(kafkaInstance?.owner);\n  return <PrincipalsContext.Provider value={value}>{children}</PrincipalsContext.Provider>;\n};\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { KafkaRequest } from \"@rhoas/kafka-management-sdk\";\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { useHistory } from \"react-router-dom\";\n\ntype InstanceDrawerProps = {\n  kafkaDetail: KafkaRequest | undefined;\n  isExpanded: boolean | undefined;\n  activeTab: string;\n  onClose: () => void;\n  isOpenDeleteInstanceModal: boolean;\n  setIsOpenDeleteInstanceModal: (isopen: boolean) => void;\n};\n\nexport const InstanceDrawer: React.FC<InstanceDrawerProps> = ({\n  isExpanded,\n  onClose,\n  kafkaDetail,\n  activeTab,\n  children,\n  setIsOpenDeleteInstanceModal,\n  isOpenDeleteInstanceModal,\n}) => {\n  const config = useConfig();\n  const history = useHistory();\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  const onDeleteInstance = () => {\n    history.push('/streams/kafkas');\n  }\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={children}\n      render={(InstanceDrawerFederated) => {\n        return (\n          <InstanceDrawerFederated\n            tokenEndPointUrl={tokenEndPointUrl}\n            isExpanded={isExpanded}\n            onClose={onClose}\n            instanceDetail={kafkaDetail}\n            activeTab={activeTab}\n            isOpenDeleteInstanceModal={isOpenDeleteInstanceModal}\n            setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n            onDeleteInstance={onDeleteInstance}\n          >\n            {children}\n          </InstanceDrawerFederated>\n        );\n      }}\n    />\n  );\n};\n","import React from \"react\";\nimport { FederatedModuleConfig, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nexport const FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <AppServicesLoading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n","import React from 'react';\nimport { Banner, Bullseye, Button, Popover } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport type DevelopmentPreviewProps = {\n  show?: boolean\n}\n\nexport const DevelopmentPreview: React.FunctionComponent<DevelopmentPreviewProps> = ({ children, show }) => {\n  const { t } = useTranslation();\n  if (show) {\n    return <div id='scrollablePageMain' className='pf-c-page__main' style={{ height: '100%' }}>\n      <Banner isSticky variant=\"info\">\n        <Bullseye>\n          <Popover\n            aria-label=\"Development Preview Button\"\n            hasAutoWidth\n            bodyContent={\n              <div>{t('common.developmentPreviewTooltip')}</div>\n            }\n            position='bottom'\n            minWidth='300px'\n            maxWidth='25%'>\n            <Button className='app-services-ui--button--dev-preview' variant='link'>{t('common.developmentPreview')}</Button>\n          </Popover>\n        </Bullseye>\n      </Banner>\n      {children}\n    </div>\n  }\n  return (\n    <>{children}</>\n  )\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport {\n  DUMMY_BASE_URL,\n  assertParamExists,\n  setApiKeyToObject,\n  setBasicAuthToObject,\n  setBearerAuthToObject,\n  setOAuthToObject,\n  setSearchParams,\n  serializeDataIfNeeded,\n  toPathString,\n  createRequestFunction,\n} from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n *\n * @export\n * @interface AccessReview\n */\nexport interface AccessReview {\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  action: AccessReviewActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  resource_type: AccessReviewResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReview\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface AccessReviewResponse\n */\nexport interface AccessReviewResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  action?: AccessReviewResponseActionEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccessReviewResponse\n   */\n  allowed: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  resource_type?: AccessReviewResponseResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof AccessReviewResponse\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResponseActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum AccessReviewResponseResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface AccessTokenCfg\n */\nexport interface AccessTokenCfg {\n  /**\n   *\n   * @type {{ [key: string]: object; }}\n   * @memberof AccessTokenCfg\n   */\n  auths: { [key: string]: object };\n}\n/**\n *\n * @export\n * @interface Account\n */\nexport interface Account {\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Account\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Account\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Account\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {Organization}\n   * @memberof Account\n   */\n  organization?: Organization;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Account\n   */\n  service_account?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Account\n   */\n  username: string;\n}\n/**\n *\n * @export\n * @interface AccountAllOf\n */\nexport interface AccountAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountAllOf\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof AccountAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof AccountAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {Organization}\n   * @memberof AccountAllOf\n   */\n  organization?: Organization;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountAllOf\n   */\n  service_account?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountAllOf\n   */\n  username: string;\n}\n/**\n *\n * @export\n * @interface AccountList\n */\nexport interface AccountList {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof AccountList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof AccountList\n   */\n  items: Array<Account>;\n}\n/**\n *\n * @export\n * @interface AccountListAllOf\n */\nexport interface AccountListAllOf {\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof AccountListAllOf\n   */\n  items?: Array<Account>;\n}\n/**\n *\n * @export\n * @interface AccountPatchRequest\n */\nexport interface AccountPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  ban_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  ban_description?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountPatchRequest\n   */\n  banned?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  first_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  last_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountPatchRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof AccountPatchRequest\n   */\n  service_account?: boolean;\n}\n/**\n *\n * @export\n * @interface AccountReference\n */\nexport interface AccountReference {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReference\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface AccountReferenceAllOf\n */\nexport interface AccountReferenceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  email?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof AccountReferenceAllOf\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface Capability\n */\nexport interface Capability {\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Capability\n   */\n  inherited: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Capability\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface CapabilityAllOf\n */\nexport interface CapabilityAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof CapabilityAllOf\n   */\n  inherited: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityAllOf\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityAllOf\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface CapabilityReview\n */\nexport interface CapabilityReview {\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReview\n   */\n  result: string;\n}\n/**\n *\n * @export\n * @interface CapabilityReviewRequest\n */\nexport interface CapabilityReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  capability: CapabilityReviewRequestCapabilityEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof CapabilityReviewRequest\n   */\n  type: CapabilityReviewRequestTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum CapabilityReviewRequestCapabilityEnum {\n  ManageClusterAdmin = 'manage_cluster_admin',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum CapabilityReviewRequestTypeEnum {\n  Cluster = 'Cluster',\n}\n\n/**\n *\n * @export\n * @interface ClusterAuthorizationRequest\n */\nexport interface ClusterAuthorizationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  availability_zone?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  byoc?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  cluster_id: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  disconnected?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  product_category?: ClusterAuthorizationRequestProductCategoryEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationRequest\n   */\n  product_id?: ClusterAuthorizationRequestProductIdEnum;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationRequest\n   */\n  reserve?: boolean;\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ClusterAuthorizationRequest\n   */\n  resources?: Array<ReservedResource>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ClusterAuthorizationRequestProductCategoryEnum {\n  AssistedInstall = 'assistedInstall',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ClusterAuthorizationRequestProductIdEnum {\n  Ocp = 'ocp',\n  Osd = 'osd',\n  Osdtrial = 'osdtrial',\n  Moa = 'moa',\n  Rhmi = 'rhmi',\n}\n\n/**\n *\n * @export\n * @interface ClusterAuthorizationResponse\n */\nexport interface ClusterAuthorizationResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterAuthorizationResponse\n   */\n  allowed: boolean;\n  /**\n   *\n   * @type {Array<ExcessResource>}\n   * @memberof ClusterAuthorizationResponse\n   */\n  excess_resources: Array<ExcessResource>;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterAuthorizationResponse\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ClusterAuthorizationResponse\n   */\n  subscription?: ObjectReference;\n}\n/**\n *\n * @export\n * @interface ClusterMetricsNodes\n */\nexport interface ClusterMetricsNodes {\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  compute?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  infra?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  master?: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterMetricsNodes\n   */\n  total?: number;\n}\n/**\n *\n * @export\n * @interface ClusterRegistrationRequest\n */\nexport interface ClusterRegistrationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationRequest\n   */\n  authorization_token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationRequest\n   */\n  cluster_id?: string;\n}\n/**\n *\n * @export\n * @interface ClusterRegistrationResponse\n */\nexport interface ClusterRegistrationResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  authorization_token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  cluster_id?: string;\n  /**\n   * Cluster Registration expiration in Unix time\n   * @type {string}\n   * @memberof ClusterRegistrationResponse\n   */\n  expires_at?: string;\n}\n/**\n *\n * @export\n * @interface ClusterResource\n */\nexport interface ClusterResource {\n  /**\n   *\n   * @type {ClusterResourceTotal}\n   * @memberof ClusterResource\n   */\n  total: ClusterResourceTotal;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterResource\n   */\n  updated_timestamp: string;\n  /**\n   *\n   * @type {ClusterResourceTotal}\n   * @memberof ClusterResource\n   */\n  used: ClusterResourceTotal;\n}\n/**\n *\n * @export\n * @interface ClusterResourceTotal\n */\nexport interface ClusterResourceTotal {\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterResourceTotal\n   */\n  unit: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ClusterResourceTotal\n   */\n  value: number;\n}\n/**\n *\n * @export\n * @interface ClusterUpgrade\n */\nexport interface ClusterUpgrade {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ClusterUpgrade\n   */\n  available?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  updated_timestamp?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ClusterUpgrade\n   */\n  version?: string;\n}\n/**\n *\n * @export\n * @interface EphemeralResourceQuota\n */\nexport interface EphemeralResourceQuota {\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof EphemeralResourceQuota\n   */\n  byoc?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof EphemeralResourceQuota\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof EphemeralResourceQuota\n   */\n  sku_count?: number;\n}\n/**\n *\n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  operation_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorAllOf\n   */\n  reason?: string;\n}\n/**\n *\n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n  /**\n   *\n   * @type {string}\n   * @memberof ErrorList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ErrorList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Error>}\n   * @memberof ErrorList\n   */\n  items: Array<Error>;\n}\n/**\n *\n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n  /**\n   *\n   * @type {Array<Error>}\n   * @memberof ErrorListAllOf\n   */\n  items?: Array<Error>;\n}\n/**\n *\n * @export\n * @interface ExcessResource\n */\nexport interface ExcessResource {\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExcessResource\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ExcessResource\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResource\n   */\n  resource_type?: string;\n}\n/**\n *\n * @export\n * @interface ExcessResourceAllOf\n */\nexport interface ExcessResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExcessResourceAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ExcessResourceAllOf\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ExcessResourceAllOf\n   */\n  resource_type?: string;\n}\n/**\n *\n * @export\n * @interface ExportControlReview\n */\nexport interface ExportControlReview {\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExportControlReview\n   */\n  restricted: boolean;\n}\n/**\n *\n * @export\n * @interface ExportControlReviewRequest\n */\nexport interface ExportControlReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ExportControlReviewRequest\n   */\n  account_username: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ExportControlReviewRequest\n   */\n  ignore_cache?: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureReview\n */\nexport interface FeatureReview {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReview\n   */\n  feature: string;\n}\n/**\n *\n * @export\n * @interface FeatureReviewResponse\n */\nexport interface FeatureReviewResponse {\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureReviewResponse\n   */\n  enabled: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureReviewResponse\n   */\n  feature_id: string;\n}\n/**\n *\n * @export\n * @interface FeatureToggle\n */\nexport interface FeatureToggle {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggle\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureToggle\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureToggleAllOf\n */\nexport interface FeatureToggleAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof FeatureToggleAllOf\n   */\n  enabled: boolean;\n}\n/**\n *\n * @export\n * @interface FeatureToggleQueryRequest\n */\nexport interface FeatureToggleQueryRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggleQueryRequest\n   */\n  organization_id: string;\n}\n/**\n *\n * @export\n * @interface FeatureToggleQueryRequestAllOf\n */\nexport interface FeatureToggleQueryRequestAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof FeatureToggleQueryRequestAllOf\n   */\n  organization_id: string;\n}\n/**\n *\n * @export\n * @interface Label\n */\nexport interface Label {\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Label\n   */\n  internal: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  key: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Label\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface LabelAllOf\n */\nexport interface LabelAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof LabelAllOf\n   */\n  internal: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  key: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof LabelAllOf\n   */\n  value: string;\n}\n/**\n *\n * @export\n * @interface LabelList\n */\nexport interface LabelList {\n  /**\n   *\n   * @type {string}\n   * @memberof LabelList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof LabelList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof LabelList\n   */\n  items: Array<Label>;\n}\n/**\n *\n * @export\n * @interface LabelListAllOf\n */\nexport interface LabelListAllOf {\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof LabelListAllOf\n   */\n  items?: Array<Label>;\n}\n/**\n *\n * @export\n * @interface List\n */\nexport interface List {\n  /**\n   *\n   * @type {string}\n   * @memberof List\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof List\n   */\n  total: number;\n}\n/**\n *\n * @export\n * @interface Metric\n */\nexport interface Metric {\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  health_state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  metrics?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Metric\n   */\n  query_timestamp?: string;\n}\n/**\n *\n * @export\n * @interface MetricAllOf\n */\nexport interface MetricAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  health_state?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  metrics?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof MetricAllOf\n   */\n  query_timestamp?: string;\n}\n/**\n *\n * @export\n * @interface MetricsList\n */\nexport interface MetricsList {\n  /**\n   *\n   * @type {string}\n   * @memberof MetricsList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof MetricsList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Metric>}\n   * @memberof MetricsList\n   */\n  items: Array<Metric>;\n}\n/**\n *\n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n  /**\n   *\n   * @type {Array<Metric>}\n   * @memberof MetricsListAllOf\n   */\n  items?: Array<Metric>;\n}\n/**\n *\n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  operation_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ModelError\n   */\n  reason?: string;\n}\n/**\n *\n * @export\n * @interface NotificationContactCreateRequest\n */\nexport interface NotificationContactCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationContactCreateRequest\n   */\n  account_identifier?: string;\n}\n/**\n *\n * @export\n * @interface NotificationRequest\n */\nexport interface NotificationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  bcc_address?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof NotificationRequest\n   */\n  include_red_hat_associates?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  subject?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof NotificationRequest\n   */\n  template_name: string;\n  /**\n   *\n   * @type {Array<TemplateParameter>}\n   * @memberof NotificationRequest\n   */\n  template_parameters?: Array<TemplateParameter>;\n}\n/**\n *\n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ObjectReference\n   */\n  kind?: string;\n}\n/**\n *\n * @export\n * @interface OneMetric\n */\nexport interface OneMetric {\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  cluster_type: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_cpu: ClusterResource;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_memory: ClusterResource;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  compute_nodes_sockets: ClusterResource;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  console_url: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  cpu: ClusterResource;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  critical_alerts_firing: number;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  health_state?: OneMetricHealthStateEnum;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  memory: ClusterResource;\n  /**\n   *\n   * @type {ClusterMetricsNodes}\n   * @memberof OneMetric\n   */\n  nodes: ClusterMetricsNodes;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  openshift_version: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  operating_system: string;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  operators_condition_failing: number;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  query_timestamp?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  region: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  sockets: ClusterResource;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  state: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OneMetric\n   */\n  state_description: string;\n  /**\n   *\n   * @type {ClusterResource}\n   * @memberof OneMetric\n   */\n  storage: ClusterResource;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_cpu_total: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_obligation_exists: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OneMetric\n   */\n  subscription_socket_total: number;\n  /**\n   *\n   * @type {ClusterUpgrade}\n   * @memberof OneMetric\n   */\n  upgrade: ClusterUpgrade;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum OneMetricHealthStateEnum {\n  Healthy = 'healthy',\n  Unhealthy = 'unhealthy',\n  Unknown = 'unknown',\n}\n\n/**\n *\n * @export\n * @interface Organization\n */\nexport interface Organization {\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  kind?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Organization\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Organization\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Organization\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface OrganizationAllOf\n */\nexport interface OrganizationAllOf {\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof OrganizationAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof OrganizationAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationAllOf\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface OrganizationList\n */\nexport interface OrganizationList {\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof OrganizationList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Organization>}\n   * @memberof OrganizationList\n   */\n  items: Array<Organization>;\n}\n/**\n *\n * @export\n * @interface OrganizationListAllOf\n */\nexport interface OrganizationListAllOf {\n  /**\n   *\n   * @type {Array<Organization>}\n   * @memberof OrganizationListAllOf\n   */\n  items?: Array<Organization>;\n}\n/**\n *\n * @export\n * @interface OrganizationPatchRequest\n */\nexport interface OrganizationPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  ebs_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  external_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof OrganizationPatchRequest\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface Permission\n */\nexport interface Permission {\n  /**\n   *\n   * @type {string}\n   * @memberof Permission\n   */\n  action?: PermissionActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Permission\n   */\n  resource?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum PermissionActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n\n/**\n *\n * @export\n * @interface PermissionAllOf\n */\nexport interface PermissionAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionAllOf\n   */\n  action?: PermissionAllOfActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionAllOf\n   */\n  resource?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum PermissionAllOfActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n\n/**\n *\n * @export\n * @interface PermissionList\n */\nexport interface PermissionList {\n  /**\n   *\n   * @type {string}\n   * @memberof PermissionList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PermissionList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof PermissionList\n   */\n  items: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface PermissionListAllOf\n */\nexport interface PermissionListAllOf {\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof PermissionListAllOf\n   */\n  items?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface Plan\n */\nexport interface Plan {\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  category?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Plan\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface PlanAllOf\n */\nexport interface PlanAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  category?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof PlanAllOf\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface PlanList\n */\nexport interface PlanList {\n  /**\n   *\n   * @type {string}\n   * @memberof PlanList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof PlanList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Plan>}\n   * @memberof PlanList\n   */\n  items: Array<Plan>;\n}\n/**\n *\n * @export\n * @interface PlanListAllOf\n */\nexport interface PlanListAllOf {\n  /**\n   *\n   * @type {Array<Plan>}\n   * @memberof PlanListAllOf\n   */\n  items?: Array<Plan>;\n}\n/**\n *\n * @export\n * @interface PullSecretRequest\n */\nexport interface PullSecretRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof PullSecretRequest\n   */\n  external_resource_id: string;\n}\n/**\n *\n * @export\n * @interface QuotaCost\n */\nexport interface QuotaCost {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCost\n   */\n  allowed: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCost\n   */\n  consumed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCost\n   */\n  quota_id: string;\n  /**\n   *\n   * @type {Array<RelatedResource>}\n   * @memberof QuotaCost\n   */\n  related_resources?: Array<RelatedResource>;\n}\n/**\n *\n * @export\n * @interface QuotaCostAllOf\n */\nexport interface QuotaCostAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostAllOf\n   */\n  allowed: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostAllOf\n   */\n  consumed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostAllOf\n   */\n  quota_id: string;\n  /**\n   *\n   * @type {Array<RelatedResource>}\n   * @memberof QuotaCostAllOf\n   */\n  related_resources?: Array<RelatedResource>;\n}\n/**\n *\n * @export\n * @interface QuotaCostList\n */\nexport interface QuotaCostList {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaCostList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaCostList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<QuotaCost>}\n   * @memberof QuotaCostList\n   */\n  items: Array<QuotaCost>;\n}\n/**\n *\n * @export\n * @interface QuotaCostListAllOf\n */\nexport interface QuotaCostListAllOf {\n  /**\n   *\n   * @type {Array<QuotaCost>}\n   * @memberof QuotaCostListAllOf\n   */\n  items?: Array<QuotaCost>;\n}\n/**\n *\n * @export\n * @interface QuotaSummary\n */\nexport interface QuotaSummary {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummary\n   */\n  allowed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof QuotaSummary\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummary\n   */\n  reserved: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummary\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryAllOf\n */\nexport interface QuotaSummaryAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryAllOf\n   */\n  allowed: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof QuotaSummaryAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryAllOf\n   */\n  reserved: number;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryAllOf\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryList\n */\nexport interface QuotaSummaryList {\n  /**\n   *\n   * @type {string}\n   * @memberof QuotaSummaryList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof QuotaSummaryList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<QuotaSummary>}\n   * @memberof QuotaSummaryList\n   */\n  items: Array<QuotaSummary>;\n}\n/**\n *\n * @export\n * @interface QuotaSummaryListAllOf\n */\nexport interface QuotaSummaryListAllOf {\n  /**\n   *\n   * @type {Array<QuotaSummary>}\n   * @memberof QuotaSummaryListAllOf\n   */\n  items?: Array<QuotaSummary>;\n}\n/**\n *\n * @export\n * @interface Registry\n */\nexport interface Registry {\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  kind?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Registry\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Registry\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RegistryAllOf\n */\nexport interface RegistryAllOf {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryAllOf\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryAllOf\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCreateRequest\n */\nexport interface RegistryCreateRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryCreateRequest\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCreateRequest\n   */\n  url: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredential\n */\nexport interface RegistryCredential {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  kind?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredential\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredential\n   */\n  registry?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredential\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialAllOf\n */\nexport interface RegistryCredentialAllOf {\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredentialAllOf\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RegistryCredentialAllOf\n   */\n  registry?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialAllOf\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialList\n */\nexport interface RegistryCredentialList {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryCredentialList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<RegistryCredential>}\n   * @memberof RegistryCredentialList\n   */\n  items: Array<RegistryCredential>;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialListAllOf\n */\nexport interface RegistryCredentialListAllOf {\n  /**\n   *\n   * @type {Array<RegistryCredential>}\n   * @memberof RegistryCredentialListAllOf\n   */\n  items?: Array<RegistryCredential>;\n}\n/**\n *\n * @export\n * @interface RegistryCredentialPatchRequest\n */\nexport interface RegistryCredentialPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  external_resource_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  registry_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  token?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryCredentialPatchRequest\n   */\n  username?: string;\n}\n/**\n *\n * @export\n * @interface RegistryList\n */\nexport interface RegistryList {\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RegistryList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Registry>}\n   * @memberof RegistryList\n   */\n  items: Array<Registry>;\n}\n/**\n *\n * @export\n * @interface RegistryListAllOf\n */\nexport interface RegistryListAllOf {\n  /**\n   *\n   * @type {Array<Registry>}\n   * @memberof RegistryListAllOf\n   */\n  items?: Array<Registry>;\n}\n/**\n *\n * @export\n * @interface RegistryRequest\n */\nexport interface RegistryRequest {\n  /**\n   *\n   * @type {boolean}\n   * @memberof RegistryRequest\n   */\n  cloudAlias?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  org_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  team_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RegistryRequest\n   */\n  url?: string;\n}\n/**\n *\n * @export\n * @interface RelatedResource\n */\nexport interface RelatedResource {\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  billing_model: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  byoc: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RelatedResource\n   */\n  cost: number;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  product: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  product_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResource\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface RelatedResourceAllOf\n */\nexport interface RelatedResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  availability_zone_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  billing_model: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  byoc: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  cloud_provider: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RelatedResourceAllOf\n   */\n  cost: number;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  product: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  product_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RelatedResourceAllOf\n   */\n  resource_type: string;\n}\n/**\n *\n * @export\n * @interface ReservedResource\n */\nexport interface ReservedResource {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResource\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResource\n   */\n  cluster?: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResource\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ReservedResource\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResource\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface ReservedResourceAllOf\n */\nexport interface ReservedResourceAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  billing_model?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResourceAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ReservedResourceAllOf\n   */\n  cluster?: boolean;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceAllOf\n   */\n  count?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof ReservedResourceAllOf\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceAllOf\n   */\n  updated_at?: string;\n}\n/**\n *\n * @export\n * @interface ReservedResourceList\n */\nexport interface ReservedResourceList {\n  /**\n   *\n   * @type {string}\n   * @memberof ReservedResourceList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ReservedResourceList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ReservedResourceList\n   */\n  items: Array<ReservedResource>;\n}\n/**\n *\n * @export\n * @interface ReservedResourceListAllOf\n */\nexport interface ReservedResourceListAllOf {\n  /**\n   *\n   * @type {Array<ReservedResource>}\n   * @memberof ReservedResourceListAllOf\n   */\n  items?: Array<ReservedResource>;\n}\n/**\n *\n * @export\n * @interface ResourceQuota\n */\nexport interface ResourceQuota {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   * @deprecated\n   */\n  resource_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuota\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  type?: ResourceQuotaTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuota\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceQuotaAllOf\n */\nexport interface ResourceQuotaAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  resource_name: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   * @deprecated\n   */\n  resource_type: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  sku?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaAllOf\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  type?: ResourceQuotaAllOfTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaAllOf\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaAllOfTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceQuotaList\n */\nexport interface ResourceQuotaList {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<ResourceQuota>}\n   * @memberof ResourceQuotaList\n   */\n  items: Array<ResourceQuota>;\n}\n/**\n *\n * @export\n * @interface ResourceQuotaListAllOf\n */\nexport interface ResourceQuotaListAllOf {\n  /**\n   *\n   * @type {Array<ResourceQuota>}\n   * @memberof ResourceQuotaListAllOf\n   */\n  items?: Array<ResourceQuota>;\n}\n/**\n *\n * @export\n * @interface ResourceQuotaRequest\n */\nexport interface ResourceQuotaRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaRequest\n   */\n  sku: string;\n  /**\n   *\n   * @type {number}\n   * @memberof ResourceQuotaRequest\n   */\n  sku_count: number;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceQuotaRequest\n   */\n  type?: ResourceQuotaRequestTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceQuotaRequestTypeEnum {\n  Config = 'Config',\n  Manual = 'Manual',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceReview\n */\nexport interface ResourceReview {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  action: ResourceReviewActionEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  cluster_ids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  cluster_uuids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  organization_ids: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReview\n   */\n  resource_type: ResourceReviewResourceTypeEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof ResourceReview\n   */\n  subscription_ids: Array<string>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface ResourceReviewRequest\n */\nexport interface ResourceReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  account_username?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  action?: ResourceReviewRequestActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof ResourceReviewRequest\n   */\n  resource_type?: ResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewRequestActionEnum {\n  Get = 'get',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum ResourceReviewRequestResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface Role\n */\nexport interface Role {\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Role\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof Role\n   */\n  permissions?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface RoleAllOf\n */\nexport interface RoleAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<Permission>}\n   * @memberof RoleAllOf\n   */\n  permissions?: Array<Permission>;\n}\n/**\n *\n * @export\n * @interface RoleBinding\n */\nexport interface RoleBinding {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  kind?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBinding\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  organization?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  role?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBinding\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  type?: RoleBindingTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBinding\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum RoleBindingTypeEnum {\n  Application = 'Application',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n}\n\n/**\n *\n * @export\n * @interface RoleBindingAllOf\n */\nexport interface RoleBindingAllOf {\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  account?: ObjectReference;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingAllOf\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  organization?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  role?: ObjectReference;\n  /**\n   *\n   * @type {ObjectReference}\n   * @memberof RoleBindingAllOf\n   */\n  subscription?: ObjectReference;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  type?: RoleBindingAllOfTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingAllOf\n   */\n  updated_at?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum RoleBindingAllOfTypeEnum {\n  Application = 'Application',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n}\n\n/**\n *\n * @export\n * @interface RoleBindingCreateRequest\n */\nexport interface RoleBindingCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  account_id: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingCreateRequest\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  role_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingCreateRequest\n   */\n  type: string;\n}\n/**\n *\n * @export\n * @interface RoleBindingList\n */\nexport interface RoleBindingList {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleBindingList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<RoleBinding>}\n   * @memberof RoleBindingList\n   */\n  items: Array<RoleBinding>;\n}\n/**\n *\n * @export\n * @interface RoleBindingListAllOf\n */\nexport interface RoleBindingListAllOf {\n  /**\n   *\n   * @type {Array<RoleBinding>}\n   * @memberof RoleBindingListAllOf\n   */\n  items?: Array<RoleBinding>;\n}\n/**\n *\n * @export\n * @interface RoleBindingRequest\n */\nexport interface RoleBindingRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  account_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof RoleBindingRequest\n   */\n  config_managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  role_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof RoleBindingRequest\n   */\n  type?: string;\n}\n/**\n *\n * @export\n * @interface RoleList\n */\nexport interface RoleList {\n  /**\n   *\n   * @type {string}\n   * @memberof RoleList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof RoleList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Role>}\n   * @memberof RoleList\n   */\n  items: Array<Role>;\n}\n/**\n *\n * @export\n * @interface RoleListAllOf\n */\nexport interface RoleListAllOf {\n  /**\n   *\n   * @type {Array<Role>}\n   * @memberof RoleListAllOf\n   */\n  items?: Array<Role>;\n}\n/**\n *\n * @export\n * @interface SKU\n */\nexport interface SKU {\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  kind?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SKU\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKU\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {Array<EphemeralResourceQuota>}\n   * @memberof SKU\n   */\n  resources?: Array<EphemeralResourceQuota>;\n}\n/**\n *\n * @export\n * @interface SKUAllOf\n */\nexport interface SKUAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  availability_zone_type?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SKUAllOf\n   */\n  byoc: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  resource_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SKUAllOf\n   */\n  resource_type?: string;\n  /**\n   *\n   * @type {Array<EphemeralResourceQuota>}\n   * @memberof SKUAllOf\n   */\n  resources?: Array<EphemeralResourceQuota>;\n}\n/**\n *\n * @export\n * @interface SelfAccessReview\n */\nexport interface SelfAccessReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  action: SelfAccessReviewActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  resource_type: SelfAccessReviewResourceTypeEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfAccessReview\n   */\n  subscription_id?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfAccessReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfAccessReviewResourceTypeEnum {\n  AddOn = 'AddOn',\n  Flavour = 'Flavour',\n  Account = 'Account',\n  AccountPool = 'AccountPool',\n  Cluster = 'Cluster',\n  Plan = 'Plan',\n  Subscription = 'Subscription',\n  Organization = 'Organization',\n  Role = 'Role',\n  Permission = 'Permission',\n  RoleBinding = 'RoleBinding',\n  Registry = 'Registry',\n  RegistryCredential = 'RegistryCredential',\n  CurrentAccount = 'CurrentAccount',\n  AccessReview = 'AccessReview',\n  SelfAcccessReview = 'SelfAcccessReview',\n  ResourceReview = 'ResourceReview',\n  SelfResourceReview = 'SelfResourceReview',\n  ClusterRegistration = 'ClusterRegistration',\n  AccessToken = 'AccessToken',\n  ClusterAuthorization = 'ClusterAuthorization',\n  SelfManagedCluster = 'SelfManagedCluster',\n  RedhatManagedCluster = 'RedhatManagedCluster',\n  ExportControlReview = 'ExportControlReview',\n  ClusterLog = 'ClusterLog',\n  ClusterCredential = 'ClusterCredential',\n  ClusterMetric = 'ClusterMetric',\n  ResourceQuota = 'ResourceQuota',\n  ReservedResource = 'ReservedResource',\n  Dashboard = 'Dashboard',\n  ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n  ServiceLog = 'ServiceLog',\n  InternalServiceLog = 'InternalServiceLog',\n  CsLogs = 'CSLogs',\n  QuotaSummary = 'QuotaSummary',\n  SubscriptionLabel = 'SubscriptionLabel',\n  OrganizationLabel = 'OrganizationLabel',\n  SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n  SelfAccessReview = 'SelfAccessReview',\n  SubscriptionInternal = 'SubscriptionInternal',\n}\n\n/**\n *\n * @export\n * @interface SelfFeatureReview\n */\nexport interface SelfFeatureReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfFeatureReview\n   */\n  feature: string;\n}\n/**\n *\n * @export\n * @interface SelfResourceReview\n */\nexport interface SelfResourceReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReview\n   */\n  action: SelfResourceReviewActionEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  cluster_ids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  cluster_uuids: Array<string>;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  organization_ids: Array<string>;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReview\n   */\n  resource_type: SelfResourceReviewResourceTypeEnum;\n  /**\n   *\n   * @type {Array<string>}\n   * @memberof SelfResourceReview\n   */\n  subscription_ids: Array<string>;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewActionEnum {\n  Get = 'get',\n  List = 'list',\n  Create = 'create',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface SelfResourceReviewRequest\n */\nexport interface SelfResourceReviewRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReviewRequest\n   */\n  action?: SelfResourceReviewRequestActionEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfResourceReviewRequest\n   */\n  resource_type?: SelfResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewRequestActionEnum {\n  Get = 'get',\n  Delete = 'delete',\n  Update = 'update',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SelfResourceReviewRequestResourceTypeEnum {\n  Cluster = 'Cluster',\n  Subscription = 'Subscription',\n}\n\n/**\n *\n * @export\n * @interface SelfTermsReview\n */\nexport interface SelfTermsReview {\n  /**\n   *\n   * @type {string}\n   * @memberof SelfTermsReview\n   */\n  event_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SelfTermsReview\n   */\n  site_code?: string;\n}\n/**\n *\n * @export\n * @interface SkuList\n */\nexport interface SkuList {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<SKU>}\n   * @memberof SkuList\n   */\n  items: Array<SKU>;\n}\n/**\n *\n * @export\n * @interface SkuListAllOf\n */\nexport interface SkuListAllOf {\n  /**\n   *\n   * @type {Array<SKU>}\n   * @memberof SkuListAllOf\n   */\n  items?: Array<SKU>;\n}\n/**\n *\n * @export\n * @interface SkuRules\n */\nexport interface SkuRules {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  kind?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRules\n   */\n  allowed?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  quota_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRules\n   */\n  sku?: string;\n}\n/**\n *\n * @export\n * @interface SkuRulesAllOf\n */\nexport interface SkuRulesAllOf {\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesAllOf\n   */\n  allowed?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesAllOf\n   */\n  quota_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesAllOf\n   */\n  sku?: string;\n}\n/**\n *\n * @export\n * @interface SkuRulesList\n */\nexport interface SkuRulesList {\n  /**\n   *\n   * @type {string}\n   * @memberof SkuRulesList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SkuRulesList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<SkuRules>}\n   * @memberof SkuRulesList\n   */\n  items: Array<SkuRules>;\n}\n/**\n *\n * @export\n * @interface SkuRulesListAllOf\n */\nexport interface SkuRulesListAllOf {\n  /**\n   *\n   * @type {Array<SkuRules>}\n   * @memberof SkuRulesListAllOf\n   */\n  items?: Array<SkuRules>;\n}\n/**\n *\n * @export\n * @interface Subscription\n */\nexport interface Subscription {\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  kind?: string;\n  /**\n   * If set, the date the subscription expires based on the billing model\n   * @type {string}\n   * @memberof Subscription\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof Subscription\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cluster_billing_model?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof Subscription\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {AccountReference}\n   * @memberof Subscription\n   */\n  creator?: AccountReference;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof Subscription\n   */\n  labels?: Array<Label>;\n  /**\n   * Last time this subscription were reconciled about cluster usage\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_reconcile_date?: string;\n  /**\n   * Last time status was set to Released for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_released_at?: string;\n  /**\n   * Last telemetry authorization request for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof Subscription\n   */\n  last_telemetry_date?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Subscription\n   */\n  managed: boolean;\n  /**\n   *\n   * @type {Array<OneMetric>}\n   * @memberof Subscription\n   */\n  metrics?: Array<OneMetric>;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof Subscription\n   */\n  notification_contacts?: Array<Account>;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {Plan}\n   * @memberof Subscription\n   */\n  plan?: Plan;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  product_bundle?: SubscriptionProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof Subscription\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  service_level?: SubscriptionServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof Subscription\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  support_level?: SubscriptionSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  system_units?: SubscriptionSystemUnitsEnum;\n  /**\n   * If the subscription is a trial, date the trial ends\n   * @type {string}\n   * @memberof Subscription\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Subscription\n   */\n  usage?: SubscriptionUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionAllOf\n */\nexport interface SubscriptionAllOf {\n  /**\n   * If set, the date the subscription expires based on the billing model\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {Array<Capability>}\n   * @memberof SubscriptionAllOf\n   */\n  capabilities?: Array<Capability>;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cluster_billing_model?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionAllOf\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  created_at?: string;\n  /**\n   *\n   * @type {AccountReference}\n   * @memberof SubscriptionAllOf\n   */\n  creator?: AccountReference;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {Array<Label>}\n   * @memberof SubscriptionAllOf\n   */\n  labels?: Array<Label>;\n  /**\n   * Last time this subscription were reconciled about cluster usage\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_reconcile_date?: string;\n  /**\n   * Last time status was set to Released for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_released_at?: string;\n  /**\n   * Last telemetry authorization request for this cluster/subscription in Unix time\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  last_telemetry_date?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionAllOf\n   */\n  managed: boolean;\n  /**\n   *\n   * @type {Array<OneMetric>}\n   * @memberof SubscriptionAllOf\n   */\n  metrics?: Array<OneMetric>;\n  /**\n   *\n   * @type {Array<Account>}\n   * @memberof SubscriptionAllOf\n   */\n  notification_contacts?: Array<Account>;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {Plan}\n   * @memberof SubscriptionAllOf\n   */\n  plan?: Plan;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  product_bundle?: SubscriptionAllOfProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionAllOf\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  service_level?: SubscriptionAllOfServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionAllOf\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  support_level?: SubscriptionAllOfSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  system_units?: SubscriptionAllOfSystemUnitsEnum;\n  /**\n   * If the subscription is a trial, date the trial ends\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  updated_at?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionAllOf\n   */\n  usage?: SubscriptionAllOfUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionAllOfUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionCreateRequest\n */\nexport interface SubscriptionCreateRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  cluster_uuid: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  plan_id: SubscriptionCreateRequestPlanIdEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionCreateRequest\n   */\n  status: SubscriptionCreateRequestStatusEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionCreateRequestPlanIdEnum {\n  Ocp = 'OCP',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionCreateRequestStatusEnum {\n  Disconnected = 'Disconnected',\n}\n\n/**\n *\n * @export\n * @interface SubscriptionList\n */\nexport interface SubscriptionList {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionList\n   */\n  kind: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  page: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  size: number;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionList\n   */\n  total: number;\n  /**\n   *\n   * @type {Array<Subscription>}\n   * @memberof SubscriptionList\n   */\n  items: Array<Subscription>;\n}\n/**\n *\n * @export\n * @interface SubscriptionListAllOf\n */\nexport interface SubscriptionListAllOf {\n  /**\n   *\n   * @type {Array<Subscription>}\n   * @memberof SubscriptionListAllOf\n   */\n  items?: Array<Subscription>;\n}\n/**\n *\n * @export\n * @interface SubscriptionPatchRequest\n */\nexport interface SubscriptionPatchRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  billing_expiration_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cloud_account_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cloud_provider_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cluster_billing_model?: SubscriptionPatchRequestClusterBillingModelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  console_url?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  consumer_uuid?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionPatchRequest\n   */\n  cpu_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  creator_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  display_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  external_cluster_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionPatchRequest\n   */\n  managed?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  organization_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  plan_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  product_bundle?: SubscriptionPatchRequestProductBundleEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  provenance?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  region_id?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof SubscriptionPatchRequest\n   */\n  released?: boolean;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  service_level?: SubscriptionPatchRequestServiceLevelEnum;\n  /**\n   *\n   * @type {number}\n   * @memberof SubscriptionPatchRequest\n   */\n  socket_total?: number;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  support_level?: SubscriptionPatchRequestSupportLevelEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  system_units?: SubscriptionPatchRequestSystemUnitsEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  trial_end_date?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SubscriptionPatchRequest\n   */\n  usage?: SubscriptionPatchRequestUsageEnum;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestClusterBillingModelEnum {\n  Standard = 'standard',\n  Marketplace = 'marketplace',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestProductBundleEnum {\n  Openshift = 'Openshift',\n  JBossMiddleware = 'JBoss-Middleware',\n  IbmCloudPak = 'IBM-CloudPak',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestServiceLevelEnum {\n  L1L3 = 'L1-L3',\n  L3Only = 'L3-only',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestSupportLevelEnum {\n  Eval = 'Eval',\n  Standard = 'Standard',\n  Premium = 'Premium',\n  SelfSupport = 'Self-Support',\n  None = 'None',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestSystemUnitsEnum {\n  CoresVCpu = 'Cores/vCPU',\n  Sockets = 'Sockets',\n}\n/**\n * @export\n * @enum {string}\n */\nexport enum SubscriptionPatchRequestUsageEnum {\n  Production = 'Production',\n  DevelopmentTest = 'Development/Test',\n  DisasterRecovery = 'Disaster Recovery',\n  Academic = 'Academic',\n}\n\n/**\n *\n * @export\n * @interface Summary\n */\nexport interface Summary {\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  href?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  kind?: string;\n  /**\n   *\n   * @type {Array<SummaryMetrics>}\n   * @memberof Summary\n   */\n  metrics: Array<SummaryMetrics>;\n  /**\n   *\n   * @type {string}\n   * @memberof Summary\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface SummaryAllOf\n */\nexport interface SummaryAllOf {\n  /**\n   *\n   * @type {Array<SummaryMetrics>}\n   * @memberof SummaryAllOf\n   */\n  metrics: Array<SummaryMetrics>;\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryAllOf\n   */\n  name?: string;\n}\n/**\n *\n * @export\n * @interface SummaryMetrics\n */\nexport interface SummaryMetrics {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryMetrics\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<SummaryVector>}\n   * @memberof SummaryMetrics\n   */\n  vector?: Array<SummaryVector>;\n}\n/**\n *\n * @export\n * @interface SummaryMetricsAllOf\n */\nexport interface SummaryMetricsAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryMetricsAllOf\n   */\n  name?: string;\n  /**\n   *\n   * @type {Array<SummaryVector>}\n   * @memberof SummaryMetricsAllOf\n   */\n  vector?: Array<SummaryVector>;\n}\n/**\n *\n * @export\n * @interface SummaryVector\n */\nexport interface SummaryVector {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryVector\n   */\n  time?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SummaryVector\n   */\n  value?: number;\n}\n/**\n *\n * @export\n * @interface SummaryVectorAllOf\n */\nexport interface SummaryVectorAllOf {\n  /**\n   *\n   * @type {string}\n   * @memberof SummaryVectorAllOf\n   */\n  time?: string;\n  /**\n   *\n   * @type {number}\n   * @memberof SummaryVectorAllOf\n   */\n  value?: number;\n}\n/**\n *\n * @export\n * @interface SupportCasesCreatedResponse\n */\nexport interface SupportCasesCreatedResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  caseNumber?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  description?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  severity?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  status?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  summary?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesCreatedResponse\n   */\n  uri?: string;\n}\n/**\n *\n * @export\n * @interface SupportCasesRequest\n */\nexport interface SupportCasesRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  account_number?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  case_language?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  cluster_uuid?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  contact_sso_name?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  description: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  event_stream_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  openshift_cluster_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  product?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  severity: SupportCasesRequestSeverityEnum;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  subscription_id?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  summary: string;\n  /**\n   *\n   * @type {string}\n   * @memberof SupportCasesRequest\n   */\n  version?: string;\n}\n\n/**\n * @export\n * @enum {string}\n */\nexport enum SupportCasesRequestSeverityEnum {\n  _1Urgent = '1 (Urgent)',\n  _2High = '2 (High)',\n  _3Normal = '3 (Normal)',\n  _4Low = '4 (Low)',\n}\n\n/**\n *\n * @export\n * @interface TemplateParameter\n */\nexport interface TemplateParameter {\n  /**\n   *\n   * @type {string}\n   * @memberof TemplateParameter\n   */\n  content: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TemplateParameter\n   */\n  name: string;\n}\n/**\n *\n * @export\n * @interface TermsReview\n */\nexport interface TermsReview {\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  account_username: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  event_code?: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReview\n   */\n  site_code?: string;\n}\n/**\n *\n * @export\n * @interface TermsReviewResponse\n */\nexport interface TermsReviewResponse {\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  account_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  organization_id: string;\n  /**\n   *\n   * @type {string}\n   * @memberof TermsReviewResponse\n   */\n  redirect_url?: string;\n  /**\n   *\n   * @type {boolean}\n   * @memberof TermsReviewResponse\n   */\n  terms_available: boolean;\n  /**\n   *\n   * @type {boolean}\n   * @memberof TermsReviewResponse\n   */\n  terms_required: boolean;\n}\n/**\n *\n * @export\n * @interface TokenAuthorizationRequest\n */\nexport interface TokenAuthorizationRequest {\n  /**\n   *\n   * @type {string}\n   * @memberof TokenAuthorizationRequest\n   */\n  authorization_token?: string;\n}\n/**\n *\n * @export\n * @interface TokenAuthorizationResponse\n */\nexport interface TokenAuthorizationResponse {\n  /**\n   *\n   * @type {Account}\n   * @memberof TokenAuthorizationResponse\n   */\n  account?: Account;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccessTokenPost: async (options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/access_token`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdGet: async (\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdPatch: async (\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id);\n      // verify required parameter 'accountPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsPost: async (\n      account: Account,\n      dryRun?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'account' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account);\n      const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (dryRun !== undefined) {\n        localVarQueryParameter['dryRun'] = dryRun;\n      }\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost: async (\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'clusterAuthorizationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1ClusterAuthorizationsPost',\n        'clusterAuthorizationRequest',\n        clusterAuthorizationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        clusterAuthorizationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost: async (\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'clusterRegistrationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1ClusterRegistrationsPost',\n        'clusterRegistrationRequest',\n        clusterRegistrationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        clusterRegistrationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1CurrentAccountGet: async (fetchLabels?: boolean, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/current_account`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/errors`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id);\n      // verify required parameter 'featureToggleQueryRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1FeatureTogglesIdQueryPost',\n        'featureToggleQueryRequest',\n        featureToggleQueryRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        featureToggleQueryRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1LabelsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/labels`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1MetricsGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/metrics`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1NotifyPost: async (\n      notificationRequest: NotificationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'notificationRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/notify`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdGet: async (\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch: async (\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id);\n      // verify required parameter 'organizationPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        organizationPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (\n      id: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: async (\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fetchRelatedResources !== undefined) {\n        localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet: async (\n      orgId: string,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_summary`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId);\n      // verify required parameter 'resourceQuotaRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost',\n        'resourceQuotaRequest',\n        resourceQuotaRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`.replace(\n        `{${'orgId'}}`,\n        encodeURIComponent(String(orgId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (\n      orgId: string,\n      quotaId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (\n      orgId: string,\n      quotaId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'orgId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId);\n      // verify required parameter 'quotaId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId);\n      // verify required parameter 'resourceQuotaRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch',\n        'resourceQuotaRequest',\n        resourceQuotaRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n        .replace(`{${'orgId'}}`, encodeURIComponent(String(orgId)))\n        .replace(`{${'quotaId'}}`, encodeURIComponent(String(quotaId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'organization' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization);\n      const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/plans`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (\n      externalResourceId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'externalResourceId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1PullSecretsExternalResourceIdDelete',\n        'externalResourceId',\n        externalResourceId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`.replace(\n        `{${'externalResourceId'}}`,\n        encodeURIComponent(String(externalResourceId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsPost: async (\n      pullSecretRequest: PullSecretRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'pullSecretRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/registries`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch: async (\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id);\n      // verify required parameter 'registryCredentialPatchRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1RegistryCredentialsIdPatch',\n        'registryCredentialPatchRequest',\n        registryCredentialPatchRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        registryCredentialPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost: async (\n      registryCredential: RegistryCredential,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'registryCredential' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential);\n      const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ReservedResourcesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ResourceQuotaGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch: async (\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id);\n      // verify required parameter 'roleBindingRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsPost: async (\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'roleBindingCreateRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        roleBindingCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/roles`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/skus`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`.replace(`{${'id'}}`, encodeURIComponent(String(id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsGet: async (\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fetchAccounts !== undefined) {\n        localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      if (labels !== undefined) {\n        localVarQueryParameter['labels'] = labels;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet: async (\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (fetchAccounts !== undefined) {\n        localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n      }\n\n      if (fetchLabels !== undefined) {\n        localVarQueryParameter['fetchLabels'] = fetchLabels;\n      }\n\n      if (fetchCapabilities !== undefined) {\n        localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n      }\n\n      if (fetchCpuAndSocket !== undefined) {\n        localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (\n      id: string,\n      key: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (\n      id: string,\n      key: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id);\n      // verify required parameter 'key' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n        .replace(`{${'id'}}`, encodeURIComponent(String(id)))\n        .replace(`{${'key'}}`, encodeURIComponent(String(key)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (\n      id: string,\n      label: Label,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id);\n      // verify required parameter 'label' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (\n      id: string,\n      notificationRequest: NotificationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id);\n      // verify required parameter 'notificationRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch: async (\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id);\n      // verify required parameter 'subscriptionPatchRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        subscriptionPatchRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (\n      id: string,\n      page?: number,\n      size?: number,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'id' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`.replace(\n        `{${'id'}}`,\n        encodeURIComponent(String(id))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsPost: async (\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subscriptionCreateRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        subscriptionCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (\n      subId: string,\n      accountId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId);\n      // verify required parameter 'accountId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete',\n        'accountId',\n        accountId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`\n        .replace(`{${'subId'}}`, encodeURIComponent(String(subId)))\n        .replace(`{${'accountId'}}`, encodeURIComponent(String(accountId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId);\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`.replace(\n        `{${'subId'}}`,\n        encodeURIComponent(String(subId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      if (page !== undefined) {\n        localVarQueryParameter['page'] = page;\n      }\n\n      if (size !== undefined) {\n        localVarQueryParameter['size'] = size;\n      }\n\n      if (search !== undefined) {\n        localVarQueryParameter['search'] = search;\n      }\n\n      if (fields !== undefined) {\n        localVarQueryParameter['fields'] = fields;\n      }\n\n      if (orderBy !== undefined) {\n        localVarQueryParameter['orderBy'] = orderBy;\n      }\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId);\n      // verify required parameter 'notificationContactCreateRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost',\n        'notificationContactCreateRequest',\n        notificationContactCreateRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`.replace(\n        `{${'subId'}}`,\n        encodeURIComponent(String(subId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        notificationContactCreateRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (\n      subId: string,\n      reservedResourceId: string,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'subId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId);\n      // verify required parameter 'reservedResourceId' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet',\n        'reservedResourceId',\n        reservedResourceId\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`\n        .replace(`{${'subId'}}`, encodeURIComponent(String(subId)))\n        .replace(`{${'reservedResourceId'}}`, encodeURIComponent(String(reservedResourceId)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'caseId' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId);\n      const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`.replace(\n        `{${'caseId'}}`,\n        encodeURIComponent(String(caseId))\n      );\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesPost: async (\n      supportCasesRequest: SupportCasesRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'supportCasesRequest' is not null or undefined\n      assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest);\n      const localVarPath = `/api/accounts_mgmt/v1/support_cases`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost: async (\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'tokenAuthorizationRequest' is not null or undefined\n      assertParamExists(\n        'apiAccountsMgmtV1TokenAuthorizationPost',\n        'tokenAuthorizationRequest',\n        tokenAuthorizationRequest\n      );\n      const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        tokenAuthorizationRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1AccessReviewPost: async (\n      accessReview: AccessReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'accessReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview);\n      const localVarPath = `/api/authorizations/v1/access_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1CapabilityReviewPost: async (\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'capabilityReviewRequest' is not null or undefined\n      assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest);\n      const localVarPath = `/api/authorizations/v1/capability_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        capabilityReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ExportControlReviewPost: async (\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'exportControlReviewRequest' is not null or undefined\n      assertParamExists(\n        'apiAuthorizationsV1ExportControlReviewPost',\n        'exportControlReviewRequest',\n        exportControlReviewRequest\n      );\n      const localVarPath = `/api/authorizations/v1/export_control_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        exportControlReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1FeatureReviewPost: async (\n      featureReview: FeatureReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'featureReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1FeatureReviewPost', 'featureReview', featureReview);\n      const localVarPath = `/api/authorizations/v1/feature_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(featureReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ResourceReviewPost: async (\n      resourceReviewRequest: ResourceReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'resourceReviewRequest' is not null or undefined\n      assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest);\n      const localVarPath = `/api/authorizations/v1/resource_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfAccessReviewPost: async (\n      selfAccessReview: SelfAccessReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfAccessReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfAccessReviewPost', 'selfAccessReview', selfAccessReview);\n      const localVarPath = `/api/authorizations/v1/self_access_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfAccessReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfFeatureReviewPost: async (\n      selfFeatureReview: SelfFeatureReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfFeatureReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfFeatureReviewPost', 'selfFeatureReview', selfFeatureReview);\n      const localVarPath = `/api/authorizations/v1/self_feature_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfFeatureReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfResourceReviewPost: async (\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfResourceReviewRequest' is not null or undefined\n      assertParamExists(\n        'apiAuthorizationsV1SelfResourceReviewPost',\n        'selfResourceReviewRequest',\n        selfResourceReviewRequest\n      );\n      const localVarPath = `/api/authorizations/v1/self_resource_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(\n        selfResourceReviewRequest,\n        localVarRequestOptions,\n        configuration\n      );\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfTermsReviewPost: async (\n      selfTermsReview: SelfTermsReview,\n      options: any = {}\n    ): Promise<RequestArgs> => {\n      // verify required parameter 'selfTermsReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview);\n      const localVarPath = `/api/authorizations/v1/self_terms_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(selfTermsReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: any = {}): Promise<RequestArgs> => {\n      // verify required parameter 'termsReview' is not null or undefined\n      assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview);\n      const localVarPath = `/api/authorizations/v1/terms_review`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n\n      const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };\n      const localVarHeaderParameter = {} as any;\n      const localVarQueryParameter = {} as any;\n\n      // authentication Bearer required\n      // http bearer authentication required\n      await setBearerAuthToObject(localVarHeaderParameter, configuration);\n\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n\n      setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };\n      localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration);\n\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions,\n      };\n    },\n  };\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function (configuration?: Configuration) {\n  const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration);\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccessTokenPost(\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        fields,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(\n        id,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsIdPatch(\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(\n        id,\n        accountPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1AccountsPost(\n      account: Account,\n      dryRun?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ClusterAuthorizationsPost(\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(\n        clusterAuthorizationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ClusterRegistrationsPost(\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(\n        clusterRegistrationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1CurrentAccountGet(\n      fetchLabels?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(\n        fetchLabels,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ErrorsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ErrorsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n        id,\n        featureToggleQueryRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1LabelsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1MetricsGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1NotifyPost(\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(\n        notificationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(\n        id,\n        fetchLabels,\n        fetchCapabilities,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdPatch(\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(\n        id,\n        organizationPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(\n        id,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n        orgId,\n        search,\n        fetchRelatedResources,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n      orgId: string,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaSummaryList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n        orgId,\n        search,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n        orgId,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n        orgId,\n        resourceQuotaRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n        orgId,\n        quotaId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n        orgId,\n        quotaId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n        orgId,\n        quotaId,\n        resourceQuotaRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1OrganizationsPost(\n      organization: Organization,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(\n        organization,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PlansGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PlansIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n      externalResourceId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n        externalResourceId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1PullSecretsPost(\n      pullSecretRequest: PullSecretRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(\n        pullSecretRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistriesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistriesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(\n        id,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsIdPatch(\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(\n        id,\n        registryCredentialPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RegistryCredentialsPost(\n      registryCredential: RegistryCredential,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(\n        registryCredential,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ReservedResourcesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1ResourceQuotaGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsIdPatch(\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(\n        id,\n        roleBindingRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RoleBindingsPost(\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(\n        roleBindingCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RolesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1RolesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkuRulesGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkuRulesIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkusGet(\n      search?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SkusIdGet(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(\n        page,\n        size,\n        search,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        orderBy,\n        labels,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdDelete(\n      id: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdGet(\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(\n        id,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fetchCpuAndSocket,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(\n      id: string,\n      key: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(\n        id,\n        key,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n        id,\n        key,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdLabelsPost(\n      id: string,\n      label: Label,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(\n        id,\n        label,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n      id: string,\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n        id,\n        notificationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdPatch(\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(\n        id,\n        subscriptionPatchRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n        id,\n        page,\n        size,\n        search,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n        id,\n        page,\n        size,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsPost(\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(\n        subscriptionCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n      subId: string,\n      accountId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n        subId,\n        accountId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n        subId,\n        page,\n        size,\n        search,\n        fields,\n        orderBy,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n        subId,\n        notificationContactCreateRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n      subId: string,\n      reservedResourceId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n        subId,\n        reservedResourceId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SupportCasesCaseIdDelete(\n      caseId: string,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(\n        caseId,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1SupportCasesPost(\n      supportCasesRequest: SupportCasesRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(\n        supportCasesRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAccountsMgmtV1TokenAuthorizationPost(\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(\n        tokenAuthorizationRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1AccessReviewPost(\n      accessReview: AccessReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(\n        accessReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1CapabilityReviewPost(\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(\n        capabilityReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1ExportControlReviewPost(\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(\n        exportControlReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1FeatureReviewPost(\n      featureReview: FeatureReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1FeatureReviewPost(\n        featureReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1ResourceReviewPost(\n      resourceReviewRequest: ResourceReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(\n        resourceReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfAccessReviewPost(\n      selfAccessReview: SelfAccessReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfAccessReviewPost(\n        selfAccessReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfFeatureReviewPost(\n      selfFeatureReview: SelfFeatureReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfFeatureReviewPost(\n        selfFeatureReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfResourceReviewPost(\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(\n        selfResourceReviewRequest,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1SelfTermsReviewPost(\n      selfTermsReview: SelfTermsReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(\n        selfTermsReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    async apiAuthorizationsV1TermsReviewPost(\n      termsReview: TermsReview,\n      options?: any\n    ): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n      const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(\n        termsReview,\n        options\n      );\n      return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n    },\n  };\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n  const localVarFp = DefaultApiFp(configuration);\n  return {\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg> {\n      return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fields?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<AccountList> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsIdPatch(\n      id: string,\n      accountPatchRequest: AccountPatchRequest,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1AccountsPost(account, dryRun, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost(\n      clusterAuthorizationRequest: ClusterAuthorizationRequest,\n      options?: any\n    ): AxiosPromise<ClusterAuthorizationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost(\n      clusterRegistrationRequest: ClusterRegistrationRequest,\n      options?: any\n    ): AxiosPromise<ClusterRegistrationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {\n      return localVarFp\n        .apiAccountsMgmtV1ErrorsGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {\n      return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n      id: string,\n      featureToggleQueryRequest: FeatureToggleQueryRequest,\n      options?: any\n    ): AxiosPromise<FeatureToggle> {\n      return localVarFp\n        .apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1LabelsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {\n      return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1NotifyPost(notificationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      options?: any\n    ): AxiosPromise<OrganizationList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdGet(\n      id: string,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      options?: any\n    ): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch(\n      id: string,\n      organizationPatchRequest: OrganizationPatchRequest,\n      options?: any\n    ): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n      orgId: string,\n      search?: string,\n      fetchRelatedResources?: boolean,\n      options?: any\n    ): AxiosPromise<QuotaCostList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n      orgId: string,\n      search?: string,\n      options?: any\n    ): AxiosPromise<QuotaSummaryList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n      orgId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ResourceQuotaList> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n      orgId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n      orgId: string,\n      quotaId: string,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n      orgId: string,\n      quotaId: string,\n      resourceQuotaRequest: ResourceQuotaRequest,\n      options?: any\n    ): AxiosPromise<ResourceQuota> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {\n      return localVarFp\n        .apiAccountsMgmtV1OrganizationsPost(organization, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {\n      return localVarFp\n        .apiAccountsMgmtV1PlansGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {\n      return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(\n      externalResourceId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1PullSecretsPost(\n      pullSecretRequest: PullSecretRequest,\n      options?: any\n    ): AxiosPromise<AccessTokenCfg> {\n      return localVarFp\n        .apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RegistryList> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {\n      return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RegistryCredentialList> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdGet(id, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch(\n      id: string,\n      registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n      options?: any\n    ): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost(\n      registryCredential: RegistryCredential,\n      options?: any\n    ): AxiosPromise<RegistryCredential> {\n      return localVarFp\n        .apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ReservedResourcesGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ReservedResourceList> {\n      return localVarFp\n        .apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1ResourceQuotaGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ResourceQuotaList> {\n      return localVarFp\n        .apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<RoleBindingList> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {\n      return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch(\n      id: string,\n      roleBindingRequest: RoleBindingRequest,\n      options?: any\n    ): AxiosPromise<RoleBinding> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RoleBindingsPost(\n      roleBindingCreateRequest: RoleBindingCreateRequest,\n      options?: any\n    ): AxiosPromise<RoleBinding> {\n      return localVarFp\n        .apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {\n      return localVarFp\n        .apiAccountsMgmtV1RolesGet(page, size, search, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {\n      return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {\n      return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {\n      return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {\n      return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {\n      return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsGet(\n      page?: number,\n      size?: number,\n      search?: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fields?: string,\n      orderBy?: string,\n      labels?: string,\n      options?: any\n    ): AxiosPromise<SubscriptionList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsGet(\n          page,\n          size,\n          search,\n          fetchAccounts,\n          fetchLabels,\n          fetchCapabilities,\n          fields,\n          orderBy,\n          labels,\n          options\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {\n      return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet(\n      id: string,\n      fetchAccounts?: boolean,\n      fetchLabels?: boolean,\n      fetchCapabilities?: boolean,\n      fetchCpuAndSocket?: boolean,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdGet(\n          id,\n          fetchAccounts,\n          fetchLabels,\n          fetchCapabilities,\n          fetchCpuAndSocket,\n          options\n        )\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<LabelList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n      id: string,\n      key: string,\n      label: Label,\n      options?: any\n    ): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n      id: string,\n      notificationRequest: NotificationRequest,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch(\n      id: string,\n      subscriptionPatchRequest: SubscriptionPatchRequest,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<ReservedResourceList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n      id: string,\n      page?: number,\n      size?: number,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsPost(\n      subscriptionCreateRequest: SubscriptionCreateRequest,\n      options?: any\n    ): AxiosPromise<Subscription> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n      subId: string,\n      accountId: string,\n      options?: any\n    ): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n      subId: string,\n      page?: number,\n      size?: number,\n      search?: string,\n      fields?: string,\n      orderBy?: string,\n      options?: any\n    ): AxiosPromise<AccountList> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n      subId: string,\n      notificationContactCreateRequest: NotificationContactCreateRequest,\n      options?: any\n    ): AxiosPromise<Account> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n      subId: string,\n      reservedResourceId: string,\n      options?: any\n    ): AxiosPromise<ReservedResource> {\n      return localVarFp\n        .apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {\n      return localVarFp\n        .apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1SupportCasesPost(\n      supportCasesRequest: SupportCasesRequest,\n      options?: any\n    ): AxiosPromise<SupportCasesCreatedResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost(\n      tokenAuthorizationRequest: TokenAuthorizationRequest,\n      options?: any\n    ): AxiosPromise<TokenAuthorizationResponse> {\n      return localVarFp\n        .apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1AccessReviewPost(accessReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1CapabilityReviewPost(\n      capabilityReviewRequest: CapabilityReviewRequest,\n      options?: any\n    ): AxiosPromise<CapabilityReview> {\n      return localVarFp\n        .apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ExportControlReviewPost(\n      exportControlReviewRequest: ExportControlReviewRequest,\n      options?: any\n    ): AxiosPromise<ExportControlReview> {\n      return localVarFp\n        .apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1FeatureReviewPost(\n      featureReview: FeatureReview,\n      options?: any\n    ): AxiosPromise<FeatureReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1FeatureReviewPost(featureReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1ResourceReviewPost(\n      resourceReviewRequest: ResourceReviewRequest,\n      options?: any\n    ): AxiosPromise<ResourceReview> {\n      return localVarFp\n        .apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfAccessReviewPost(\n      selfAccessReview: SelfAccessReview,\n      options?: any\n    ): AxiosPromise<AccessReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfFeatureReviewPost(\n      selfFeatureReview: SelfFeatureReview,\n      options?: any\n    ): AxiosPromise<FeatureReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfResourceReviewPost(\n      selfResourceReviewRequest: SelfResourceReviewRequest,\n      options?: any\n    ): AxiosPromise<SelfResourceReview> {\n      return localVarFp\n        .apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1SelfTermsReviewPost(\n      selfTermsReview: SelfTermsReview,\n      options?: any\n    ): AxiosPromise<TermsReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options)\n        .then((request) => request(axios, basePath));\n    },\n    /**\n     *\n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n      return localVarFp\n        .apiAuthorizationsV1TermsReviewPost(termsReview, options)\n        .then((request) => request(axios, basePath));\n    },\n  };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg>;\n\n  /**\n   *\n   * @summary Returns a list of accounts\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fields?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<AccountList>;\n\n  /**\n   *\n   * @summary Get an account by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Update an account\n   * @param {string} id The id of record\n   * @param {AccountPatchRequest} accountPatchRequest Updated account data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsIdPatch(\n    id: string,\n    accountPatchRequest: AccountPatchRequest,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Create a new account\n   * @param {Account} account Account data\n   * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n   * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ClusterAuthorizationsPost(\n    clusterAuthorizationRequest: ClusterAuthorizationRequest,\n    options?: any\n  ): AxiosPromise<ClusterAuthorizationResponse>;\n\n  /**\n   *\n   * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n   * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ClusterRegistrationsPost(\n    clusterRegistrationRequest: ClusterRegistrationRequest,\n    options?: any\n  ): AxiosPromise<ClusterRegistrationResponse>;\n\n  /**\n   *\n   * @summary Get the authenticated account\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Returns a list of errors\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList>;\n\n  /**\n   *\n   * @summary Get an error by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error>;\n\n  /**\n   *\n   * @summary Query a feature toggle by id\n   * @param {string} id The id of record\n   * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n    id: string,\n    featureToggleQueryRequest: FeatureToggleQueryRequest,\n    options?: any\n  ): AxiosPromise<FeatureToggle>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1LabelsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Returns a list of metrics\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList>;\n\n  /**\n   *\n   * @summary Notify the owner of cluster/subscription\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Returns a list of organizations\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    options?: any\n  ): AxiosPromise<OrganizationList>;\n\n  /**\n   *\n   * @summary Get an organization by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(\n    id: string,\n    key: string,\n    label: Label,\n    options?: any\n  ): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Update an organization\n   * @param {string} id The id of record\n   * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdPatch(\n    id: string,\n    organizationPatchRequest: OrganizationPatchRequest,\n    options?: any\n  ): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Returns a summary of organizations clusters based on metrics\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary>;\n\n  /**\n   *\n   * @summary Returns a summary of quota cost\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n    orgId: string,\n    search?: string,\n    fetchRelatedResources?: boolean,\n    options?: any\n  ): AxiosPromise<QuotaCostList>;\n\n  /**\n   *\n   * @summary Returns a summary of resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(\n    orgId: string,\n    search?: string,\n    options?: any\n  ): AxiosPromise<QuotaSummaryList>;\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {string} orgId The id of organization\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n    orgId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ResourceQuotaList>;\n\n  /**\n   *\n   * @summary Create a new resource quota\n   * @param {string} orgId The id of organization\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n    orgId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Delete a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(\n    orgId: string,\n    quotaId: string,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a resource quota by id\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(\n    orgId: string,\n    quotaId: string,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Update a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n    orgId: string,\n    quotaId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ): AxiosPromise<ResourceQuota>;\n\n  /**\n   *\n   * @summary Create a new organization\n   * @param {Organization} organization Organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization>;\n\n  /**\n   *\n   * @summary Get all plans\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList>;\n\n  /**\n   *\n   * @summary Get a plan by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan>;\n\n  /**\n   *\n   * @summary Delete a pull secret\n   * @param {string} externalResourceId The external resource id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg>;\n\n  /**\n   *\n   * @summary Returns a list of registries\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistriesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RegistryList>;\n\n  /**\n   *\n   * @summary Get an registry by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry>;\n\n  /**\n   * List Registry Credentials\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RegistryCredentialList>;\n\n  /**\n   *\n   * @summary Delete a registry credential by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a registry credentials by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Update a registry credential\n   * @param {string} id The id of record\n   * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsIdPatch(\n    id: string,\n    registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n    options?: any\n  ): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Request the creation of a registry credential\n   * @param {RegistryCredential} registryCredential Registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RegistryCredentialsPost(\n    registryCredential: RegistryCredential,\n    options?: any\n  ): AxiosPromise<RegistryCredential>;\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ReservedResourcesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ReservedResourceList>;\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1ResourceQuotaGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ResourceQuotaList>;\n\n  /**\n   *\n   * @summary Returns a list of role bindings\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<RoleBindingList>;\n\n  /**\n   *\n   * @summary Delete a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Update a role binding\n   * @param {string} id The id of record\n   * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsIdPatch(\n    id: string,\n    roleBindingRequest: RoleBindingRequest,\n    options?: any\n  ): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Create a new role binding\n   * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RoleBindingsPost(\n    roleBindingCreateRequest: RoleBindingCreateRequest,\n    options?: any\n  ): AxiosPromise<RoleBinding>;\n\n  /**\n   *\n   * @summary Returns a list of roles\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList>;\n\n  /**\n   *\n   * @summary Get a role by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role>;\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKU Rules\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList>;\n\n  /**\n   *\n   * @summary Get a sku rules by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules>;\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKUs\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList>;\n\n  /**\n   *\n   * @summary Get a sku by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU>;\n\n  /**\n   *\n   * @summary Returns a list of subscriptions\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    orderBy?: string,\n    labels?: string,\n    options?: any\n  ): AxiosPromise<SubscriptionList>;\n\n  /**\n   *\n   * @summary Deletes a subscription by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get a subscription by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdGet(\n    id: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fetchCpuAndSocket?: boolean,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<LabelList>;\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(\n    id: string,\n    key: string,\n    label: Label,\n    options?: any\n  ): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n  /**\n   *\n   * @summary Notify the owner of a subscription\n   * @param {string} id The id of record\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n    id: string,\n    notificationRequest: NotificationRequest,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Update a subscription\n   * @param {string} id The id of record\n   * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdPatch(\n    id: string,\n    subscriptionPatchRequest: SubscriptionPatchRequest,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<ReservedResourceList>;\n\n  /**\n   *\n   * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Create a new subscription\n   * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsPost(\n    subscriptionCreateRequest: SubscriptionCreateRequest,\n    options?: any\n  ): AxiosPromise<Subscription>;\n\n  /**\n   *\n   * @summary Deletes a notification contact by subscription and account id\n   * @param {string} subId The id of subscription\n   * @param {string} accountId The id of account\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n    subId: string,\n    accountId: string,\n    options?: any\n  ): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary Returns a list of notification contacts for the given subscription\n   * @param {string} subId The id of subscription\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n    subId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    fields?: string,\n    orderBy?: string,\n    options?: any\n  ): AxiosPromise<AccountList>;\n\n  /**\n   *\n   * @summary Add an account as a notification contact to this subscription\n   * @param {string} subId The id of subscription\n   * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n    subId: string,\n    notificationContactCreateRequest: NotificationContactCreateRequest,\n    options?: any\n  ): AxiosPromise<Account>;\n\n  /**\n   *\n   * @summary Get reserved resources by id\n   * @param {string} subId The id of subscription\n   * @param {string} reservedResourceId The id of reserved resource\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n    subId: string,\n    reservedResourceId: string,\n    options?: any\n  ): AxiosPromise<ReservedResource>;\n\n  /**\n   *\n   * @summary Delete a support case\n   * @param {string} caseId The id of a support case\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void>;\n\n  /**\n   *\n   * @summary create a support case for the subscription\n   * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1SupportCasesPost(\n    supportCasesRequest: SupportCasesRequest,\n    options?: any\n  ): AxiosPromise<SupportCasesCreatedResponse>;\n\n  /**\n   *\n   * @summary Finds the account owner of the provided token\n   * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAccountsMgmtV1TokenAuthorizationPost(\n    tokenAuthorizationRequest: TokenAuthorizationRequest,\n    options?: any\n  ): AxiosPromise<TokenAuthorizationResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n   * @param {AccessReview} accessReview Access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s capabilities\n   * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1CapabilityReviewPost(\n    capabilityReviewRequest: CapabilityReviewRequest,\n    options?: any\n  ): AxiosPromise<CapabilityReview>;\n\n  /**\n   *\n   * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n   * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1ExportControlReviewPost(\n    exportControlReviewRequest: ExportControlReviewRequest,\n    options?: any\n  ): AxiosPromise<ExportControlReview>;\n\n  /**\n   *\n   * @summary Review feature to perform an action on it such as toggle a feature on/off\n   * @param {FeatureReview} featureReview Feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1FeatureReviewPost(\n    featureReview: FeatureReview,\n    options?: any\n  ): AxiosPromise<FeatureReviewResponse>;\n\n  /**\n   *\n   * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1ResourceReviewPost(\n    resourceReviewRequest: ResourceReviewRequest,\n    options?: any\n  ): AxiosPromise<ResourceReview>;\n\n  /**\n   *\n   * @summary Review your ability to perform an action on a particular resource or resource type\n   * @param {SelfAccessReview} selfAccessReview Self access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfAccessReviewPost(\n    selfAccessReview: SelfAccessReview,\n    options?: any\n  ): AxiosPromise<AccessReviewResponse>;\n\n  /**\n   *\n   * @summary Review your ability to toggle a feature\n   * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfFeatureReviewPost(\n    selfFeatureReview: SelfFeatureReview,\n    options?: any\n  ): AxiosPromise<FeatureReviewResponse>;\n\n  /**\n   *\n   * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfResourceReviewPost(\n    selfResourceReviewRequest: SelfResourceReviewRequest,\n    options?: any\n  ): AxiosPromise<SelfResourceReview>;\n\n  /**\n   *\n   * @summary Review your status of Terms\n   * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1SelfTermsReviewPost(\n    selfTermsReview: SelfTermsReview,\n    options?: any\n  ): AxiosPromise<TermsReviewResponse>;\n\n  /**\n   *\n   * @summary Review an account\\'s status of Terms\n   * @param {TermsReview} termsReview Data to check terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApiInterface\n   */\n  apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccessTokenPost(options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccessTokenPost(options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of accounts\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fields?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an account by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update an account\n   * @param {string} id The id of record\n   * @param {AccountPatchRequest} accountPatchRequest Updated account data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new account\n   * @param {Account} account Account data\n   * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1AccountsPost(account, dryRun, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n   * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ClusterAuthorizationsPost(\n    clusterAuthorizationRequest: ClusterAuthorizationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n   * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ClusterRegistrationsPost(\n    clusterRegistrationRequest: ClusterRegistrationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get the authenticated account\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of errors\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ErrorsGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an error by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ErrorsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Query a feature toggle by id\n   * @param {string} id The id of record\n   * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1FeatureTogglesIdQueryPost(\n    id: string,\n    featureToggleQueryRequest: FeatureToggleQueryRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of metrics\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1MetricsGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1MetricsGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Notify the owner of cluster/subscription\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1NotifyPost(notificationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of organizations\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an organization by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdGet(\n    id: string,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update an organization\n   * @param {string} id The id of record\n   * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdPatch(\n    id: string,\n    organizationPatchRequest: OrganizationPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of organizations clusters based on metrics\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of quota cost\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n    orgId: string,\n    search?: string,\n    fetchRelatedResources?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a summary of resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {string} orgId The id of organization\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(\n    orgId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new resource quota\n   * @param {string} orgId The id of organization\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(\n    orgId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a resource quota by id\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a resource quota\n   * @param {string} orgId The id of organization\n   * @param {string} quotaId The id of quota\n   * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(\n    orgId: string,\n    quotaId: string,\n    resourceQuotaRequest: ResourceQuotaRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new organization\n   * @param {Organization} organization Organization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1OrganizationsPost(organization, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get all plans\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PlansGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a plan by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PlansIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PlansIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a pull secret\n   * @param {string} externalResourceId The external resource id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Return access token generated from registries in docker format\n   * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of registries\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistriesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get an registry by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistriesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   * List Registry Credentials\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a registry credential by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a registry credentials by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a registry credential\n   * @param {string} id The id of record\n   * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsIdPatch(\n    id: string,\n    registryCredentialPatchRequest: RegistryCredentialPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Request the creation of a registry credential\n   * @param {RegistryCredential} registryCredential Registry credential data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ReservedResourcesGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of resource quota objects\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1ResourceQuotaGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of role bindings\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a role binding\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a role binding\n   * @param {string} id The id of record\n   * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new role binding\n   * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of roles\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RolesGet(page, size, search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a role by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1RolesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1RolesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKU Rules\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkuRulesGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a sku rules by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkuRulesIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of UHC product SKUs\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkusGet(search?: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkusGet(search, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a sku by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SkusIdGet(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SkusIdGet(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of subscriptions\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsGet(\n    page?: number,\n    size?: number,\n    search?: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fields?: string,\n    orderBy?: string,\n    labels?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsGet(\n        page,\n        size,\n        search,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fields,\n        orderBy,\n        labels,\n        options\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Deletes a subscription by id\n   * @param {string} id The id of record\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdDelete(id, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get a subscription by id\n   * @param {string} id The id of record\n   * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n   * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n   * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n   * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdGet(\n    id: string,\n    fetchAccounts?: boolean,\n    fetchLabels?: boolean,\n    fetchCapabilities?: boolean,\n    fetchCpuAndSocket?: boolean,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdGet(\n        id,\n        fetchAccounts,\n        fetchLabels,\n        fetchCapabilities,\n        fetchCpuAndSocket,\n        options\n      )\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of labels\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get subscription labels by label key\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {string} key The key of the label\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new label or update an existing label\n   * @param {string} id The id of record\n   * @param {Label} label Label data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Notify the owner of a subscription\n   * @param {string} id The id of record\n   * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdNotifyPost(\n    id: string,\n    notificationRequest: NotificationRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Update a subscription\n   * @param {string} id The id of record\n   * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdPatch(\n    id: string,\n    subscriptionPatchRequest: SubscriptionPatchRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of reserved resources\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(\n    id: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n   * @param {string} id The id of record\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Create a new subscription\n   * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Deletes a notification contact by subscription and account id\n   * @param {string} subId The id of subscription\n   * @param {string} accountId The id of account\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(\n    subId: string,\n    accountId: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Returns a list of notification contacts for the given subscription\n   * @param {string} subId The id of subscription\n   * @param {number} [page] Page number of record list when record list exceeds specified page size\n   * @param {number} [size] Maximum number of records to return\n   * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n   * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n   * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(\n    subId: string,\n    page?: number,\n    size?: number,\n    search?: string,\n    fields?: string,\n    orderBy?: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Add an account as a notification contact to this subscription\n   * @param {string} subId The id of subscription\n   * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(\n    subId: string,\n    notificationContactCreateRequest: NotificationContactCreateRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Get reserved resources by id\n   * @param {string} subId The id of subscription\n   * @param {string} reservedResourceId The id of reserved resource\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(\n    subId: string,\n    reservedResourceId: string,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Delete a support case\n   * @param {string} caseId The id of a support case\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary create a support case for the subscription\n   * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Finds the account owner of the provided token\n   * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n   * @param {AccessReview} accessReview Access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1AccessReviewPost(accessReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s capabilities\n   * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance.\n   * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1ExportControlReviewPost(\n    exportControlReviewRequest: ExportControlReviewRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review feature to perform an action on it such as toggle a feature on/off\n   * @param {FeatureReview} featureReview Feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1FeatureReviewPost(featureReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your ability to perform an action on a particular resource or resource type\n   * @param {SelfAccessReview} selfAccessReview Self access review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your ability to toggle a feature\n   * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n   * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfResourceReviewPost(\n    selfResourceReviewRequest: SelfResourceReviewRequest,\n    options?: any\n  ) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review your status of Terms\n   * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n\n  /**\n   *\n   * @summary Review an account\\'s status of Terms\n   * @param {TermsReview} termsReview Data to check terms for\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof DefaultApi\n   */\n  public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any) {\n    return DefaultApiFp(this.configuration)\n      .apiAuthorizationsV1TermsReviewPost(termsReview, options)\n      .then((request) => request(this.axios, this.basePath));\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = 'https://api.openshift.com'.replace(/\\/+$/, '');\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n  csv: ',',\n  ssv: ' ',\n  tsv: '\\t',\n  pipes: '|',\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n  url: string;\n  options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n  protected configuration: Configuration | undefined;\n\n  constructor(\n    configuration?: Configuration,\n    protected basePath: string = BASE_PATH,\n    protected axios: AxiosInstance = globalAxios\n  ) {\n    if (configuration) {\n      this.configuration = configuration;\n      this.basePath = configuration.basePath || this.basePath;\n    }\n  }\n}\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n  name: 'RequiredError' = 'RequiredError';\n  constructor(public field: string, msg?: string) {\n    super(msg);\n  }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nimport { Configuration } from './configuration';\nimport { RequiredError, RequestArgs } from './base';\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com';\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n  if (paramValue === null || paramValue === undefined) {\n    throw new RequiredError(\n      paramName,\n      `Required parameter ${paramName} was null or undefined when calling ${functionName}.`\n    );\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n  if (configuration && configuration.apiKey) {\n    const localVarApiKeyValue =\n      typeof configuration.apiKey === 'function'\n        ? await configuration.apiKey(keyParamName)\n        : await configuration.apiKey;\n    object[keyParamName] = localVarApiKeyValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n  if (configuration && (configuration.username || configuration.password)) {\n    object['auth'] = { username: configuration.username, password: configuration.password };\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n  if (configuration && configuration.accessToken) {\n    const accessToken =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken()\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + accessToken;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (\n  object: any,\n  name: string,\n  scopes: string[],\n  configuration?: Configuration\n) {\n  if (configuration && configuration.accessToken) {\n    const localVarAccessTokenValue =\n      typeof configuration.accessToken === 'function'\n        ? await configuration.accessToken(name, scopes)\n        : await configuration.accessToken;\n    object['Authorization'] = 'Bearer ' + localVarAccessTokenValue;\n  }\n};\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n  const searchParams = new URLSearchParams(url.search);\n  for (const object of objects) {\n    for (const key in object) {\n      if (Array.isArray(object[key])) {\n        searchParams.delete(key);\n        for (const item of object[key]) {\n          searchParams.append(key, item);\n        }\n      } else {\n        searchParams.set(key, object[key]);\n      }\n    }\n  }\n  url.search = searchParams.toString();\n};\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n  const nonString = typeof value !== 'string';\n  const needsSerialization =\n    nonString && configuration && configuration.isJsonMime\n      ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n      : nonString;\n  return needsSerialization ? JSON.stringify(value !== undefined ? value : {}) : value || '';\n};\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n  return url.pathname + url.search + url.hash;\n};\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (\n  axiosArgs: RequestArgs,\n  globalAxios: AxiosInstance,\n  BASE_PATH: string,\n  configuration?: Configuration\n) {\n  return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n    const axiosRequestArgs = { ...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url };\n    return axios.request(axiosRequestArgs);\n  };\n};\n","import { Reducer, useEffect, useReducer, useRef } from 'react';\nimport { AxiosResponse } from 'axios';\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<AxiosResponse<T>>;\n  key: string;\n};\n\nexport const useFetch = <T extends any>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>((states, action: Action<T>) => {\n    switch (action.type) {\n      case Status.FETCHING:\n        return { ...initialState, status: Status.FETCHING };\n      case Status.FETCHED:\n        return { ...initialState, status: Status.FETCHED, data: action.payload };\n      case Status.FETCH_ERROR:\n        return { ...initialState, status: Status.FETCH_ERROR, error: action.error };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response.data;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response.data });\n        } catch (error) {\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCH_ERROR, payload: error.message });\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, []);\n\n  return state;\n};\n","import { useEffect, useState, useMemo } from 'react';\nimport { useAuth, useConfig, Quota, QuotaValue, QuotaType, ProductType } from '@rhoas/app-services-ui-shared';\nimport { Configuration, DefaultApi } from '@openapi/ams';\n\nexport const useQuota = (productId: ProductType) => {\n    const config = useConfig();\n    const auth = useAuth();\n\n    const [orgId, setOrgId] = useState();\n\n    useEffect(() => {\n        const getCurrentAccount = async () => {\n            if (!orgId) {\n                const accessToken = await auth?.ams.getToken();\n                const ams = new DefaultApi({\n                    accessToken,\n                    basePath: config?.ams.apiBasePath || '',\n                } as Configuration);\n\n                await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n                    const orgID = account?.data?.organization?.id;\n                    setOrgId(orgID);\n                });\n            }\n        };\n\n        getCurrentAccount();\n    }, [config?.ams.apiBasePath, auth]);\n\n    const getQuotaTypesByProductId = () => {\n        const {\n            ams: amsConfig\n        } = config || {};\n        const { kasQuotaId, kasTrialQuotaId, srsQuotaId, srsTrialQuotaId } = amsConfig || {};\n        if (productId === ProductType.kas) {\n            return { quotaId: kasQuotaId, trialQuotaId: kasTrialQuotaId, quotaKey: QuotaType.kas, trialQuotaKey: QuotaType.kasTrial };\n        } else if (productId === ProductType.srs) {\n            return { quotaId: srsQuotaId, trialQuotaId: srsTrialQuotaId, quotaKey: QuotaType.srs, trialQuotaKey: QuotaType.srsTrial };\n        }\n    }\n\n    const getQuota = async () => {\n        let filteredQuota: Quota = { loading: true, isServiceDown: false, data: undefined };\n\n        if (orgId) {\n            const { quotaId, trialQuotaId, quotaKey, trialQuotaKey } = getQuotaTypesByProductId() || {};\n\n            const accessToken = await auth?.ams.getToken();\n            const ams = new DefaultApi({\n                accessToken,\n                basePath: config?.ams.apiBasePath || '',\n            } as Configuration);\n\n            await ams\n                .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, undefined, true)\n                .then((res) => {\n                    const quotaData = new Map<QuotaType, QuotaValue>();\n                    const quota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === quotaId\n                    )[0];\n\n                    const trialQuota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === trialQuotaId\n                    )[0];\n\n                    if (quota && quota.allowed > 0) {\n                        const remaining = quota?.allowed - quota?.consumed;\n                        quotaData?.set(quotaKey, {\n                            allowed: quota?.allowed,\n                            consumed: quota?.consumed,\n                            remaining: remaining < 0 ? 0 : remaining\n                        });\n                    }\n\n                    if (trialQuota) {\n                        quotaData?.set(trialQuotaKey, {\n                            allowed: trialQuota?.allowed,\n                            consumed: trialQuota?.consumed,\n                            remaining: trialQuota?.allowed - trialQuota?.consumed\n                        });\n                    }\n\n                    filteredQuota.loading = false;\n                    filteredQuota.data = quotaData;\n                })\n                .catch((error) => {\n                    filteredQuota.loading = false;\n                    filteredQuota.isServiceDown = true;\n                });\n        }\n        return filteredQuota;\n    };\n\n    const contextValue = useMemo(() => {\n        return { orgId, getQuota };\n    }, [orgId, getQuota]);\n\n    return contextValue;\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n *\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\nexport interface ConfigurationParameters {\n  apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n  username?: string;\n  password?: string;\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  basePath?: string;\n  baseOptions?: any;\n  formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n  /**\n   * parameter for apiKey security\n   * @param name security name\n   * @memberof Configuration\n   */\n  apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  username?: string;\n  /**\n   * parameter for basic security\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  password?: string;\n  /**\n   * parameter for oauth2 security\n   * @param name security name\n   * @param scopes oauth2 scope\n   * @memberof Configuration\n   */\n  accessToken?:\n    | string\n    | Promise<string>\n    | ((name?: string, scopes?: string[]) => string)\n    | ((name?: string, scopes?: string[]) => Promise<string>);\n  /**\n   * override base path\n   *\n   * @type {string}\n   * @memberof Configuration\n   */\n  basePath?: string;\n  /**\n   * base options for axios calls\n   *\n   * @type {any}\n   * @memberof Configuration\n   */\n  baseOptions?: any;\n  /**\n   * The FormData constructor that will be used to create multipart form data\n   * requests. You can inject this here so that execution environments that\n   * do not support the FormData class can still run the generated client.\n   *\n   * @type {new () => FormData}\n   */\n  formDataCtor?: new () => any;\n\n  constructor(param: ConfigurationParameters = {}) {\n    this.apiKey = param.apiKey;\n    this.username = param.username;\n    this.password = param.password;\n    this.accessToken = param.accessToken;\n    this.basePath = param.basePath;\n    this.baseOptions = param.baseOptions;\n    this.formDataCtor = param.formDataCtor;\n  }\n\n  /**\n   * Check if the given MIME is a JSON MIME.\n   * JSON MIME examples:\n   *   application/json\n   *   application/json; charset=UTF8\n   *   APPLICATION/JSON\n   *   application/vnd.company+json\n   * @param mime - MIME (Multipurpose Internet Mail Extensions)\n   * @return True if the given MIME is JSON, false otherwise.\n   */\n  public isJsonMime(mime: string): boolean {\n    const jsonMime: RegExp = new RegExp('^(application/json|[^;/ \\t]+/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n    return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n  }\n}\n","import { Auth, Config, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { Configuration, DefaultApi, TermsReviewResponse } from '@openapi/ams';\nimport { useFetch } from '@app/services/fetch';\nimport { useEffect, useRef } from \"react\";\n\nexport const useTermsReview = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  return useFetch(fetchTermsReviewFactory(config, auth));\n};\n\nexport const useAsyncTermsReview = () => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth).fetch().then(r => r.data);\n    ref.current = answer;\n    return answer;\n  }\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth]);\n  return load;\n}\n\nconst fetchTermsReviewFactory = (config: Config, auth: Auth) => {\n  return {\n    key: 'selfTermsReview',\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new DefaultApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || '',\n      } as Configuration);\n      return await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: config?.ams.eventCode,\n        site_code: config?.ams.siteCode,\n      });\n    },\n  }\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join('&');\n","import { useLocation } from 'react-router-dom';\nimport { parse as parseQueryString, stringifyUrl } from 'query-string';\nimport { useAsyncTermsReview } from '@app/services/termsReview';\nimport { getTermsAppURL } from '@app/utils/termsApp';\n\nexport const useModalControl = () => {\n    const loadTermsReview = useAsyncTermsReview();\n    const location = useLocation();\n\n    const shouldOpenCreateModal = async () => {\n        const parsed = parseQueryString(location.search);\n        const c = parsed['create'] === 'true';\n        if (c) {\n            const termsReview = await loadTermsReview();\n            if (!termsReview.terms_required) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const preCreateInstance = async (open: boolean) => {\n        const termsReview = await loadTermsReview();\n        if (termsReview.terms_available || termsReview.terms_required) {\n            if (termsReview.redirect_url === undefined) {\n                throw new Error('terms must be signed but there is no terms url');\n            }\n            const redirectURL = stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n            const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n            window.location.href = url;\n            return false;\n        }\n        return open;\n    };\n\n    return { shouldOpenCreateModal, preCreateInstance };\n};","import { InsightsType } from \"@app/utils\";\n\nexport const useInsights = () => {\n  const insights = window['insights'] as InsightsType;\n  if (insights === undefined) {\n    throw new Error(\"must be used inside an initialized insights context\");\n  }\n  return insights;\n}\n","import { KeycloakConfig, KeycloakInstance } from \"keycloak-js\";\nimport { Auth, Config, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { getAccessToken, initKeycloak } from \"@app/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { useInsights } from \"@app/hooks/insights\";\n\nconst init = async (config: Config, getInsightsAccessToken: () => Promise<string>) => {\n  const keycloakConfig = {\n    url: config.masSso.authServerUrl,\n    clientId: config.masSso.clientId,\n    realm: config.masSso.realm,\n  } as KeycloakConfig;\n  return await initKeycloak(keycloakConfig, getInsightsAccessToken);\n}\n\nexport const useAuth = (): Auth => {\n  const keycloakInstance = useRef<KeycloakInstance>();\n  const config = useConfig();\n  const insights = useInsights();\n\n  if (config === undefined || insights.chrome.auth === undefined) {\n    throw new Error(\"useAuth must be used inside a config provider, and insights auth\");\n  }\n\n  const insightsChromeAuth = insights.chrome.auth;\n\n  const getKeycloakInstance = async () => {\n    const instance = keycloakInstance.current;\n    if (instance === undefined) {\n      const answer = await init(config, insightsChromeAuth.getToken);\n      keycloakInstance.current = answer;\n      return answer;\n    }\n    return instance;\n  }\n\n  useEffect(() => {\n    // Start loading keycloak immediately\n    getKeycloakInstance();\n  }, [config, insightsChromeAuth]);\n\n  const getMASSSOToken = async () => {\n    const keycloakInstance = await getKeycloakInstance();\n    return getAccessToken(keycloakInstance, insightsChromeAuth.getToken)\n  };\n\n  const getUsername = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.username;\n  }\n\n  const isOrgAdmin = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.is_org_admin;\n  }\n\n  const getToken = insightsChromeAuth.getToken;\n\n  return {\n    getUsername,\n    isOrgAdmin,\n    kafka: {\n      getToken: getMASSSOToken,\n    },\n    kas: {\n      getToken,\n    },\n    ams: {\n      getToken,\n    },\n    srs: {\n      getToken,\n    },\n    apicurio_registry: {\n      getToken: getMASSSOToken,\n    },\n  };\n\n}\n","import { } from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\n\nexport const useMASToken = () => {\n    const config = useConfig();\n    const getTokenEndPointUrl = () => {\n        if (config) {\n            return `${config.masSso.authServerUrl}/realms/${config.masSso.realm}/protocol/openid-connect/token`;\n        }\n        return undefined;\n    };\n\n    return { getTokenEndPointUrl };\n}","import en from './en.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst appServicesi18n = i18n.createInstance();\n\nappServicesi18n\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  .use(LanguageDetector)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    detection: {\n      order: ['htmlTag', 'navigator'],\n      caches: [],\n    },\n    fallbackLng: 'en',\n    debug: true,\n\n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n    resources,\n  });\n\nexport default appServicesi18n;\n","import React from 'react';\nimport {\n  PageSection,\n  PageSectionVariants,\n  TextContent,\n  Text,\n  TextVariants,\n  Title,\n  Card,\n  CardBody,\n  CardHeader,\n  CardFooter,\n  CardHeaderMain,\n  CardTitle,\n  Button,\n  ButtonVariant,\n  Stack,\n  StackItem,\n  TitleSizes,\n  Grid,\n  GridItem,\n  List,\n  ListItem,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport '../../App.scss';\nimport { useTranslation } from 'react-i18next';\n\nexport const APIManagementPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhoam\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('apimgmtoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('apimgmtoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('apimgmtoverview.heroDescription')}</Text>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Grid hasGutter lg={6}>\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <CardTitle>\n                  <Title headingLevel=\"h3\">{t('apimgmtoverview.alreadyHaveCardTitle')}</Title>\n                </CardTitle>\n              </CardHeaderMain>\n            </CardHeader>\n            <CardBody>{t('apimgmtoverview.alreadyHaveCardMainText')}</CardBody>\n            <CardFooter>\n              <Stack hasGutter>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardHaveRHOAM-buttonGoOCM\"\n                    variant={ButtonVariant.secondary}\n                    component=\"a\"\n                    href=\"https://cloud.redhat.com/openshift/\"\n                  >\n                    {t('apimgmtoverview.alreadyHaveCardCallToActionButton')}\n                  </Button>\n                </StackItem>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardHaveRHOAM-linkViewDocs\"\n                    variant={ButtonVariant.link}\n                    component=\"a\"\n                    href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                  </Button>\n                </StackItem>\n              </Stack>{' '}\n            </CardFooter>\n          </Card>\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                <Title headingLevel=\"h3\">{t('apimgmtoverview.wantToTryCardTitle')}</Title>\n              </CardTitle>\n            </CardHeader>\n            <CardBody>{t('apimgmtoverview.wantToTryCardMainText')}</CardBody>\n            <CardFooter>\n              <Stack hasGutter>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardTryRHOAM-buttonGetStarted\"\n                    variant={ButtonVariant.secondary}\n                    component=\"a\"\n                    href=\"https://developers.redhat.com/products/rhoam/getting-started\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.wantToTryCardCallToActionButton')}\n                    <ExternalLinkAltIcon className=\"pf-u-ml-md\" />\n                  </Button>\n                </StackItem>\n                <StackItem>\n                  <Button\n                    data-testid=\"cardTryRHOAM-linkViewDocs\"\n                    variant={ButtonVariant.link}\n                    component=\"a\"\n                    href=\"https://access.redhat.com/products/red-hat-openshift-api-management\"\n                    target=\"_blank\"\n                  >\n                    {t('apimgmtoverview.viewDocumentation')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                  </Button>\n                </StackItem>\n              </Stack>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </PageSection>\n\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n          {t('apimgmtoverview.videoSectionTitle')}\n        </Title>\n        <Grid hasGutter>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n              <div className=\"app-services-ui--video-wrapper\">\n                <iframe\n                  src=\"https://www.youtube.com/embed/NzNgc0f75pc\"\n                  title={t('apimgmtoverview.videoSectionTitle')}\n                  frameBorder=\"0\"\n                  allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                  allowFullScreen\n                ></iframe>\n              </div>\n            </Card>\n          </GridItem>\n          <GridItem md={5}>\n            <TextContent>\n              <Text className=\"pf-u-color-200 pf-u-ml-md\">{t('apimgmtoverview.videoSectionInThisVideo')}</Text>\n              <List className=\"app-services-ui--icon-list\">\n                <ListItem>{t('apimgmtoverview.videoSectionBulletBuild')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletImport')}</ListItem>\n                <ListItem>{t('apimgmtoverview.videoSectionBulletAdd')}</ListItem>\n              </List>\n            </TextContent>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default APIManagementPage;\n","import { FederatedModule } from '@app/components';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport React from 'react';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\n\nexport const CosPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage/>;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"cos\"\n      fallback={<AppServicesLoading/>}\n      module=\"./OpenshiftManagedConnectors\"\n      render={(OpenshiftManagedConnectors) => <OpenshiftManagedConnectors/>}\n    />\n  )\n};\n\nexport default CosPage;\n","import React from 'react';\nimport {\n  Button,\n  ButtonVariant,\n  Card,\n  Grid,\n  GridItem,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextContent,\n  TextVariants,\n  Title,\n  TitleSizes,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\n\nimport { useTranslation } from 'react-i18next';\n\nexport const DataSciencePage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  return (\n    <>\n      <PageSection\n        className=\"app-services-ui--banner app-services-ui--banner--rhods\"\n        variant={PageSectionVariants.light}\n      >\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('datascienceoverview.heroTitle')}\n          </Title>\n          <Title headingLevel=\"h2\" size=\"lg\" className=\"app-services-ui--banner__tagline pf-u-color-200\">\n            {t('datascienceoverview.heroTagline')}\n          </Title>\n          <Text component={TextVariants.p}>{t('datascienceoverview.heroDescription')}</Text>\n          <StackItem>\n            <Button\n              data-testid=\"hero-buttonLearnMore\"\n              variant={ButtonVariant.secondary}\n              component=\"a\"\n              href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\"\n              target=\"_blank\"\n            >\n              {t('datascienceoverview.heroCallToActionButton')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      <PageSection className=\"app-services-ui--page-section--marketing\" isWidthLimited>\n        <Grid hasGutter>\n          <GridItem md={5}>\n            <Stack hasGutter>\n              <StackItem>\n                <TextContent>\n                  <Title size={TitleSizes.xl} headingLevel=\"h3\" className=\"pf-u-mb-lg\">\n                    {t('datascienceoverview.videoSectionTitle')}\n                  </Title>\n                  <Text className=\"pf-u-mr-md\">{t('datascienceoverview.videoSectionInThisVideo')}</Text>\n                </TextContent>\n              </StackItem>\n              <StackItem>\n                <Button\n                  data-testid=\"CTA-videoRHODSDemo\"\n                  variant={ButtonVariant.secondary}\n                  component=\"a\"\n                  href=\"http://www.openshift.com/DataScienceVideoDemo\"\n                  target=\"_blank\"\n                >\n                  {t('datascienceoverview.heroViewDemo')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n                </Button>\n              </StackItem>\n            </Stack>\n          </GridItem>\n          <GridItem md={7}>\n            <Card className=\"app-services-ui--card--video\">\n                <div className=\"app-services-ui--video-wrapper\">\n                  <iframe\n                    src=\"https://www.youtube.com/embed/joK89xYeuUY\"\n                    title={t('datascienceoverview.videoSectionTitle')}\n                    frameBorder=\"0\"\n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\"\n                    allowFullScreen\n                  ></iframe>\n                </div>\n              </Card>\n          </GridItem>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default DataSciencePage;\n","import React from 'react';\nimport { ProductType, QuotaContext, useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { FederatedModule } from '@app/components';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const KasPage: React.FunctionComponent = () => {\n  console.log('starting kaspage');\n  const config = useConfig();\n  const { getQuota } = useQuota(ProductType?.kas);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl();\n  const { getTokenEndPointUrl } = useMASToken();\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      fallback={<AppServicesLoading />}\n      render={(OpenshiftStreamsFederated) => {\n        if (config?.serviceDown) {\n          return <ServiceDownPage />;\n        }\n\n        return (\n          <QuotaContext.Provider value={{ getQuota }}>\n            <OpenshiftStreamsFederated\n              preCreateInstance={preCreateInstance}\n              shouldOpenCreateModal={shouldOpenCreateModal}\n              tokenEndPointUrl={getTokenEndPointUrl()}\n            />\n          </QuotaContext.Provider>\n        );\n      }}\n    />\n  );\n};\n\nexport default KasPage;\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFoundPage: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n\n","export default __webpack_public_path__ + \"d0f2bb14.svg\";","export default __webpack_public_path__ + \"61fdfbf5.svg\";","export default __webpack_public_path__ + \"485bae8d.svg\";","export default __webpack_public_path__ + \"98789eae.png\";","import React from 'react';\nimport {\n  Bullseye,\n  Button,\n  ButtonVariant,\n  Card,\n  CardBody,\n  CardFooter,\n  CardHeader,\n  CardHeaderMain,\n  CardTitle,\n  Grid,\n  Label,\n  PageSection,\n  PageSectionVariants,\n  Stack,\n  StackItem,\n  Text,\n  TextVariants,\n  Title,\n} from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport ApacheKafkaLogo from \"/static/images/Logo-Red_Hat-OpenShift_Streams_for_Apache_Kafka-A-Standard-RGB.svg\";\nimport APIMgmtLogo from \"/static/images/Logo-Red_Hat-OpenShift-API_Management-A-Standard-RGB.svg\";\nimport DataScienceLogo from \"static/images/Logo-Red_Hat-OpenShift-Data_Science-A-Standard-RGB.svg\";\nimport ServiceRegistryLogo from \"static/images/Logo-Red_Hat-OpenShift_Service_Registry-A-Standard-RGB.png\"\n\nimport { useTranslation } from 'react-i18next';\n\nimport { useHistory } from 'react-router-dom';\nimport { useBasename } from \"@rhoas/app-services-ui-shared\";\n\nexport const OverviewPage: React.FunctionComponent = () => {\n\n  const { t } = useTranslation();\n\n  const history = useHistory();\n  const { getBasename } = useBasename() || { getBasename: () => '' };\n  const basename = getBasename();\n\n  const beta = location.pathname.startsWith('/beta');\n\n  const onClickKafkainstance = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (beta) {\n      event.preventDefault();\n      history.push(`${basename}/streams/kafkas`);\n    }\n  }\n\n  const getKafkaHref = () => {\n    if (beta) {\n      return history.createHref({\n        pathname: '/streams/kafkas'\n      })\n    }\n    return '/beta/application-services/streams/kafkas'\n  }\n\n\n\n\n  const onClickServiceRegistry = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n    if (beta) {\n      event.preventDefault();\n      history.push(`${basename}/service-registry`);\n    }\n  }\n\n  const getServiceRegistryHref = () => {\n    if (beta) {\n      history.createHref({\n        pathname: '/service-registry'\n      })\n    }\n    return '/beta/application-services/service-registry'\n  }\n\n  return (\n    <>\n      {/* Hero banner with graphic */}\n      <PageSection className=\"app-services-ui--page-section--marketing app-services-ui--banner pf-t-dark pf-u-background-color-dark-100\" variant={PageSectionVariants.dark}>\n        <Stack hasGutter>\n          <Title headingLevel=\"h1\" size=\"2xl\">\n            {t('overview.heroTitle')}\n          </Title>\n          <Text className=\"app-services-ui--banner__tagline\">{t('overview.heroTagline')}</Text>\n          <Text component={TextVariants.p}>\n            {t('overview.heroDescription')}\n          </Text>\n          <Text component={TextVariants.p} className=\"pf-u-mt-md\">\n            {t('overview.heroDescription2')}\n          </Text>\n          <StackItem>\n            <Button variant={ButtonVariant.primary} isLarge component=\"a\" data-testid=\"hero-buttonTryKafka\" href={getKafkaHref()} onClick={onClickKafkainstance}>\n              {t('overview.heroCallToActionButton')}\n            </Button>\n          </StackItem>\n        </Stack>\n      </PageSection>\n\n      {/* Banner with just text */}\n      <PageSection variant={PageSectionVariants.light} className=\"app-services-ui--page-section--marketing\">\n        <Bullseye>\n          <Text component={TextVariants.p} className=\"app-services-ui--banner--text-only\">\n            {t('overview.banner')}\n          </Text>\n        </Bullseye>\n      </PageSection>\n\n      {/* Cards */}\n      <PageSection isWidthLimited className=\"app-services-ui--page-section--marketing\">\n        <Grid md={6} lg={3} hasGutter>\n\n          {/* API Management card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={APIMgmtLogo}\n                  alt=\"Red Hat OpenShift API Management logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhoamTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label color=\"blue\">{t('overview.generalAvailability')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhoamMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhoamSecondaryText')} <Button data-testid=\"cardRHOAM-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\">OpenShift\n                    <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button variant={ButtonVariant.secondary} data-testid=\"cardRHOAM-buttonCTA\" component=\"a\" target=\"_blank\" href=\"https://developers.redhat.com/products/rhoam/getting-started\">\n                {t('overview.getStarted')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Data science card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={DataScienceLogo}\n                  alt=\"Red Hat OpenShift Data Science logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhodsTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.beta')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhodsMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhodsSecondaryText')} <Button data-testid=\"cardRHODS-linkOpenShift\" isInline variant={ButtonVariant.link} component=\"a\" target=\"_blank\" href=\"http://openshift.com\"> OpenShift\n                    <ExternalLinkAltIcon className=\"pf-u-ml-xs\" /></Button>.\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHODS-buttonCTA\" variant={ButtonVariant.secondary} component=\"a\" target=\"_blank\" href=\"https://www.redhat.com/en/technologies/cloud-computing/openshift/openshift-data-science\">\n                {t('overview.learnMore')} <ExternalLinkAltIcon className=\"pf-u-ml-sm\" />\n              </Button>\n            </CardFooter>\n          </Card>\n\n          {/* Service Registry card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={ServiceRegistryLogo}\n                  alt=\"Red Hat OpenShift Service Registry logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhosrTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.developmentPreview')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhosrMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhosrSecondaryText')}\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHOSR-buttonCTA\" variant={ButtonVariant.secondary} component=\"a\" href={getServiceRegistryHref()} onClick={onClickServiceRegistry}>{t('overview.rhosrCallToActionButton')}</Button>\n            </CardFooter>\n          </Card>\n\n          {/* Kafka card */}\n          <Card>\n            <CardHeader>\n              <CardHeaderMain>\n                <img\n                  src={ApacheKafkaLogo}\n                  alt=\"Red Hat OpenShift Streams for Apache Kafka logo\"\n                  style={{ height: '50px' }}\n                />\n              </CardHeaderMain>\n            </CardHeader>\n            <CardTitle>\n              <Title headingLevel=\"h2\" size=\"xl\">\n                {t('overview.rhosakTitle')}\n              </Title>\n            </CardTitle>\n            <CardBody>\n              <Stack hasGutter>\n                <StackItem className=\"pf-u-mb-lg\">\n                  <Label>{t('overview.developmentPreview')}</Label>\n                </StackItem>\n                <StackItem>\n                  {t('overview.rhosakMainText')}\n                </StackItem>\n                <StackItem className=\"pf-u-color-200\">\n                  {t('overview.rhosakSecondaryText')}\n                </StackItem>\n              </Stack>\n            </CardBody>\n            <CardFooter>\n              <Button data-testid=\"cardRHOSAK-buttonCreateKafka\" variant={ButtonVariant.secondary} component=\"a\" href={getKafkaHref()} onClick={onClickKafkainstance} >{t('overview.rhosakCallToActionButton')}</Button>\n            </CardFooter>\n          </Card>\n        </Grid>\n      </PageSection>\n    </>\n  );\n};\n\nexport default OverviewPage;\n","import React, { FunctionComponent } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ResourcesPage: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<AppServicesLoading/>}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated/>}\n  />\n);\n\nexport default ResourcesPage;\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceAccountsPage: React.FunctionComponent = () => {\n  const config = useConfig();\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<AppServicesLoading/>}\n      render={(ServiceAccountsFederated) => {\n\n\n        if (config?.serviceDown) {\n          return <ServiceDownPage/>;\n        }\n        return <ServiceAccountsFederated/>;\n      }}\n    />\n  );\n};\n\nexport default ServiceAccountsPage;\n","import React from 'react';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const ServiceDownPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t('serviceDown.serviceDownTitle')}\n        </Title>\n        <EmptyStateBody>\n          {t('serviceDown.serviceDownMessage')}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={() => {window.location.href = \"https://status.starter.openshift.com/\"}}>{t('serviceDown.serviceDownButton')}</Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactVersionDetails: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactVersionDetailsConnected />;\n};\n\nconst ArtifactVersionDetailsConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout breadcrumbId=\"srs.artifacts_details\" render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactVersionPage\" />\n    )}/>\n  );\n};\n\nexport default ArtifactVersionDetails;\n","import { FederatedApicurioComponent } from '@app/pages/ServiceRegistry/FederatedApicurioComponent';\nimport React from 'react';\nimport { SrsLayout } from '@app/pages/ServiceRegistry/SrsLayout';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages';\n\nexport const Artifacts: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactsConnected />;\n};\n\nconst ArtifactsConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts\"\n      render={(registry) => <FederatedApicurioComponent module=\"./FederatedArtifactsPage\" registry={registry} />}\n    />\n  );\n};\n\nexport default Artifacts;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactRedirect: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactRedirectConnected />;\n};\n\nconst ArtifactRedirectConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactRedirectPage\" />\n    )} />\n  );\n};\n\nexport default ArtifactRedirect;\n","import React from 'react';\nimport { ConfigType, createApicurioConfig } from '@app/pages/ServiceRegistry/utils';\nimport { FederatedModule, usePrincipal } from '@app/components';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { RegistryRest } from '@rhoas/registry-management-sdk';\nimport { useAuth, useBasename, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: RegistryRest | undefined;\n  topicName?: string;\n  groupId?: string | null | undefined;\n  version?: string;\n  registryId?: string;\n  basename?: string;\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: React.FC<FederatedApicurioComponentProps> = ({\n  module,\n  registry,\n  ...rest\n}) => {\n  let federateConfig: ConfigType;\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const getToken = auth?.apicurio_registry.getToken;\n  const { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n  const principlas = usePrincipal(registry?.owner);\n\n  if (config === undefined || registry === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (getToken && basename) {\n    federateConfig = createApicurioConfig(\n      config,\n      registry.registryUrl as string,\n      `${basename.getBasename()}/t/${registry?.id}`,\n      getToken,\n      principlas?.getAllPrincipals()\n    );\n  }\n\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<AppServicesLoading />}\n      render={(ServiceRegistryFederated) => {\n        return (\n          <ServiceRegistryFederated\n            config={federateConfig}\n            tenantId={registry.id}\n            groupId={groupId}\n            artifactId={artifactId}\n            version={version}\n            history={history}\n            {...rest}\n          />\n        );\n      }}\n    />\n  );\n};\n","import { Principal } from '@rhoas/app-services-ui-shared';\nimport { Config } from \"@rhoas/app-services-ui-shared\";\n\n\nexport interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport interface NoneAuthConfig extends AuthConfig { }\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n  principals?: Principal[] | undefined;\n}\n\nconst createApicurioConfig = (config: Config, apiUrl: string, navPathPrefix: string,\n  getToken: () => Promise<string> | undefined, principals?: Principal[] | undefined) => {\n  const apicurioConfig: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: 'gettoken',\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      roleManagement: config.srs.apiBasePath == \"https://api.stage.openshift.com\",\n      multiTenant: true,\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n    principals\n  } as ConfigType;\n\n  return apicurioConfig;\n};\n\nexport { createApicurioConfig };\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const RulesPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RulesPageConnected />;\n};\n\nconst RulesPageConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout breadcrumbId=\"srs.global_rules\" render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedRulesPage\"/>\n    )}/>\n  );\n};\n\nexport default RulesPage;\n","import React from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { DevelopmentPreview, FederatedModule } from '@app/components';\nimport { ServiceDownPage } from '@app/pages';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ProductType, QuotaContext } from '@rhoas/app-services-ui-shared';\n\nexport const ServiceRegistryPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ServiceRegistryPageConnected />;\n};\n\nexport const ServiceRegistryPageConnected: React.FC = () => {\n  const config = useConfig();\n  const { getQuota } = useQuota(ProductType.srs);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl();\n  const { getTokenEndPointUrl } = useMASToken();\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <DevelopmentPreview>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistry\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <QuotaContext.Provider value={{ getQuota }}>\n              <ServiceRegistryFederated\n                preCreateInstance={preCreateInstance}\n                shouldOpenCreateModal={shouldOpenCreateModal}\n                tokenEndPointUrl={getTokenEndPointUrl()}\n              />\n            </QuotaContext.Provider>\n          );\n        }}\n      />\n    </DevelopmentPreview>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { RegistryRest } from '@rhoas/registry-management-sdk';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useMASToken } from '@app/hooks';\n\ntype SrsLayoutProps = {\n  render: (registry: RegistryRest) => JSX.Element;\n  breadcrumbId?: string;\n};\n\nexport const SrsLayout: React.FC<SrsLayoutProps> = ({ render, breadcrumbId }) => {\n  const { getTokenEndPointUrl } = useMASToken();\n  return (\n    <FederatedModule\n      scope=\"srs\"\n      module=\"./ApicurioRegistry\"\n      fallback={<AppServicesLoading />}\n      render={(ServiceRegistryFederated) => {\n        return (\n          <ServiceRegistryFederated\n            render={render}\n            breadcrumbId={breadcrumbId}\n            tokenEndPointUrl={getTokenEndPointUrl()}\n          />\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { RegistryRest } from '@rhoas/registry-management-sdk';\nimport { FederatedApicurioComponent } from './FederatedApicurioComponent';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ServiceRegistrySchemaMapping: React.FC = () => {\n  const { topicName } = useParams<{ topicName: string }>();\n  const basename = '/service-registry';\n\n  return (\n    <>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistryMapping\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <ServiceRegistryFederated\n              basename={basename}\n              topicName={topicName}\n              renderSchema={(registry: RegistryRest) => (\n                <FederatedApicurioComponent\n                  module=\"./FederatedSchemaMapping\"\n                  registry={registry}\n                  topicName={topicName}\n                  groupId={null}\n                  version={'latest'}\n                  registryId={registry?.id}\n                  basename={basename}\n                />\n              )}\n            />\n          );\n        }}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Main, NotAuthorized } from '@redhat-cloud-services/frontend-components';\n\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: React.FunctionComponent<GetLinkProps> = ({ href, children }) => <Link to={href || ''}>{children}</Link>;\n\nexport const AccessDeniedPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t('accessdenied.accessDeniedTitle')}\n        description={accessDeniedDetails}\n        prevPageButtonText={t('accessdenied.accessDeniedButtonText')}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import { FederatedModule } from '@app/components';\nimport React from 'react';\n\nexport type KafkaFederatedComponentProps = UnderlyingProps & {\n  module: string;\n};\n\nexport type UnderlyingProps = {\n  activeTab?: number;\n  getToken?: () => Promise<string>;\n  apiBasePath: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  setIsOpenDeleteInstanceModal?: (isOpenModal: boolean) => void;\n  showMetrics?: JSX.Element | undefined;\n  showSchemas?: JSX.Element | undefined;\n};\n\n// Provides properties for component path and it's underlying properties\nexport const KafkaFederatedComponent: React.FunctionComponent<KafkaFederatedComponentProps> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => <FederatedKafka {...rest} />}\n    />\n  );\n};\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const Topics: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./KafkaMainView\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const TopicDetails: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./TopicDetails\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const CreateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./CreateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const UpdateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./UpdateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useBasename, useConfig } from '@rhoas/app-services-ui-shared';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\ntype MetricsProps = {\n  kafkaId: string;\n};\n\nexport const Metrics: React.FC<MetricsProps> = ({ kafkaId }) => {\n  const history = useHistory();\n  const config = useConfig();\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n\n  if (config === undefined) {\n    return <AppServicesLoading/>;\n  }\n\n  const onCreateTopic = () => {\n    history.push(`${basename}/topic/create`);\n  };\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./Metrics\"\n      render={(MetricsFederated) => <MetricsFederated kafkaId={kafkaId} onCreateTopic={onCreateTopic}/>}\n    />\n  );\n};\n","import { Config } from '@rhoas/app-services-ui-shared';\n\nconst defaultHostname = 'console.redhat.com';\n\ntype FederatedModulesConfig = Config['federatedModules'];\n\ntype EnvironmentConfig = {\n  hostnames: string[];\n  fetchConfig?: boolean;\n  type?: string;\n  config: Omit<Config, 'federatedModules'>;\n};\n\nexport type EnvironmentConfigs = Array<EnvironmentConfig>;\n\nexport const filterEnvironmentConfig = (environmentConfig: EnvironmentConfigs): EnvironmentConfig => {\n  const hostname = window.location.hostname;\n  console.log(`Filter config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(hostname));\n  if (possibleConfigs.length > 1) {\n    throw new Error(`Unable to find config for ${hostname}, more than one config matched ${possibleConfigs}`);\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(defaultHostname));\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      return possibleDefaultConfigs[0];\n    }\n  }\n  return possibleConfigs[0];\n};\n\nexport const addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfig,\n  federatedModulesConfig: FederatedModulesConfig\n): Config => {\n  if (environmentConfig.type !== 'proxy') {\n    const federatedModules = {} as FederatedModulesConfig;\n    Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n      federatedModules[k] = {\n        basePath: v.fallbackBasePath,\n      };\n    });\n    return {\n      ...environmentConfig.config,\n      federatedModules,\n    };\n  }\n  return {\n    ...environmentConfig.config,\n    federatedModules: federatedModulesConfig,\n  };\n};\n","import React from 'react';\nimport { Config, ConfigContext } from '@rhoas/app-services-ui-shared';\nimport configs from '../../../../config/config.json';\nimport { addFederatedModulesToConfig, EnvironmentConfigs, filterEnvironmentConfig } from '@app/providers/config/utils';\n\ndeclare const __webpack_public_path__: string;\n\nexport const EmbeddedConfigProvider: React.FunctionComponent = ({ children }) => {\n  const [value, setValue] = React.useState<Config | undefined>(() => {\n    const environmentConfig = filterEnvironmentConfig(configs.config as EnvironmentConfigs);\n    if (environmentConfig.fetchConfig) {\n      return undefined;\n    }\n    const config = addFederatedModulesToConfig(environmentConfig, configs.federatedModules);\n    console.log('Done loading config', config);\n    return config;\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      if (value === undefined) {\n        const response = await fetch(`${__webpack_public_path__}config.json`);\n        const jsonConfig = await response.json();\n        const environmentConfig = filterEnvironmentConfig(jsonConfig.config);\n        const config = addFederatedModulesToConfig(environmentConfig, jsonConfig.federatedModules);\n        console.log('Done loading config', config);\n        setValue(config);\n      }\n    })();\n  }, []);\n  return <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>;\n};\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (!registry) {\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport { accessibleRouteChangeHandler };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from \"keycloak-js\";\nimport Cookies from \"js-cookie\";\nimport { Base64 } from \"js-base64\";\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\n\n\n\n\nconst REFRESH_TOKEN_COOKIE_NAME = 'mrt';\nconst MIN_VALIDITY = 50;\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n};\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const initKeycloak = async (\n  config: KeycloakConfig,\n  getInsightsAccessToken: () => Promise<string>\n): Promise<KeycloakInstance> => {\n  const initOptions = {\n    responseMode: 'query',\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken) {\n    const rk = Keycloak(config);\n    // Use the refresh token\n    try {\n      // Perform a keycloak init without a login\n      await rk.init(initOptions);\n      // Set the saved refresh token into Keycloak\n      rk.refreshToken = refreshToken;\n      // Then force a token refresh to check if the refresh token is actually valid\n      await rk.updateToken(-1);\n      return rk;\n    } catch {\n      clearRefreshToken();\n      await logout(rk);\n    }\n  }\n  const lk = Keycloak(config);\n  initOptions.onLoad = 'login-required';\n  await lk.init(initOptions);\n  if (lk.refreshToken) {\n    await storeRefreshToken(lk.refreshToken, getInsightsAccessToken);\n  }\n  return lk;\n};\n\nconst retrieveRefreshToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = (JSON.parse(storedToken) as unknown) as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n};\n\nconst clearRefreshToken = () => {\n  console.debug('clearing stored refresh token');\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n};\n\nconst storeRefreshToken = async (refreshToken: string, getInsightsAccessToken: () => Promise<string>) => {\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const rhUserId = insightsJWT['account_id'];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId,\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug('storing refresh token');\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n};\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getAccessToken = async (keycloak: KeycloakInstance, getInsightsAccessToken: () => Promise<string>): Promise<string> => {\n  await keycloak.updateToken(MIN_VALIDITY);\n  if (!keycloak.token || !keycloak.tokenParsed) {\n    throw new Error('No token from keycloak!');\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== keycloak.tokenParsed['rh-user-id']) {\n    await logout(keycloak);\n    return '';\n  }\n  if (keycloak.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak.token;\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.info('Trigger MASSSO logout');\n    await k.logout();\n  }\n};\n"],"names":["routeFocusTimer","NotFoundPage","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","window","clearTimeout","PageNotFoundRoute","title","Route","component","flattenedRoutes","routes","reduce","flattened","route","getAdminServerUrl","kafkaRequest","undefined","Error","bootstrap_server_host","kafkaRoutes","exact","label","path","devPreview","WrappedRoute","Component","underlyingProps","url","rest","getBasename","render","routeProps","BasenameContext","value","QuickStartLoaderFederated","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","KasPage","OverviewPage","ResourcesPage","RulesPage","RolesPage","ServiceAccountsPage","CosPage","RedirectToStreamsKafkas","Redirect","to","appRoutes","auth","useAuth","history","useHistory","config","useConfig","useState","setKafkaRequest","id","useParams","useEffect","kas","getToken","accessToken","DefaultApi","basePath","apiBasePath","getKafkaById","kafka","data","kafkaDetail","adminServerUrl","useKafkaInstance","routeMatch","useRouteMatch","error","setError","isInstanceDrawerOpen","setIsInstanceDrawerOpen","activeDrawerTab","setActiveDrawerTab","isOpenDeleteInstanceModal","setIsOpenDeleteInstanceModal","serviceDown","AppServicesLoading","props","kafkaPageLink","createHref","pathname","kafkaInstanceLink","showMetrics","kafkaId","onError","code","kafkaName","name","handleInstanceDrawer","isOpen","activeTab","showSchemas","ServiceRegistry","className","PrincipalsProvider","kafkaInstance","isExpanded","onClose","Switch","map","idx","routePath","console","log","key","basename","getBaseName","location","show","AppRoutes","LastLocationProvider","fallback","connect","insights","getAppId","defaultAppId","parts","split","length","chrome","init","appId","identifyApp","unregister","on","event","push","includes","navId","getModuleInfo","baseUrl","scope","fallbackBasePath","Promise","fetchModuleInfo","fetch","json","then","fedMods","s","entry","startsWith","entryPoint","useIsMounted","isMounted","useRef","current","FederatedModule","module","federatedModuleContext","moduleInfo","setModuleInfo","DynamicFederatedModule","ready","setReady","failed","setFailed","element","document","createElement","src","type","async","onload","onerror","head","appendChild","removeChild","useDynamicScript","container","default","get","factory","Module","debug","loadComponent","AssetsContext","getPath","usePrincipal","instanceOwner","serviceAccountPrincipals","setServiceAccountPrincipals","userAcountPrincipals","setUserAccountPrincipals","rbac","principalApi","PrincipalApi","getUsername","listPrincipals","response","p","username","principalType","PrincipalType","displayName","first_name","last_name","emailAddress","email","filter","userAccounts","SecurityApi","getServiceAccounts","items","sa","client_id","serviceAccounts","getAllPrincipals","answer","concat","children","owner","PrincipalsContext","InstanceDrawer","masSso","tokenEndPointUrl","onDeleteInstance","InstanceDrawerFederated","instanceDetail","FederatedModuleContext","FederatedModuleProvider","Provider","federatedModules","DevelopmentPreview","t","useTranslation","style","height","Banner","isSticky","variant","Bullseye","Popover","hasAutoWidth","bodyContent","position","minWidth","maxWidth","Button","AccessReviewActionEnum","AccessReviewResourceTypeEnum","AccessReviewResponseActionEnum","AccessReviewResponseResourceTypeEnum","CapabilityReviewRequestCapabilityEnum","CapabilityReviewRequestTypeEnum","ClusterAuthorizationRequestProductCategoryEnum","ClusterAuthorizationRequestProductIdEnum","OneMetricHealthStateEnum","PermissionActionEnum","PermissionAllOfActionEnum","ResourceQuotaTypeEnum","ResourceQuotaAllOfTypeEnum","ResourceQuotaRequestTypeEnum","ResourceReviewActionEnum","ResourceReviewResourceTypeEnum","ResourceReviewRequestActionEnum","ResourceReviewRequestResourceTypeEnum","RoleBindingTypeEnum","RoleBindingAllOfTypeEnum","SelfAccessReviewActionEnum","SelfAccessReviewResourceTypeEnum","SelfResourceReviewActionEnum","SelfResourceReviewResourceTypeEnum","SelfResourceReviewRequestActionEnum","SelfResourceReviewRequestResourceTypeEnum","SubscriptionProductBundleEnum","SubscriptionServiceLevelEnum","SubscriptionSupportLevelEnum","SubscriptionSystemUnitsEnum","SubscriptionUsageEnum","SubscriptionAllOfProductBundleEnum","SubscriptionAllOfServiceLevelEnum","SubscriptionAllOfSupportLevelEnum","SubscriptionAllOfSystemUnitsEnum","SubscriptionAllOfUsageEnum","SubscriptionCreateRequestPlanIdEnum","SubscriptionCreateRequestStatusEnum","SubscriptionPatchRequestClusterBillingModelEnum","SubscriptionPatchRequestProductBundleEnum","SubscriptionPatchRequestServiceLevelEnum","SubscriptionPatchRequestSupportLevelEnum","SubscriptionPatchRequestSystemUnitsEnum","SubscriptionPatchRequestUsageEnum","SupportCasesRequestSeverityEnum","BASE_PATH","replace","configuration","axios","this","field","msg","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","RequiredError","setBearerAuthToObject","object","setSearchParams","searchParams","URLSearchParams","search","objects","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","headers","JSON","stringify","toPathString","hash","createRequestFunction","axiosArgs","globalAxios","axiosRequestArgs","options","request","Status","DefaultApiFp","localVarAxiosParamCreator","apiAccountsMgmtV1AccessTokenPost","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","apiAccountsMgmtV1AccountsGet","page","size","orderBy","fields","fetchLabels","fetchCapabilities","apiAccountsMgmtV1AccountsIdGet","localVarPath","encodeURIComponent","String","apiAccountsMgmtV1AccountsIdLabelsGet","apiAccountsMgmtV1AccountsIdLabelsKeyDelete","apiAccountsMgmtV1AccountsIdLabelsKeyGet","apiAccountsMgmtV1AccountsIdLabelsKeyPatch","apiAccountsMgmtV1AccountsIdLabelsPost","apiAccountsMgmtV1AccountsIdPatch","accountPatchRequest","apiAccountsMgmtV1AccountsPost","account","dryRun","apiAccountsMgmtV1ClusterAuthorizationsPost","clusterAuthorizationRequest","apiAccountsMgmtV1ClusterRegistrationsPost","clusterRegistrationRequest","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1ErrorsGet","apiAccountsMgmtV1ErrorsIdGet","apiAccountsMgmtV1FeatureTogglesIdQueryPost","featureToggleQueryRequest","apiAccountsMgmtV1LabelsGet","apiAccountsMgmtV1MetricsGet","apiAccountsMgmtV1NotifyPost","notificationRequest","apiAccountsMgmtV1OrganizationsGet","apiAccountsMgmtV1OrganizationsIdGet","apiAccountsMgmtV1OrganizationsIdLabelsGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete","apiAccountsMgmtV1OrganizationsIdLabelsKeyGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch","apiAccountsMgmtV1OrganizationsIdLabelsPost","apiAccountsMgmtV1OrganizationsIdPatch","organizationPatchRequest","apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","orgId","fetchRelatedResources","apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost","resourceQuotaRequest","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete","quotaId","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch","apiAccountsMgmtV1OrganizationsPost","organization","apiAccountsMgmtV1PlansGet","apiAccountsMgmtV1PlansIdGet","apiAccountsMgmtV1PullSecretsExternalResourceIdDelete","externalResourceId","apiAccountsMgmtV1PullSecretsPost","pullSecretRequest","apiAccountsMgmtV1RegistriesGet","apiAccountsMgmtV1RegistriesIdGet","apiAccountsMgmtV1RegistryCredentialsGet","apiAccountsMgmtV1RegistryCredentialsIdDelete","apiAccountsMgmtV1RegistryCredentialsIdGet","apiAccountsMgmtV1RegistryCredentialsIdPatch","registryCredentialPatchRequest","apiAccountsMgmtV1RegistryCredentialsPost","registryCredential","apiAccountsMgmtV1ReservedResourcesGet","apiAccountsMgmtV1ResourceQuotaGet","apiAccountsMgmtV1RoleBindingsGet","apiAccountsMgmtV1RoleBindingsIdDelete","apiAccountsMgmtV1RoleBindingsIdGet","apiAccountsMgmtV1RoleBindingsIdPatch","roleBindingRequest","apiAccountsMgmtV1RoleBindingsPost","roleBindingCreateRequest","apiAccountsMgmtV1RolesGet","apiAccountsMgmtV1RolesIdGet","apiAccountsMgmtV1SkuRulesGet","apiAccountsMgmtV1SkuRulesIdGet","apiAccountsMgmtV1SkusGet","apiAccountsMgmtV1SkusIdGet","apiAccountsMgmtV1SubscriptionsGet","fetchAccounts","labels","apiAccountsMgmtV1SubscriptionsIdDelete","apiAccountsMgmtV1SubscriptionsIdGet","fetchCpuAndSocket","apiAccountsMgmtV1SubscriptionsIdLabelsGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete","apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch","apiAccountsMgmtV1SubscriptionsIdLabelsPost","apiAccountsMgmtV1SubscriptionsIdNotifyPost","apiAccountsMgmtV1SubscriptionsIdPatch","subscriptionPatchRequest","apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet","apiAccountsMgmtV1SubscriptionsIdSupportCasesGet","apiAccountsMgmtV1SubscriptionsPost","subscriptionCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete","subId","accountId","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost","notificationContactCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet","reservedResourceId","apiAccountsMgmtV1SupportCasesCaseIdDelete","caseId","apiAccountsMgmtV1SupportCasesPost","supportCasesRequest","apiAccountsMgmtV1TokenAuthorizationPost","tokenAuthorizationRequest","apiAuthorizationsV1AccessReviewPost","accessReview","apiAuthorizationsV1CapabilityReviewPost","capabilityReviewRequest","apiAuthorizationsV1ExportControlReviewPost","exportControlReviewRequest","apiAuthorizationsV1FeatureReviewPost","featureReview","apiAuthorizationsV1ResourceReviewPost","resourceReviewRequest","apiAuthorizationsV1SelfAccessReviewPost","selfAccessReview","apiAuthorizationsV1SelfFeatureReviewPost","selfFeatureReview","apiAuthorizationsV1SelfResourceReviewPost","selfResourceReviewRequest","apiAuthorizationsV1SelfTermsReviewPost","selfTermsReview","apiAuthorizationsV1TermsReviewPost","termsReview","DefaultApiAxiosParamCreator","localVarAxiosArgs","BaseAPI","useQuota","param","apiKey","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","productId","setOrgId","ams","orgID","getQuota","filteredQuota","loading","isServiceDown","kasQuotaId","kasTrialQuotaId","srsQuotaId","srsTrialQuotaId","ProductType","trialQuotaId","quotaKey","QuotaType","trialQuotaKey","getQuotaTypesByProductId","res","quotaData","Map","quota","q","quota_id","trim","trialQuota","allowed","remaining","consumed","catch","useMemo","fetchTermsReviewFactory","event_code","eventCode","site_code","siteCode","buildUrlParams","params","Object","keys","join","useModalControl","ref","load","loadTermsReview","r","useLocation","shouldOpenCreateModal","parsed","parse","terms_required","preCreateInstance","open","terms_available","redirect_url","redirectURL","stringifyUrl","href","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","useInsights","getInsightsAccessToken","keycloakConfig","authServerUrl","clientId","realm","keycloakInstance","insightsChromeAuth","getKeycloakInstance","instance","getMASSSOToken","getUser","identity","user","isOrgAdmin","is_org_admin","srs","apicurio_registry","useMASToken","getTokenEndPointUrl","resources","en","translation","appServicesi18n","use","initReactI18next","detection","order","caches","fallbackLng","interpolation","escapeValue","PageSection","PageSectionVariants","Stack","hasGutter","Title","headingLevel","Text","TextVariants","isWidthLimited","Grid","lg","Card","CardHeader","CardHeaderMain","CardTitle","CardBody","CardFooter","StackItem","ButtonVariant","target","TitleSizes","GridItem","md","frameBorder","allow","allowFullScreen","TextContent","List","ListItem","OpenshiftManagedConnectors","OpenshiftStreamsFederated","QuotaContext","EmptyState","EmptyStateIcon","icon","EmptyStateBody","onClick","useBasename","beta","onClickKafkainstance","preventDefault","getKafkaHref","isLarge","alt","Label","color","isInline","QuickStartCatalogFederated","ServiceAccountsFederated","ServiceDownPage","ArtifactVersionDetailsConnected","breadcrumbId","registry","ArtifactsConnected","ArtifactRedirectConnected","FederatedApicurioComponent","federateConfig","groupId","artifactId","version","principlas","apiUrl","navPathPrefix","principals","artifacts","features","readOnly","breadcrumbs","roleManagement","multiTenant","ui","navPrefixPath","createApicurioConfig","registryUrl","ServiceRegistryFederated","tenantId","RulesPageConnected","ServiceRegistryPage","ServiceRegistryPageConnected","SrsLayout","ServiceRegistrySchemaMapping","topicName","renderSchema","registryId","GetLink","Link","AccessDeniedPage","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","KafkaFederatedComponent","FederatedKafka","Topics","TopicDetails","CreateTopic","UpdateTopic","Metrics","onCreateTopic","MetricsFederated","filterEnvironmentConfig","environmentConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","federatedModulesConfig","entries","forEach","k","v","EmbeddedConfigProvider","fetchConfig","setValue","jsonConfig","ConfigContext","middleware","register","notifications","release","pathName","shift","accessibleRouteChangeHandler","setTimeout","mainContainer","getElementById","focus","useDocumentTitle","originalTitle","REFRESH_TOKEN_COOKIE_NAME","initKeycloak","initOptions","responseMode","retrieveRefreshToken","refreshToken","rk","updateToken","clearRefreshToken","logout","lk","onLoad","storeRefreshToken","encoded","storedToken","Base64","storedRefreshToken","refreshJWT","exp","getUnixTime","Date","insightsToken","rhUserId","insightsJWT","getAccessToken","keycloak","token","tokenParsed","info"],"sourceRoot":""}