{"version":3,"file":"5754.6f528b21913fce15075c.js","mappings":"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","sources":["webpack://application-services-ui/./src/app/AppRoutes.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/PrincipalsProvider/PrincipalsProvider.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/components/KasModalLoader/KasModalLoader.tsx","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/hooks/modal.ts","webpack://application-services-ui/./src/app/hooks/insights.ts","webpack://application-services-ui/./src/app/hooks/keycloak.ts","webpack://application-services-ui/./src/app/hooks/useSSOProviders.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/CosPage/CosPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederatedComponent.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Dashboard.tsx","webpack://application-services-ui/./src/app/pages/Kafka/ConsumerGroups.tsx","webpack://application-services-ui/./src/app/pages/Kafka/AclPermissions.tsx","webpack://application-services-ui/./src/app/pages/Kafka/kafka-instance.ts","webpack://application-services-ui/./src/app/pages/Kafka/Settings.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaRoutes.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaTopicsFromAdmin.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchTopicsMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/SettingsTab.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchSettings.ts","webpack://application-services-ui/./src/app/pages/Kafka/KafkaMainView.tsx","webpack://application-services-ui/./src/app/pages/Kafka/ConnectedMetrics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaInstanceMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchMetricsKpi.ts","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactVersion.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/Artifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactsRedirect.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/DownloadArtifacts.tsx","webpack://application-services-ui/./src/app/hooks/usePrincipals.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/RulesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/SrsLayout.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistrySchemaMapping.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/providers/auth/auth.ts","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/providers/config/ServiceConstants.ts","webpack://application-services-ui/./src/app/providers/config/ServiceConstantsContextProvider.tsx","webpack://application-services-ui/./src/app/providers/featureflags/FeatureFlags.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/Routing.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts"],"sourcesContent":["import {\n  FunctionComponent,\n  lazy,\n  useCallback,\n  VoidFunctionComponent,\n  Suspense,\n} from \"react\";\nimport {\n  Redirect,\n  Route,\n  RouteComponentProps,\n  Switch,\n  useHistory,\n} from \"react-router-dom\";\nimport { ErrorBoundary } from \"react-error-boundary\";\nimport getBaseName from \"./utils/getBaseName\";\nimport {\n  DevelopmentPreview,\n  AppServicesPageNotFound,\n  AppServicesEmptyState,\n  AppServicesEmptyStateVariant,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  AppRouteConfig,\n  flattenedRoutes,\n  IAppRoute,\n  PageNotFoundRoute,\n} from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport { KafkaMainView } from \"@app/pages/Kafka\";\nimport { BasenameContext } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button } from \"@patternfly/react-core\";\n\nconst QuickStartLoaderFederated = lazy(\n  () => import(\"@app/pages/Resources/QuickStartLoaderFederated\")\n);\n\nconst APIManagementPage = lazy(\n  () => import(\"@app/pages/APIManagement/APIManagementPage\")\n);\nconst ArtifactRedirect = lazy(\n  () => import(\"@app/pages/ServiceRegistry/ArtifactsRedirect\")\n);\nconst Artifacts = lazy(() => import(\"@app/pages/ServiceRegistry/Artifacts\"));\nconst ArtifactVersionDetails = lazy(\n  () => import(\"@app/pages/ServiceRegistry/ArtifactVersion\")\n);\nconst ApiDesignerHomePage = lazy(\n  () => import(\"@app/pages/APIDesigner/ApiDesignerHomePage\")\n);\nconst ApiDesignerEditorPage = lazy(\n  () => import(\"@app/pages/APIDesigner/ApiDesignerEditorPage\")\n);\n\nconst DataSciencePage = lazy(\n  () => import(\"@app/pages/DataScience/DataSciencePage\")\n);\nconst KafkaOverviewPage = lazy(\n  () => import(\"@app/pages/KafkaOverview/KafkaOverviewPage\")\n);\n\nconst KasPage = lazy(() => import(\"@app/pages/Kas/KasPage\"));\nconst OverviewPage = lazy(() => import(\"@app/pages/Overview/OverviewPage\"));\nconst ResourcesPage = lazy(() => import(\"@app/pages/Resources/ResourcesPage\"));\nconst RulesPage = lazy(() => import(\"@app/pages/ServiceRegistry/RulesPage\"));\nconst RolesPage = lazy(() => import(\"@app/pages/ServiceRegistry/RolesPage\"));\nconst SettingsPage = lazy(\n  () => import(\"@app/pages/ServiceRegistry/SettingsPage\")\n);\nconst ServiceAccountsPage = lazy(\n  () => import(\"@app/pages/ServiceAccounts/ServiceAccountsPage\")\n);\nconst CosPage = lazy(() => import(\"@app/pages/CosPage/CosPage\"));\nconst ServiceRegistryPage = lazy(\n  () => import(\"@app/pages/ServiceRegistry/ServiceRegistryPage\")\n);\nconst SmartEventsPage = lazy(\n  () => import(\"@app/pages/SmartEventsPage/SmartEventsPage\")\n);\n\nconst RedirectToOverview: FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: FunctionComponent = () => (\n  <Redirect to=\"/streams/kafkas\" />\n);\nconst RedirectToServiceAccounts: FunctionComponent = () => (\n  <Redirect to=\"/service-accounts\" />\n);\nconst RedirectToResources: FunctionComponent = () => (\n  <Redirect to=\"/learning-resources\" />\n);\n\nconst appRoutes: AppRouteConfig<unknown>[] = [\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: \"Overview\",\n    path: \"/\",\n    title: \"Overview | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: \"Overview\",\n    path: \"/overview\",\n    title: \"Overview | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: \"API Management\",\n    path: \"/api-management\",\n    title: \"API Management | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: \"Data Science\",\n    path: \"/data-science\",\n    title: \"Data Science | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: \"Learning Resources | Red Hat OpenShift Application Services\",\n    path: \"/learning-resources\",\n    title: \"Learning Resources | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n  /**\n   * STREAMS SECTION\n   */\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: KafkaOverviewPage,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/overview\",\n    title:\n      \"Overview | Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/kafkas\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n    basename: \"/streams/kafkas\",\n    devPreview: false,\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: RedirectToServiceAccounts,\n    exact: true,\n    label: \"Service Accounts\",\n    path: \"/streams/service-accounts\",\n    title: \"Service Accounts | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n  {\n    // Handle the redirect for the old url application-services/streams/resources to application-services/learning-resources\n    component: RedirectToResources,\n    label: \"QuickStarts for Red Hat OpenShift Application Services\",\n    path: \"/streams/resources\",\n    title: \"QuickStarts for Red Hat OpenShift Application Services\",\n    devPreview: true,\n  },\n  // this needs to be the last route for the streams section since it's the catch-all one\n  {\n    component: KafkaMainView,\n    label: \"Streams for Apache Kafka\",\n    path: \"/streams/kafkas/:id\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n    basename: \"/streams/kafkas/:id\",\n    devPreview: false,\n  },\n  /**\n   * END OF STREAMS SECTION\n   */\n\n  /**\n   * SERVICE REGISTRY SECTION\n   */\n  {\n    component: Artifacts,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/artifacts\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/rules\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: RolesPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/roles\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: SettingsPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/settings\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/artifacts/:groupId/:artifactId\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/service-registry/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version\",\n    title: \"Service Registry | Red Hat OpenShift Application Services\",\n    basename: \"/service-registry\",\n  },\n  /**\n   * END OF SERVICE REGISTRY SECTION\n   */\n\n  /**\n   * API DESIGNER SECTION\n   */\n  {\n    component: ApiDesignerHomePage,\n    exact: true,\n    label: \"API Designer\",\n    path: \"/api-designer\",\n    title: \"API Designer | Red Hat OpenShift Application Services\",\n    basename: \"/api-designer\",\n    devPreview: true,\n  },\n  {\n    component: ApiDesignerEditorPage,\n    exact: true,\n    label: \"Service Registry\",\n    path: \"/api-designer/designs/:designId/editor\",\n    title: \"API Designer | Red Hat OpenShift Application Services\",\n    basename: \"/api-designer\",\n    devPreview: true,\n  },\n  /**\n   * END OF API DESIGNER SECTION\n   */\n\n  {\n    component: CosPage,\n    exact: false,\n    label: \"COS\",\n    path: \"/connectors\",\n    title: \"Connectors | Red Hat OpenShift Application Services\",\n    basename: `${getBaseName(window.location.pathname)}/connectors`,\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: \"Service Accounts\",\n    path: \"/service-accounts\",\n    title: \"Service Accounts | Red Hat OpenShift Application Services\",\n    devPreview: false,\n  },\n  {\n    component: SmartEventsPage,\n    exact: false,\n    label: \"Smart Events\",\n    path: \"/smart-events\",\n    title: \"Smart Events | Red Hat OpenShift Application Services\",\n    basename: `${getBaseName(window.location.pathname)}/smart-events`,\n    devPreview: true,\n  },\n\n  // old url handling\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: \"Streams for Apache Kafka\",\n    path: \"/openshift-streams\",\n    title: \"Streams for Apache Kafka | Red Hat OpenShift Application Services\",\n  },\n];\n\nconst WrappedRoute: FunctionComponent<IAppRoute<unknown>> = ({\n  component: Component,\n  title,\n  basename,\n  devPreview,\n  ...rest\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  useDocumentTitle(title);\n  const getBasename = useCallback(() => {\n    return basename || \"\";\n  }, [basename]);\n  const onClickButton = useCallback(() => history.push(\"/\"), [history]);\n\n  const wrapRoute = useCallback(\n    (routeProps: RouteComponentProps) => {\n      return (\n        <ErrorBoundary\n          fallbackRender={({ error }) =>\n            error.message === \"404\" ? (\n              <AppServicesPageNotFound />\n            ) : (\n              <AppServicesEmptyState\n                emptyStateProps={{\n                  variant: AppServicesEmptyStateVariant.UnexpectedError,\n                }}\n                emptyStateIconProps={{\n                  className: \"icon-color\",\n                }}\n                titleProps={{\n                  title: t(\"common:something_went_wrong\"),\n                }}\n                emptyStateBodyProps={{\n                  body: t(\"common:unexpected_error\"),\n                }}\n              >\n                <Button onClick={onClickButton}>\n                  {t(\"common:return_to_home_page\")}\n                </Button>\n              </AppServicesEmptyState>\n            )\n          }\n        >\n          <DevelopmentPreview show={devPreview}>\n            <BasenameContext.Provider value={{ getBasename }}>\n              <Component {...rest} {...routeProps} />\n            </BasenameContext.Provider>\n          </DevelopmentPreview>\n        </ErrorBoundary>\n      );\n    },\n    [Component, devPreview, getBasename, onClickButton, rest, t]\n  );\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst AppRoutes: VoidFunctionComponent = () => {\n  return (\n    <>\n      <Suspense fallback={<AppServicesLoading />}>\n        <Switch>\n          {flattenedRoutes(appRoutes).map(\n            ({ path, exact, component, title, isAsync, ...rest }, idx) => (\n              <WrappedRoute\n                path={path}\n                exact={exact}\n                component={component}\n                key={idx}\n                title={title}\n                isAsync={isAsync}\n                {...rest}\n              />\n            )\n          )}\n          <PageNotFoundRoute title=\"404 Page Not Found\" />\n        </Switch>\n      </Suspense>\n      <QuickStartLoaderFederated />\n    </>\n  );\n};\n\nexport { AppRoutes, appRoutes };\n","import { FunctionComponent, useCallback, useEffect } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { connect } from \"react-redux\";\nimport { NotificationsPortal } from \"@redhat-cloud-services/frontend-components-notifications\";\nimport { AppRoutes } from \"@app/AppRoutes\";\nimport { useInsights } from \"@app/hooks\";\nimport { Page } from \"@patternfly/react-core\";\nimport \"./App.css\";\n\nexport const App: FunctionComponent = () => {\n  const insights = useInsights();\n  const history = useHistory();\n\n  const getAppId = useCallback(() => {\n    const defaultAppId = \"overview\";\n\n    const parts = history.location.pathname.split(\"/\");\n    if (parts.length > 1) {\n      if (parts[1] === \"\") {\n        return defaultAppId;\n      } else {\n        if (parts[1] === \"openshift-streams\") {\n          return \"streams\";\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  }, [history]);\n\n  useEffect(() => {\n    const unregister = insights.chrome.on(\"APP_NAVIGATION\", (event) => {\n      if (event?.domEvent?.href) {\n        const pathName = event?.domEvent?.href\n          .replace(\"/application-services\", \"/\")\n          .replace(/^\\/\\//gm, \"/\");\n        history.push(pathName);\n      }\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <>\n      <NotificationsPortal />\n      <Page>\n        <AppRoutes />\n      </Page>\n    </>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","import { FunctionComponent, useCallback, useEffect, useState } from \"react\";\nimport {\n  Configuration,\n  KafkaRequest,\n  SecurityApi,\n} from \"@rhoas/kafka-management-sdk\";\nimport {\n  Principal,\n  PrincipalsContext,\n  PrincipalType,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport {\n  PrincipalApi,\n  Principal as PrincipalSDK,\n} from \"@redhat-cloud-services/rbac-client\";\n\nexport type PrincipalsProviderProps = {\n  kafkaInstance?: KafkaRequest;\n};\n\nexport const usePrincipal = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [serviceAccountPrincipals, setServiceAccountPrincipals] = useState<\n    Principal[] | undefined\n  >();\n  const [userAcountPrincipals, setUserAccountPrincipals] = useState<\n    Principal[] | undefined\n  >();\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      if (\n        config !== undefined &&\n        auth !== undefined &&\n        config.rbac.basePath !== undefined\n      ) {\n        const accessToken = await auth.kas.getToken();\n        const principalApi = new PrincipalApi({\n          accessToken,\n          basePath: config?.rbac.basePath,\n        });\n\n        try {\n          const userAccounts = await principalApi\n            .listPrincipals(-1)\n            .then((response) =>\n              response.data.data.map((p) => {\n                const pp = p as PrincipalSDK;\n                return {\n                  id: p.username,\n                  principalType: PrincipalType.UserAccount,\n                  displayName: `${pp.first_name} ${pp.last_name}`,\n                  emailAddress: pp.email,\n                } as Principal;\n              })\n            );\n          setUserAccountPrincipals(userAccounts);\n        } catch (e) {\n          // temp fix - this API is only available to org admins\n          // needs a proper approach longer term\n        }\n      }\n    };\n    fetchUserAccounts();\n  }, [auth, config]);\n\n  useEffect(() => {\n    const fetchServiceAccounts = async () => {\n      if (\n        config !== undefined &&\n        auth !== undefined &&\n        config.rbac.basePath !== undefined\n      ) {\n        const accessToken = await auth.kas.getToken();\n        const securityApi = new SecurityApi({\n          accessToken,\n          basePath: config.kas.apiBasePath,\n        } as Configuration);\n        const serviceAccounts = await securityApi\n          .getServiceAccounts()\n          .then((response) =>\n            response.data.items.map((sa) => {\n              return {\n                id: sa.client_id,\n                displayName: sa.name,\n                principalType: PrincipalType.ServiceAccount,\n              } as Principal;\n            })\n          );\n\n        setServiceAccountPrincipals(serviceAccounts);\n      }\n    };\n    fetchServiceAccounts();\n  }, [auth, config]);\n\n  const getAllPrincipals = useCallback(() => {\n    let answer: Principal[] = [];\n    if (\n      userAcountPrincipals !== undefined &&\n      serviceAccountPrincipals !== undefined\n    ) {\n      answer = answer.concat(userAcountPrincipals);\n    }\n    if (serviceAccountPrincipals !== undefined) {\n      answer = answer.concat(serviceAccountPrincipals);\n    }\n    return answer;\n  }, [serviceAccountPrincipals, userAcountPrincipals]);\n\n  const getAllUserAccounts = useCallback(\n    () => userAcountPrincipals || [],\n    [userAcountPrincipals]\n  );\n  const getAllServiceAccounts = useCallback(\n    () => serviceAccountPrincipals || [],\n    [serviceAccountPrincipals]\n  );\n\n  return {\n    getAllPrincipals,\n    getAllUserAccounts,\n    getAllServiceAccounts,\n  };\n};\n\nexport const PrincipalsProvider: FunctionComponent<PrincipalsProviderProps> = ({\n  children,\n}) => {\n  const value = usePrincipal();\n  return (\n    <PrincipalsContext.Provider value={value}>\n      {children}\n    </PrincipalsContext.Provider>\n  );\n};\n","import { useCallback, useState } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth } from \"@app/providers/auth\";\n\nexport function useKafkaInstanceDrawer() {\n  const history = useHistory();\n  const auth = useAuth();\n\n  const [isDrawerOpen, setIsDrawerOpen] = useState(false);\n  const [drawerActiveTab, setDrawerActiveTab] = useState<string | undefined>(\n    undefined\n  );\n\n  const openDrawer = useCallback((tab: string | undefined) => {\n    if (tab) {\n      setDrawerActiveTab(tab);\n    }\n    setIsDrawerOpen(true);\n  }, []);\n\n  const closeDrawer = useCallback(() => {\n    setDrawerActiveTab(undefined);\n    setIsDrawerOpen(false);\n  }, []);\n\n  const onDeleteInstance = () => {\n    history.push(\"/streams/kafkas\");\n  };\n\n  return {\n    isDrawerOpen,\n    drawerActiveTab,\n    setDrawerActiveTab,\n    openDrawer,\n    closeDrawer,\n    tokenEndPointUrl: auth?.tokenEndPointUrl,\n    onDeleteInstance,\n  };\n}\n","export type ModuleInfo = {\n  entryPoint: string;\n  basePath: string;\n};\n\nexport type FetchModuleInfoFunction = {\n  (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<\n    ModuleInfo | undefined\n  >;\n};\n\nexport const fetchModuleInfo: FetchModuleInfoFunction = async (\n  baseUrl,\n  scope,\n  fallbackBasePath\n) => {\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[];\n      modules: string[];\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}?ts=${Date.now()}`;\n    const response = await fetch(url);\n    return await response\n      .json()\n      .then((json) => json as FedMods)\n      .then((fedMods) => fedMods[scope])\n      .then((s) => s.entry[0])\n      .then((path) => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath,\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath,\n        };\n      });\n  };\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath);\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n};\n","import { createContext, FunctionComponent, useContext, useRef } from \"react\";\nimport {\n  FederatedModuleConfig,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport {\n  fetchModuleInfo,\n  FetchModuleInfoFunction,\n  ModuleInfo,\n} from \"@app/components/FederatedModule/moduleInfo\";\n\nexport type FederatedModuleContextProps = {\n  modules: {\n    [module: string]: FederatedModuleConfig;\n  };\n  getModuleInfo: FetchModuleInfoFunction;\n};\n\nexport const FederatedModuleContext = createContext<\n  FederatedModuleContextProps | undefined\n>(undefined);\n\nexport const FederatedModuleProvider: FunctionComponent = ({ children }) => {\n  type ModuleInfoCache = {\n    [key: string]: ModuleInfo;\n  };\n\n  const moduleInfoCache = useRef<ModuleInfoCache>({} as ModuleInfoCache);\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const getModuleInfo: FetchModuleInfoFunction = async (\n    baseUrl,\n    scope,\n    fallbackBasePath\n  ) => {\n    if (moduleInfoCache.current[scope] !== undefined) {\n      return moduleInfoCache.current[scope];\n    }\n    const answer = await fetchModuleInfo(baseUrl, scope, fallbackBasePath);\n    if (answer !== undefined) {\n      moduleInfoCache.current[scope] = answer;\n    }\n    return answer;\n  };\n\n  return (\n    <FederatedModuleContext.Provider\n      value={{\n        modules: config.federatedModules,\n        getModuleInfo,\n      }}\n    >\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n};\n\nexport const useFederatedModule = (): FederatedModuleContextProps => {\n  const answer = useContext(FederatedModuleContext);\n  if (answer === undefined) {\n    throw new Error(\"must be used inside FederatedModuleContext provider\");\n  }\n  return answer;\n};\n","import { FC } from \"react\";\nimport { FederatedModule } from \"@app/components\";\n\nexport const KasModalLoader: FC = ({ children }) => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./KasModalLoader\"\n      fallback={null}\n      render={(KasModalLoaderFederated) => {\n        return <KasModalLoaderFederated>{children}</KasModalLoaderFederated>;\n      }}\n    />\n  );\n};\n","import { useCallback, useEffect, useState } from \"react\";\nimport {\n  useAuth,\n  useConfig,\n  Quota,\n  QuotaValue,\n  QuotaType,\n  ProductType,\n} from \"@rhoas/app-services-ui-shared\";\nimport { Configuration, AppServicesApi } from \"@rhoas/account-management-sdk\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\n\nexport const useQuota = (productId: ProductType) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const constants = useConstants();\n\n  const [orgId, setOrgId] = useState<string>();\n\n  useEffect(() => {\n    const getCurrentAccount = async () => {\n      if (!orgId) {\n        const accessToken = await auth?.ams.getToken();\n        const ams = new AppServicesApi({\n          accessToken,\n          basePath: config?.ams.apiBasePath || \"\",\n        } as Configuration);\n\n        await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n          const orgID = account?.data?.organization?.id;\n          setOrgId(orgID);\n        });\n      }\n    };\n\n    getCurrentAccount();\n  }, [config, auth, orgId]);\n\n  const getQuotaTypesByProductId = useCallback(() => {\n    const kasQuotaProductId = constants.kafka.ams.quotaProductId;\n    const kasTrialQuotaProductId = constants.kafka.ams.trialQuotaProductId;\n    const kasResourceName = constants.kafka.ams.resourceName;\n\n    const srsQuotaProductId = constants.serviceRegistry.ams.quotaProductId;\n    const srsTrialQuotaProductId =\n      constants.serviceRegistry.ams.trialQuotaProductId;\n    const srsResourceName = constants.serviceRegistry.ams.resourceName;\n\n    if (productId === ProductType.kas) {\n      return {\n        quotaProductId: kasQuotaProductId,\n        trialQuotaProductId: kasTrialQuotaProductId,\n        resourceName: kasResourceName,\n        quotaKey: QuotaType.kas,\n        trialQuotaKey: QuotaType.kasTrial,\n      };\n    } else if (productId === ProductType.srs) {\n      return {\n        quotaProductId: srsQuotaProductId,\n        trialQuotaProductId: srsTrialQuotaProductId,\n        resourceName: srsResourceName,\n        quotaKey: QuotaType.srs,\n        trialQuotaKey: QuotaType.srsTrial,\n      };\n    }\n    throw new Error(\n      `getQuotaTypesByProductId error, unrecognized productId ${productId}`\n    );\n  }, [constants, productId]);\n\n  const getQuota = useCallback(async () => {\n    const quotaData = new Map<QuotaType, QuotaValue>();\n    const filteredQuota: Quota = {\n      loading: true,\n      isServiceDown: false,\n      data: undefined,\n    };\n\n    if (orgId) {\n      const {\n        quotaProductId,\n        trialQuotaProductId,\n        resourceName,\n        quotaKey,\n        trialQuotaKey,\n      } = getQuotaTypesByProductId() || {};\n\n      const accessToken = await auth?.ams.getToken();\n      const ams = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || \"\",\n      } as Configuration);\n\n      try {\n        const response =\n          await ams.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(\n            orgId,\n            undefined,\n            true\n          );\n\n        const quota = response?.data?.items?.find((q) =>\n          q.related_resources?.find(\n            (r) =>\n              r.resource_name === resourceName && r.product === quotaProductId\n          )\n        );\n        const trialQuota = response?.data?.items?.find((q) =>\n          q.related_resources?.find(\n            (r) =>\n              r.resource_name === resourceName &&\n              r.product === trialQuotaProductId\n          )\n        );\n\n        if (quota && quota.allowed > 0) {\n          const remaining = quota?.allowed - quota?.consumed;\n          quotaData?.set(quotaKey, {\n            allowed: quota?.allowed,\n            consumed: quota?.consumed,\n            remaining: remaining < 0 ? 0 : remaining,\n          });\n        }\n\n        if (trialQuota) {\n          quotaData?.set(trialQuotaKey, {\n            allowed: trialQuota?.allowed,\n            consumed: trialQuota?.consumed,\n            remaining: trialQuota?.allowed - trialQuota?.consumed,\n          });\n        }\n\n        filteredQuota.loading = false;\n        filteredQuota.data = quotaData;\n      } catch (error) {\n        filteredQuota.loading = false;\n        filteredQuota.isServiceDown = true;\n        console.error(error);\n      }\n    }\n\n    return filteredQuota;\n  }, [auth, config, getQuotaTypesByProductId, orgId]);\n\n  return { orgId, getQuota };\n};\n","import { Reducer, useEffect, useReducer, useRef } from \"react\";\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<T>;\n  key: string;\n};\n\nexport const useFetch = <T>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef<{ [key: string]: T }>({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>(\n    (state, action: Action<T>) => {\n      switch (action.type) {\n        case Status.FETCHING:\n          return { ...state, status: Status.FETCHING };\n        case Status.FETCHED:\n          return { ...state, status: Status.FETCHED, data: action.payload };\n        case Status.FETCH_ERROR:\n          return { ...state, status: Status.FETCH_ERROR, error: action.error };\n        default:\n          return state;\n      }\n    },\n    initialState\n  );\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response });\n        } catch (error) {\n          if (cancelRequest) return;\n          if (error instanceof Error) {\n            dispatch({ type: Status.FETCH_ERROR, error });\n          } else if (typeof error === \"string\") {\n            dispatch({\n              type: Status.FETCH_ERROR,\n              error: new Error(error),\n            });\n          } else {\n            dispatch({\n              type: Status.FETCH_ERROR,\n              error: new Error(\"unknown error\"),\n            });\n          }\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, [fetch, key]);\n\n  return state;\n};\n","import {\n  Auth,\n  Config,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport {\n  Configuration,\n  AppServicesApi,\n  TermsReviewResponse,\n} from \"@rhoas/account-management-sdk\";\nimport { ServiceProps, useFetch } from \"@app/services/fetch\";\nimport { useCallback, useEffect, useMemo, useRef } from \"react\";\n\nexport type ITermsConfig = {\n  eventCode: string;\n  siteCode: string;\n};\n\nexport const useTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const fetchProps = useMemo(\n    () => fetchTermsReviewFactory(config, auth, termsConfig),\n    [auth, config, termsConfig]\n  );\n\n  return useFetch(fetchProps);\n};\n\nexport const useAsyncTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = useCallback(async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth, termsConfig)\n      .fetch()\n      .then((r) => r);\n    ref.current = answer;\n    return answer;\n  }, [auth, config, termsConfig]);\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth, load]);\n  return load;\n};\n\nconst fetchTermsReviewFactory = (\n  config: Config,\n  auth: Auth,\n  termsConfig: ITermsConfig\n): ServiceProps<TermsReviewResponse> => {\n  return {\n    key: \"selfTermsReview\",\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || \"\",\n      } as Configuration);\n      const response = await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: termsConfig.eventCode,\n        site_code: termsConfig.siteCode,\n      });\n      return response.data;\n    },\n  };\n};\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (\n  baseURL: string,\n  redirectURL: string,\n  cancelURL: string\n) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params: { [key: string]: string }) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join(\"&\");\n","import { useLocation } from \"react-router-dom\";\nimport { parse as parseQueryString, stringifyUrl } from \"query-string\";\nimport { useAsyncTermsReview, ITermsConfig } from \"@app/services/termsReview\";\nimport { getTermsAppURL } from \"@app/utils/termsApp\";\n\nexport const useModalControl = (termsConfig: ITermsConfig) => {\n  const loadTermsReview = useAsyncTermsReview(termsConfig);\n  const location = useLocation();\n\n  const shouldOpenCreateModal = async () => {\n    const parsed = parseQueryString(location.search);\n    const c = parsed[\"create\"] === \"true\";\n    if (c) {\n      const termsReview = await loadTermsReview();\n      if (!termsReview.terms_required) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  const preCreateInstance = async (shouldOpenCreateModal: boolean) => {\n    const termsReview = await loadTermsReview();\n    if (termsReview.terms_available || termsReview.terms_required) {\n      if (termsReview.redirect_url === undefined) {\n        throw new Error(\"terms must be signed but there is no terms url\");\n      }\n      const redirectURL = stringifyUrl({\n        url: window.location.href,\n        query: { create: \"true\" },\n      });\n      const url = getTermsAppURL(\n        termsReview.redirect_url,\n        redirectURL,\n        window.location.href\n      );\n\n      return { shouldOpenCreateModal: false, url };\n    }\n    return { shouldOpenCreateModal, url: undefined };\n  };\n\n  return { shouldOpenCreateModal, preCreateInstance };\n};\n","import { InsightsType } from \"@app/utils\";\n\nexport const useInsights = () => {\n  const insights = (window as any)[\"insights\"] as InsightsType;\n  if (insights === undefined) {\n    throw new Error(\"must be used inside an initialized insights context\");\n  }\n  return insights;\n};\n","import { Auth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { useInsights } from \"@app/hooks/insights\";\n\nexport const useAuth = (): Auth => {\n  const config = useConfig();\n  const insights = useInsights();\n\n  if (config === undefined || insights.chrome.auth === undefined) {\n    throw new Error(\n      \"useAuth must be used inside a config provider, and insights auth\"\n    );\n  }\n\n  const insightsChromeAuth = insights.chrome.auth;\n\n  const getUsername = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.username;\n  };\n\n  const isOrgAdmin = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.is_org_admin;\n  };\n\n  const getToken = insightsChromeAuth.getToken;\n\n  return {\n    getUsername,\n    isOrgAdmin,\n    kafka: {\n      getToken,\n    },\n    kas: {\n      getToken,\n    },\n    ams: {\n      getToken,\n    },\n    srs: {\n      getToken,\n    },\n    apicurio_registry: {\n      getToken,\n    },\n    smart_events: {\n      getToken,\n    },\n    sas_ui: {\n      getToken,\n    },\n  };\n};\n","import { useCallback } from \"react\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { SsoProviderAllOf } from \"@rhoas/kafka-management-sdk\";\n\nexport const useSSOProviders = () => {\n  const config = useConfig();\n  return useCallback(async (): Promise<SsoProviderAllOf> => {\n    const response = await fetch(\n      `${config.kas.apiBasePath}/api/kafkas_mgmt/v1/sso_providers`\n    );\n    return response.json();\n  }, [config.kas.apiBasePath]);\n};\n","import { APIManagementPage } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const APIManagementOverviewPage: FunctionComponent = () => {\n  return <APIManagementPage />;\n};\n\nexport default APIManagementOverviewPage;\n","import { FederatedModule } from \"@app/components\";\nimport { ServiceDownPage } from \"@app/pages/ServiceDown/ServiceDownPage\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const CosPage: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"cos\"\n      fallback={<AppServicesLoading />}\n      module=\"./OpenshiftManagedConnectors\"\n      render={(OpenshiftManagedConnectors) => <OpenshiftManagedConnectors />}\n    />\n  );\n};\n\nexport default CosPage;\n","import useChrome from \"@redhat-cloud-services/frontend-components/useChrome/useChrome\";\nimport {\n  DataSciencePage,\n  ClusterObject,\n  DataSciencePageProps,\n} from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent, useCallback } from \"react\";\n\nexport type ClustersResponse = {\n  clusters: ClusterObject[];\n  installableClusters: ClusterObject[];\n};\n\nfunction findValidClusterWithNodes(cluster: ClusterObject) {\n  const hasWorkerNodes = !!cluster.metrics?.find(\n    (metric: { nodes?: { compute: number } } = { nodes: { compute: 0 } }) =>\n      metric && metric.nodes && metric.nodes.compute >= 2\n  );\n  return hasWorkerNodes;\n}\n\nconst RHODS_ADDON_ID = \"managed-odh\";\n\nasync function fetchAddonInquirues(cluster: ClusterObject) {\n  // TODO: FIx the data fetching according the app standards\n  await window.insights.chrome.auth.getUser();\n  const token = await window.insights.chrome.auth.getToken();\n  const getCluster = fetch(\n    `https://api.openshift.com/api/clusters_mgmt/v1/clusters/${cluster.cluster_id}/addon_inquiries?search=id=${RHODS_ADDON_ID}`,\n    {\n      method: \"get\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  ).then((d) => d.json());\n  return getCluster.then(({ data }) => ({\n    clusterId: cluster.cluster_id,\n    ...data,\n  }));\n}\n\nfunction getEligbleRHODSClusters({\n  clusterId,\n  items,\n}: {\n  clusterId: string;\n  items: {\n    id: string;\n    requirements?: {\n      enabled?: boolean;\n      status: {\n        fulfilled: boolean;\n      };\n    }[];\n  }[];\n}) {\n  // may not be necessary in prod, Filtering on addon scope was not working with mocked server\n  const internalItems = items.filter(({ id }) => id === RHODS_ADDON_ID);\n  const hasAddon = !!internalItems.find((addon) =>\n    addon?.requirements?.every(({ enabled }) => enabled)\n  );\n  const canInstallAddon = !!internalItems.find((addon) =>\n    addon?.requirements?.every(({ status: { fulfilled } }) => fulfilled)\n  );\n  return { clusterId, hasAddon, canInstallAddon };\n}\n\nasync function loadClusters(): Promise<ClustersResponse> {\n  // TODO: FIx the data fetching according the app standards\n  await window.insights.chrome.auth.getUser();\n  const token = await window.insights.chrome.auth.getToken();\n  const search = `plan_id='MOA'\n  and status IN ('Active', 'Reserved')`;\n  const { items: clusters } = await fetch(\n    `https://api.openshift.com/api/accounts_mgmt/v1/subscriptions?search=${search}&fetchMetrics=true`,\n    {\n      method: \"get\",\n      headers: {\n        Authorization: `Bearer ${token}`,\n      },\n    }\n  ).then((d) => d.json() as unknown as { items: ClusterObject[] });\n  const clusterswithNodes = clusters.filter((cluster) =>\n    findValidClusterWithNodes(cluster)\n  );\n  const clusterAddonInquirues = await Promise.allSettled<{\n    value: { clusterId: string };\n  }>(clusterswithNodes.map(fetchAddonInquirues));\n  const clustersAvailability: {\n    [key: string]: {\n      canInstallAddon: boolean;\n      hasAddon: boolean;\n      clusterId?: string;\n    };\n  } = (\n    clusterAddonInquirues.filter(\n      ({ status }) => status === \"fulfilled\"\n    ) as unknown as { value: any }[]\n  ).reduce((acc, { value }) => {\n    const result = getEligbleRHODSClusters(value);\n    return {\n      ...acc,\n      [result.clusterId]: result,\n    };\n  }, {});\n  const installableClusters = clusterswithNodes.filter(\n    ({ cluster_id }) => clustersAvailability[cluster_id]?.canInstallAddon\n  );\n  return {\n    installableClusters,\n    clusters,\n  };\n}\n\nexport const DataScienceOverViewPage: FunctionComponent = () => {\n  const { analytics } = useChrome();\n\n  const trackClick = useCallback<DataSciencePageProps[\"trackClick\"]>(\n    (e, properties) => {\n      try {\n        analytics.track(e, properties);\n      } catch (e) {\n        console.warn(\"analytics not found: \", e);\n      }\n    },\n    [analytics]\n  );\n\n  return (\n    <DataSciencePage loadClusters={loadClusters} trackClick={trackClick} />\n  );\n};\n\nexport default DataScienceOverViewPage;\n","import { FederatedModule } from \"@app/components\";\nimport { KafkaRequestWithSize } from \"@app/pages/Kafka/kafka-instance\";\nimport { FunctionComponent } from \"react\";\n\nexport type KafkaFederatedComponentProps = UnderlyingProps & {\n  module: string;\n};\n\nexport type UnderlyingProps = {\n  activeTab?: number;\n  getToken?: () => Promise<string> | undefined;\n  apiBasePath?: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  showMetrics?: JSX.Element;\n  showSchemas?: JSX.Element;\n  kafka?: Required<KafkaRequestWithSize>;\n  redirectAfterDeleteInstance?: () => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  showSettings?: JSX.Element;\n};\n\n// Provides properties for component path and it's underlying properties\nexport const KafkaFederatedComponent: FunctionComponent<\n  KafkaFederatedComponentProps\n> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => <FederatedKafka {...rest} />}\n    />\n  );\n};\n","import { FunctionComponent } from \"react\";\nimport {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const Topics: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./Topics\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const TopicDetails: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./TopicDetails\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const CreateTopic: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./CreateTopic\" {...props} />\n);\n","import { FunctionComponent } from \"react\";\nimport {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const UpdateTopic: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./UpdateTopic\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const Dashboard: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./Dashboard\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const ConsumerGroups: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./ConsumerGroups\" {...props} />\n);\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const AclPermissions: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./AclPermissions\" {...props} />\n);\n","import { useEffect, useState, useCallback } from \"react\";\nimport {\n  Configuration,\n  DefaultApi,\n  KafkaRequest,\n  SupportedKafkaSize,\n} from \"@rhoas/kafka-management-sdk\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\n\n/**\n * Join admin server url template with the kafka bootstrap host and return the kafka admin url.\n *\n * @param kafkaRequest KafkaRequest\n * @returns The admin server full URL included the protocol and base path\n */\n\nexport const getAdminServerUrl = (\n  kafkaRequest?: KafkaRequest\n): string | undefined => {\n  if (!kafkaRequest) {\n    throw new Error(\"kafkaRequest cannot be undefined\");\n  }\n  /**\n   * admin_api_server_url will be available when kafka instance will be ready\n   */\n  return kafkaRequest.admin_api_server_url\n    ? kafkaRequest.admin_api_server_url\n    : undefined;\n};\n\nexport type KafkaInstance = {\n  kafkaDetail: Required<KafkaRequestWithSize>;\n  adminServerUrl: string | undefined;\n};\n\nexport type KafkaRequestWithSize = KafkaRequest & {\n  size: SupportedKafkaSize;\n};\n\nexport const useKafkaInstance = (\n  id: string | undefined\n): KafkaInstance | false | undefined => {\n  const {\n    kas: { apiBasePath },\n  } = useConfig();\n  const {\n    kas: { getToken },\n  } = useAuth();\n  const [kafkaRequest, setKafkaRequest] = useState<\n    KafkaRequestWithSize | false | undefined\n  >();\n  const getKafkaSize = useGetAvailableSizes();\n\n  const fetchKafka = useCallback(\n    async (id: string) => {\n      setKafkaRequest(undefined);\n      const kasService = new DefaultApi({\n        accessToken: getToken,\n        basePath: apiBasePath,\n      } as Configuration);\n      try {\n        const kafka = await kasService.getKafkaById(id);\n\n        const { cloud_provider, region, instance_type, size_id } = kafka.data;\n        if (!cloud_provider || !region || !size_id || !instance_type) {\n          throw new Error(\n            `Kafka instance ${kafka.data.id} missing some required info: ${cloud_provider}, ${region}, ${instance_type}, ${size_id}`\n          );\n        }\n        const size = await getKafkaSize(\n          cloud_provider,\n          region,\n          size_id,\n          instance_type\n        );\n\n        setKafkaRequest({\n          ...kafka.data,\n          size,\n        });\n      } catch (e) {\n        setKafkaRequest(false);\n      }\n    },\n    [apiBasePath, getKafkaSize, getToken]\n  );\n\n  useEffect(() => {\n    if (id) {\n      fetchKafka(id);\n    } else {\n      setKafkaRequest(undefined);\n    }\n  }, [fetchKafka, id]);\n\n  return kafkaRequest\n    ? {\n        kafkaDetail: kafkaRequest as Required<KafkaRequestWithSize>,\n        adminServerUrl: getAdminServerUrl(kafkaRequest),\n      }\n    : kafkaRequest;\n};\n\n/**\n * Return list of the instance types available for the current user\n *\n * @returns {Promise<InstanceType[]>}\n */\n\nexport const useGetAvailableSizes = () => {\n  const {\n    kas: { getToken },\n  } = useAuth();\n  const {\n    kas: { apiBasePath: basePath },\n  } = useConfig();\n\n  return useCallback(\n    async (\n      provider: string,\n      region: string,\n      sizeId: string,\n      instanceType: string\n    ): Promise<SupportedKafkaSize> => {\n      try {\n        const api = new DefaultApi(\n          new Configuration({\n            accessToken: getToken(),\n            basePath,\n          })\n        );\n\n        const sizes = await api.getInstanceTypesByCloudProviderAndRegion(\n          provider,\n          region\n        );\n\n        if (!sizes?.data?.instance_types) {\n          throw new Error(\n            `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}, no instance_types returned`\n          );\n        }\n        const instanceTypesSizes = sizes?.data?.instance_types.find(\n          (i) => i.id === instanceType\n        )?.sizes;\n        const size = instanceTypesSizes?.find((s) => s.id === sizeId);\n\n        if (!size) {\n          throw new Error(\n            `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}, can't find a size matching ${sizeId}`\n          );\n        }\n\n        return size;\n      } catch (e: unknown) {\n        throw new Error(\n          `getInstanceTypesByCloudProviderAndRegion api failed for ${provider} ${region} ${sizeId}: ${e}`\n        );\n      }\n    },\n    [getToken, basePath]\n  );\n};\n","import {\n  KafkaFederatedComponent,\n  UnderlyingProps,\n} from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { FunctionComponent } from \"react\";\n\nexport const Settings: FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent module=\"./Settings\" {...props} />\n);\n","import {\n  ComponentType,\n  FunctionComponent,\n  ReactElement,\n  useCallback,\n  VoidFunctionComponent,\n} from \"react\";\nimport { Route, Switch, useRouteMatch } from \"react-router-dom\";\nimport {\n  AppRouteConfig,\n  flattenedRoutes,\n  IAppRoute,\n  PageNotFoundRoute,\n} from \"@app/utils/Routing\";\nimport { useDocumentTitle } from \"@app/utils\";\nimport {\n  CreateTopic,\n  TopicDetails,\n  Topics,\n  UpdateTopic,\n  Dashboard,\n  ConsumerGroups,\n  AclPermissions,\n} from \"@app/pages\";\nimport { Settings } from \"@app/pages/Kafka/Settings\";\nimport { UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { BasenameContext } from \"@rhoas/app-services-ui-shared\";\nimport { useKafkaInstanceDrawer } from \"@app/components\";\n\nconst kafkaRoutes: AppRouteConfig<UnderlyingProps>[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topics\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topics/:topicName\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topic/create\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/topic/update/:topicName\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/dashboard\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: ConsumerGroups,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/consumer-groups\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: AclPermissions,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/acls\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n  {\n    component: Settings,\n    exact: true,\n    label: \"Red Hat OpenShift Streams for Apache Kafka\",\n    path: \"/settings\",\n    title: \"Red Hat OpenShift Streams for Apache Kafka\",\n    devPreview: true,\n  },\n];\nconst flatRoutes = flattenedRoutes(kafkaRoutes);\n\ntype WrappedRouteProps = IAppRoute<UnderlyingProps> & {\n  underlyingProps: UnderlyingProps;\n  url: string;\n  InstanceDrawer: ComponentType;\n};\n\n/**\n * The wrapped route allows us to apply the basename, document title and accessible route change for all components\n * without having to add these to each component. They must happen inside the route.\n */\nconst WrappedRoute: FunctionComponent<WrappedRouteProps> = ({\n  component: Component,\n  InstanceDrawer,\n  isAsync = false,\n  title,\n  underlyingProps,\n  url,\n  ...rest\n}) => {\n  useDocumentTitle(title);\n\n  const getBasename = () => {\n    return url;\n  };\n\n  return (\n    <Route\n      render={(routeProps) => {\n        return (\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...underlyingProps} {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        );\n      }}\n      {...rest}\n    />\n  );\n};\n\nconst KafkaRoutes: VoidFunctionComponent<\n  UnderlyingProps & { InstanceDrawer: ComponentType<any> }\n> = ({ InstanceDrawer, ...props }): ReactElement => {\n  const routeMatch = useRouteMatch();\n  const { kafka } = props;\n\n  const drawerProps = useKafkaInstanceDrawer();\n  const handleInstanceDrawer: (isOpen: boolean, activeTab?: string) => void =\n    useCallback(\n      (isOpen, activeTab) => {\n        if (isOpen) {\n          drawerProps.openDrawer(activeTab);\n        } else {\n          drawerProps.closeDrawer();\n        }\n      },\n      [drawerProps]\n    );\n\n  return (\n    <InstanceDrawer\n      data-ouia-app-id=\"dataPlane-streams\"\n      drawerInstance={kafka}\n      setDrawerInstance={() => false} // can't change the instance from the data plane\n      {...drawerProps}\n    >\n      <Switch>\n        {flatRoutes.map(\n          ({ path, exact, component, title, isAsync, ...rest }, idx) => {\n            const routePath = `${routeMatch.path}${path}`;\n            console.log(`Creating route for ${routePath}`);\n            return (\n              <WrappedRoute\n                path={routePath}\n                exact={exact}\n                component={component}\n                key={idx}\n                title={title}\n                isAsync={isAsync}\n                underlyingProps={{\n                  ...props,\n                  handleInstanceDrawer,\n                }}\n                url={routeMatch.url}\n                InstanceDrawer={InstanceDrawer}\n                {...rest}\n              />\n            );\n          }\n        )}\n        <PageNotFoundRoute title=\"404 Page Not Found\" />\n      </Switch>\n    </InstanceDrawer>\n  );\n};\n\nexport { KafkaRoutes, kafkaRoutes };\n","import { TopicsApi, Topic } from \"@rhoas/kafka-instance-sdk\";\nimport { Configuration } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters } from \"./types\";\n\nexport async function fetchKafkaTopisFromAdmin({\n  accessToken,\n  basePath,\n}: BasicApiConfigurationParameters): Promise<string[]> {\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  const response = await api.getTopics(\n    undefined,\n    100,\n    100,\n    undefined,\n    undefined,\n    undefined,\n    undefined\n  );\n  return (response.data.items || []).map((t: Topic) => t.name as string);\n}\n","import {\n  GetTopicsMetricsResponse,\n  PartitionBytesMetric,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from \"./types\";\n\nexport type FetchTopicsMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchTopicMetrics({\n  accessToken,\n  basePath,\n  kafkaId,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<\n  Omit<GetTopicsMetricsResponse, \"kafkaTopics\">\n> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(\n    kafkaId,\n    duration,\n    interval,\n    [\n      \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\",\n      \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\",\n      \"kafka_topic:kafka_log_log_size:sum\",\n      \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\",\n    ]\n  );\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (partition[timestamp] = value + (partition[timestamp] || 0))\n      );\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_in_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_bytes_out_total:rate5m\":\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case \"kafka_topic:kafka_log_log_size:sum\":\n        addAggregatePartitionBytes();\n        break;\n      case \"kafka_topic:kafka_server_brokertopicmetrics_messages_in_total:rate5m\":\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import { VoidFunctionComponent, useCallback } from \"react\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { Settings } from \"@rhoas/app-services-ui-components\";\nimport { fetchSettings } from \"./api\";\n\ntype SettingsTabProps = {\n  kafkaId: string;\n  owner: string;\n  reauthenticationEnabled: boolean;\n};\n\nexport const SettingsTab: VoidFunctionComponent<SettingsTabProps> = ({\n  kafkaId,\n  owner,\n  reauthenticationEnabled,\n}) => {\n  const auth = useAuth();\n  const config = useConfig();\n\n  const onSubmitReAuthentication = useCallback(\n    (reauthenticationEnabled: boolean) => {\n      return fetchSettings({\n        kafkaId,\n        basePath: config.kas.apiBasePath,\n        accessToken: auth?.kas.getToken(),\n        owner,\n        settings: reauthenticationEnabled,\n      });\n    },\n    [config.kas.apiBasePath, auth?.kas, owner, kafkaId]\n  );\n\n  return (\n    <Settings\n      onSubmitReAuthentication={onSubmitReAuthentication}\n      reauthenticationEnabled={reauthenticationEnabled}\n    />\n  );\n};\n","import { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters } from \"./types\";\n\ntype fetchSettingsProp = {\n  kafkaId: string;\n  owner: string;\n  settings: boolean;\n} & BasicApiConfigurationParameters;\nexport async function fetchSettings({\n  kafkaId,\n  owner,\n  settings,\n  accessToken,\n  basePath,\n}: fetchSettingsProp): Promise<boolean> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  const response = await apisService.updateKafkaById(kafkaId, {\n    owner: owner,\n    reauthentication_enabled: settings,\n  });\n\n  return response.data.reauthentication_enabled;\n}\n","import { useCallback, useMemo, useState, VoidFunctionComponent } from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport {\n  AccessDeniedPage,\n  ConnectedMetrics,\n  ServiceDownPage,\n} from \"@app/pages\";\nimport {\n  KafkaInstance,\n  useKafkaInstance,\n} from \"@app/pages/Kafka/kafka-instance\";\nimport { UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\nimport { PrincipalsProvider } from \"@app/components/PrincipalsProvider/PrincipalsProvider\";\nimport { useAuth, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { ServiceRegistrySchemaMapping } from \"@app/pages/ServiceRegistry\";\nimport { KafkaRoutes } from \"./KafkaRoutes\";\nimport { FederatedModule } from \"@app/components\";\nimport { SettingsTab } from \"./SettingsTab\";\n\nexport const KafkaMainView: VoidFunctionComponent = () => {\n  const config = useConfig();\n  const { id: kafkaInstanceId } = useParams<{ id: string }>();\n  const kafka = useKafkaInstance(kafkaInstanceId);\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  if (kafka === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (kafka === false) {\n    throw new Error(\"404\");\n  }\n\n  return <KafkaMainViewConnected kafka={kafka} />;\n};\n\nexport const KafkaMainViewConnected: VoidFunctionComponent<{\n  kafka: KafkaInstance;\n}> = ({ kafka }) => {\n  return (\n    <PrincipalsProvider kafkaInstance={kafka.kafkaDetail}>\n      <ConnectedKafkaRoutes kafka={kafka} />\n    </PrincipalsProvider>\n  );\n};\n\nconst ConnectedKafkaRoutes: VoidFunctionComponent<{\n  kafka: KafkaInstance;\n}> = ({ kafka: { kafkaDetail, adminServerUrl } }) => {\n  const {\n    kafka: { getToken },\n  } = useAuth();\n  const history = useHistory();\n  const [error, setError] = useState<undefined | number>();\n\n  const onError = useCallback((code: number) => {\n    setError(code);\n  }, []);\n\n  const redirectAfterDeleteInstance = useCallback(() => {\n    history.push(\"/streams/kafkas\");\n  }, [history]);\n\n  const showMetrics = useMemo(\n    () => (\n      <ConnectedMetrics\n        kafkaId={kafkaDetail.id}\n        kafkaAdminUrl={adminServerUrl}\n        totalMaxConnections={kafkaDetail.size.total_max_connections || 0}\n        maxConnections={kafkaDetail.size.max_connection_attempts_per_sec || 0}\n        maxPartitions={kafkaDetail.size.max_partitions || 0}\n        kafkaStorageBytes={kafkaDetail.max_data_retention_size?.bytes || 0}\n      />\n    ),\n    [adminServerUrl, kafkaDetail]\n  );\n  const showSchemas = useMemo(() => <ServiceRegistrySchemaMapping />, []);\n\n  const showSettings = useMemo(\n    () => (\n      <SettingsTab\n        kafkaId={kafkaDetail.id}\n        owner={kafkaDetail.owner}\n        reauthenticationEnabled={kafkaDetail.reauthentication_enabled}\n      />\n    ),\n    [kafkaDetail.id, kafkaDetail.owner, kafkaDetail.reauthentication_enabled]\n  );\n\n  const props = useMemo<Partial<UnderlyingProps>>(\n    () => ({\n      kafkaPageLink: \"/streams/kafkas\",\n      kafkaInstanceLink: `/streams/kafkas/${kafkaDetail.id}/topics`,\n      showMetrics,\n      onError,\n      kafkaName: kafkaDetail.name,\n      apiBasePath: adminServerUrl,\n      getToken: getToken,\n      showSchemas,\n      kafka: kafkaDetail,\n      redirectAfterDeleteInstance,\n      showSettings,\n    }),\n    [\n      adminServerUrl,\n      getToken,\n      kafkaDetail,\n      onError,\n      redirectAfterDeleteInstance,\n      showMetrics,\n      showSchemas,\n      showSettings,\n    ]\n  );\n\n  if (error === 401) {\n    return <AccessDeniedPage />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={null}\n      render={(InstanceDrawer) => (\n        <KafkaRoutes {...props} InstanceDrawer={InstanceDrawer} />\n      )}\n    />\n  );\n};\n","import { useCallback, useState, VoidFunctionComponent } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useAuth, useBasename, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport {\n  AppServicesLoading,\n  Metrics,\n  MetricsProps,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  fetchKafkaInstanceMetrics,\n  fetchKafkaTopisFromAdmin,\n  fetchMetricsKpi,\n  fetchTopicMetrics,\n} from \"./api\";\n\ntype ConnectedMetricsProps = {\n  kafkaId: string;\n  kafkaAdminUrl: string | undefined;\n  totalMaxConnections: number;\n  maxConnections: number;\n  maxPartitions: number;\n  kafkaStorageBytes: number;\n};\n\nexport const ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({\n  kafkaId,\n  kafkaAdminUrl,\n  totalMaxConnections,\n  maxConnections,\n  maxPartitions,\n  kafkaStorageBytes,\n}) => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n\n  const storageKey = `metrics-alert-${kafkaId}`;\n\n  const [isAlertClosed, setIsAlertClosed] = useState<boolean>(\n    localStorage.getItem(storageKey) !== null\n  );\n\n  const onAlertClose = () => {\n    setIsAlertClosed(true);\n    localStorage.setItem(storageKey, \"true\");\n  };\n\n  const onCreateTopic = () => {\n    history.push(`${basename}/topic/create`);\n  };\n\n  const getKafkaInstanceMetrics: MetricsProps[\"getKafkaInstanceMetrics\"] =\n    useCallback(\n      async (props) => {\n        const kafkaResponse = await fetchKafkaInstanceMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        });\n\n        return {\n          ...kafkaResponse,\n          diskSpaceLimit: kafkaStorageBytes / 1073741824,\n          connectionsLimit: totalMaxConnections,\n          connectionRateLimit: maxConnections,\n        };\n      },\n      [\n        auth,\n        config,\n        kafkaId,\n        kafkaStorageBytes,\n        totalMaxConnections,\n        maxConnections,\n      ]\n    );\n\n  const getTopicMetrics: MetricsProps[\"getTopicsMetrics\"] = useCallback(\n    async (props) => {\n      const [kafkaTopics, metrics] = await Promise.all([\n        fetchKafkaTopisFromAdmin({\n          accessToken: auth?.kafka.getToken(),\n          basePath: kafkaAdminUrl,\n        }),\n        fetchTopicMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        }),\n      ]);\n      const {\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      } = metrics;\n      return {\n        kafkaTopics,\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      };\n    },\n    [auth?.kafka, auth?.kas, config.kas.apiBasePath, kafkaAdminUrl, kafkaId]\n  );\n\n  const getMetricsKpi: MetricsProps[\"getMetricsKpi\"] = useCallback(async () => {\n    const kpiResponse = await fetchMetricsKpi({\n      kafkaId,\n      basePath: config.kas.apiBasePath,\n      accessToken: auth?.kas.getToken(),\n    });\n\n    return { ...kpiResponse, topicPartitionsLimit: maxPartitions };\n  }, [auth?.kas, config.kas.apiBasePath, kafkaId, maxPartitions]);\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <Metrics\n      onCreateTopic={onCreateTopic}\n      getTopicsMetrics={getTopicMetrics}\n      getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      getMetricsKpi={getMetricsKpi}\n      isClosed={isAlertClosed}\n      onClickClose={onAlertClose}\n    />\n  );\n};\n","import {\n  GetKafkaInstanceMetricsResponse,\n  TimeSeriesMetrics,\n} from \"@rhoas/app-services-ui-components\";\nimport { Configuration, DefaultApi } from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from \"./types\";\n\ntype FetchKafkaInstanceMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n} & BasicApiConfigurationParameters;\nexport async function fetchKafkaInstanceMetrics({\n  kafkaId,\n  duration,\n  interval,\n  accessToken,\n  basePath,\n}: FetchKafkaInstanceMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(\n    kafkaId,\n    duration,\n    interval,\n    [\n      \"kubelet_volume_stats_used_bytes\",\n      \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\",\n      \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\",\n    ]\n  );\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes(\"zookeeper\")\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  const connectionRateLimit = 0,\n    connectionsLimit = 0,\n    diskSpaceLimit = 0;\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(\n        ({ value, timestamp }) =>\n          (metric[timestamp] = value + (metric[timestamp] || 0))\n      );\n    }\n\n    switch (name) {\n      case \"kubelet_volume_stats_used_bytes\":\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum\":\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case \"kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum\":\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n    diskSpaceLimit,\n    connectionRateLimit,\n    connectionsLimit,\n  };\n}\n","import { GetMetricsKpiResponse } from \"@rhoas/app-services-ui-components\";\nimport {\n  Configuration,\n  DefaultApi,\n  InstantQuery,\n} from \"@rhoas/kafka-management-sdk\";\nimport { BasicApiConfigurationParameters, NoUndefinedField } from \"./types\";\n\nexport type FetchMetricsKpiProps = {\n  kafkaId: string;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchMetricsKpi({\n  accessToken,\n  basePath,\n  kafkaId,\n}: FetchMetricsKpiProps): Promise<\n  Omit<GetMetricsKpiResponse, \"kafkaTopics\" | \"topicPartitionsLimit\">\n> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await apisService.getMetricsByInstantQuery(kafkaId, [\n    \"kafka_topic:kafka_topic_partitions:sum\", // (Number of topic partitions)\n    \"kafka_topic:kafka_topic_partitions:count\", // (Number of topics)\n    \"consumergroup:kafka_consumergroup_members:count\", // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items ||\n    []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case \"kafka_topic:kafka_topic_partitions:sum\":\n        topicPartitions = value;\n        break;\n      case \"kafka_topic:kafka_topic_partitions:count\":\n        topics = value;\n        break;\n      case \"consumergroup:kafka_consumergroup_members:count\":\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import {\n  LazyExoticComponent,\n  useState,\n  VoidFunctionComponent,\n  useCallback,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport {\n  ProductType,\n  QuotaContext,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages/ServiceDown/ServiceDownPage\";\nimport {\n  FederatedModule,\n  usePrincipal,\n  useKafkaInstanceDrawer,\n} from \"@app/components\";\nimport { useModalControl, useQuota } from \"@app/hooks\";\nimport {\n  AppServicesLoading,\n  TermsAndConditionModal,\n} from \"@rhoas/app-services-ui-components\";\nimport { ITermsConfig } from \"@app/services\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\n\nconst KasPage: VoidFunctionComponent = () => {\n  const { getQuota } = useQuota(ProductType?.kas);\n\n  return (\n    <QuotaContext.Provider value={{ getQuota }}>\n      <FederatedModule\n        scope=\"kas\"\n        module=\"./OpenshiftStreams\"\n        fallback={<AppServicesLoading />}\n        render={(component) => <KasPageConnected Component={component} />}\n      />\n    </QuotaContext.Provider>\n  );\n};\n\nconst KasPageConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const config = useConfig();\n  const constants = useConstants();\n  const { t } = useTranslation();\n\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.kafka.ams.termsAndConditionsEventCode,\n    siteCode: constants.kafka.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getAllUserAccounts } = usePrincipal();\n\n  const [drawerInstance, setDrawerInstance] = useState<unknown | undefined>(\n    undefined\n  );\n  const [isOpenModal, setIsOpenModal] = useState<boolean>(false);\n  const [url, setUrl] = useState<string>(\"\");\n\n  const drawerProps = useKafkaInstanceDrawer();\n\n  const handlePreCreateInstance = useCallback(\n    async (open: boolean) => {\n      const { shouldOpenCreateModal, url } = await preCreateInstance(open);\n      if (shouldOpenCreateModal === false && url) {\n        setIsOpenModal(true);\n        setUrl(url);\n        return false;\n      }\n      return true;\n    },\n    [preCreateInstance, setIsOpenModal, setUrl]\n  );\n\n  const onCancel = () => {\n    setIsOpenModal(false);\n  };\n\n  const onClickViewTermsConditions = useCallback(async () => {\n    window.location.href = url;\n  }, [url]);\n\n  if (config.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <>\n      <TermsAndConditionModal\n        isModalOpen={isOpenModal}\n        serviceName={t(\"common:kafka\")}\n        ouiaIdModal=\"modal-KafkaTerms\"\n        ouiaIdButtonViewTerms=\"button-view-terms\"\n        ouiaIdButtonCancel=\"button-cancel\"\n        onClickViewTermsConditions={onClickViewTermsConditions}\n        onCancel={onCancel}\n      />\n      <Component\n        preCreateInstance={handlePreCreateInstance}\n        shouldOpenCreateModal={shouldOpenCreateModal}\n        drawerInstance={drawerInstance}\n        setDrawerInstance={setDrawerInstance}\n        {...drawerProps}\n        getAllUserAccounts={getAllUserAccounts}\n      />\n    </>\n  );\n};\n\nexport default KasPage;\n","import { ExclamationTriangleIcon } from \"@patternfly/react-icons\";\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from \"@patternfly/react-core\";\nimport { useHistory } from \"react-router-dom\";\nimport { FunctionComponent } from \"react\";\n\nconst NotFoundPage: FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push(\"/\");\n    }\n    return <Button onClick={handleClick}>Take me home</Button>;\n  }\n\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={ExclamationTriangleIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          404 Page not found\n        </Title>\n        <EmptyStateBody>\n          We didn&apos;t find a page that matches the address you navigated to.\n        </EmptyStateBody>\n        <GoHomeBtn />\n      </EmptyState>\n    </PageSection>\n  );\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n","import { OverviewPageV4 } from \"@rhoas/app-services-ui-components\";\nimport { FunctionComponent } from \"react\";\n\nexport const ConnectedOverviewPage: FunctionComponent = () => {\n  return <OverviewPageV4 />;\n};\n\nexport default ConnectedOverviewPage;\n","import { VoidFunctionComponent } from \"react\";\nimport { FederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ResourcesPage: VoidFunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<AppServicesLoading />}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n\nexport default ResourcesPage;\n","import { LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport { FederatedModule } from \"@app/components\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages/ServiceDown/ServiceDownPage\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceAccountsPage: VoidFunctionComponent = () => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<AppServicesLoading />}\n      render={(component) => (\n        <ServiceAccountsPageConnected Component={component} />\n      )}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const config = useConfig();\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n  return <Component />;\n};\nexport default ServiceAccountsPage;\n","import { WrenchIcon } from \"@patternfly/react-icons\";\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from \"@patternfly/react-core\";\nimport { useTranslation } from \"react-i18next\";\nimport { FunctionComponent } from \"react\";\n\nexport const ServiceDownPage: FunctionComponent = () => {\n  const { t } = useTranslation([\"appTemporaryFixMe\"]);\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t(\"serviceDown.serviceDownTitle\")}\n        </Title>\n        <EmptyStateBody>{t(\"serviceDown.serviceDownMessage\")}</EmptyStateBody>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            window.location.href = \"https://status.starter.openshift.com/\";\n          }}\n        >\n          {t(\"serviceDown.serviceDownButton\")}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import { useState, useEffect, FunctionComponent } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig, useAuth } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\n\nexport const ArtifactVersionDetails: FunctionComponent = () => {\n  const config = useConfig();\n  let { groupId, artifactId, version } = useParams<{\n    groupId: string;\n    artifactId: string;\n    version: string;\n  }>();\n  groupId = decodeURIComponent(groupId);\n  artifactId = decodeURIComponent(artifactId);\n  version = decodeURIComponent(version);\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <ArtifactVersionDetailsConnected\n      groupId={groupId}\n      artifactId={artifactId}\n      version={version}\n      key={`${groupId}-${artifactId}-${version}`}\n    />\n  );\n};\n\nconst ArtifactVersionDetailsConnected: FunctionComponent<{\n  groupId: string;\n  artifactId: string;\n  version: string;\n}> = ({ groupId, artifactId, version }) => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts_details\"\n      groupId={groupId}\n      artifactId={artifactId}\n      version={version}\n      render={(registry) => (\n        <ArtifactVersionDetailsLayoutRender registry={registry} />\n      )}\n    />\n  );\n};\n\nconst ArtifactVersionDetailsLayoutRender: FunctionComponent<{\n  registry: Registry;\n}> = ({ registry }) => {\n  const [currentlyLoggedInuser, setCurrentlyLoggedInuser] = useState<string>();\n  const auth = useAuth();\n\n  useEffect(() => {\n    (async () => {\n      await auth?.getUsername()?.then((user) => setCurrentlyLoggedInuser(user));\n    })();\n  }, [auth]);\n\n  if (registry === undefined || currentlyLoggedInuser === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <FederatedApicurioComponent\n      registry={registry}\n      module=\"./FederatedArtifactVersionPage\"\n    />\n  );\n};\n\nexport default ArtifactVersionDetails;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { FunctionComponent } from \"react\";\n\nexport const Artifacts: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactsConnected />;\n};\n\nconst ArtifactsConnected: FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts\"\n      render={(registry) => (\n        <FederatedApicurioComponent\n          module=\"./FederatedArtifactsPage\"\n          registry={registry}\n        />\n      )}\n    />\n  );\n};\n\nexport default Artifacts;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { FunctionComponent } from \"react\";\n\nexport const ArtifactRedirect: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactRedirectConnected />;\n};\n\nconst ArtifactRedirectConnected: FunctionComponent = () => {\n  return (\n    <SrsLayout\n      render={(registry) => (\n        <FederatedApicurioComponent\n          registry={registry}\n          module=\"./FederatedArtifactRedirectPage\"\n        />\n      )}\n    />\n  );\n};\n\nexport default ArtifactRedirect;\n","import { Registry } from \"@rhoas/registry-management-sdk\";\nimport { FederatedApicurioComponent } from \"./FederatedApicurioComponent\";\nimport { FC } from \"react\";\n\ntype DownloadArtifactsProps = {\n  registry: Registry;\n  downloadLabel?: string;\n};\n\nexport const DownloadArtifacts: FC<DownloadArtifactsProps> = ({\n  registry,\n  downloadLabel,\n}) => {\n  return (\n    <FederatedApicurioComponent\n      module=\"./FederatedDownloadArtifacts\"\n      registry={registry}\n      fileName={registry.name}\n      downloadLinkLabel={downloadLabel}\n    />\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport { Configuration, SecurityApi } from \"@rhoas/kafka-management-sdk\";\nimport {\n  PrincipalApi,\n  Principal as PrincipalSDK,\n} from \"@redhat-cloud-services/rbac-client\";\nimport {\n  Principal,\n  PrincipalType,\n  useAuth,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\n\nexport function usePrincipals(): {\n  loading: boolean;\n  users: Principal[] | undefined;\n  services: Principal[] | undefined;\n  allPrincipals: Principal[] | undefined;\n} {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [loading, setLoading] = useState(true);\n  const [services, setServices] = useState<Principal[] | undefined>();\n  const [users, setUsers] = useState<Principal[] | undefined>();\n\n  useEffect(() => {\n    (async () => {\n      setLoading(true);\n      try {\n        const accessToken = await auth.kas.getToken();\n        const rbacBasePath = config.rbac.basePath;\n        const saBasePath = config.kas.apiBasePath;\n        if (accessToken) {\n          const [usersResult, servicesResult] = await Promise.allSettled([\n            fetchUserAccounts(accessToken, rbacBasePath),\n            fetchServiceAccounts(accessToken, saBasePath),\n          ]);\n\n          if (usersResult.status === \"fulfilled\") {\n            setUsers(usersResult.value);\n          }\n          if (servicesResult.status === \"fulfilled\") {\n            setServices(servicesResult.value);\n          }\n        } else {\n          console.warn(\"app-services-ui no access token in usePrincipals\");\n        }\n        setLoading(false);\n      } catch {\n        setLoading(false);\n      }\n    })();\n  }, [auth, config]);\n\n  return {\n    loading,\n    users,\n    services,\n    allPrincipals:\n      users || services ? [...(users || []), ...(services || [])] : undefined,\n  };\n}\n\nasync function fetchUserAccounts(accessToken: string, basePath: string) {\n  try {\n    const principalApi = new PrincipalApi({\n      accessToken,\n      basePath,\n    });\n\n    return await principalApi.listPrincipals(-1).then((response) =>\n      response.data.data.map((p) => {\n        const pp = p as PrincipalSDK;\n        return {\n          id: p.username,\n          principalType: PrincipalType.UserAccount,\n          displayName: `${pp.first_name} ${pp.last_name}`,\n          emailAddress: pp.email,\n        } as Principal;\n      })\n    );\n  } catch (e) {\n    // temp fix - this API is only available to org admins\n    // needs a proper approach longer term\n    console.warn(\"app-services-ui fetchUserAccounts error\", e);\n  }\n  return undefined;\n}\n\nasync function fetchServiceAccounts(accessToken: string, basePath: string) {\n  try {\n    const securityApi = new SecurityApi({\n      accessToken,\n      basePath,\n    } as Configuration);\n    return await securityApi.getServiceAccounts().then((response) =>\n      response.data.items.map((sa) => {\n        return {\n          id: sa.client_id,\n          displayName: sa.name,\n          principalType: PrincipalType.ServiceAccount,\n        } as Principal;\n      })\n    );\n  } catch (e) {\n    console.warn(\"app-services-ui fetchServiceAccounts error\", e);\n  }\n  return undefined;\n}\n","import { FC, LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport {\n  ConfigType,\n  createApicurioConfig,\n} from \"@app/pages/ServiceRegistry/utils\";\nimport { FederatedModule } from \"@app/components\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport {\n  useAlert,\n  useAuth,\n  useBasename,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { usePrincipals } from \"@app/hooks/usePrincipals\";\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: Registry | undefined;\n  topicName?: string;\n  groupId?: string | null | undefined;\n  version?: string;\n  registryId?: string;\n  basename?: string;\n  fileName?: string;\n  downloadLinkLabel?: string;\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: FC<\n  FederatedApicurioComponentProps\n> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<AppServicesLoading />}\n      render={(component) => (\n        <ServiceAccountsPageConnected Component={component} {...rest} />\n      )}\n    />\n  );\n};\n\nconst ServiceAccountsPageConnected: VoidFunctionComponent<\n  { Component: LazyExoticComponent<any> } & Omit<\n    FederatedApicurioComponentProps,\n    \"module\"\n  >\n> = ({ Component, registry, ...rest }) => {\n  let federateConfig: ConfigType;\n  const alert = useAlert();\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const { loading: loadingPrincipals, allPrincipals } = usePrincipals();\n  const getToken = auth?.apicurio_registry.getToken;\n  let { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n  groupId = decodeURIComponent(groupId);\n  artifactId = decodeURIComponent(artifactId);\n  version = decodeURIComponent(version);\n\n  if (config === undefined || registry === undefined || loadingPrincipals) {\n    return <AppServicesLoading />;\n  }\n\n  if (getToken && basename) {\n    federateConfig = createApicurioConfig(\n      config,\n      alert,\n      registry.registryUrl as string,\n      `${basename.getBasename()}/t/${registry?.id}`,\n      getToken,\n      allPrincipals\n    );\n    return (\n      <Component\n        config={federateConfig}\n        tenantId={registry.id}\n        groupId={groupId}\n        artifactId={artifactId}\n        version={version}\n        history={history}\n        {...rest}\n      />\n    );\n  }\n  return null;\n};\n","import { Alert, Principal } from \"@rhoas/app-services-ui-shared\";\nimport { Config } from \"@rhoas/app-services-ui-shared\";\n\nexport interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n  roleManagement?: boolean;\n  settings?: boolean;\n  alerts?: Alert;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport type NoneAuthConfig = AuthConfig;\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n  principals?: Principal[] | undefined;\n}\n\nconst createApicurioConfig = (\n  _config: Config,\n  alert: Alert,\n  apiUrl: string,\n  navPathPrefix: string,\n  getToken: () => Promise<string> | undefined,\n  principals?: Principal[] | (() => Principal[]) | undefined\n) => {\n  const apicurioConfig: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: \"gettoken\",\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      roleManagement: true,\n      multiTenant: true,\n      settings: true,\n      alerts: alert,\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n    principals,\n  } as ConfigType;\n\n  return apicurioConfig;\n};\n\nexport { createApicurioConfig };\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { FunctionComponent } from \"react\";\n\nexport const RulesPage: FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RulesPageConnected />;\n};\n\nconst RulesPageConnected: FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.global_rules\"\n      render={(registry) => (\n        <FederatedApicurioComponent\n          registry={registry}\n          module=\"./FederatedRulesPage\"\n        />\n      )}\n    />\n  );\n};\n\nexport default RulesPage;\n","import {\n  LazyExoticComponent,\n  useCallback,\n  useState,\n  VoidFunctionComponent,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { FederatedModule, KasModalLoader } from \"@app/components\";\nimport { ServiceDownPage } from \"@app/pages\";\nimport { useModalControl, useQuota } from \"@app/hooks\";\nimport {\n  AppServicesLoading,\n  DevelopmentPreview,\n  TermsAndConditionModal,\n} from \"@rhoas/app-services-ui-components\";\nimport {\n  ProductType,\n  QuotaContext,\n  useConfig,\n} from \"@rhoas/app-services-ui-shared\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { ITermsConfig } from \"@app/services\";\nimport { DownloadArtifacts } from \"./DownloadArtifacts\";\nimport { useConstants } from \"@app/providers/config/ServiceConstants\";\nimport { useAuth } from \"@app/providers/auth\";\n\nexport const ServiceRegistryPage: VoidFunctionComponent = () => {\n  const { getQuota } = useQuota(ProductType.srs);\n\n  return (\n    <QuotaContext.Provider value={{ getQuota }}>\n      <KasModalLoader>\n        <FederatedModule\n          scope=\"srs\"\n          module=\"./ServiceRegistry\"\n          fallback={<AppServicesLoading />}\n          render={(component) => (\n            <ServiceRegistryPageConnected Component={component} />\n          )}\n        />\n      </KasModalLoader>\n    </QuotaContext.Provider>\n  );\n};\n\nexport const ServiceRegistryPageConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const { t } = useTranslation([\"service-registry\"]);\n\n  const constants = useConstants();\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.serviceRegistry.ams.termsAndConditionsEventCode,\n    siteCode: constants.serviceRegistry.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n\n  //states\n  const [isOpenModal, setIsOpenModal] = useState<boolean>(false);\n  const [url, setUrl] = useState<string>(\"\");\n\n  const handlePreCreateInstance = useCallback(\n    async (open: boolean) => {\n      const { shouldOpenCreateModal, url } = await preCreateInstance(open);\n      if (shouldOpenCreateModal === false && url) {\n        setIsOpenModal(true);\n        setUrl(url);\n        return false;\n      }\n      return true;\n    },\n    [preCreateInstance, setIsOpenModal, setUrl]\n  );\n\n  const onClsoeModal = useCallback(() => {\n    setIsOpenModal(false);\n  }, [setIsOpenModal]);\n\n  const onClickViewTermsConditions = useCallback(async () => {\n    window.location.href = url;\n  }, [url]);\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (config.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return (\n    <>\n      <TermsAndConditionModal\n        isModalOpen={isOpenModal}\n        serviceName={t(\"service_registry\")}\n        ouiaIdModal=\"modal-SrvRegTerms\"\n        ouiaIdButtonViewTerms=\"button-view-terms\"\n        ouiaIdButtonCancel=\"button-cancel\"\n        onClickViewTermsConditions={onClickViewTermsConditions}\n        onCancel={onClsoeModal}\n      />\n      <DevelopmentPreview>\n        <Component\n          preCreateInstance={handlePreCreateInstance}\n          shouldOpenCreateModal={shouldOpenCreateModal}\n          tokenEndPointUrl={auth?.tokenEndPointUrl}\n          renderDownloadArtifacts={(\n            registry: Registry,\n            downloadLabel?: string\n          ) => (\n            <DownloadArtifacts\n              registry={registry}\n              downloadLabel={downloadLabel}\n            />\n          )}\n        />\n      </DevelopmentPreview>\n    </>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import { FC, LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport { FederatedModule, KasModalLoader } from \"@app/components\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { DownloadArtifacts } from \"./DownloadArtifacts\";\nimport { useAuth } from \"@app/providers/auth\";\n\ntype SrsLayoutProps = {\n  render: (registry: Registry) => JSX.Element;\n  breadcrumbId?: string;\n  groupId?: string;\n  artifactId?: string;\n  version?: string;\n};\n\nexport const SrsLayout: FC<SrsLayoutProps> = (props) => {\n  return (\n    <FederatedModule\n      scope=\"srs\"\n      module=\"./ApicurioRegistry\"\n      fallback={<AppServicesLoading />}\n      render={(component) => (\n        <SrsLayoutConnected Component={component} {...props} />\n      )}\n    />\n  );\n};\n\nconst SrsLayoutConnected: VoidFunctionComponent<\n  { Component: LazyExoticComponent<any> } & SrsLayoutProps\n> = ({ Component, render, breadcrumbId, groupId, artifactId, version }) => {\n  const auth = useAuth();\n\n  return (\n    <KasModalLoader>\n      <Component\n        render={render}\n        breadcrumbId={breadcrumbId}\n        tokenEndPointUrl={auth?.tokenEndPointUrl}\n        groupId={groupId}\n        artifactId={artifactId}\n        version={version}\n        renderDownloadArtifacts={(\n          registry: Registry,\n          downloadLabel?: string\n        ) => (\n          <DownloadArtifacts\n            registry={registry}\n            downloadLabel={downloadLabel}\n          />\n        )}\n      />\n    </KasModalLoader>\n  );\n};\n","import { FC, LazyExoticComponent, VoidFunctionComponent } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { Registry } from \"@rhoas/registry-management-sdk\";\nimport { FederatedApicurioComponent } from \"./FederatedApicurioComponent\";\nimport { FederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceRegistrySchemaMapping: FC = () => {\n  return (\n    <>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistryMapping\"\n        fallback={<AppServicesLoading />}\n        render={(component) => (\n          <ServiceRegistrySchemaMappingConnected Component={component} />\n        )}\n      />\n    </>\n  );\n};\n\nconst ServiceRegistrySchemaMappingConnected: VoidFunctionComponent<{\n  Component: LazyExoticComponent<any>;\n}> = ({ Component }) => {\n  const { topicName } = useParams<{ topicName: string }>();\n  const basename = \"/service-registry\";\n\n  return (\n    <Component\n      basename={basename}\n      topicName={topicName}\n      renderSchema={(registry: Registry) => (\n        <FederatedApicurioComponent\n          module=\"./FederatedSchemaMapping\"\n          registry={registry}\n          topicName={topicName}\n          groupId={null}\n          version={\"latest\"}\n          registryId={registry?.id}\n          basename={basename}\n        />\n      )}\n    />\n  );\n};\n","import {\n  Main,\n  NotAuthorized,\n} from \"@redhat-cloud-services/frontend-components\";\n\nimport { useTranslation, Trans } from \"react-i18next\";\nimport { Link } from \"react-router-dom\";\nimport { FunctionComponent } from \"react\";\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: FunctionComponent<GetLinkProps> = ({ href, children }) => (\n  <Link to={href || \"\"}>{children}</Link>\n);\n\nexport const AccessDeniedPage: FunctionComponent = () => {\n  const { t } = useTranslation([\"appTemporaryFixMe\"]);\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t(\"accessdenied.accessDeniedTitle\")}\n        description={accessDeniedDetails}\n        prevPageButtonText={t(\"accessdenied.accessDeniedButtonText\")}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import { Context, createContext, useContext } from \"react\";\n\n/**\n * The Auth object provides information about the authenticated user\n */\nexport type Auth = {\n  /**\n   * Get the username of the authenticated user\n   */\n  getUsername: () => Promise<string> | undefined;\n  /**\n   * Get the is_org_admin of the authenticated user\n   */\n  isOrgAdmin: () => Promise<boolean> | undefined;\n  /**\n   * Get the token for accessing the control plane api\n   */\n  getToken: () => Promise<string> | undefined;\n  /**\n   * Get the token end point url\n   */\n  tokenEndPointUrl?: string;\n};\n\n/**\n * The AuthContext allows access to the Auth context\n */\nexport const AuthContext: Context<Auth | undefined> = createContext<\n  Auth | undefined\n>(undefined);\n\n/**\n * useAuth is a custom hook that is a shorthand for useContext(AuthContext)\n */\nexport const useAuth = (): Auth => {\n  const answer = useContext(AuthContext);\n  if (answer === undefined) {\n    throw new Error(\"must be used inside an AuthContext provider\");\n  }\n  return answer;\n};\n","import { Config } from \"@rhoas/app-services-ui-shared\";\n\nconst defaultHostname = \"console.redhat.com\";\n\ntype FederatedModulesConfig = Config[\"federatedModules\"];\n\ntype EnvironmentConfigWithoutFederatedModules = {\n  hostnames: string[];\n  fetchConfig?: boolean;\n  type?: string;\n  config: Omit<Config, \"federatedModules\">;\n};\n\nexport type EnvironmentConfigsWithoutFederatedModules =\n  Array<EnvironmentConfigWithoutFederatedModules>;\n\nexport const filterEnvironmentConfig = (\n  environmentConfig: EnvironmentConfigsWithoutFederatedModules\n): EnvironmentConfigWithoutFederatedModules => {\n  const hostname = window.location.hostname;\n  console.log(`Filter config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) =>\n    entry.hostnames.includes(hostname)\n  );\n  if (possibleConfigs.length > 1) {\n    throw new Error(\n      `Unable to find config for ${hostname}, more than one config matched ${possibleConfigs}`\n    );\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) =>\n      entry.hostnames.includes(defaultHostname)\n    );\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(\n        `Unable to load default config, more than one config matched ${possibleConfigs}`\n      );\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      return possibleDefaultConfigs[0];\n    }\n  }\n  return possibleConfigs[0];\n};\n\nexport const addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfigWithoutFederatedModules,\n  federatedModulesConfig: FederatedModulesConfig,\n  beta: boolean\n): Config => {\n  const federatedModules = {} as FederatedModulesConfig;\n  Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n    let { basePath } = v;\n    let fallbackBasePath: string | undefined = undefined;\n    if (environmentConfig.type !== \"proxy\") {\n      basePath = v.fallbackBasePath;\n    } else {\n      fallbackBasePath = v.fallbackBasePath;\n    }\n    if (!beta) {\n      if (basePath.startsWith(\"/preview\")) {\n        basePath = basePath.substring(8);\n      }\n      if (fallbackBasePath?.startsWith(\"/preview\")) {\n        fallbackBasePath = fallbackBasePath.substring(8);\n      }\n    }\n    federatedModules[k as keyof FederatedModulesConfig] = {\n      basePath,\n      fallbackBasePath: fallbackBasePath!,\n    };\n  });\n  return {\n    ...environmentConfig.config,\n    federatedModules,\n  };\n};\n","import { FunctionComponent, useEffect, useState } from \"react\";\nimport { Config, ConfigContext } from \"@rhoas/app-services-ui-shared\";\nimport configs from \"../../../../config/config.json\";\nimport {\n  addFederatedModulesToConfig,\n  EnvironmentConfigsWithoutFederatedModules,\n  filterEnvironmentConfig,\n} from \"@app/providers/config/utils\";\nimport { useFeatureFlags } from \"@app/providers/featureflags/FeatureFlags\";\n\nexport const EmbeddedConfigProvider: FunctionComponent = ({ children }) => {\n  const { beta } = useFeatureFlags();\n\n  const [value, setValue] = useState<Config | undefined>(() => {\n    const configFromJson: EnvironmentConfigsWithoutFederatedModules =\n      configs.config;\n    const environmentConfig = filterEnvironmentConfig(configFromJson);\n    if (environmentConfig.fetchConfig) {\n      return undefined;\n    }\n    const config = addFederatedModulesToConfig(\n      environmentConfig,\n      configs.federatedModules,\n      beta\n    );\n    console.log(\"Done loading config\", config);\n    return config;\n  });\n\n  useEffect(() => {\n    (async () => {\n      if (value === undefined) {\n        const response = await fetch(`${__webpack_public_path__}config.json`);\n        const jsonConfig = await response.json();\n        const environmentConfig = filterEnvironmentConfig(jsonConfig.config);\n        const config = addFederatedModulesToConfig(\n          environmentConfig,\n          jsonConfig.federatedModules,\n          beta\n        );\n        console.debug(\"Done loading config\", config);\n        setValue(config);\n      }\n    })();\n  }, [beta, value]);\n  return (\n    <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>\n  );\n};\n","import { Context, createContext, useContext } from \"react\";\n\n/**\n * Configuration for AMS\n */\nexport type AmsConfig = {\n  termsAndConditionsEventCode: string;\n  termsAndConditionsSiteCode: string;\n  quotaProductId: string;\n  trialQuotaProductId: string;\n  resourceName: string;\n};\n\nexport type ServiceConstants = {\n  version: number;\n  kafka: {\n    ams: AmsConfig;\n  };\n  serviceRegistry: {\n    ams: AmsConfig;\n  };\n};\n\n/**\n * The ConstantContext allows access to the constants for the application.\n */\nexport const ConstantContext: Context<ServiceConstants | undefined> =\n  createContext<ServiceConstants | undefined>(undefined);\n\n/**\n * useConstants is a custom hook that is a shorthand for useContext(ConfigContext)\n */\nexport const useConstants = (): ServiceConstants => {\n  const answer = useContext(ConstantContext);\n  if (answer === undefined) {\n    throw new Error(\n      \"useConstants must be used inside an ServiceConstantsContextProvider\"\n    );\n  }\n  return answer;\n};\n","import { ConstantContext, ServiceConstants } from \"./ServiceConstants\";\nimport constantsFallback from \"../../../../static/configs/service-constants.json\";\nimport { FunctionComponent } from \"react\";\n\nexport const ServiceConstantsContextProvider: FunctionComponent = ({\n  children,\n}) => {\n  return (\n    <ConstantContext.Provider value={constantsFallback as ServiceConstants}>\n      {children}\n    </ConstantContext.Provider>\n  );\n};\n","import { createContext, FunctionComponent, useContext } from \"react\";\n\nexport type FeatureFlags = {\n  beta: boolean;\n};\n\nexport const FeatureFlagsContext = createContext<FeatureFlags | undefined>(\n  undefined\n);\n\nexport const useFeatureFlags = (): FeatureFlags => {\n  const answer = useContext(FeatureFlagsContext);\n  if (answer === undefined) {\n    throw new Error(\n      \"useFeatureFlags must be used inside a FeatureFlagContext provider\"\n    );\n  }\n  return answer;\n};\n\nexport const FeatureFlagProvider: FunctionComponent = ({ children }) => {\n  const value = {\n    beta: window.location.pathname.startsWith(\"/preview\"),\n  } as FeatureFlags;\n  return (\n    <FeatureFlagsContext.Provider value={value}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  );\n};\n","import ReducerRegistry from \"@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry\";\nimport promiseMiddleware from \"redux-promise-middleware\";\nimport { notificationsReducer } from \"@redhat-cloud-services/frontend-components-notifications/redux\";\n\nlet registry: ReducerRegistry<Record<string, string>>;\n\nexport function init(...middleware: any) {\n  if (!registry) {\n    // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n    // @ts-ignore\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n","import { ComponentType, FunctionComponent, lazy } from \"react\";\nimport { Route, RouteComponentProps } from \"react-router-dom\";\nimport { useDocumentTitle } from \"@app/utils\";\n\nconst NotFoundPage = lazy(() => import(\"@app/pages/NotFound/NotFoundPage\"));\n\nexport interface IAppRoute<T> {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: ComponentType<RouteComponentProps> | ComponentType<T>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup<T> {\n  label: string;\n  routes: IAppRoute<T>[];\n}\n\nexport type AppRouteConfig<T> = IAppRoute<T> | IAppRouteGroup<T>;\n\nexport const PageNotFoundRoute: FunctionComponent<{ title: string }> = ({\n  title,\n}: {\n  title: string;\n}) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage} />;\n};\n\nexport const flattenedRoutes = <T,>(routes: AppRouteConfig<T>[]) =>\n  routes.reduce(\n    (flattened, route) => [\n      ...flattened,\n      ...(route.routes ? route.routes : [route]),\n    ],\n    [] as IAppRoute<T>[]\n  );\n","function getBaseName(pathname: string) {\n  let release = \"/\";\n  const pathName = pathname.split(\"/\");\n\n  pathName.shift();\n\n  if (pathName[0] === \"preview\") {\n    pathName.shift();\n    release = `/preview/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import { useEffect } from \"react\";\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n"],"names":["QuickStartLoaderFederated","lazy","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","ApiDesignerHomePage","ApiDesignerEditorPage","DataSciencePage","KafkaOverviewPage","KasPage","OverviewPage","ResourcesPage","RulesPage","RolesPage","SettingsPage","ServiceAccountsPage","CosPage","ServiceRegistryPage","SmartEventsPage","RedirectToStreamsKafkas","Redirect","to","appRoutes","component","exact","label","path","title","devPreview","basename","Kafka","getBaseName","window","location","pathname","WrappedRoute","Component","rest","t","useTranslation","history","useHistory","getBasename","useCallback","onClickButton","push","wrapRoute","routeProps","fallbackRender","error","message","AppServicesPageNotFound","AppServicesEmptyState","emptyStateProps","variant","AppServicesEmptyStateVariant","UnexpectedError","emptyStateIconProps","className","titleProps","emptyStateBodyProps","body","Button","onClick","DevelopmentPreview","show","BasenameContext","Provider","value","Route","render","AppRoutes","Suspense","fallback","AppServicesLoading","Switch","map","idx","isAsync","connect","insights","getAppId","defaultAppId","parts","split","length","useEffect","unregister","chrome","on","event","domEvent","href","pathName","replace","NotificationsPortal","Page","usePrincipal","config","useConfig","auth","useAuth","serviceAccountPrincipals","setServiceAccountPrincipals","useState","userAcountPrincipals","setUserAccountPrincipals","undefined","rbac","basePath","accessToken","kas","getToken","principalApi","PrincipalApi","userAccounts","listPrincipals","then","response","data","p","pp","id","username","principalType","PrincipalType","UserAccount","displayName","first_name","last_name","emailAddress","email","e","securityApi","SecurityApi","apiBasePath","serviceAccounts","getServiceAccounts","items","sa","client_id","name","ServiceAccount","getAllPrincipals","answer","concat","getAllUserAccounts","getAllServiceAccounts","PrincipalsProvider","children","PrincipalsContext","useKafkaInstanceDrawer","isDrawerOpen","setIsDrawerOpen","drawerActiveTab","setDrawerActiveTab","openDrawer","tab","closeDrawer","tokenEndPointUrl","onDeleteInstance","FederatedModuleContext","createContext","FederatedModuleProvider","moduleInfoCache","useRef","modules","federatedModules","getModuleInfo","baseUrl","scope","fallbackBasePath","current","fetchModuleInfo","url","Date","now","fetch","json","fedMods","s","entry","startsWith","entryPoint","e1","useFederatedModule","useContext","Error","KasModalLoader","FederatedModule","module","KasModalLoaderFederated","useQuota","productId","constants","orgId","setOrgId","ams","AppServicesApi","apiAccountsMgmtV1CurrentAccountGet","account","orgID","organization","getQuotaTypesByProductId","kasQuotaProductId","kafka","quotaProductId","kasTrialQuotaProductId","trialQuotaProductId","kasResourceName","resourceName","srsQuotaProductId","serviceRegistry","srsTrialQuotaProductId","srsResourceName","ProductType","quotaKey","QuotaType","trialQuotaKey","kasTrial","srs","srsTrial","getQuota","quotaData","Map","filteredQuota","loading","isServiceDown","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","quota","find","q","related_resources","r","resource_name","product","trialQuota","allowed","remaining","consumed","set","console","Status","fetchTermsReviewFactory","termsConfig","key","defaultApi","apiAuthorizationsV1SelfTermsReviewPost","event_code","eventCode","site_code","siteCode","buildUrlParams","params","Object","keys","encodeURIComponent","join","useModalControl","loadTermsReview","ref","load","useAsyncTermsReview","useLocation","shouldOpenCreateModal","parse","search","terms_required","preCreateInstance","termsReview","terms_available","redirect_url","redirectURL","stringifyUrl","query","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","useInsights","insightsChromeAuth","getUsername","getUser","identity","user","isOrgAdmin","is_org_admin","apicurio_registry","smart_events","sas_ui","useSSOProviders","APIManagementOverviewPage","serviceDown","OpenshiftManagedConnectors","RHODS_ADDON_ID","fetchAddonInquirues","cluster","token","cluster_id","method","headers","Authorization","d","clusterId","loadClusters","clusters","clusterswithNodes","filter","metrics","metric","nodes","compute","findValidClusterWithNodes","clustersAvailability","Promise","allSettled","status","reduce","acc","result","internalItems","hasAddon","addon","requirements","every","enabled","canInstallAddon","fulfilled","getEligbleRHODSClusters","installableClusters","DataScienceOverViewPage","analytics","trackClick","properties","track","warn","KafkaFederatedComponent","FederatedKafka","Topics","props","TopicDetails","CreateTopic","UpdateTopic","Dashboard","ConsumerGroups","AclPermissions","getAdminServerUrl","kafkaRequest","admin_api_server_url","useGetAvailableSizes","provider","region","sizeId","instanceType","api","DefaultApi","Configuration","sizes","getInstanceTypesByCloudProviderAndRegion","instance_types","instanceTypesSizes","i","size","kafkaRoutes","flatRoutes","InstanceDrawer","underlyingProps","KafkaRoutes","routeMatch","useRouteMatch","drawerProps","handleInstanceDrawer","isOpen","activeTab","drawerInstance","setDrawerInstance","routePath","log","fetchKafkaTopisFromAdmin","TopicsApi","getTopics","fetchTopicMetrics","kafkaId","duration","interval","selectedTopic","apisService","safeMetrics","getMetricsByRangeQuery","m","values","topic","filteredMetrics","topics","Array","from","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","forEach","__name__","addAggregatedTotalBytesTo","timestamp","partition","addAggregatePartitionBytes","metricsTopics","SettingsTab","owner","reauthenticationEnabled","onSubmitReAuthentication","settings","updateKafkaById","reauthentication_enabled","fetchSettings","Settings","KafkaMainView","kafkaInstanceId","useParams","setKafkaRequest","getKafkaSize","fetchKafka","kasService","getKafkaById","cloud_provider","instance_type","size_id","kafkaDetail","adminServerUrl","useKafkaInstance","KafkaMainViewConnected","kafkaInstance","ConnectedKafkaRoutes","setError","onError","code","redirectAfterDeleteInstance","showMetrics","useMemo","kafkaAdminUrl","totalMaxConnections","total_max_connections","maxConnections","max_connection_attempts_per_sec","maxPartitions","max_partitions","kafkaStorageBytes","max_data_retention_size","bytes","showSchemas","ServiceRegistry","showSettings","kafkaPageLink","kafkaInstanceLink","kafkaName","ConnectedMetrics","useBasename","storageKey","isAlertClosed","setIsAlertClosed","localStorage","getItem","getKafkaInstanceMetrics","kafkaResponse","persistentvolumeclaim","includes","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","diskSpaceLimit","connectionRateLimit","connectionsLimit","fetchKafkaInstanceMetrics","getTopicMetrics","kafkaTopics","all","getMetricsKpi","kpiResponse","topicPartitions","consumerGroups","getMetricsByInstantQuery","fetchMetricsKpi","topicPartitionsLimit","Metrics","onCreateTopic","getTopicsMetrics","isClosed","onClickClose","setItem","KasPageConnected","termsAndConditionsEventCode","termsAndConditionsSiteCode","isOpenModal","setIsOpenModal","setUrl","handlePreCreateInstance","open","onClickViewTermsConditions","TermsAndConditionModal","isModalOpen","serviceName","ouiaIdModal","ouiaIdButtonViewTerms","ouiaIdButtonCancel","onCancel","QuotaContext","NotFoundPage","icon","headingLevel","ConnectedOverviewPage","OverviewPageV4","QuickStartCatalogFederated","ServiceAccountsPageConnected","ServiceDownPage","groupId","artifactId","version","decodeURIComponent","ArtifactVersionDetailsConnected","breadcrumbId","registry","ArtifactVersionDetailsLayoutRender","currentlyLoggedInuser","setCurrentlyLoggedInuser","ArtifactsConnected","ArtifactRedirectConnected","DownloadArtifacts","downloadLabel","fileName","downloadLinkLabel","fetchUserAccounts","fetchServiceAccounts","FederatedApicurioComponent","federateConfig","alert","useAlert","loadingPrincipals","allPrincipals","setLoading","services","setServices","users","setUsers","rbacBasePath","saBasePath","usersResult","servicesResult","usePrincipals","_config","apiUrl","navPathPrefix","principals","artifacts","type","features","readOnly","breadcrumbs","roleManagement","multiTenant","alerts","ui","navPrefixPath","createApicurioConfig","registryUrl","tenantId","RulesPageConnected","ServiceRegistryPageConnected","onClsoeModal","renderDownloadArtifacts","SrsLayout","SrsLayoutConnected","ServiceRegistrySchemaMapping","ServiceRegistrySchemaMappingConnected","topicName","renderSchema","registryId","GetLink","Link","AccessDeniedPage","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","AuthContext","filterEnvironmentConfig","environmentConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","federatedModulesConfig","beta","entries","k","v","substring","EmbeddedConfigProvider","setValue","configFromJson","fetchConfig","jsonConfig","debug","ConfigContext","ConstantContext","useConstants","ServiceConstantsContextProvider","FeatureFlagsContext","useFeatureFlags","FeatureFlagProvider","init","middleware","register","notifications","PageNotFoundRoute","flattenedRoutes","routes","flattened","route","release","shift","useDocumentTitle","originalTitle","document"],"sourceRoot":""}