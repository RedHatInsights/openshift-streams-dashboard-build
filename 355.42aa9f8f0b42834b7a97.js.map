{"version":3,"sources":["webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/Loading/Loading.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/DevelopmentPreview/DevelopmentPreview.tsx","webpack://application-services-ui/./src/app/components/Dashboard/Metrics.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/Routes.tsx","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/utils/keycloakAuth.ts","webpack://application-services-ui/./src/app/providers/ConfigContextProvider.tsx","webpack://application-services-ui/./src/app/i18n/locale/index.ts","webpack://application-services-ui/./src/app/i18n/index.ts","webpack://application-services-ui/./src/AppEntry.tsx","webpack://application-services-ui/./src/bootstrap.tsx"],"names":["FederatedModuleContext","FederatedModuleProvider","children","config","useConfig","undefined","Provider","value","federatedModules","FederatedModule","scope","module","render","fallback","federatedModuleContext","useState","moduleInfo","setModuleInfo","useEffect","getModuleInfo","basePath","fallbackBasePath","url","ready","setReady","failed","setFailed","element","document","createElement","src","type","async","onload","console","log","onerror","error","head","appendChild","removeChild","useDynamicScript","entryPoint","Component","window","init","default","get","factory","Module","loadComponent","AssetsContext","getPath","baseUrl","Promise","fetchModuleInfo","fetch","json","then","fedMods","s","entry","path","startsWith","Loading","Bullseye","Spinner","InstanceDrawer","isExpanded","onClose","kafkaDetail","activeTab","setIsOpenDeleteInstanceModal","isOpenDeleteInstanceModal","history","getConnectToRoutePath","event","routePath","Error","createHref","pathname","onConnectToRoute","push","masSso","tokenEndPointUrl","InstanceDrawerFederated","instanceDetail","DevelopmentPreview","t","useTranslation","id","className","style","height","Banner","isSticky","variant","Popover","hasAutoWidth","bodyContent","position","minWidth","maxWidth","Button","Metrics","kafkaId","MetricsFederated","release","pathName","split","shift","registry","ReducerRegistry","middleware","register","notifications","useDocumentTitle","title","originalTitle","routeFocusTimer","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","KafkaPage","KasPage","NotFoundPage","OverviewPage","QuickStartDrawerFederated","ResourcesPage","RulesPage","ServiceAccountsPage","CosPage","RedirectToStreamsKafkas","Redirect","to","routes","component","exact","label","basename","getBaseName","location","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","rest","getBasename","Route","routeProps","BasenameContext","PageNotFound","flattenedRoutes","reduce","flattened","route","AppRoutes","LastLocationProvider","Switch","map","idx","key","connect","insights","useHistory","chrome","defaultAppId","parts","appId","length","identifyApp","unregister","on","includes","navId","keycloak","ConfigProvider","configUrl","setConfig","controller","AbortController","signal","hostname","environmentConfig","possibleConfigs","filter","hostnames","possibleDefaultConfigs","abort","ConfigContext","REFRESH_TOKEN_COOKIE_NAME","getKeycloakInstance","getInsightsAccessToken","storeRefreshToken","refreshToken","insightsToken","insightsJWT","rhUserId","storedToken","JSON","stringify","encoded","Base64","debug","clearRefreshToken","retrieveRefreshToken","storedRefreshToken","parse","refreshJWT","exp","Date","initOptions","responseMode","rk","updateToken","logout","lk","onLoad","getMASSSOToken","token","tokenParsed","k","info","resources","en","translation","appServicesi18n","use","initReactI18next","detection","order","caches","fallbackLng","interpolation","escapeValue","AppWithKeycloak","authServerUrl","clientId","realm","auth","getToken","setKeycloak","setLoadingKeycloak","loadingKeycloak","dispatch","useDispatch","getUsername","getUser","identity","user","username","isOrgAdmin","is_org_admin","kafka","kas","ams","srs","apicurio_registry","alert","addAlert","description","dataTestId","autoDismiss","dismissable","dismissDelay","requestId","sentryId","baseName","AuthContext","AlertContext","store","getStore","I18nextProvider","i18n","root"],"mappings":"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","file":"355.42aa9f8f0b42834b7a97.js","sourcesContent":["/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { FederatedModuleConfig, useConfig, AssetsContext } from \"@bf2/ui-shared\";\nimport { Loading } from \"@app/components/Loading/Loading\";\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nconst FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope]; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await window[scope].get(module);\n    const Module = factory();\n    console.log(`${Module} loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = ({ url }) => {\n\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!url) {\n      setFailed(true);\n      return;\n    }\n\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    setReady(false);\n    setFailed(false);\n\n    element.onload = () => {\n      console.log(`Dynamic federated module Loaded: ${url}`);\n      setReady(true);\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      setReady(false);\n      setFailed(true);\n    };\n\n    document.head.appendChild(element);\n\n    return () => {\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: any;\n}\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(federatedModuleContext[scope].basePath, scope, federatedModuleContext[scope].fallbackBasePath);\n      setModuleInfo(moduleInfo);\n    }\n    fetchModuleInfo();\n  }, [scope, federatedModuleContext]);\n\n  const { ready, failed } = useDynamicScript({ url: moduleInfo?.entryPoint });\n\n  if (!ready || failed || !moduleInfo) {\n    if (failed && fallback) {\n      return fallback;\n    }\n    return null;\n  }\n\n  const Component = React.lazy(\n    loadComponent(scope, module)\n  );\n  const getPath = () => {\n    return moduleInfo.basePath\n  }\n\n  return (\n    <AssetsContext.Provider value={{ getPath }}>\n      <React.Suspense fallback={null}>\n          {render(Component)}\n      </React.Suspense>\n    </AssetsContext.Provider>\n  );\n}\n\ntype ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nconst getModuleInfo = async (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined> => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n\n\n","import React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner/>\n  </Bullseye>\n);\n","import React from 'react';\nimport { useHistory } from 'react-router';\nimport { useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@openapi/kas';\n\ntype InstanceDrawerProps = {\n  kafkaDetail: KafkaRequest | undefined;\n  isExpanded: boolean | undefined;\n  activeTab: string;\n  onClose: () => void;\n  isOpenDeleteInstanceModal: boolean;\n  setIsOpenDeleteInstanceModal: (isopen: boolean) => void;\n};\n\nexport const InstanceDrawer: React.FC<InstanceDrawerProps> = ({\n  isExpanded,\n  onClose,\n  kafkaDetail,\n  activeTab,\n  children,\n  setIsOpenDeleteInstanceModal,\n  isOpenDeleteInstanceModal,\n}) => {\n  const config = useConfig();\n  const history = useHistory();\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  const getConnectToRoutePath = (event: unknown, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    return history.createHref({ pathname: `/streams/${routePath}` });\n  };\n\n  const onConnectToRoute = async (event: unknown, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    history.push(`/streams/${routePath}`);\n  };\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      render={(InstanceDrawerFederated) => {\n        return (\n          <InstanceDrawerFederated\n            getConnectToRoutePath={getConnectToRoutePath}\n            onConnectToRoute={onConnectToRoute}\n            tokenEndPointUrl={tokenEndPointUrl}\n            isExpanded={isExpanded}\n            onClose={onClose}\n            instanceDetail={kafkaDetail}\n            activeTab={activeTab}\n            isOpenDeleteInstanceModal={isOpenDeleteInstanceModal}\n            setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n          >\n            {children}\n          </InstanceDrawerFederated>\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Banner, Bullseye, Button, Popover } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const DevelopmentPreview: React.FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return <div id='scrollablePageMain' className='pf-c-page__main' style={{ height: '100%' }}>\n    <Banner isSticky variant=\"info\">\n      <Bullseye>\n        <Popover\n          aria-label=\"Development Preview Button\"\n          hasAutoWidth\n          bodyContent={\n                <div>{t('common.developmentPreviewTooltip')}</div>\n              }\n          position='bottom'\n          minWidth='300px'\n          maxWidth='25%'>\n            <Button className='app-services-ui--button--dev-preview' variant='link'>{t('common.developmentPreview')}</Button>\n          </Popover>\n      </Bullseye>\n    </Banner>\n    {children}\n  </div>\n}\n","import React from 'react';\nimport { useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule } from '@app/components';\n\n\ntype MetricsProps = {\n  kafkaId: string;\n}\n\nexport const Metrics: React.FC<MetricsProps> = ({ kafkaId }) => {\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./Metrics\"\n      render={(MetricsFederated) => <MetricsFederated kafkaId={kafkaId}/>}\n    />\n  );\n}\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport function init(...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n        notifications: notificationsReducer\n    });\n\n    return registry;\n}\n\nexport function getStore() {\n    return registry.getStore();\n}\n\nexport function register(...args) {\n    return registry.register(...args);\n}\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { BasenameContext } from '@bf2/ui-shared';\nimport getBaseName from './utils/getBaseName';\nimport { Loading } from \"@app/components\";\n\nconst APIManagementPage = React.lazy(() => import(\"@app/pages/APIManagement/APIManagementPage\"));\nconst ArtifactRedirect = React.lazy(() => import(\"@app/pages/ServiceRegistry/ArtifactsRedirect\"));\nconst Artifacts = React.lazy(() => import(\"@app/pages/ServiceRegistry/Artifacts\"));\nconst ArtifactVersionDetails =React.lazy(() => import(\"@app/pages/ServiceRegistry/ArtifactVersion\"));\nconst DataSciencePage = React.lazy(() => import(\"@app/pages/DataScience/DataSciencePage\"));\nconst KafkaPage = React.lazy(() => import(\"@app/pages/Kafka/KafkaPage\"));\nconst KasPage = React.lazy(() => import(\"@app/pages/Kas/KasPage\"));\nconst NotFoundPage = React.lazy(() => import(\"@app/pages/NotFound/NotFoundPage\"));\nconst OverviewPage = React.lazy(() => import(\"@app/pages/Overview/OverviewPage\"));\nconst QuickStartDrawerFederated = React.lazy(() => import(\"@app/pages/Resources/QuickStartDrawerFederated\"));\nconst ResourcesPage = React.lazy(() => import(\"@app/pages/Resources/ResourcesPage\"));\nconst RulesPage = React.lazy(() => import(\"@app/pages/ServiceRegistry/RulesPage\"));\nconst ServiceAccountsPage = React.lazy(() => import(\"@app/pages/ServiceAccounts/ServiceAccountsPage\"));\nconst CosPage = React.lazy(() => import(\"@app/pages/CosPage/CosPage\"));\nconst ServiceRegistryPage = React.lazy(() => import(\"@app/pages/ServiceRegistry/ServiceRegistryPage\"));\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: KafkaPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas'\n  },\n  {\n    component: KafkaPage,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas'\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas'\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/rules',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts/:groupId/:artifactId',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: CosPage,\n    exact: false,\n    label: 'COS',\n    path: '/cos',\n    title: 'COS',\n    basename: `${getBaseName(window.location.pathname)}/cos`\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams'\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n  },\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, basename, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const getBasename = () => {\n    return basename || \"\";\n  };\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return (\n      <QuickStartDrawerFederated>\n        <BasenameContext.Provider value={{ getBasename }}>\n          <Component {...rest} {...routeProps} />\n        </BasenameContext.Provider>\n      </QuickStartDrawerFederated>\n    );\n  }\n\n  return <Route render={routeWithTitle} {...rest} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <React.Suspense fallback={<Loading />}>\n      <Switch>\n        {flattenedRoutes.map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n          <RouteWithTitleUpdates\n            path={path}\n            exact={exact}\n            component={component}\n            key={idx}\n            title={title}\n            isAsync={isAsync}\n            {...rest}\n          />\n        ))}\n        <PageNotFound title=\"404 Page Not Found\" />\n      </Switch>\n    </React.Suspense>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport './App.scss';\nimport { AppRoutes } from '@app/Routes';\nimport { FederatedModuleProvider } from './components/FederatedModule/FederatedModule';\nimport { InsightsType } from '@app/utils';\n\nexport const App: React.FunctionComponent = () => {\n  const insights: InsightsType = window['insights'];\n  const history = useHistory();\n\n  const getAppId = () => {\n    const defaultAppId = 'overview';\n\n    const parts = history.location.pathname.split('/');\n    if (parts.length > 1) {\n      if (parts[1] === '') {\n        return defaultAppId;\n      } else {\n        if (parts[1] === 'openshift-streams') {\n          return 'streams';\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n    return () => {\n      unregister();\n    }\n  }, []);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal />\n      <AppRoutes />\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\nimport { Base64 } from 'js-base64';\n\nlet keycloak: KeycloakInstance | undefined;\n\nconst OLD_REFRESH_TOKEN_COOKIE_NAME = \"masSSORefreshToken\";\n// Clean out the old token from cookies\nCookies.remove(OLD_REFRESH_TOKEN_COOKIE_NAME);\n\nconst REFRESH_TOKEN_COOKIE_NAME = \"mrt\";\nconst MIN_VALIDITY = 50;\n\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n}\n\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig, getInsightsAccessToken?: () => Promise<string>) => {\n  if (getInsightsAccessToken === undefined) {\n    return undefined;\n  }\n  if (!keycloak) {\n    keycloak = await init(config, getInsightsAccessToken);\n  }\n  return keycloak;\n}\n\nconst storeRefreshToken = async (refreshToken: string, getInsightsAccessToken: () => Promise<string>) => {\n\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const rhUserId = insightsJWT['account_id'];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug(\"storing refresh token\");\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n}\n\nconst clearRefreshToken = () => {\n  console.debug(\"clearing stored refresh token\");\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n}\n\nconst retrieveRefreshToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = JSON.parse(storedToken) as unknown as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n}\n\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nconst init = async (config: KeycloakConfig, getInsightsAccessToken: () => Promise<string>): Promise<KeycloakInstance | undefined> => {\n\n  const initOptions = {\n    responseMode: \"query\",\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken) {\n    const rk = Keycloak(config);\n    // Use the refresh token\n    try {\n      // Perform a keycloak init without a login\n      await rk.init(initOptions);\n      // Set the saved refresh token into Keycloak\n      rk.refreshToken = refreshToken\n      // Then force a token refresh to check if the refresh token is actually valid\n      await rk.updateToken(-1);\n      return rk;\n    } catch {\n      clearRefreshToken();\n      await logout(rk);\n    }\n  }\n  const lk = Keycloak(config);\n  initOptions.onLoad = \"login-required\";\n  await lk.init(initOptions);\n  if (lk.refreshToken) {\n    await storeRefreshToken(lk.refreshToken, getInsightsAccessToken);\n  }\n  return lk;\n}\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getMASSSOToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string> => {\n  await keycloak?.updateToken(MIN_VALIDITY);\n  if (!keycloak?.token || !keycloak.tokenParsed) {\n    throw new Error(\"No token from keycloak!\");\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== keycloak.tokenParsed['rh-user-id']) {\n    await logout(keycloak);\n    return \"\";\n  }\n  if (keycloak?.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak?.token;\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.info(\"Trigger MASSSO logout\")\n    await k.logout();\n  }\n}\n","import React from \"react\";\nimport { Config, ConfigContext } from '@bf2/ui-shared';\n\nconst defaultHostname = \"cloud.redhat.com\";\n\nexport type EnviromentConfigs = [\n  {\n    hostnames: string[],\n    config: Config\n  }\n];\n\n\nexport type ConfigProviderProps = {\n  configUrl: string\n}\n\nexport const ConfigProvider: React.FunctionComponent<ConfigProviderProps> = ({ configUrl, children }) => {\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  React.useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async () => {\n      const hostname = window.location.hostname;\n      console.log(`Loading config for ${hostname}`);\n      const response = await fetch(configUrl, { signal });\n      const environmentConfig = await response.json() as EnviromentConfigs;\n      const possibleConfigs = environmentConfig.filter(entry => entry.hostnames.includes(hostname))\n      if (possibleConfigs.length > 1) {\n        throw new Error(`Unable to load config for ${hostname}, more than one config matched ${possibleConfigs}`);\n      } else if (possibleConfigs.length < 1) {\n        // Use the default config\n        const possibleDefaultConfigs = environmentConfig.filter(entry => entry.hostnames.includes(defaultHostname))\n        if (possibleDefaultConfigs.length > 1) {\n          throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n        } else if (possibleDefaultConfigs.length < 1) {\n          throw new Error(`Unable to load default config, no configs matched`);\n        } else {\n          setConfig(possibleDefaultConfigs[0].config);\n          console.log('Done loading default config', possibleDefaultConfigs[0]);\n        }\n      } else {\n        setConfig(possibleConfigs[0].config);\n        console.log('Done loading config', possibleConfigs[0].config);\n      }\n    })();\n\n    return () => controller.abort();\n  }, [configUrl]);\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import en from './en.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst appServicesi18n = i18n.createInstance();\n\nappServicesi18n\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      detection: {\n        order: ['htmlTag', 'navigator'],\n        caches: [],\n      },\n      fallbackLng: 'en',\n      debug: true,\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      resources,\n    });\n\nexport default appServicesi18n;\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider, useDispatch } from 'react-redux';\nimport { init } from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport { InsightsType } from '@app/utils/insights';\nimport { ConfigProvider } from '@app/providers/ConfigContextProvider';\nimport { KeycloakInstance } from 'keycloak-js';\nimport { Alert, AlertContext, Auth, AuthContext, useConfig, AlertProps } from '@bf2/ui-shared';\nimport { getKeycloakInstance, getMASSSOToken } from '@app/utils/keycloakAuth';\nimport { I18nextProvider } from 'react-i18next';\nimport appServicesi18n from '@app/i18n';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { Loading } from '@app/components/Loading/Loading';\n\ndeclare const __webpack_public_path__: string;\n\nconst AppWithKeycloak: React.FunctionComponent = () => {\n  const insights: InsightsType = window['insights'];\n  const config = useConfig();\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadKeycloak = async () => {\n        const keycloak = await getKeycloakInstance(\n          {\n            url: config.masSso.authServerUrl,\n            clientId: config.masSso.clientId,\n            realm: config.masSso.realm,\n          },\n          insights.chrome.auth?.getToken\n        );\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      };\n      loadKeycloak();\n    }\n  }, [config, insights.chrome.auth]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n  const dispatch = useDispatch();\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading />;\n  }\n\n  const getToken = () => {\n    return getMASSSOToken(insights.chrome.auth.getToken);\n  };\n\n  const auth: Auth = {\n    getUsername: () => insights.chrome.auth.getUser().then((value) => value.identity.user.username),\n    isOrgAdmin: () => insights.chrome.auth.getUser().then((value) => value.identity.user.is_org_admin),\n    kafka: {\n      getToken,\n    },\n    kas: {\n      getToken: insights.chrome.auth.getToken,\n    },\n    ams: {\n      getToken: insights.chrome.auth.getToken,\n    },\n    srs: {\n      getToken: insights.chrome.auth.getToken,\n    },\n    apicurio_registry: {\n      getToken,\n    },\n  };\n\n  const addAlert = ({\n    title,\n    variant,\n    description,\n    dataTestId,\n    autoDismiss,\n    dismissable,\n    dismissDelay,\n    requestId,\n    sentryId,\n  }: AlertProps) => {\n    dispatch(\n      addNotification({\n        title,\n        variant,\n        description,\n        dataTestId,\n        autoDismiss: autoDismiss || true,\n        dismissable: dismissable || true,\n        dismissDelay: dismissDelay || 8000,\n        requestId,\n        sentryId,\n      })\n    );\n  };\n\n  const alert: Alert = {\n    addAlert,\n  };\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={auth}>\n      <AlertContext.Provider value={alert}>\n        <Router basename={baseName}>\n          <App />\n        </Router>\n      </AlertContext.Provider>\n    </AuthContext.Provider>\n  );\n};\n\nconst AppEntry: React.FunctionComponent = () => (\n  <Provider store={init(logger).getStore()}>\n    <I18nextProvider i18n={appServicesi18n}>\n      <ConfigProvider configUrl={`${__webpack_public_path__}config.json`}>\n        <AppWithKeycloak />\n      </ConfigProvider>\n    </I18nextProvider>\n  </Provider>\n);\nexport default AppEntry;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root);\n"],"sourceRoot":""}