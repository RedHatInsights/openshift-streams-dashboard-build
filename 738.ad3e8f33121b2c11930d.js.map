{"version":3,"sources":["webpack://application-services-ui/./src/app/App.scss","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/App.scss?af09","webpack://application-services-ui/./src/app/utils/insights.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/NotFound/NotFound.tsx","webpack://application-services-ui/./src/app/Components/Loading/Loading.tsx","webpack://application-services-ui/./src/app/Config/Config.tsx","webpack://application-services-ui/./src/app/Components/FederatedModule/utils.tsx","webpack://application-services-ui/./src/app/Components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/Routes.tsx","webpack://application-services-ui/./src/app/utils/auth/AuthContext.tsx","webpack://application-services-ui/./src/openapi/base.ts","webpack://application-services-ui/./src/openapi/api.ts","webpack://application-services-ui/./src/app/ResourcesPage/QuickStartDrawerFederated.tsx","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/KafkaPage/KafkaPage.tsx","webpack://application-services-ui/./src/app/KasPage/KasPage.tsx","webpack://application-services-ui/./src/app/ServiceAccountsPage/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/ResourcesPage/ResourcesPage.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/keycloakAuth.ts","webpack://application-services-ui/./src/AppEntry.tsx","webpack://application-services-ui/./src/bootstrap.tsx"],"names":["___CSS_LOADER_EXPORT___","i","push","module","id","registry","init","Error","ReducerRegistry","middleware","options","InsightsContext","useDocumentTitle","title","originalTitle","document","NotFound","PageSection","EmptyState","variant","EmptyStateIcon","icon","Title","headingLevel","size","EmptyStateBody","history","Button","onClick","Loading","Bullseye","Spinner","ConfigContext","undefined","ConfigProvider","configUrl","children","config","setConfig","controller","AbortController","signal","console","log","fetch","json","newConfig","abort","Provider","value","getEntryPoint","baseUrl","fileName","scope","Promise","endsWith","url","then","fedMods","s","entry","path","startsWith","FederatedModuleContext","FederatedModuleProvider","useContext","federatedModules","routeFocusTimer","FederatedModule","render","fallback","federatedModuleContext","useState","setUrl","useEffect","basePath","entryPoint","ready","setReady","failed","setFailed","element","createElement","src","type","async","onload","onerror","error","head","appendChild","removeChild","useDynamicScript","Component","window","default","get","factory","Module","loadComponent","AuthContext","getToken","resolve","BASE_PATH","replace","configuration","axios","this","field","msg","name","DefaultApiAxiosParamCreator","createKafka","kafkaRequestPayload","RequiredError","localVarUrlObj","baseOptions","localVarRequestOptions","method","localVarHeaderParameter","localVarQueryParameter","accessToken","query","search","headersFromBaseOptions","headers","needsSerialization","data","JSON","stringify","createServiceAccount","serviceAccountRequest","deleteKafkaById","localVarPath","encodeURIComponent","String","deleteServiceAccount","getKafkaById","getMetricsByKafkaId","duration","interval","filters","listCloudProviderRegions","page","listCloudProviders","listKafkas","orderBy","listServiceAccounts","resetServiceAccountCreds","DefaultApiFp","localVarAxiosArgs","axiosRequestArgs","request","BaseAPI","QuickStartDrawerFederated","guides","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","rest","routeProps","PageNotFound","component","flattenedRoutes","insights","showCreateTopic","setShowCreateTopic","adminServerUrl","setAdminServerUrl","parts","location","pathname","split","length","chrome","auth","DefaultApi","controlPlane","serviceApiBasePath","kafka","bootstrapServerHost","onCreateTopic","onCloseCreateTopic","createTopicPage","FederatedTopics","apiBasePath","topicListPage","exact","label","onConnectInstance","event","getConnectToInstancePath","createHref","dispatch","useDispatch","addAlert","message","getUsername","getUser","user","identity","username","OpenshiftStreamsFederated","onConnectToInstance","PageSectionVariants","p","QuickStartCatalogFederated","reduce","flattened","route","routes","AppRoutes","LastLocationProvider","map","idx","key","register","notifications","connect","defaultAppId","appId","identifyApp","on","includes","navId","store","getStore","release","pathName","shift","keycloak","REFRESH_TOKEN_COOKIE_NAME","getKeycloakInstance","k","initOptions","responseMode","storedRefreshToken","refreshJWT","exp","Date","refreshToken","updateToken","onLoad","getValidAccessToken","token","AppWithKeycloak","dataPlane","authServerUrl","clientId","realm","setKeycloak","setLoadingKeycloak","loadingKeycloak","baseName","basename","root"],"mappings":"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","file":"738.ad3e8f33121b2c11930d.js","sourcesContent":["// Imports\nimport ___CSS_LOADER_API_SOURCEMAP_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/cssWithMappingToString.js\";\nimport ___CSS_LOADER_API_IMPORT___ from \"../../node_modules/css-loader/dist/runtime/api.js\";\nimport ___CSS_LOADER_AT_RULE_IMPORT_0___ from \"-!../../node_modules/css-loader/dist/cjs.js!../../node_modules/@redhat-cloud-services/frontend-components-notifications/index.css\";\nvar ___CSS_LOADER_EXPORT___ = ___CSS_LOADER_API_IMPORT___(___CSS_LOADER_API_SOURCEMAP_IMPORT___);\n___CSS_LOADER_EXPORT___.i(___CSS_LOADER_AT_RULE_IMPORT_0___);\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \":root{--ins-color--orange: #ec7a08}button:focus{outline:none}\", \"\",{\"version\":3,\"sources\":[\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_variables.scss\",\"webpack://./node_modules/@redhat-cloud-services/frontend-components-utilities/files/Utilities/_helpers.scss\"],\"names\":[],\"mappings\":\"AAAA,MACI,4BAAA,CCDJ,aACI,YAAA\",\"sourcesContent\":[\":root {\\n    --ins-color--orange: #ec7a08;\\n}\\n\\n// Spacing\\n$ins-padding: var(--pf-global--spacer--lg);\\n$ins-margin: var(--pf-global--spacer--xl);\\n$ins-gutter: var(--pf-global--gutter);\\n\\n// Font Size\\n$ins-fontSize: var(--pf-global--FontSize--md);\\n$ins-fontSize--sm: var(--pf-global--FontSize--sm);\\n$ins-fontSize--lg: var(--pf-global--FontSize--lg);\\n$ins-fontSize--xl: var(--pf-global--FontSize--xl);\\n\\n// Borders\\n$ins-borderRadius: var(--pf-global--BorderRadius--sm);\\n$ins-borderRadius--round: var(--pf-global--BorderRadius--lg);\\n\\n// Grid breakpoints\\n$ins-break--xs: var(--pf-global--breakpoint--xs);\\n$ins-break--sm: var(--pf-global--breakpoint--sm);\\n$ins-break--md: var(--pf-global--breakpoint--md);\\n$ins-break--lg: var(--pf-global--breakpoint--lg);\\n$ins-break--xl: var(--pf-global--breakpoint--xl);\\n\\n// Colors\\n$ins-color--red: var(--pf-global--danger-color--100);\\n$ins-color--critical: $ins-color--red;\\n\\n$ins-color--orange: var(--ins-color--orange);\\n$ins-color--high: $ins-color--orange;\\n\\n$ins-color--yellow: var(--pf-global--warning-color--100);\\n$ins-color--medium: $ins-color--yellow;\\n\\n$ins-color--green: var(--pf-global--success-color--100);\\n$ins-color--low: $ins-color--green;\\n\\n$ins-color--blue: var(--pf-global--info-color--100);\\n\\n$ins-color--gray: var(--pf-global--disabled-color--200);\",\"button:focus {\\n    outline:none;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n// Exports\nexport default ___CSS_LOADER_EXPORT___;\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\n\nlet registry;\n\nexport function init (...middleware) {\n    if (registry) {\n        throw new Error('store already initialized');\n    }\n\n    registry = new ReducerRegistry({}, [\n        promiseMiddleware,\n        ...middleware\n    ]);\n\n    //If you want to register all of your reducers, this is good place.\n    /*\n     *  registry.register({\n     *    someName: (state, action) => ({...state})\n     *  });\n     */\n    return registry;\n}\n\nexport function getStore () {\n    return registry.getStore();\n}\n\nexport function register (...args) {\n    return registry.register(...args);\n}\n","import api from \"!../../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\";\n            import content from \"!!../../node_modules/css-loader/dist/cjs.js!../../node_modules/sass-loader/dist/cjs.js!./App.scss\";\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nexport default content.locals || {};","import React from 'react';\n\nexport type InsightsType = {\n  chrome: {\n    init: () => void;\n    identifyApp: (appId: string) => Promise<void>;\n    getApp: () => string;\n    getBundle: () => string;\n    getEnvironment: () => 'ci' | 'qa' | 'prod' | 'stage';\n    on: (type: string, callback: ((event: any) => void)) => void;\n    auth: {\n      getToken(): Promise<string>;\n      getUser(): Promise<UserType>;\n    };\n    isProd: boolean;\n    isBeta: () => boolean;\n    isPenTest: () => boolean;\n  };\n};\n\nexport type UserType = {\n  entitlements: {\n    [key: string]: {\n      is_entitled: boolean;\n      is_trial: boolean;\n    }\n  },\n  identity: IdentityType;\n};\n\nexport type IdentityType = {\n  account_number: string;\n  type: string;\n  internal: {\n    org_id: string;\n    account_id: string;\n  }\n  user: {\n    username: string;\n    email: string;\n    first_name: string;\n    last_name: string;\n    is_active: boolean;\n  }\n};\n\nexport const InsightsContext = React.createContext({} as InsightsType);\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFound: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFound };\n","import React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner/>\n  </Bullseye>\n);\n","import React from \"react\";\n\nexport type Config = {\n  controlPlane: {\n    serviceApiBasePath: string\n  }\n  dataPlane: {\n    keycloak: {\n      authServerUrl: string,\n      clientId: string,\n      realm: string\n    }\n  }\n  federatedModules: {\n    strimziUI: FederatedModuleConfig\n    mkUiFrontend: FederatedModuleConfig\n    guides: FederatedModuleConfig\n  }\n};\n\nexport type FederatedModuleConfig = {\n  basePath: string\n  entryPoint: string\n}\n\nexport const ConfigContext = React.createContext<Config | undefined>(undefined);\n\nexport type ConfigProviderProps = {\n  configUrl: string\n}\n\nexport const ConfigProvider: React.FunctionComponent<ConfigProviderProps> = ({ configUrl, children }) => {\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  React.useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async () => {\n      console.log('Loading config');\n      const response = await fetch(configUrl, { signal });\n      const newConfig = await response.json();\n      setConfig(newConfig);\n      console.log('Done loading config', newConfig);\n    })();\n\n    return () => controller.abort();\n  }, [configUrl]);\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import React from \"react\";\nimport {file} from \"@babel/types\";\n\nexport type Utils = {\n  [key: string]: {\n    entry: string[],\n    modules: string[]\n  };\n};\n\n\nexport const getEntryPoint = async (baseUrl: string, fileName: string, scope: string): Promise<string | undefined> => {\n  if (fileName.endsWith(\"json\") ){\n    const url = `${baseUrl}/${fileName}`;\n    try {\n      const response = await fetch(url);\n      return await response.json().then(json => json as Utils).then(fedMods => fedMods[scope]).then(s => s.entry[0]).then(path => {\n        if (path.startsWith(baseUrl)) {\n          return path;\n        }\n        return `${baseUrl}/${path}`\n      });\n    } catch (error) {\n      return undefined;\n    }\n  } else {\n    return `${baseUrl}/${fileName}`;\n  }\n}\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, {ReactNode, useContext, useEffect, useState} from 'react';\nimport { Loading } from '../Loading/Loading';\nimport { ConfigContext, FederatedModuleConfig } from \"@app/Config/Config\";\nimport {getEntryPoint} from \"@app/Components/FederatedModule/utils\";\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nconst FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({\n                                                                   children\n                                                                 }) => {\n\n  const config = useContext(ConfigContext);\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope]; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await window[scope].get(module);\n    const Module = factory();\n    console.log(`${Module} loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = ({ url }) => {\n\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    if (!url) {\n      setFailed(true);\n      return;\n    }\n\n    const element = document.createElement('script');\n\n    element.src = url;\n    element.type = 'text/javascript';\n    element.async = true;\n\n    setReady(false);\n    setFailed(false);\n\n    element.onload = () => {\n      console.log(`Dynamic federated module Loaded: ${url}`);\n      setReady(true);\n    };\n\n    element.onerror = () => {\n      console.error(`Dynamic federated module Error: ${url}`);\n      setReady(false);\n      setFailed(true);\n    };\n\n    document.head.appendChild(element);\n\n    return () => {\n      console.log(`Dynamic federated module Removed: ${url}`);\n      document.head.removeChild(element);\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: any;\n}\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [url, setUrl] = useState<string | undefined>();\n\n  useEffect(() => {\n    const fetchUrl = async () => {\n      const entryPoint = await getEntryPoint(federatedModuleContext[scope].basePath, federatedModuleContext[scope].entryPoint, scope);\n      setUrl(entryPoint);\n    }\n    fetchUrl();\n  }, [scope, federatedModuleContext]);\n\n  const { ready, failed } = useDynamicScript({ url });\n\n  if (!ready || failed) {\n    if (failed && fallback) {\n      return fallback;\n    }\n    return null;\n  }\n\n  const Component = React.lazy(\n    loadComponent(scope, module)\n  );\n\n  return (\n    <React.Suspense fallback={<Loading/>}>\n      {render(Component)}\n    </React.Suspense>\n  );\n}\n\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { NotFound } from '@app/NotFound/NotFound';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { KasPage } from \"@app/KasPage/KasPage\";\nimport { KafkaPage } from \"@app/KafkaPage/KafkaPage\";\nimport { QuickStartDrawerFederated } from \"@app/ResourcesPage/QuickStartDrawerFederated\";\nimport { ResourcesPage } from \"@app/ResourcesPage/ResourcesPage\";\nimport {OverviewPage} from \"@app/Overview/OverviewPage\";\nimport {APIManagementPage} from \"@app/APIManagement/APIManagementPage\";\nimport {DataSciencePage} from \"@app/DataScience/DataSciencePage\";\nimport {ServiceAccountsPage} from \"@app/ServiceAccountsPage/ServiceAccountsPage\";\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: KafkaPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n  }\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return (\n      <QuickStartDrawerFederated>\n        <Component {...rest} {...routeProps} />\n      </QuickStartDrawerFederated>\n      );\n  }\n\n  return <Route render={routeWithTitle}/>;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFound}/>;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <Switch>\n      {flattenedRoutes.map(({ path, exact, component, title, isAsync }, idx) => (\n        <RouteWithTitleUpdates\n          path={path}\n          exact={exact}\n          component={component}\n          key={idx}\n          title={title}\n          isAsync={isAsync}\n        />\n      ))}\n      <PageNotFound title=\"404 Page Not Found\"/>\n    </Switch>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","import React from 'react';\n\nexport interface IAuthContext {\n  getToken: () => Promise<string>\n}\n\nexport const AuthContext = React.createContext<IAuthContext>({\n    getToken: () => Promise.resolve('')\n  }\n);\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","// tslint:disable\n/**\n * Managed Service API\n * Managed Service API\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport * as globalImportUrl from 'url';\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * Cloud provider.\n * @export\n * @interface CloudProvider\n */\nexport interface CloudProvider {\n    /**\n     * Indicates the type of this object. Will be \\'CloudProvider\\' link.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    id?: string;\n    /**\n     * Name of the cloud provider for display purposes.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    display_name?: string;\n    /**\n     * Human friendly identifier of the cloud provider, for example `aws`.\n     * @type {string}\n     * @memberof CloudProvider\n     */\n    name?: string;\n    /**\n     * Whether the cloud provider is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudProvider\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudProviderList\n */\nexport interface CloudProviderList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudProviderList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudProviderList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderList\n     */\n    items: Array<CloudProvider>;\n}\n/**\n * \n * @export\n * @interface CloudProviderListAllOf\n */\nexport interface CloudProviderListAllOf {\n    /**\n     * \n     * @type {Array<CloudProvider>}\n     * @memberof CloudProviderListAllOf\n     */\n    items?: Array<CloudProvider>;\n}\n/**\n * Description of a region of a cloud provider.\n * @export\n * @interface CloudRegion\n */\nexport interface CloudRegion {\n    /**\n     * Indicates the type of this object. Will be \\'CloudRegion\\'.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    kind?: string;\n    /**\n     * Unique identifier of the object.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    id?: string;\n    /**\n     * Name of the region for display purposes, for example `N. Virginia`.\n     * @type {string}\n     * @memberof CloudRegion\n     */\n    display_name?: string;\n    /**\n     * Whether the region is enabled for deploying an OSD cluster.\n     * @type {boolean}\n     * @memberof CloudRegion\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface CloudRegionList\n */\nexport interface CloudRegionList {\n    /**\n     * \n     * @type {string}\n     * @memberof CloudRegionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof CloudRegionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionList\n     */\n    items: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface CloudRegionListAllOf\n */\nexport interface CloudRegionListAllOf {\n    /**\n     * \n     * @type {Array<CloudRegion>}\n     * @memberof CloudRegionListAllOf\n     */\n    items?: Array<CloudRegion>;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface KafkaRequest\n */\nexport interface KafkaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequest\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequest\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestAllOf\n */\nexport interface KafkaRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    cloud_provider?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof KafkaRequestAllOf\n     */\n    multi_az?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    region?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    owner?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    bootstrapServerHost?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestAllOf\n     */\n    failed_reason?: string;\n}\n/**\n * \n * @export\n * @interface KafkaRequestList\n */\nexport interface KafkaRequestList {\n    /**\n     * \n     * @type {string}\n     * @memberof KafkaRequestList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof KafkaRequestList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestList\n     */\n    items: Array<KafkaRequest>;\n}\n/**\n * \n * @export\n * @interface KafkaRequestListAllOf\n */\nexport interface KafkaRequestListAllOf {\n    /**\n     * \n     * @type {Array<KafkaRequest>}\n     * @memberof KafkaRequestListAllOf\n     */\n    items?: Array<KafkaRequest>;\n}\n/**\n * Schema for the request body sent to /kafkas POST\n * @export\n * @interface KafkaRequestPayload\n */\nexport interface KafkaRequestPayload {\n    /**\n     * The cloud provider where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    cloud_provider?: string;\n    /**\n     * Set this to true to configure the Kafka cluster to be multiAZ\n     * @type {boolean}\n     * @memberof KafkaRequestPayload\n     */\n    multi_az?: boolean;\n    /**\n     * The name of the Kafka cluster. It must consist of lower-case alphanumeric characters or \\'-\\', start with an alphabetic character, and end with an alphanumeric character, and can not be longer than 32 characters.\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    name: string;\n    /**\n     * The region where the Kafka cluster will be created in\n     * @type {string}\n     * @memberof KafkaRequestPayload\n     */\n    region?: string;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {{ [key: string]: string; }}\n     * @memberof Metric\n     */\n    metric?: { [key: string]: string; };\n    /**\n     * \n     * @type {Array<Values>}\n     * @memberof Metric\n     */\n    values?: Array<Values>;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList extends MetricsListAllOf {\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsListAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n}\n/**\n * Service Account created in MAS-SSO for the Kafka Cluster for authentication\n * @export\n * @interface ServiceAccount\n */\nexport interface ServiceAccount {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccount\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountAllOf\n */\nexport interface ServiceAccountAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountAllOf\n     */\n    clientSecret?: string;\n}\n/**\n * \n * @export\n * @interface ServiceAccountList\n */\nexport interface ServiceAccountList extends ServiceAccountListAllOf {\n}\n/**\n * \n * @export\n * @interface ServiceAccountListAllOf\n */\nexport interface ServiceAccountListAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListAllOf\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<ServiceAccountListItem>}\n     * @memberof ServiceAccountListAllOf\n     */\n    items?: Array<ServiceAccountListItem>;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItem\n */\nexport interface ServiceAccountListItem {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItem\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItem\n     */\n    description?: AnyType;\n}\n/**\n * \n * @export\n * @interface ServiceAccountListItemAllOf\n */\nexport interface ServiceAccountListItemAllOf {\n    /**\n     * server generated unique id of the service account\n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    clientID?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {AnyType}\n     * @memberof ServiceAccountListItemAllOf\n     */\n    description?: AnyType;\n}\n/**\n * Schema for the request to create a service account\n * @export\n * @interface ServiceAccountRequest\n */\nexport interface ServiceAccountRequest {\n    /**\n     * The name of the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    name: string;\n    /**\n     * A description for the service account\n     * @type {string}\n     * @memberof ServiceAccountRequest\n     */\n    description?: string;\n}\n/**\n * \n * @export\n * @interface Values\n */\nexport interface Values {\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Timestamp?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof Values\n     */\n    Value: number;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka: async (async: boolean, kafkaRequestPayload: KafkaRequestPayload, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling createKafka.');\n            }\n            // verify required parameter 'kafkaRequestPayload' is not null or undefined\n            if (kafkaRequestPayload === null || kafkaRequestPayload === undefined) {\n                throw new RequiredError('kafkaRequestPayload','Required parameter kafkaRequestPayload was null or undefined when calling createKafka.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof kafkaRequestPayload !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(kafkaRequestPayload !== undefined ? kafkaRequestPayload : {}) : (kafkaRequestPayload || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount: async (serviceAccountRequest: ServiceAccountRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'serviceAccountRequest' is not null or undefined\n            if (serviceAccountRequest === null || serviceAccountRequest === undefined) {\n                throw new RequiredError('serviceAccountRequest','Required parameter serviceAccountRequest was null or undefined when calling createServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            const needsSerialization = (typeof serviceAccountRequest !== \"string\") || localVarRequestOptions.headers['Content-Type'] === 'application/json';\n            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(serviceAccountRequest !== undefined ? serviceAccountRequest : {}) : (serviceAccountRequest || \"\");\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById: async (id: string, async: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteKafkaById.');\n            }\n            // verify required parameter 'async' is not null or undefined\n            if (async === null || async === undefined) {\n                throw new RequiredError('async','Required parameter async was null or undefined when calling deleteKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (async !== undefined) {\n                localVarQueryParameter['async'] = async;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteServiceAccount.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getKafkaById.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId: async (id: string, duration: number, interval: number, filters?: Array<string>, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'duration' is not null or undefined\n            if (duration === null || duration === undefined) {\n                throw new RequiredError('duration','Required parameter duration was null or undefined when calling getMetricsByKafkaId.');\n            }\n            // verify required parameter 'interval' is not null or undefined\n            if (interval === null || interval === undefined) {\n                throw new RequiredError('interval','Required parameter interval was null or undefined when calling getMetricsByKafkaId.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/kafkas/{id}/metrics`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (duration !== undefined) {\n                localVarQueryParameter['duration'] = duration;\n            }\n\n            if (interval !== undefined) {\n                localVarQueryParameter['interval'] = interval;\n            }\n\n            if (filters) {\n                localVarQueryParameter['filters'] = filters;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions: async (id: string, page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling listCloudProviderRegions.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers/{id}/regions`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders: async (page?: string, size?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/cloud_providers`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas: async (page?: string, size?: string, orderBy?: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/kafkas`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts`;\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            if (id === null || id === undefined) {\n                throw new RequiredError('id','Required parameter id was null or undefined when calling resetServiceAccountCreds.');\n            }\n            const localVarPath = `/api/managed-services-api/v1/serviceaccounts/{id}/reset-credentials`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            if (configuration && configuration.accessToken) {\n                const accessToken = typeof configuration.accessToken === 'function'\n                    ? configuration.accessToken()\n                    : configuration.accessToken;\n                localVarHeaderParameter[\"Authorization\"] = \"Bearer \" + accessToken;\n            }\n\n\n    \n            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};\n            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943\n            delete localVarUrlObj.search;\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: globalImportUrl.format(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createKafka(async, kafkaRequestPayload, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createServiceAccount(serviceAccountRequest, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteKafkaById(id: string, async: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteKafkaById(id, async, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async deleteServiceAccount(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteServiceAccount(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getKafkaById(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequest>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getKafkaById(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMetricsByKafkaId(id, duration, interval, filters, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudRegionList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviderRegions(id, page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listCloudProviders(page?: string, size?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CloudProviderList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listCloudProviders(page, size, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<KafkaRequestList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listKafkas(page, size, orderBy, search, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async listServiceAccounts(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccountList>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).listServiceAccounts(options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async resetServiceAccountCreds(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ServiceAccount>> {\n            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).resetServiceAccountCreds(id, options);\n            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};\n                return axios.request(axiosRequestArgs);\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    return {\n        /**\n         * \n         * @summary Create a new kafka Request\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a service account\n         * @param {ServiceAccountRequest} serviceAccountRequest service account request\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a kafka request by id\n         * @param {string} id The id of record\n         * @param {boolean} async Perform the action in an asynchronous manner\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteKafkaById(id, async, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        deleteServiceAccount(id: string, options?: any): AxiosPromise<Error> {\n            return DefaultApiFp(configuration).deleteServiceAccount(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a kafka request by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest> {\n            return DefaultApiFp(configuration).getKafkaById(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get metrics by kafka id.\n         * @param {string} id The id of record\n         * @param {number} duration The length of time in minutes over which to return the metrics.\n         * @param {number} interval The interval in seconds between data points.\n         * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList> {\n            return DefaultApiFp(configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported regions of the supported cloud provider.\n         * @param {string} id The id of record\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList> {\n            return DefaultApiFp(configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Retrieves the list of supported cloud providers.\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList> {\n            return DefaultApiFp(configuration).listCloudProviders(page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of Kafka requests\n         * @param {string} [page] Page index\n         * @param {string} [size] Number of items in each page\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n         * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList> {\n            return DefaultApiFp(configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary List service accounts\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList> {\n            return DefaultApiFp(configuration).listServiceAccounts(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary reset credentials for the service account\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount> {\n            return DefaultApiFp(configuration).resetServiceAccountCreds(id, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any): AxiosPromise<ServiceAccount>;\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteKafkaById(id: string, async: boolean, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    deleteServiceAccount(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getKafkaById(id: string, options?: any): AxiosPromise<KafkaRequest>;\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviderRegions(id: string, page?: string, size?: string, options?: any): AxiosPromise<CloudRegionList>;\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listCloudProviders(page?: string, size?: string, options?: any): AxiosPromise<CloudProviderList>;\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any): AxiosPromise<KafkaRequestList>;\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    listServiceAccounts(options?: any): AxiosPromise<ServiceAccountList>;\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    resetServiceAccountCreds(id: string, options?: any): AxiosPromise<ServiceAccount>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Create a new kafka Request\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {KafkaRequestPayload} kafkaRequestPayload Kafka data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createKafka(async: boolean, kafkaRequestPayload: KafkaRequestPayload, options?: any) {\n        return DefaultApiFp(this.configuration).createKafka(async, kafkaRequestPayload, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a service account\n     * @param {ServiceAccountRequest} serviceAccountRequest service account request\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public createServiceAccount(serviceAccountRequest: ServiceAccountRequest, options?: any) {\n        return DefaultApiFp(this.configuration).createServiceAccount(serviceAccountRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a kafka request by id\n     * @param {string} id The id of record\n     * @param {boolean} async Perform the action in an asynchronous manner\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteKafkaById(id: string, async: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).deleteKafkaById(id, async, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public deleteServiceAccount(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).deleteServiceAccount(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a kafka request by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getKafkaById(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).getKafkaById(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get metrics by kafka id.\n     * @param {string} id The id of record\n     * @param {number} duration The length of time in minutes over which to return the metrics.\n     * @param {number} interval The interval in seconds between data points.\n     * @param {Array<string>} [filters] List of metrics to fetch. Fetch all metrics when empty. List entries are kafka internal metric names.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public getMetricsByKafkaId(id: string, duration: number, interval: number, filters?: Array<string>, options?: any) {\n        return DefaultApiFp(this.configuration).getMetricsByKafkaId(id, duration, interval, filters, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported regions of the supported cloud provider.\n     * @param {string} id The id of record\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviderRegions(id: string, page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviderRegions(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Retrieves the list of supported cloud providers.\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listCloudProviders(page?: string, size?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listCloudProviders(page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of Kafka requests\n     * @param {string} [page] Page index\n     * @param {string} [size] Number of items in each page\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement. Each query can be ordered by any of the kafkaRequests fields. For example, in order to retrieve all kafkas ordered by their name:  &#x60;&#x60;&#x60;sql name asc &#x60;&#x60;&#x60;  Or in order to retrieve all kafkas ordered by their name _and_ created date:  &#x60;&#x60;&#x60;sql name asc, created_at asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then the results will be ordered by name.\n     * @param {string} [search] Search criteria.  The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement. Allowed fields in the search are: cloud_provider, name, owner, region and status. Allowed comparators are &#x60;&lt;&gt;&#x60;, &#x60;&#x3D;&#x60; or &#x60;LIKE&#x60;. Allowed joins are &#x60;AND&#x60; and &#x60;OR&#x60;, however there is a limit of max 10 joins in the search query.  Examples:  To retrieve kafka request with name equal &#x60;my-kafka&#x60; and region equal &#x60;aws&#x60;, the value should be:  &#x60;&#x60;&#x60; name &#x3D; my-kafka and cloud_provider &#x3D; aws &#x60;&#x60;&#x60;  To retrieve kafka request with its name starting with &#x60;my&#x60;, the value should be:  &#x60;&#x60;&#x60; name like my%25 &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the kafkas that the user has permission to see will be returned.  Note. If the query is invalid, an error will be returned \n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listKafkas(page?: string, size?: string, orderBy?: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).listKafkas(page, size, orderBy, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary List service accounts\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public listServiceAccounts(options?: any) {\n        return DefaultApiFp(this.configuration).listServiceAccounts(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary reset credentials for the service account\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public resetServiceAccountCreds(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).resetServiceAccountCreds(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n}\n\n\n","import { FederatedModule } from \"@app/Components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent, useContext } from \"react\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\n\nexport const QuickStartDrawerFederated: FunctionComponent = ({ children }) => {\n\n  const config = useContext(ConfigContext);\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"guides\"\n      module=\"./QuickStartDrawer\"\n      fallback={children}\n      render={(QuickStartDrawerFederated) => (\n        <QuickStartDrawerFederated basePath={config?.federatedModules.guides.basePath}>\n          {children}\n        </QuickStartDrawerFederated>\n      )}/>)\n};\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","import React, { useContext, useEffect, useState } from 'react';\nimport { InsightsContext } from \"@app/utils\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { FederatedModule } from \"../Components/FederatedModule/FederatedModule\";\nimport { AuthContext } from \"@app/utils/auth/AuthContext\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport { DefaultApi } from \"../../openapi\";\n\nexport const KafkaPage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n  const { getToken } = useContext(AuthContext);\n  const [showCreateTopic, setShowCreateTopic] = useState(false);\n  const [adminServerUrl, setAdminServerUrl] = useState<undefined | string>();\n\n  // TODO useParams is not working?\n  const pathname = window.location.pathname.endsWith(\"/\") ? window.location.pathname : `${window.location.pathname}/`;\n  const parts = pathname.split(\"/\");\n  const id = parts[parts.length - 2];\n\n  const getAdminApiUrl = async () => {\n    const accessToken = await insights.chrome.auth.getToken();\n    const apisService = new DefaultApi({\n      accessToken,\n      basePath: config?.controlPlane.serviceApiBasePath || '',\n    });\n\n    const kafka = await apisService.getKafkaById(id);\n    setAdminServerUrl(`https://admin-server-${kafka.data.bootstrapServerHost}/rest`);\n  }\n\n  useEffect(() => {\n    getAdminApiUrl();\n  },[insights, config]);\n\n  if (config === undefined || adminServerUrl === undefined) {\n    return <Loading/>\n  }\n\n  const onCreateTopic = () => {\n    setShowCreateTopic(true);\n  }\n\n  const onCloseCreateTopic = () => {\n    console.log(\"on close\");\n    setShowCreateTopic(false);\n  }\n\n  const createTopicPage = <FederatedModule\n    scope=\"kafka\"\n    module=\"./Panels/CreateTopic\"\n    render={(FederatedTopics) => <FederatedTopics\n      getToken={getToken}\n      apiBasePath={adminServerUrl}\n      onCloseCreateTopic={onCloseCreateTopic}\n    />}\n  />;\n\n  const topicListPage = <FederatedModule\n    scope=\"kafka\"\n    module=\"./Panels/Topics\"\n    render={(FederatedTopics) => <FederatedTopics\n      getToken={getToken}\n      apiBasePath={adminServerUrl}\n      onCreateTopic={onCreateTopic}\n    />}\n  />;\n\n  if (showCreateTopic) {\n    return createTopicPage;\n  } else {\n    return topicListPage;\n  }\n}\n","import React, { useContext } from 'react';\nimport { useHistory } from 'react-router';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { useDispatch } from 'react-redux';\nimport { addNotification } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AlertVariant } from \"@patternfly/react-core\";\nimport { FederatedModule } from \"../Components/FederatedModule/FederatedModule\";\nimport { ConfigContext } from \"@app/Config/Config\";\nimport { Loading } from \"@app/Components/Loading/Loading\";\n\nexport const KasPage: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const config = useContext(ConfigContext);\n\n  const history = useHistory();\n\n  const onConnectInstance = async (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n    history.push(`/streams/kafkas/${event.id}`);\n  };\n\n  const getConnectToInstancePath = (event) => {\n    if (event.id === undefined) {\n      throw new Error();\n    }\n    return history.createHref({ pathname: `/streams/kafkas/${event.id}` });\n  }\n\n  const dispatch = useDispatch();\n\n  const addAlert = (message: string, variant?: AlertVariant) => {\n    dispatch(\n      addNotification({\n        variant: variant,\n        title: message\n      })\n    );\n\n  };\n\n  if (config === undefined) {\n    return <Loading/>\n  }\n\n  const getUsername = () => insights.chrome.auth.getUser().then(user => user.identity.user.username);\n\n  const osStreams = (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      render={(OpenshiftStreamsFederated) => {\n        return (\n          <OpenshiftStreamsFederated\n            getToken={insights.chrome.auth.getToken}\n            getUsername={getUsername}\n            onConnectToInstance={onConnectInstance}\n            getConnectToInstancePath={getConnectToInstancePath}\n            addAlert={addAlert}\n            basePath={config?.controlPlane.serviceApiBasePath}\n          />\n        );\n      }}\n    />\n  );\n\n  return osStreams;\n};\n","import React from 'react';\nimport LoremIpsum from \"react-lorem-ipsum\";\nimport {PageSection, PageSectionVariants} from \"@patternfly/react-core\";\n\nexport const ServiceAccountsPage: React.FunctionComponent = () => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <h1>Service Accounts</h1>\n      <LoremIpsum p={2}/>\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport LoremIpsum from \"react-lorem-ipsum\";\nimport {PageSection, PageSectionVariants} from \"@patternfly/react-core\";\n\nexport const OverviewPage: React.FunctionComponent = () => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <h1>Overview</h1>\n      <LoremIpsum p={2}/>\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport LoremIpsum from \"react-lorem-ipsum\";\nimport {PageSection, PageSectionVariants} from \"@patternfly/react-core\";\n\nexport const APIManagementPage: React.FunctionComponent = () => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <h1>API Management</h1>\n      <LoremIpsum p={2}/>\n    </PageSection>\n  );\n};\n","import React from 'react';\nimport { Loading } from \"@app/Components/Loading/Loading\";\nimport LoremIpsum from \"react-lorem-ipsum\";\nimport {PageSection, PageSectionVariants} from \"@patternfly/react-core\";\n\nexport const DataSciencePage: React.FunctionComponent = () => {\n  return (\n    <PageSection variant={PageSectionVariants.light}>\n      <h1>Data Science</h1>\n      <LoremIpsum p={2}/>\n    </PageSection>\n  );\n};\n","import { FederatedModule } from \"@app/Components/FederatedModule/FederatedModule\";\nimport React, { FunctionComponent } from 'react';\n\nexport const ResourcesPage: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated />}\n  />\n);\n","import React, { useContext, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect, Provider } from 'react-redux';\nimport './App.scss';\nimport { getRegistry } from '@redhat-cloud-services/frontend-components-utilities/files/Registry';\nimport { notifications, NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { AppRoutes } from \"@app/Routes\";\nimport { FederatedModuleProvider } from \"./Components/FederatedModule/FederatedModule\";\n\nconst registry = getRegistry();\nregistry.register({ notifications });\n\nexport const App: React.FunctionComponent = () => {\n\n  const insights = useContext(InsightsContext);\n  const history = useHistory();\n\n  const getAppId = () => {\n\n    const defaultAppId = \"overview\";\n\n    const parts = history.location.pathname.split(\"/\");\n    if (parts.length > 1) {\n      if (parts[1] === \"\") {\n        return defaultAppId\n      } else {\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  }\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    insights.chrome.on('APP_NAVIGATION', event => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n  });\n\n  return (\n    <Provider store={registry.getStore()}>\n      <FederatedModuleProvider>\n        <NotificationsPortal/>\n        <AppRoutes/>\n      </FederatedModuleProvider>\n    </Provider>\n  );\n}\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\n\nlet keycloak: KeycloakInstance | undefined;\n\nconst REFRESH_TOKEN_COOKIE_NAME = \"masSSORefreshToken\";\nconst MIN_VALIDITY = 50;\n\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig) => {\n  if (!keycloak) {\n    keycloak = await init(config);\n  }\n  return keycloak;\n}\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const init = async (config: KeycloakConfig): Promise<KeycloakInstance | undefined> => {\n  const k = Keycloak(config);\n\n  const initOptions = {\n    responseMode: \"query\",\n  } as KeycloakInitOptions;\n\n  const storedRefreshToken = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  if (storedRefreshToken) {\n    try {\n      refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken);\n    } catch {\n      console.log(\"unable to parse refresh token from cookie\")\n      Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n    }\n  }\n\n  if (refreshJWT && refreshJWT.exp) {\n    // if the JWT exists, and has an expiry\n    const now = getUnixTime(new Date());\n    if (now < refreshJWT.exp + MIN_VALIDITY) {\n      // Use the refresh token if it's still valid (make sure it's valid for at least MIN_VALIDITY)\n      try {\n        // Perform a keycloak init without a login\n        await k.init(initOptions);\n        // Set the saved refresh token into Keycloak\n        k.refreshToken = storedRefreshToken\n        // Then force a token refresh to check if the refresh token is actually valid\n        k.updateToken(-1);\n        if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n          // If we get back a refresh token that has changed, then save it\n          Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n        }\n        return k;\n      } catch {\n        // If any of the methods above error, then perform a login\n        console.log(\"refresh token is not valid, performing full login\");\n        Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n      }\n    }\n  }\n\n  initOptions.onLoad = \"login-required\";\n  await k.init(initOptions);\n  if (k.refreshToken && k.refreshToken !== storedRefreshToken) {\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, k.refreshToken);\n  }\n  return k;\n\n}\n\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getValidAccessToken = async (): Promise<string> => {\n  await keycloak?.updateToken(MIN_VALIDITY);\n  if (!keycloak?.token) {\n    throw new Error(\"No token from keycloak!\");\n  }\n  if (keycloak?.refreshToken) {\n    // Save the most recent refresh token\n    Cookies.set(REFRESH_TOKEN_COOKIE_NAME, keycloak?.refreshToken);\n  }\n  return keycloak?.token;\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param keycloak the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (keycloak: Keycloak.KeycloakInstance | undefined) => {\n  if (keycloak) {\n    await keycloak.logout();\n  }\n}\n","import React, { useContext, useState } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport { init } from '@app/store';\nimport App from '@app/App';\nimport logger from 'redux-logger';\nimport getBaseName from '@app/utils/getBaseName';\nimport { InsightsContext } from \"@app/utils/insights\";\nimport { Loading } from \"./app/Components/Loading/Loading\";\nimport { ConfigContext, ConfigProvider } from \"@app/Config/Config\";\nimport { KeycloakInstance } from \"keycloak-js\";\nimport { AuthContext, IAuthContext } from \"@app/utils/auth/AuthContext\";\nimport { getKeycloakInstance, getValidAccessToken } from \"@app/utils/keycloakAuth\";\n\ndeclare const __webpack_public_path__: string;\n\nconst AppWithKeycloak: React.FunctionComponent = () => {\n\n  const config = useContext(ConfigContext)\n\n  React.useEffect(() => {\n    if (config != undefined) {\n      const loadToken = async () => {\n        const keycloak = await getKeycloakInstance ({\n          url: config.dataPlane.keycloak.authServerUrl,\n          clientId: config.dataPlane.keycloak.clientId,\n          realm: config.dataPlane.keycloak.realm\n        });\n        setKeycloak(keycloak);\n        setLoadingKeycloak(false);\n      }\n      loadToken();\n    }\n  }, [config]);\n\n  const [keycloak, setKeycloak] = useState<KeycloakInstance | undefined>(undefined);\n  const [loadingKeycloak, setLoadingKeycloak] = useState(true);\n\n\n  if (loadingKeycloak || keycloak === undefined) {\n    return <Loading/>;\n  }\n\n  const getToken = () => {\n    return getValidAccessToken();\n\n  }\n\n  const baseName = getBaseName(window.location.pathname);\n  return (\n    <AuthContext.Provider value={{\n      getToken\n    } as IAuthContext}>\n      <Router basename={baseName}>\n        <App/>\n      </Router>\n    </AuthContext.Provider>\n  )\n}\n\n\nconst AppEntry: React.FunctionComponent = () => (\n  <Provider store={init(logger).getStore()}>\n    <ConfigProvider configUrl={`${__webpack_public_path__}config.json`}>\n      <InsightsContext.Provider value={window[\"insights\"]}>\n        <AppWithKeycloak/>\n      </InsightsContext.Provider>\n    </ConfigProvider>\n  </Provider>\n);\nexport default AppEntry;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport AppEntry from './AppEntry';\n\nconst root = document.getElementById('root');\n\nReactDOM.render(<AppEntry />, root);\n"],"sourceRoot":""}