{"version":3,"sources":["webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/Routes.tsx","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/Loading/Loading.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/DevelopmentPreview/DevelopmentPreview.tsx","webpack://application-services-ui/./src/app/components/Dashboard/Metrics.tsx","webpack://application-services-ui/./src/app/i18n/locale/index.ts","webpack://application-services-ui/./src/app/i18n/index.ts","webpack://application-services-ui/./src/app/providers/ConfigContextProvider.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/keycloakAuth.ts"],"names":["useDocumentTitle","title","originalTitle","document","routeFocusTimer","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","KafkaPage","KasPage","NotFoundPage","OverviewPage","QuickStartDrawerFederated","ResourcesPage","RulesPage","ServiceAccountsPage","CosPage","RedirectToStreamsKafkas","Redirect","to","routes","component","exact","label","path","basename","getBaseName","window","location","pathname","useA11yRouteChange","isAsync","lastNavigation","useLastLocation","setTimeout","mainContainer","getElementById","focus","clearTimeout","RouteWithTitleUpdates","Component","rest","getBasename","Route","render","routeProps","BasenameContext","value","PageNotFound","flattenedRoutes","reduce","flattened","route","AppRoutes","LastLocationProvider","fallback","Switch","map","idx","key","connect","insights","history","useHistory","useEffect","chrome","init","defaultAppId","parts","appId","split","length","identifyApp","unregister","on","event","push","includes","navId","FederatedModule","useIsMounted","isMounted","useRef","current","FederatedModuleContext","FederatedModuleProvider","children","config","useConfig","undefined","Provider","federatedModules","scope","module","federatedModuleContext","useState","moduleInfo","setModuleInfo","getModuleInfo","basePath","fallbackBasePath","url","ready","setReady","failed","setFailed","element","createElement","src","type","async","onload","console","log","onerror","error","head","appendChild","removeChild","useDynamicScript","entryPoint","default","get","factory","Module","loadComponent","AssetsContext","getPath","baseUrl","Promise","fetchModuleInfo","fetch","json","then","fedMods","s","entry","startsWith","Loading","Bullseye","Spinner","InstanceDrawer","isExpanded","onClose","kafkaDetail","activeTab","setIsOpenDeleteInstanceModal","isOpenDeleteInstanceModal","getConnectToRoutePath","routePath","Error","createHref","onConnectToRoute","masSso","tokenEndPointUrl","InstanceDrawerFederated","instanceDetail","DevelopmentPreview","t","useTranslation","id","className","style","height","Banner","isSticky","variant","Popover","hasAutoWidth","bodyContent","position","minWidth","maxWidth","Button","Metrics","kafkaId","MetricsFederated","resources","en","translation","appServicesi18n","use","initReactI18next","detection","order","caches","fallbackLng","debug","interpolation","escapeValue","ConfigProvider","configUrl","setConfig","controller","AbortController","signal","hostname","environmentConfig","possibleConfigs","filter","hostnames","possibleDefaultConfigs","abort","ConfigContext","registry","middleware","register","notifications","release","pathName","shift","keycloak","REFRESH_TOKEN_COOKIE_NAME","getKeycloakInstance","getInsightsAccessToken","storeRefreshToken","refreshToken","insightsToken","insightsJWT","rhUserId","storedToken","JSON","stringify","encoded","Base64","clearRefreshToken","retrieveRefreshToken","storedRefreshToken","parse","refreshJWT","exp","Date","initOptions","responseMode","rk","updateToken","logout","lk","onLoad","getMASSSOToken","token","tokenParsed","k","info"],"mappings":"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","file":"5179.ee815bf2eb642744161e.js","sourcesContent":["import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { LastLocationProvider, useLastLocation } from 'react-router-last-location';\nimport { BasenameContext } from '@bf2/ui-shared';\nimport getBaseName from './utils/getBaseName';\nimport { Loading } from \"@app/components\";\n\nconst APIManagementPage = React.lazy(() => import(\"@app/pages/APIManagement/APIManagementPage\"));\nconst ArtifactRedirect = React.lazy(() => import(\"@app/pages/ServiceRegistry/ArtifactsRedirect\"));\nconst Artifacts = React.lazy(() => import(\"@app/pages/ServiceRegistry/Artifacts\"));\nconst ArtifactVersionDetails =React.lazy(() => import(\"@app/pages/ServiceRegistry/ArtifactVersion\"));\nconst DataSciencePage = React.lazy(() => import(\"@app/pages/DataScience/DataSciencePage\"));\nconst KafkaPage = React.lazy(() => import(\"@app/pages/Kafka/KafkaPage\"));\nconst KasPage = React.lazy(() => import(\"@app/pages/Kas/KasPage\"));\nconst NotFoundPage = React.lazy(() => import(\"@app/pages/NotFound/NotFoundPage\"));\nconst OverviewPage = React.lazy(() => import(\"@app/pages/Overview/OverviewPage\"));\nconst QuickStartDrawerFederated = React.lazy(() => import(\"@app/pages/Resources/QuickStartDrawerFederated\"));\nconst ResourcesPage = React.lazy(() => import(\"@app/pages/Resources/ResourcesPage\"));\nconst RulesPage = React.lazy(() => import(\"@app/pages/ServiceRegistry/RulesPage\"));\nconst ServiceAccountsPage = React.lazy(() => import(\"@app/pages/ServiceAccounts/ServiceAccountsPage\"));\nconst CosPage = React.lazy(() => import(\"@app/pages/CosPage/CosPage\"));\nconst ServiceRegistryPage = React.lazy(() => import(\"@app/pages/ServiceRegistry/ServiceRegistryPage\"));\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps<any>> | React.ComponentType<any>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n}\n\nexport interface IAppRouteGroup {\n  label: string;\n  routes: IAppRoute[];\n}\n\nexport type AppRouteConfig = IAppRoute | IAppRouteGroup;\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\n\nconst routes: AppRouteConfig[] = [\n  {\n    component: KafkaPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas'\n  },\n  {\n    component: KafkaPage,\n    exact: false,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas'\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas'\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/rules',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts/:groupId/:artifactId',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: 'Service Registry',\n    path: '/sr/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version',\n    title: 'Service Registry',\n    basename: '/sr'\n  },\n  {\n    component: CosPage,\n    exact: false,\n    label: 'COS',\n    path: '/cos',\n    title: 'COS',\n    basename: `${getBaseName(window.location.pathname)}/cos`\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams'\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n  },\n];\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nconst useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nconst RouteWithTitleUpdates = ({ component: Component, isAsync = false, title, basename, ...rest }: IAppRoute) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const getBasename = () => {\n    return basename || \"\";\n  };\n\n  function routeWithTitle(routeProps: RouteComponentProps) {\n    return (\n      <QuickStartDrawerFederated>\n        <BasenameContext.Provider value={{ getBasename }}>\n          <Component {...rest} {...routeProps} />\n        </BasenameContext.Provider>\n      </QuickStartDrawerFederated>\n    );\n  }\n\n  return <Route render={routeWithTitle} {...rest} />;\n};\n\nconst PageNotFound = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage} />;\n};\n\nconst flattenedRoutes: IAppRoute[] = routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute[]\n);\n\nconst AppRoutes = (): React.ReactElement => (\n  <LastLocationProvider>\n    <React.Suspense fallback={<Loading />}>\n      <Switch>\n        {flattenedRoutes.map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n          <RouteWithTitleUpdates\n            path={path}\n            exact={exact}\n            component={component}\n            key={idx}\n            title={title}\n            isAsync={isAsync}\n            {...rest}\n          />\n        ))}\n        <PageNotFound title=\"404 Page Not Found\" />\n      </Switch>\n    </React.Suspense>\n  </LastLocationProvider>\n);\n\nexport { AppRoutes, routes };\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport {\n  accessibleRouteChangeHandler\n};\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport './App.scss';\nimport { AppRoutes } from '@app/Routes';\nimport { FederatedModuleProvider } from './components/FederatedModule/FederatedModule';\nimport { InsightsType } from '@app/utils';\n\nexport const App: React.FunctionComponent = () => {\n  const insights: InsightsType = window['insights'];\n  const history = useHistory();\n\n  const getAppId = () => {\n    const defaultAppId = 'overview';\n\n    const parts = history.location.pathname.split('/');\n    if (parts.length > 1) {\n      if (parts[1] === '') {\n        return defaultAppId;\n      } else {\n        if (parts[1] === 'openshift-streams') {\n          return 'streams';\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n    return () => {\n      unregister();\n    }\n  }, []);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal />\n      <AppRoutes />\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ReactNode, useEffect, useState } from 'react';\nimport { FederatedModuleConfig, useConfig, AssetsContext } from \"@bf2/ui-shared\";\nimport { Loading } from \"@app/components/Loading/Loading\";\nimport { useRef } from 'react';\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false)\n  useEffect(() => {\n    isMounted.current = true\n    return () => {\n      isMounted.current = false\n    }\n  }, [])\n  return isMounted\n}\n\nexport type FederatedModuleContextProps = {\n  [module: string]: FederatedModuleConfig\n}\n\nconst FederatedModuleContext = React.createContext<FederatedModuleContextProps>({});\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={config.federatedModules}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope]; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await window[scope].get(module);\n    const Module = factory();\n    console.log(`${Module} loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = ({ url }) => {\n  const isMounted = useIsMounted()\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    let element;\n    if(isMounted.current) {\n      if (!url) {\n        setFailed(true);\n        return;\n      }\n  \n      element = document.createElement('script');\n  \n      element.src = url;\n      element.type = 'text/javascript';\n      element.async = true;\n  \n      setReady(false);\n      setFailed(false);\n  \n      element.onload = () => {\n        console.log(`Dynamic federated module Loaded: ${url}`);\n        setReady(true);\n      };\n  \n      element.onerror = () => {\n        console.error(`Dynamic federated module Error: ${url}`);\n        setReady(false);\n        setFailed(true);\n      };\n  \n      document.head.appendChild(element);\n    }\n\n    return () => {\n      if(element) {\n        console.log(`Dynamic federated module Removed: ${url}`);\n        document.head.removeChild(element);\n      }\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: any;\n}\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n  const isMounted = useIsMounted()\n\n  const federatedModuleContext = React.useContext(FederatedModuleContext);\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(federatedModuleContext[scope].basePath, scope, federatedModuleContext[scope].fallbackBasePath);\n      if(isMounted.current) {\n        setModuleInfo(moduleInfo);\n      }\n    }\n    fetchModuleInfo();\n  }, [scope, federatedModuleContext]);\n\n  const { ready, failed } = useDynamicScript({ url: moduleInfo?.entryPoint });\n\n  if (!ready || failed || !moduleInfo) {\n    if (failed && fallback) {\n      return fallback;\n    }\n    return null;\n  }\n\n  const Component = React.lazy(\n    loadComponent(scope, module)\n  );\n  const getPath = () => {\n    return moduleInfo.basePath\n  }\n\n  return (\n    <AssetsContext.Provider value={{ getPath }}>\n      <React.Suspense fallback={null}>\n          {render(Component)}\n      </React.Suspense>\n    </AssetsContext.Provider>\n  );\n}\n\ntype ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nconst getModuleInfo = async (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined> => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n\n\n","import React from 'react';\nimport { Bullseye } from '@patternfly/react-core';\nimport { Spinner } from '@redhat-cloud-services/frontend-components';\nimport './Loading.css';\n\nexport const Loading: React.FunctionComponent = () => (\n  <Bullseye>\n    <Spinner/>\n  </Bullseye>\n);\n","import React from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@openapi/kas';\n\ntype InstanceDrawerProps = {\n  kafkaDetail: KafkaRequest | undefined;\n  isExpanded: boolean | undefined;\n  activeTab: string;\n  onClose: () => void;\n  isOpenDeleteInstanceModal: boolean;\n  setIsOpenDeleteInstanceModal: (isopen: boolean) => void;\n};\n\nexport const InstanceDrawer: React.FC<InstanceDrawerProps> = ({\n  isExpanded,\n  onClose,\n  kafkaDetail,\n  activeTab,\n  children,\n  setIsOpenDeleteInstanceModal,\n  isOpenDeleteInstanceModal,\n}) => {\n  const config = useConfig();\n  const history = useHistory();\n\n  if (config === undefined) {\n    return <Loading />;\n  }\n\n  const getConnectToRoutePath = (event: unknown, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    return history.createHref({ pathname: `/streams/${routePath}` });\n  };\n\n  const onConnectToRoute = async (event: unknown, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    history.push(`/streams/${routePath}`);\n  };\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      render={(InstanceDrawerFederated) => {\n        return (\n          <InstanceDrawerFederated\n            getConnectToRoutePath={getConnectToRoutePath}\n            onConnectToRoute={onConnectToRoute}\n            tokenEndPointUrl={tokenEndPointUrl}\n            isExpanded={isExpanded}\n            onClose={onClose}\n            instanceDetail={kafkaDetail}\n            activeTab={activeTab}\n            isOpenDeleteInstanceModal={isOpenDeleteInstanceModal}\n            setIsOpenDeleteInstanceModal={setIsOpenDeleteInstanceModal}\n          >\n            {children}\n          </InstanceDrawerFederated>\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { Banner, Bullseye, Button, Popover } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const DevelopmentPreview: React.FunctionComponent = ({ children }) => {\n  const { t } = useTranslation();\n  return <div id='scrollablePageMain' className='pf-c-page__main' style={{ height: '100%' }}>\n    <Banner isSticky variant=\"info\">\n      <Bullseye>\n        <Popover\n          aria-label=\"Development Preview Button\"\n          hasAutoWidth\n          bodyContent={\n                <div>{t('common.developmentPreviewTooltip')}</div>\n              }\n          position='bottom'\n          minWidth='300px'\n          maxWidth='25%'>\n            <Button className='app-services-ui--button--dev-preview' variant='link'>{t('common.developmentPreview')}</Button>\n          </Popover>\n      </Bullseye>\n    </Banner>\n    {children}\n  </div>\n}\n","import React from 'react';\nimport { useConfig } from '@bf2/ui-shared';\nimport { Loading, FederatedModule } from '@app/components';\n\n\ntype MetricsProps = {\n  kafkaId: string;\n}\n\nexport const Metrics: React.FC<MetricsProps> = ({ kafkaId }) => {\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <Loading/>;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./Metrics\"\n      render={(MetricsFederated) => <MetricsFederated kafkaId={kafkaId}/>}\n    />\n  );\n}\n","import en from './en.json';\n\nexport const resources = {\n  en: {\n    translation: en,\n  },\n};\n","import i18n from 'i18next';\nimport { initReactI18next } from 'react-i18next';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { resources } from './locale';\n// don't want to use this?\n// have a look at the Quick start guide\n// for passing in lng and translations on init\n\nconst appServicesi18n = i18n.createInstance();\n\nappServicesi18n\n    // pass the i18n instance to react-i18next.\n    .use(initReactI18next)\n    .use(LanguageDetector)\n    // init i18next\n    // for all options read: https://www.i18next.com/overview/configuration-options\n    .init({\n      detection: {\n        order: ['htmlTag', 'navigator'],\n        caches: [],\n      },\n      fallbackLng: 'en',\n      debug: true,\n\n      interpolation: {\n        escapeValue: false, // not needed for react as it escapes by default\n      },\n      resources,\n    });\n\nexport default appServicesi18n;\n","import React from \"react\";\nimport { Config, ConfigContext } from '@bf2/ui-shared';\n\nconst defaultHostname = \"cloud.redhat.com\";\n\nexport type EnviromentConfigs = [\n  {\n    hostnames: string[],\n    config: Config\n  }\n];\n\n\nexport type ConfigProviderProps = {\n  configUrl: string\n}\n\nexport const ConfigProvider: React.FunctionComponent<ConfigProviderProps> = ({ configUrl, children }) => {\n  const [config, setConfig] = React.useState<Config | undefined>(undefined);\n  React.useEffect(() => {\n    const controller = new AbortController();\n    const signal = controller.signal;\n\n    (async () => {\n      const hostname = window.location.hostname;\n      console.log(`Loading config for ${hostname}`);\n      const response = await fetch(configUrl, { signal });\n      const environmentConfig = await response.json() as EnviromentConfigs;\n      const possibleConfigs = environmentConfig.filter(entry => entry.hostnames.includes(hostname))\n      if (possibleConfigs.length > 1) {\n        throw new Error(`Unable to load config for ${hostname}, more than one config matched ${possibleConfigs}`);\n      } else if (possibleConfigs.length < 1) {\n        // Use the default config\n        const possibleDefaultConfigs = environmentConfig.filter(entry => entry.hostnames.includes(defaultHostname))\n        if (possibleDefaultConfigs.length > 1) {\n          throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n        } else if (possibleDefaultConfigs.length < 1) {\n          throw new Error(`Unable to load default config, no configs matched`);\n        } else {\n          setConfig(possibleDefaultConfigs[0].config);\n          console.log('Done loading default config', possibleDefaultConfigs[0]);\n        }\n      } else {\n        setConfig(possibleConfigs[0].config);\n        console.log('Done loading config', possibleConfigs[0].config);\n      }\n    })();\n\n    return () => controller.abort();\n  }, [configUrl]);\n\n  return (\n    <ConfigContext.Provider value={config}>\n      {children}\n    </ConfigContext.Provider>\n  );\n}\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/files/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport function init(...middleware) {\n    if (!registry) {\n        registry = new ReducerRegistry({}, [\n            promiseMiddleware,\n            ...middleware\n        ]);\n    \n        //If you want to register all of your reducers, this is good place.\n    \n        registry.register({\n            notifications: notificationsReducer\n        });\n    }\n\n    return registry;\n}\n\nexport function getStore() {\n    return registry.getStore();\n}\n\nexport function register(...args) {\n    return registry.register(...args);\n}\n","function getBaseName(pathname) {\n    let release = '/';\n    const pathName = pathname.split('/');\n\n    pathName.shift();\n\n    if (pathName[0] === 'beta') {\n        pathName.shift();\n        release = `/beta/`;\n    }\n\n    return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport jwtDecode, { JwtPayload } from \"jwt-decode\";\nimport getUnixTime from \"date-fns/getUnixTime\";\nimport { Base64 } from 'js-base64';\n\nlet keycloak: KeycloakInstance | undefined;\n\nconst OLD_REFRESH_TOKEN_COOKIE_NAME = \"masSSORefreshToken\";\n// Clean out the old token from cookies\nCookies.remove(OLD_REFRESH_TOKEN_COOKIE_NAME);\n\nconst REFRESH_TOKEN_COOKIE_NAME = \"mrt\";\nconst MIN_VALIDITY = 50;\n\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n}\n\n\n/**\n * Get keycloak instance\n *\n * @return an initiated keycloak instance or `undefined`\n * if keycloak isn't configured\n *\n */\nexport const getKeycloakInstance = async (config: KeycloakConfig, getInsightsAccessToken?: () => Promise<string>) => {\n  if (getInsightsAccessToken === undefined) {\n    return undefined;\n  }\n  if (!keycloak) {\n    keycloak = await init(config, getInsightsAccessToken);\n  }\n  return keycloak;\n}\n\nconst storeRefreshToken = async (refreshToken: string, getInsightsAccessToken: () => Promise<string>) => {\n\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const rhUserId = insightsJWT['account_id'];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug(\"storing refresh token\");\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n}\n\nconst clearRefreshToken = () => {\n  console.debug(\"clearing stored refresh token\");\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n}\n\nconst retrieveRefreshToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = JSON.parse(storedToken) as unknown as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n}\n\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nconst init = async (config: KeycloakConfig, getInsightsAccessToken: () => Promise<string>): Promise<KeycloakInstance | undefined> => {\n\n  const initOptions = {\n    responseMode: \"query\",\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken) {\n    const rk = Keycloak(config);\n    // Use the refresh token\n    try {\n      // Perform a keycloak init without a login\n      await rk.init(initOptions);\n      // Set the saved refresh token into Keycloak\n      rk.refreshToken = refreshToken\n      // Then force a token refresh to check if the refresh token is actually valid\n      await rk.updateToken(-1);\n      return rk;\n    } catch {\n      clearRefreshToken();\n      await logout(rk);\n    }\n  }\n  const lk = Keycloak(config);\n  initOptions.onLoad = \"login-required\";\n  await lk.init(initOptions);\n  if (lk.refreshToken) {\n    await storeRefreshToken(lk.refreshToken, getInsightsAccessToken);\n  }\n  return lk;\n}\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getMASSSOToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string> => {\n  await keycloak?.updateToken(MIN_VALIDITY);\n  if (!keycloak?.token || !keycloak.tokenParsed) {\n    throw new Error(\"No token from keycloak!\");\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== keycloak.tokenParsed['rh-user-id']) {\n    await logout(keycloak);\n    return \"\";\n  }\n  if (keycloak?.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak?.token;\n}\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nexport const logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.info(\"Trigger MASSSO logout\")\n    await k.logout();\n  }\n}\n"],"sourceRoot":""}