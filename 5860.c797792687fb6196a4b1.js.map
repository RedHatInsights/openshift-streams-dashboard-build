{"version":3,"sources":["webpack://application-services-ui/./node_modules/@patternfly/react-icons/dist/js/createIcon.js","webpack://application-services-ui/./node_modules/@patternfly/react-icons/dist/js/icons/wrench-icon.js","webpack://application-services-ui/./src/openapi/ams/api.ts","webpack://application-services-ui/./src/openapi/ams/base.ts","webpack://application-services-ui/./src/openapi/ams/common.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/openapi/ams/configuration.ts","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx"],"names":["Object","defineProperty","exports","value","createIcon","getSize","IconSize","tslib_1","React","__importStar","size","sm","md","lg","xl","currentId","name","xOffset","yOffset","width","height","svgPath","_a","Component","super","arguments","this","id","props","color","title","noVerticalAlign","__rest","hasTitle","Boolean","heightWidth","baseAlign","Number","parseFloat","style","verticalAlign","viewBox","join","createElement","assign","fill","role","d","displayName","defaultProps","AccessReviewActionEnum","AccessReviewResourceTypeEnum","AccessReviewResponseActionEnum","AccessReviewResponseResourceTypeEnum","CapabilityReviewRequestCapabilityEnum","CapabilityReviewRequestTypeEnum","ClusterAuthorizationRequestProductCategoryEnum","ClusterAuthorizationRequestProductIdEnum","OneMetricHealthStateEnum","PermissionActionEnum","PermissionAllOfActionEnum","ResourceQuotaTypeEnum","ResourceQuotaAllOfTypeEnum","ResourceQuotaRequestTypeEnum","ResourceReviewActionEnum","ResourceReviewResourceTypeEnum","ResourceReviewRequestActionEnum","ResourceReviewRequestResourceTypeEnum","RoleBindingTypeEnum","RoleBindingAllOfTypeEnum","SelfAccessReviewActionEnum","SelfAccessReviewResourceTypeEnum","SelfResourceReviewActionEnum","SelfResourceReviewResourceTypeEnum","SelfResourceReviewRequestActionEnum","SelfResourceReviewRequestResourceTypeEnum","SubscriptionProductBundleEnum","SubscriptionServiceLevelEnum","SubscriptionSupportLevelEnum","SubscriptionSystemUnitsEnum","SubscriptionUsageEnum","SubscriptionAllOfProductBundleEnum","SubscriptionAllOfServiceLevelEnum","SubscriptionAllOfSupportLevelEnum","SubscriptionAllOfSystemUnitsEnum","SubscriptionAllOfUsageEnum","SubscriptionCreateRequestPlanIdEnum","SubscriptionCreateRequestStatusEnum","SubscriptionPatchRequestClusterBillingModelEnum","SubscriptionPatchRequestProductBundleEnum","SubscriptionPatchRequestServiceLevelEnum","SubscriptionPatchRequestSupportLevelEnum","SubscriptionPatchRequestSystemUnitsEnum","SubscriptionPatchRequestUsageEnum","SupportCasesRequestSeverityEnum","BASE_PATH","replace","configuration","basePath","axios","field","msg","Error","DUMMY_BASE_URL","assertParamExists","functionName","paramName","paramValue","RequiredError","setBearerAuthToObject","object","accessToken","setSearchParams","url","searchParams","URLSearchParams","search","objects","key","Array","isArray","delete","item","append","set","toString","serializeDataIfNeeded","requestOptions","nonString","isJsonMime","headers","JSON","stringify","undefined","toPathString","pathname","hash","createRequestFunction","axiosArgs","globalAxios","axiosRequestArgs","options","request","DefaultApiFp","localVarAxiosParamCreator","apiAccountsMgmtV1AccessTokenPost","Promise","localVarUrlObj","URL","baseOptions","localVarRequestOptions","method","localVarQueryParameter","localVarHeaderParameter","query","headersFromBaseOptions","apiAccountsMgmtV1AccountsGet","page","orderBy","fields","fetchLabels","fetchCapabilities","apiAccountsMgmtV1AccountsIdGet","localVarPath","encodeURIComponent","String","apiAccountsMgmtV1AccountsIdLabelsGet","apiAccountsMgmtV1AccountsIdLabelsKeyDelete","apiAccountsMgmtV1AccountsIdLabelsKeyGet","apiAccountsMgmtV1AccountsIdLabelsKeyPatch","label","data","apiAccountsMgmtV1AccountsIdLabelsPost","apiAccountsMgmtV1AccountsIdPatch","accountPatchRequest","apiAccountsMgmtV1AccountsPost","account","dryRun","apiAccountsMgmtV1ClusterAuthorizationsPost","clusterAuthorizationRequest","apiAccountsMgmtV1ClusterRegistrationsPost","clusterRegistrationRequest","apiAccountsMgmtV1CurrentAccountGet","apiAccountsMgmtV1ErrorsGet","apiAccountsMgmtV1ErrorsIdGet","apiAccountsMgmtV1FeatureTogglesIdQueryPost","featureToggleQueryRequest","apiAccountsMgmtV1LabelsGet","apiAccountsMgmtV1MetricsGet","apiAccountsMgmtV1NotifyPost","notificationRequest","apiAccountsMgmtV1OrganizationsGet","apiAccountsMgmtV1OrganizationsIdGet","apiAccountsMgmtV1OrganizationsIdLabelsGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete","apiAccountsMgmtV1OrganizationsIdLabelsKeyGet","apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch","apiAccountsMgmtV1OrganizationsIdLabelsPost","apiAccountsMgmtV1OrganizationsIdPatch","organizationPatchRequest","apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","orgId","fetchRelatedResources","apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost","resourceQuotaRequest","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete","quotaId","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet","apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch","apiAccountsMgmtV1OrganizationsPost","organization","apiAccountsMgmtV1PlansGet","apiAccountsMgmtV1PlansIdGet","apiAccountsMgmtV1PullSecretsExternalResourceIdDelete","externalResourceId","apiAccountsMgmtV1PullSecretsPost","pullSecretRequest","apiAccountsMgmtV1RegistriesGet","apiAccountsMgmtV1RegistriesIdGet","apiAccountsMgmtV1RegistryCredentialsGet","apiAccountsMgmtV1RegistryCredentialsIdDelete","apiAccountsMgmtV1RegistryCredentialsIdGet","apiAccountsMgmtV1RegistryCredentialsIdPatch","registryCredentialPatchRequest","apiAccountsMgmtV1RegistryCredentialsPost","registryCredential","apiAccountsMgmtV1ReservedResourcesGet","apiAccountsMgmtV1ResourceQuotaGet","apiAccountsMgmtV1RoleBindingsGet","apiAccountsMgmtV1RoleBindingsIdDelete","apiAccountsMgmtV1RoleBindingsIdGet","apiAccountsMgmtV1RoleBindingsIdPatch","roleBindingRequest","apiAccountsMgmtV1RoleBindingsPost","roleBindingCreateRequest","apiAccountsMgmtV1RolesGet","apiAccountsMgmtV1RolesIdGet","apiAccountsMgmtV1SkuRulesGet","apiAccountsMgmtV1SkuRulesIdGet","apiAccountsMgmtV1SkusGet","apiAccountsMgmtV1SkusIdGet","apiAccountsMgmtV1SubscriptionsGet","fetchAccounts","labels","apiAccountsMgmtV1SubscriptionsIdDelete","apiAccountsMgmtV1SubscriptionsIdGet","fetchCpuAndSocket","apiAccountsMgmtV1SubscriptionsIdLabelsGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete","apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet","apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch","apiAccountsMgmtV1SubscriptionsIdLabelsPost","apiAccountsMgmtV1SubscriptionsIdNotifyPost","apiAccountsMgmtV1SubscriptionsIdPatch","subscriptionPatchRequest","apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet","apiAccountsMgmtV1SubscriptionsIdSupportCasesGet","apiAccountsMgmtV1SubscriptionsPost","subscriptionCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete","subId","accountId","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet","apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost","notificationContactCreateRequest","apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet","reservedResourceId","apiAccountsMgmtV1SupportCasesCaseIdDelete","caseId","apiAccountsMgmtV1SupportCasesPost","supportCasesRequest","apiAccountsMgmtV1TokenAuthorizationPost","tokenAuthorizationRequest","apiAuthorizationsV1AccessReviewPost","accessReview","apiAuthorizationsV1CapabilityReviewPost","capabilityReviewRequest","apiAuthorizationsV1ExportControlReviewPost","exportControlReviewRequest","apiAuthorizationsV1FeatureReviewPost","featureReview","apiAuthorizationsV1ResourceReviewPost","resourceReviewRequest","apiAuthorizationsV1SelfAccessReviewPost","selfAccessReview","apiAuthorizationsV1SelfFeatureReviewPost","selfFeatureReview","apiAuthorizationsV1SelfResourceReviewPost","selfResourceReviewRequest","apiAuthorizationsV1SelfTermsReviewPost","selfTermsReview","apiAuthorizationsV1TermsReviewPost","termsReview","DefaultApiAxiosParamCreator","localVarAxiosArgs","then","BaseAPI","buildUrlParams","param","apiKey","username","password","formDataCtor","mime","jsonMime","RegExp","test","toLowerCase","params","keys","map","KasPage","config","useConfig","serviceDown","ServiceDownPage","KasPageConnected","auth","useAuth","history","useHistory","location","useLocation","useState","create","setCreate","setTermsReview","useEffect","getTermsReview","terms","terms_required","ams","getToken","DefaultApi","apiBasePath","event_code","eventCode","site_code","siteCode","resp","termsReviewResponse","onConnectToRoute","event","routePath","push","getConnectToRoutePath","createHref","preCreateInstance","open","terms_available","redirect_url","redirectURL","window","href","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","masSso","tokenEndPointUrl","osStreams","scope","module","fallback","render","OpenshiftStreamsFederated","shouldOpenCreateModal","t","useTranslation","PageSection","EmptyState","variant","EmptyStateIcon","icon","Title","headingLevel","EmptyStateBody","Button","onClick"],"mappings":"mIACAA,OAAOC,eAAeC,EAAS,aAAc,CAAEC,OAAO,IACtDD,EAAQE,WAAaF,EAAQG,QAAUH,EAAQI,cAAW,EAC1D,MAAMC,EAAU,EAAQ,OAClBC,EAAQD,EAAQE,aAAa,EAAQ,QAC3C,IAAIH,GACJ,SAAWA,GACPA,EAAa,GAAI,KACjBA,EAAa,GAAI,KACjBA,EAAa,GAAI,KACjBA,EAAa,GAAI,KAJrB,CAKGA,EAAWJ,EAAQI,WAAaJ,EAAQI,SAAW,KACtDJ,EAAQG,QAAWK,IACf,OAAQA,GACJ,KAAKJ,EAASK,GACV,MAAO,MACX,KAAKL,EAASM,GACV,MAAO,QACX,KAAKN,EAASO,GACV,MAAO,MACX,KAAKP,EAASQ,GACV,MAAO,MACX,QACI,MAAO,QAGnB,IAAIC,EAAY,EA+BhBb,EAAQE,WA3BR,UAAoB,KAAEY,EAAI,QAAEC,EAAU,EAAC,QAAEC,EAAU,EAAC,MAAEC,EAAK,OAAEC,EAAM,QAAEC,IACjE,IAAIC,EACJ,OAAOA,EAAK,cAAsBd,EAAMe,UAChC,cACIC,SAASC,WACTC,KAAKC,GAAK,cAAcZ,IAE5B,SACI,MAAMO,EAAKI,KAAKE,OAAO,KAAElB,EAAI,MAAEmB,EAAK,MAAEC,EAAK,gBAAEC,GAAoBT,EAAIM,EAAQrB,EAAQyB,OAAOV,EAAI,CAAC,OAAQ,QAAS,QAAS,oBACrHW,EAAWC,QAAQJ,GACnBK,EAAcjC,EAAQG,QAAQK,GAC9B0B,GAAa,KAAQC,OAAOC,WAAWH,GACvCI,EAAQR,EAAkB,KAAO,CAAES,cAAe,GAAGJ,OACrDK,EAAU,CAACxB,EAASC,EAASC,EAAOC,GAAQsB,KAAK,KACvD,OAAQlC,EAAMmC,cAAc,MAAO3C,OAAO4C,OAAO,CAAEL,MAAOA,EAAOM,KAAMhB,EAAOT,OAAQe,EAAahB,MAAOgB,EAAaM,QAASA,EAAS,kBAAmBR,EAAWP,KAAKC,GAAK,KAAM,eAAeM,GAAW,KAAaa,KAAM,OAASlB,GACzOK,GAAYzB,EAAMmC,cAAc,QAAS,CAAEhB,GAAID,KAAKC,IAAMG,GAC1DtB,EAAMmC,cAAc,OAAQ,CAAEI,QAGvCC,YAAchC,EACjBM,EAAG2B,aAAe,CACdpB,MAAO,eACPnB,KAAMJ,EAASK,GACfoB,iBAAiB,GAErBT,I,4BCrDRpB,EAAQ,GAAmB,CACzBc,KAAM,aACNI,OAAQ,IACRD,MAAO,IACPE,QAAS,wcACTH,QAAS,EACTD,QAAS,GAEXf,EAAQ,GAAa,oBAAoCA,EAAQ,IACjEA,EAAA,GAAqBA,EAAQ,I,uGCkEjBgD,EAWAC,EAuGAC,EAWAC,EA8iBAC,EAOAC,EAoGAC,EAOAC,EAsrCAC,EA6NAC,EAgCAC,EAw3CAC,EAkFAC,EAsFAC,EA4DAC,EAWAC,EAmCAC,EASAC,EA2IAC,EAkEAC,EAkVAC,EAWAC,EAwGAC,EAWAC,EA6BAC,EASAC,EA0aAC,EASAC,EAQAC,EAWAC,EAQAC,EA+NAC,EASAC,EAQAC,EAWAC,EAQAC,EAiDAC,EAOAC,EAwNAC,EAQAC,EASAC,EAQAC,EAWAC,EAQAC,EAkSAC,E,0EC94LCC,GAAY,4BAA4BC,QAAQ,OAAQ,IA4BrE,GAGI,SAAYC,EAAyCC,EAAwCC,QAAxC,IAAAD,MAAA,SAAwC,IAAAC,MAAA,MAAxC,KAAAD,WAAwC,KAAAC,QACrFF,IACAvE,KAAKuE,cAAgBA,EACrBvE,KAAKwE,SAAWD,EAAcC,UAAYxE,KAAKwE,WAW3D,eAEI,WAAmBE,EAAeC,GAAlC,MACI,YAAMA,IAAI,K,OADK,EAAAD,QADnB,EAAApF,KAAwB,gB,EAI5B,OALmC,oBAKnC,EALA,CAAmCsF,OC1CtBC,GAAiB,sBAOjBC,GAAoB,SAAUC,EAAsBC,EAAmBC,GAChF,GAAIA,QACA,MAAM,IAAIC,GAAcF,EAAW,sBAAsBA,EAAS,uCAAuCD,EAAY,MA+BhHI,GAAwB,SAAgBC,EAAab,G,qIAC1DA,GAAiBA,EAAcc,YAC0B,mBAA9Bd,EAAcc,YAArB,MACd,GAAMd,EAAcc,eAF1B,M,cAEM,W,aACA,SAAMd,EAAcc,a,OAApB,W,iBAFAA,EAAc,EAGpBD,EAAsB,cAAI,UAAYC,E,mCAqBjCC,GAAkB,SAAUC,G,IAAU,wDAE/C,IADA,IAAMC,EAAe,IAAIC,gBAAgBF,EAAIG,QACxB,MAAAC,EAAA,eAAS,CAAzB,IAAMP,EAAM,KACb,IAAK,IAAMQ,KAAOR,EACd,GAAIS,MAAMC,QAAQV,EAAOQ,IAAO,CAC5BJ,EAAaO,OAAOH,GACpB,IAAmB,UAAAR,EAAOQ,GAAP,eAAa,CAA3B,IAAMI,EAAI,KACXR,EAAaS,OAAOL,EAAKI,SAG7BR,EAAaU,IAAIN,EAAKR,EAAOQ,IAIzCL,EAAIG,OAASF,EAAaW,YAOjBC,GAAwB,SAAU3H,EAAY4H,EAAqB9B,GAC5E,IAAM+B,EAA6B,iBAAV7H,EAIzB,OAH2B6H,GAAa/B,GAAiBA,EAAcgC,WACjEhC,EAAcgC,WAAWF,EAAeG,QAAQ,iBAChDF,GAEAG,KAAKC,eAAoBC,IAAVlI,EAAsBA,EAAQ,IAC5CA,GAAS,IAOPmI,GAAe,SAAUrB,GAClC,OAAOA,EAAIsB,SAAWtB,EAAIG,OAASH,EAAIuB,MAO9BC,GAAwB,SAAUC,EAAwBC,EAA4B5C,EAAmBE,GAClH,OAAO,SAACE,EAAoCD,QAApC,IAAAC,MAAA,QAAoC,IAAAD,MAAA,GACxC,IAAM0C,GAAmB,gCAAIF,EAAUG,SAAO,CAAE5B,MAAMhB,aAAa,EAAbA,EAAeC,WAAYA,GAAYwC,EAAUzB,MACvG,OAAOd,EAAM2C,QAAQF,MF1D7B,SAAY1F,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAAsB,KAWlC,SAAYC,GACR,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCJ,CAAYA,MAA4B,KAuGxC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAA8B,KAW1C,SAAYC,GACR,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCJ,CAAYA,MAAoC,KA8iBhD,SAAYC,GACR,4CADJ,CAAYA,MAAqC,KAOjD,SAAYC,GACR,oBADJ,CAAYA,MAA+B,KAoG3C,SAAYC,GACR,oCADJ,CAAYA,MAA8C,KAO1D,SAAYC,GACR,YACA,YACA,sBACA,YACA,cALJ,CAAYA,MAAwC,KAsrCpD,SAAYC,GACR,oBACA,wBACA,oBAHJ,CAAYA,MAAwB,KA6NpC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAAoB,KAgChC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAAyB,KAw3CrC,SAAYC,GACR,kBACA,kBACA,8BAHJ,CAAYA,MAAqB,KAkFjC,SAAYC,GACR,kBACA,kBACA,8BAHJ,CAAYA,MAA0B,KAsFtC,SAAYC,GACR,kBACA,kBACA,8BAHJ,CAAYA,MAA4B,KA4DxC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAAwB,KAWpC,SAAYC,GACR,oBACA,8BAFJ,CAAYA,MAA8B,KAmC1C,SAAYC,GACR,YACA,kBACA,kBAHJ,CAAYA,MAA+B,KAS3C,SAAYC,GACR,oBACA,8BAFJ,CAAYA,MAAqC,KA2IjD,SAAYC,GACR,4BACA,8BACA,8BAHJ,CAAYA,MAAmB,KAkE/B,SAAYC,GACR,4BACA,8BACA,8BAHJ,CAAYA,MAAwB,KAkVpC,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAA0B,KAWtC,SAAYC,GACR,gBACA,oBACA,oBACA,4BACA,oBACA,cACA,8BACA,8BACA,cACA,0BACA,4BACA,sBACA,0CACA,kCACA,8BACA,wCACA,kCACA,0CACA,4CACA,4BACA,8CACA,0CACA,8CACA,4CACA,0BACA,wCACA,gCACA,gCACA,sCACA,wBACA,sDACA,0BACA,0CACA,kBACA,8BACA,wCACA,wCACA,wDACA,sCACA,8CAxCJ,CAAYA,MAAgC,KAwG5C,SAAYC,GACR,YACA,cACA,kBACA,kBACA,kBALJ,CAAYA,MAA4B,KAWxC,SAAYC,GACR,oBACA,8BAFJ,CAAYA,MAAkC,KA6B9C,SAAYC,GACR,YACA,kBACA,kBAHJ,CAAYA,MAAmC,KAS/C,SAAYC,GACR,oBACA,8BAFJ,CAAYA,MAAyC,KA0arD,SAAYC,GACR,wBACA,qCACA,6BAHJ,CAAYA,MAA6B,KASzC,SAAYC,GACR,eACA,mBAFJ,CAAYA,MAA4B,KAQxC,SAAYC,GACR,cACA,sBACA,oBACA,6BACA,cALJ,CAAYA,MAA4B,KAWxC,SAAYC,GACR,yBACA,oBAFJ,CAAYA,MAA2B,KAQvC,SAAYC,GACR,0BACA,qCACA,uCACA,sBAJJ,CAAYA,MAAqB,KA+NjC,SAAYC,GACR,wBACA,qCACA,6BAHJ,CAAYA,MAAkC,KAS9C,SAAYC,GACR,eACA,mBAFJ,CAAYA,MAAiC,KAQ7C,SAAYC,GACR,cACA,sBACA,oBACA,6BACA,cALJ,CAAYA,MAAiC,KAW7C,SAAYC,GACR,yBACA,oBAFJ,CAAYA,MAAgC,KAQ5C,SAAYC,GACR,0BACA,qCACA,uCACA,sBAJJ,CAAYA,MAA0B,KAiDtC,SAAYC,GACR,YADJ,CAAYA,MAAmC,KAO/C,SAAYC,GACR,8BADJ,CAAYA,MAAmC,KAwN/C,SAAYC,GACR,sBACA,4BAFJ,CAAYA,MAA+C,KAQ3D,SAAYC,GACR,wBACA,qCACA,6BAHJ,CAAYA,MAAyC,KASrD,SAAYC,GACR,eACA,mBAFJ,CAAYA,MAAwC,KAQpD,SAAYC,GACR,cACA,sBACA,oBACA,6BACA,cALJ,CAAYA,MAAwC,KAWpD,SAAYC,GACR,yBACA,oBAFJ,CAAYA,MAAuC,KAQnD,SAAYC,GACR,0BACA,qCACA,uCACA,sBAJJ,CAAYA,MAAiC,KAkS7C,SAAYC,GACR,wBACA,oBACA,wBACA,kBAJJ,CAAYA,MAA+B,KAuHpC,IAq8HMiD,GAAe,SAAS9C,GACjC,IAAM+C,EAt8HiC,SAAU/C,GAAV,WACvC,MAAO,CAOHgD,iCAAkC,SAAOJ,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAehE,OAZMC,EAAiB,IAAIC,IAFN,qCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAgBjBM,6BAA8B,SAAOC,EAAenJ,EAAe0G,EAAiB0C,EAAkBC,EAAiBC,EAAuBC,EAA6BpB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAelM,OAZMC,EAAiB,IAAIC,IAFN,iCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAoCrD,OApCA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,QAGzBzB,IAAX0B,IACAP,EAA+B,OAAIO,QAGnB1B,IAAhB2B,IACAR,EAAoC,YAAIQ,QAGlB3B,IAAtB4B,IACAT,EAA0C,kBAAIS,GAKlDjD,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjBY,+BAAgC,SAAOvI,EAAYqI,EAAuBC,EAA6BpB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkB9H,OAhBA1C,GAAkB,iCAAkC,KAAM7E,GACpDwI,EAAe,sCAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAgBrD,OAhBA,cAEoBoC,IAAhB2B,IACAR,EAAoC,YAAIQ,QAGlB3B,IAAtB4B,IACAT,EAA0C,kBAAIS,GAKlDjD,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAcjBgB,qCAAsC,SAAO3I,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBjJ,OAhBA1C,GAAkB,uCAAwC,KAAM7E,GAC1DwI,EAAe,6CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBiB,2CAA4C,SAAO5I,EAAY2F,EAAauB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqBnG,OAnBA1C,GAAkB,6CAA8C,KAAM7E,GAEtE6E,GAAkB,6CAA8C,MAAOc,GACjE6C,EAAe,mDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBkB,wCAAyC,SAAO7I,EAAY2F,EAAauB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqBhG,OAnBA1C,GAAkB,0CAA2C,KAAM7E,GAEnE6E,GAAkB,0CAA2C,MAAOc,GAC9D6C,EAAe,mDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjBmB,0CAA2C,SAAO9I,EAAY2F,EAAaoD,EAAc7B,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAuBhH,OArBA1C,GAAkB,4CAA6C,KAAM7E,GAErE6E,GAAkB,4CAA6C,MAAOc,GAEtEd,GAAkB,4CAA6C,QAASkE,GAClEP,EAAe,mDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB4C,EAAOpB,EAAwBrD,GAE5E,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBsB,sCAAuC,SAAOjJ,EAAY+I,EAAc7B,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoB/F,OAlBA1C,GAAkB,wCAAyC,KAAM7E,GAEjE6E,GAAkB,wCAAyC,QAASkE,GAC9DP,EAAe,6CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB4C,EAAOpB,EAAwBrD,GAE5E,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBuB,iCAAkC,SAAOlJ,EAAYmJ,EAA0CjC,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoBtH,OAlBA1C,GAAkB,mCAAoC,KAAM7E,GAE5D6E,GAAkB,mCAAoC,sBAAuBsE,GACvEX,EAAe,sCAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBgD,EAAqBxB,EAAwBrD,GAE1F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjByB,8BAA+B,SAAOC,EAAkBC,EAAkBpC,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBjG,OAfA1C,GAAkB,gCAAiC,UAAWwE,GAGxD7B,EAAiB,IAAIC,IAFN,iCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAerD,OAfA,cAEeoC,IAAX4C,IACAzB,EAA+B,OAAIyB,GAKvCxB,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBkD,EAAS1B,EAAwBrD,GAE9E,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB4B,2CAA4C,SAAOC,EAA0DtC,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBpI,OAfA1C,GAAkB,6CAA8C,8BAA+B2E,GAGzFhC,EAAiB,IAAIC,IAFN,+CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBqD,EAA6B7B,EAAwBrD,GAElG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB8B,0CAA2C,SAAOC,EAAwDxC,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBjI,OAfA1C,GAAkB,4CAA6C,6BAA8B6E,GAGvFlC,EAAiB,IAAIC,IAFN,8CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBuD,EAA4B/B,EAAwBrD,GAEjG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBgC,mCAAoC,SAAOtB,EAAuBnB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAezF,OAZMC,EAAiB,IAAIC,IAFN,wCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAYrD,OAZA,cAEoBoC,IAAhB2B,IACAR,EAAoC,YAAIQ,GAK5ChD,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjBiC,2BAA4B,SAAO1B,EAAenJ,EAAe0G,EAAiByB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,0DA+BzG,OA5BMC,EAAiB,IAAIC,IAFN,+BAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAC1BD,EAAyB,QAElBnB,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,GAKvCJ,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,WAUjBkC,6BAA8B,SAAO7J,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,0DAsBxE,OApBA1C,GAAkB,+BAAgC,KAAM7E,GAClDwI,EAAe,oCAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAKhCzC,GAAgBmC,EAJe,GAIyBN,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,WAWjBmC,2CAA4C,SAAO9J,EAAY+J,EAAsD7C,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoB5I,OAlBA1C,GAAkB,6CAA8C,KAAM7E,GAEtE6E,GAAkB,6CAA8C,4BAA6BkF,GACvFvB,EAAe,mDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB4D,EAA2BpC,EAAwBrD,GAEhG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAajBqC,2BAA4B,SAAO9B,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAe3H,OAZMC,EAAiB,IAAIC,IAFN,+BAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBsC,4BAA6B,SAAOxE,EAAiByB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAe5E,OAZMC,EAAiB,IAAIC,IAFN,gCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAYrD,OAZA,cAEeoC,IAAXjB,IACAoC,EAA+B,OAAIpC,GAKvCJ,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBuC,4BAA6B,SAAOC,EAA0CjD,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBrG,OAfA1C,GAAkB,8BAA+B,sBAAuBsF,GAGlE3C,EAAiB,IAAIC,IAFN,+BAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBgE,EAAqBxC,EAAwBrD,GAE1F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAgBjByC,kCAAmC,SAAOlC,EAAenJ,EAAe0G,EAAiB0C,EAAkBE,EAAuBC,EAA6BF,EAAiBlB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAevM,OAZMC,EAAiB,IAAIC,IAFN,sCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAoCrD,OApCA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,QAGpBzB,IAAhB2B,IACAR,EAAoC,YAAIQ,QAGlB3B,IAAtB4B,IACAT,EAA0C,kBAAIS,QAGnC5B,IAAX0B,IACAP,EAA+B,OAAIO,GAKvC/C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjB0C,oCAAqC,SAAOrK,EAAYqI,EAAuBC,EAA6BpB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBnI,OAhBA1C,GAAkB,sCAAuC,KAAM7E,GACzDwI,EAAe,2CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAgBrD,OAhBA,cAEoBoC,IAAhB2B,IACAR,EAAoC,YAAIQ,QAGlB3B,IAAtB4B,IACAT,EAA0C,kBAAIS,GAKlDjD,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAcjB2C,0CAA2C,SAAOtK,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBtJ,OAhBA1C,GAAkB,4CAA6C,KAAM7E,GAC/DwI,EAAe,kDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjB4C,gDAAiD,SAAOvK,EAAY2F,EAAauB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqBxG,OAnBA1C,GAAkB,kDAAmD,KAAM7E,GAE3E6E,GAAkB,kDAAmD,MAAOc,GACtE6C,EAAe,wDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjB6C,6CAA8C,SAAOxK,EAAY2F,EAAauB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqBrG,OAnBA1C,GAAkB,+CAAgD,KAAM7E,GAExE6E,GAAkB,+CAAgD,MAAOc,GACnE6C,EAAe,wDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjB8C,+CAAgD,SAAOzK,EAAY2F,EAAaoD,EAAc7B,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAuBrH,OArBA1C,GAAkB,iDAAkD,KAAM7E,GAE1E6E,GAAkB,iDAAkD,MAAOc,GAE3Ed,GAAkB,iDAAkD,QAASkE,GACvEP,EAAe,wDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB4C,EAAOpB,EAAwBrD,GAE5E,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjB+C,2CAA4C,SAAO1K,EAAY+I,EAAc7B,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoBpG,OAlBA1C,GAAkB,6CAA8C,KAAM7E,GAEtE6E,GAAkB,6CAA8C,QAASkE,GACnEP,EAAe,kDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB4C,EAAOpB,EAAwBrD,GAE5E,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBgD,sCAAuC,SAAO3K,EAAY4K,EAAoD1D,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoBrI,OAlBA1C,GAAkB,wCAAyC,KAAM7E,GAEjE6E,GAAkB,wCAAyC,2BAA4B+F,GACjFpC,EAAe,2CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsByE,EAA0BjD,EAAwBrD,GAE/F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBkD,oDAAqD,SAAO7K,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkB/F,OAhBA1C,GAAkB,sDAAuD,KAAM7E,GACzEwI,EAAe,6DAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjBmD,gDAAiD,SAAOC,EAAetF,EAAiBuF,EAAiC9D,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBhJ,OAhBA1C,GAAkB,kDAAmD,QAASkG,GACxEvC,EAAe,yDAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOqC,KAEjDvD,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAgBrD,OAhBA,cAEeoC,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGTiB,IAA1BsE,IACAnD,EAA8C,sBAAImD,GAKtD3F,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBsD,mDAAoD,SAAOF,EAAetF,EAAiByB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBlH,OAhBA1C,GAAkB,qDAAsD,QAASkG,GAC3EvC,EAAe,4DAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOqC,KAEjDvD,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAYrD,OAZA,cAEeoC,IAAXjB,IACAoC,EAA+B,OAAIpC,GAKvCJ,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAcjBuD,oDAAqD,SAAOH,EAAe7C,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBnK,OAhBA1C,GAAkB,sDAAuD,QAASkG,GAC5EvC,EAAe,6DAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOqC,KAEjDvD,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBwD,qDAAsD,SAAOJ,EAAeK,EAA4ClE,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoB/I,OAlBA1C,GAAkB,uDAAwD,QAASkG,GAEnFlG,GAAkB,uDAAwD,uBAAwBuG,GAC5F5C,EAAe,6DAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOqC,KAEjDvD,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBiF,EAAsBzD,EAAwBrD,GAE3F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjB0D,8DAA+D,SAAON,EAAeO,EAAiBpE,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqB7H,OAnBA1C,GAAkB,gEAAiE,QAASkG,GAE5FlG,GAAkB,gEAAiE,UAAWyG,GACxF9C,EAAe,uEAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOqC,KAClD1G,QAAQ,YAAkBoE,mBAAmBC,OAAO4C,KAEnD9D,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjB4D,2DAA4D,SAAOR,EAAeO,EAAiBpE,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqB1H,OAnBA1C,GAAkB,6DAA8D,QAASkG,GAEzFlG,GAAkB,6DAA8D,UAAWyG,GACrF9C,EAAe,uEAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOqC,KAClD1G,QAAQ,YAAkBoE,mBAAmBC,OAAO4C,KAEnD9D,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjB6D,6DAA8D,SAAOT,EAAeO,EAAiBF,EAA4ClE,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAuBxK,OArBA1C,GAAkB,+DAAgE,QAASkG,GAE3FlG,GAAkB,+DAAgE,UAAWyG,GAE7FzG,GAAkB,+DAAgE,uBAAwBuG,GACpG5C,EAAe,uEAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOqC,KAClD1G,QAAQ,YAAkBoE,mBAAmBC,OAAO4C,KAEnD9D,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBiF,EAAsBzD,EAAwBrD,GAE3F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB8D,mCAAoC,SAAOC,EAA4BxE,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiB9F,OAfA1C,GAAkB,qCAAsC,eAAgB6G,GAGlElE,EAAiB,IAAIC,IAFN,sCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBuF,EAAc/D,EAAwBrD,GAEnF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjBgE,0BAA2B,SAAOzD,EAAenJ,EAAe0G,EAAiByB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAexG,OAZMC,EAAiB,IAAIC,IAFN,8BAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAoBrD,OApBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,GAKvCJ,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBiE,4BAA6B,SAAO5L,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBvE,OAhBA1C,GAAkB,8BAA+B,KAAM7E,GACjDwI,EAAe,mCAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBkE,qDAAsD,SAAOC,EAA4B5E,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBhH,OAhBA1C,GAAkB,uDAAwD,qBAAsBiH,GAC1FtD,EAAe,0DAChBnE,QAAQ,uBAA6BoE,mBAAmBC,OAAOoD,KAE9DtE,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBoE,iCAAkC,SAAOC,EAAsC9E,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBtG,OAfA1C,GAAkB,mCAAoC,oBAAqBmH,GAGrExE,EAAiB,IAAIC,IAFN,qCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB6F,EAAmBrE,EAAwBrD,GAExF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAajBsE,+BAAgC,SAAO/D,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAe/H,OAZMC,EAAiB,IAAIC,IAFN,mCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBuE,iCAAkC,SAAOlM,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkB5E,OAhBA1C,GAAkB,mCAAoC,KAAM7E,GACtDwI,EAAe,wCAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjBwE,wCAAyC,SAAOjE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,0DAmCxI,OAhCMC,EAAiB,IAAIC,IAFN,6CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAC7DY,EAA0B,GAC1BD,EAAyB,QAElBnB,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,WAUjByE,6CAA8C,SAAOpM,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBxF,OAhBA1C,GAAkB,+CAAgD,KAAM7E,GAClEwI,EAAe,kDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB0E,0CAA2C,SAAOrM,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBrF,OAhBA1C,GAAkB,4CAA6C,KAAM7E,GAC/DwI,EAAe,kDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjB2E,4CAA6C,SAAOtM,EAAYuM,EAAgErF,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoBvJ,OAlBA1C,GAAkB,8CAA+C,KAAM7E,GAEvE6E,GAAkB,8CAA+C,iCAAkC0H,GAC7F/D,EAAe,kDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBoG,EAAgC5E,EAAwBrD,GAErG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB6E,yCAA0C,SAAOC,EAAwCvF,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBhH,OAfA1C,GAAkB,2CAA4C,qBAAsB4H,GAG9EjF,EAAiB,IAAIC,IAFN,6CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBsG,EAAoB9E,EAAwBrD,GAEzF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAajB+E,sCAAuC,SAAOxE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAetI,OAZMC,EAAiB,IAAIC,IAFN,2CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAajBgF,kCAAmC,SAAOzE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAelI,OAZMC,EAAiB,IAAIC,IAFN,uCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAajBiF,iCAAkC,SAAO1E,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAejI,OAZMC,EAAiB,IAAIC,IAFN,sCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBkF,sCAAuC,SAAO7M,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBjF,OAhBA1C,GAAkB,wCAAyC,KAAM7E,GAC3DwI,EAAe,2CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBmF,mCAAoC,SAAO9M,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkB9E,OAhBA1C,GAAkB,qCAAsC,KAAM7E,GACxDwI,EAAe,2CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBoF,qCAAsC,SAAO/M,EAAYgN,EAAwC9F,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoBxH,OAlBA1C,GAAkB,uCAAwC,KAAM7E,GAEhE6E,GAAkB,uCAAwC,qBAAsBmI,GAC1ExE,EAAe,2CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB6G,EAAoBrF,EAAwBrD,GAEzF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBsF,kCAAmC,SAAOC,EAAoDhG,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBrH,OAfA1C,GAAkB,oCAAqC,2BAA4BqI,GAG7E1F,EAAiB,IAAIC,IAFN,sCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB+G,EAA0BvF,EAAwBrD,GAE/F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjBwF,0BAA2B,SAAOjF,EAAenJ,EAAe0G,EAAiByB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAexG,OAZMC,EAAiB,IAAIC,IAFN,8BAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAoBrD,OApBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,GAKvCJ,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjByF,4BAA6B,SAAOpN,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBvE,OAhBA1C,GAAkB,8BAA+B,KAAM7E,GACjDwI,EAAe,mCAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB0F,6BAA8B,SAAO5H,EAAiByB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAe7E,OAZMC,EAAiB,IAAIC,IAFN,kCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAYrD,OAZA,cAEeoC,IAAXjB,IACAoC,EAA+B,OAAIpC,GAKvCJ,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB2F,+BAAgC,SAAOtN,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkB1E,OAhBA1C,GAAkB,iCAAkC,KAAM7E,GACpDwI,EAAe,uCAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB4F,yBAA0B,SAAO9H,EAAiByB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAezE,OAZMC,EAAiB,IAAIC,IAFN,6BAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAYrD,OAZA,cAEeoC,IAAXjB,IACAoC,EAA+B,OAAIpC,GAKvCJ,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB6F,2BAA4B,SAAOxN,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBtE,OAhBA1C,GAAkB,6BAA8B,KAAM7E,GAChDwI,EAAe,kCAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAkBjB8F,kCAAmC,SAAOvF,EAAenJ,EAAe0G,EAAiBiI,EAAyBrF,EAAuBC,EAA6BF,EAAiBD,EAAkBwF,EAAiBzG,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAejP,OAZMC,EAAiB,IAAIC,IAFN,sCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OA4CrD,OA5CA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGjBiB,IAAlBgH,IACA7F,EAAsC,cAAI6F,QAG1BhH,IAAhB2B,IACAR,EAAoC,YAAIQ,QAGlB3B,IAAtB4B,IACAT,EAA0C,kBAAIS,QAGnC5B,IAAX0B,IACAP,EAA+B,OAAIO,QAGvB1B,IAAZyB,IACAN,EAAgC,QAAIM,QAGzBzB,IAAXiH,IACA9F,EAA+B,OAAI8F,GAKvCtI,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBiG,uCAAwC,SAAO5N,EAAYkH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBlF,OAhBA1C,GAAkB,yCAA0C,KAAM7E,GAC5DwI,EAAe,2CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAcjBkG,oCAAqC,SAAO7N,EAAY0N,EAAyBrF,EAAuBC,EAA6BwF,EAA6B5G,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBzL,OAhBA1C,GAAkB,sCAAuC,KAAM7E,GACzDwI,EAAe,2CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEsBoC,IAAlBgH,IACA7F,EAAsC,cAAI6F,QAG1BhH,IAAhB2B,IACAR,EAAoC,YAAIQ,QAGlB3B,IAAtB4B,IACAT,EAA0C,kBAAIS,QAGxB5B,IAAtBoH,IACAjG,EAA0C,kBAAIiG,GAKlDzI,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAcjBoG,0CAA2C,SAAO/N,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBtJ,OAhBA1C,GAAkB,4CAA6C,KAAM7E,GAC/DwI,EAAe,kDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBqG,gDAAiD,SAAOhO,EAAY2F,EAAauB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqBxG,OAnBA1C,GAAkB,kDAAmD,KAAM7E,GAE3E6E,GAAkB,kDAAmD,MAAOc,GACtE6C,EAAe,wDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBsG,6CAA8C,SAAOjO,EAAY2F,EAAauB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqBrG,OAnBA1C,GAAkB,+CAAgD,KAAM7E,GAExE6E,GAAkB,+CAAgD,MAAOc,GACnE6C,EAAe,wDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjBuG,+CAAgD,SAAOlO,EAAY2F,EAAaoD,EAAc7B,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAuBrH,OArBA1C,GAAkB,iDAAkD,KAAM7E,GAE1E6E,GAAkB,iDAAkD,MAAOc,GAE3Ed,GAAkB,iDAAkD,QAASkE,GACvEP,EAAe,wDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAC/CqE,QAAQ,QAAcoE,mBAAmBC,OAAO/C,KAE/C6B,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB4C,EAAOpB,EAAwBrD,GAE5E,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBwG,2CAA4C,SAAOnO,EAAY+I,EAAc7B,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoBpG,OAlBA1C,GAAkB,6CAA8C,KAAM7E,GAEtE6E,GAAkB,6CAA8C,QAASkE,GACnEP,EAAe,kDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB4C,EAAOpB,EAAwBrD,GAE5E,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjByG,2CAA4C,SAAOpO,EAAYmK,EAA0CjD,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoBhI,OAlBA1C,GAAkB,6CAA8C,KAAM7E,GAEtE6E,GAAkB,6CAA8C,sBAAuBsF,GACjF3B,EAAe,kDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBgE,EAAqBxC,EAAwBrD,GAE1F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjB0G,sCAAuC,SAAOrO,EAAYsO,EAAoDpH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoBrI,OAlBA1C,GAAkB,wCAAyC,KAAM7E,GAEjE6E,GAAkB,wCAAyC,2BAA4ByJ,GACjF9F,EAAe,2CAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,SAAYF,GAAgBR,GAE/DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBmI,EAA0B3G,EAAwBrD,GAE/F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAcjB4G,qDAAsD,SAAOvO,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBjK,OAhBA1C,GAAkB,uDAAwD,KAAM7E,GAC1EwI,EAAe,8DAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAwBrD,OAxBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGvBiB,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAYjB6G,gDAAiD,SAAOxO,EAAYkI,EAAenJ,EAAemI,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBzH,OAhBA1C,GAAkB,kDAAmD,KAAM7E,GACrEwI,EAAe,yDAChBnE,QAAQ,OAAaoE,mBAAmBC,OAAO1I,KAE9CwH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAgBrD,OAhBA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,GAKrCsG,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB8G,mCAAoC,SAAOC,EAAsDxH,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBxH,OAfA1C,GAAkB,qCAAsC,4BAA6B6J,GAG/ElH,EAAiB,IAAIC,IAFN,sCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBuI,EAA2B/G,EAAwBrD,GAEhG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBgH,uEAAwE,SAAOC,EAAeC,EAAmB3H,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqBxI,OAnBA1C,GAAkB,yEAA0E,QAAS+J,GAErG/J,GAAkB,yEAA0E,YAAagK,GACnGrG,EAAe,gFAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOkG,KAClDvK,QAAQ,cAAoBoE,mBAAmBC,OAAOmG,KAErDrH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAejBmH,2DAA4D,SAAOF,EAAe1G,EAAenJ,EAAe0G,EAAiB2C,EAAiBD,EAAkBjB,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkB3L,OAhBA1C,GAAkB,6DAA8D,QAAS+J,GACnFpG,EAAe,oEAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOkG,KAEjDpH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OA4BrD,OA5BA,cAEaoC,IAATwB,IACAL,EAA6B,KAAIK,QAGxBxB,IAAT3H,IACA8I,EAA6B,KAAI9I,QAGtB2H,IAAXjB,IACAoC,EAA+B,OAAIpC,QAGxBiB,IAAX0B,IACAP,EAA+B,OAAIO,QAGvB1B,IAAZyB,IACAN,EAAgC,QAAIM,GAKxC9C,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBoH,4DAA6D,SAAOH,EAAeI,EAAoE9H,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAoB9K,OAlBA1C,GAAkB,8DAA+D,QAAS+J,GAE1F/J,GAAkB,8DAA+D,mCAAoCmK,GAC/GxG,EAAe,oEAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOkG,KAEjDpH,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB6I,EAAkCrH,EAAwBrD,GAEvG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAWjBsH,0EAA2E,SAAOL,EAAeM,EAA4BhI,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAqBpJ,OAnBA1C,GAAkB,4EAA6E,QAAS+J,GAExG/J,GAAkB,4EAA6E,qBAAsBqK,GAC/G1G,EAAe,sFAChBnE,QAAQ,UAAgBoE,mBAAmBC,OAAOkG,KAClDvK,QAAQ,uBAA6BoE,mBAAmBC,OAAOwG,KAE9D1H,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,OAAUF,GAAgBR,GAE7DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBwH,0CAA2C,SAAOC,EAAgBlI,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,mFAkBzF,OAhBA1C,GAAkB,4CAA6C,SAAUuK,GACnE5G,EAAe,+CAChBnE,QAAQ,WAAiBoE,mBAAmBC,OAAO0G,KAElD5H,EAAiB,IAAIC,IAAIe,EAAc5D,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,UAAaF,GAAgBR,GAEhEW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAQrD,OARA,SAIAe,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SAE7F,CAAP,EAAO,CACHjB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB0H,kCAAmC,SAAOC,EAA0CpI,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiB3G,OAfA1C,GAAkB,oCAAqC,sBAAuByK,GAGxE9H,EAAiB,IAAIC,IAFN,sCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBmJ,EAAqB3H,EAAwBrD,GAE1F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB4H,wCAAyC,SAAOC,EAAsDtI,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiB7H,OAfA1C,GAAkB,0CAA2C,4BAA6B2K,GAGpFhI,EAAiB,IAAIC,IAFN,4CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBqJ,EAA2B7H,EAAwBrD,GAEhG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB8H,oCAAqC,SAAOC,EAA4BxI,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiB/F,OAfA1C,GAAkB,sCAAuC,eAAgB6K,GAGnElI,EAAiB,IAAIC,IAFN,uCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBuJ,EAAc/H,EAAwBrD,GAEnF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBgI,wCAAyC,SAAOC,EAAkD1I,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBzH,OAfA1C,GAAkB,0CAA2C,0BAA2B+K,GAGlFpI,EAAiB,IAAIC,IAFN,2CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsByJ,EAAyBjI,EAAwBrD,GAE9F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBkI,2CAA4C,SAAOC,EAAwD5I,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBlI,OAfA1C,GAAkB,6CAA8C,6BAA8BiL,GAGxFtI,EAAiB,IAAIC,IAFN,+CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB2J,EAA4BnI,EAAwBrD,GAEjG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBoI,qCAAsC,SAAOC,EAA8B9I,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBlG,OAfA1C,GAAkB,uCAAwC,gBAAiBmL,GAGrExI,EAAiB,IAAIC,IAFN,wCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB6J,EAAerI,EAAwBrD,GAEpF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBsI,sCAAuC,SAAOC,EAA8ChJ,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBnH,OAfA1C,GAAkB,wCAAyC,wBAAyBqL,GAG9E1I,EAAiB,IAAIC,IAFN,yCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsB+J,EAAuBvI,EAAwBrD,GAE5F,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBwI,wCAAyC,SAAOC,EAAoClJ,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiB3G,OAfA1C,GAAkB,0CAA2C,mBAAoBuL,GAG3E5I,EAAiB,IAAIC,IAFN,4CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBiK,EAAkBzI,EAAwBrD,GAEvF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB0I,yCAA0C,SAAOC,EAAsCpJ,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiB9G,OAfA1C,GAAkB,2CAA4C,oBAAqByL,GAG7E9I,EAAiB,IAAIC,IAFN,6CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBmK,EAAmB3I,EAAwBrD,GAExF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB4I,0CAA2C,SAAOC,EAAsDtJ,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiB/H,OAfA1C,GAAkB,4CAA6C,4BAA6B2L,GAGtFhJ,EAAiB,IAAIC,IAFN,8CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBqK,EAA2B7I,EAAwBrD,GAEhG,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjB8I,uCAAwC,SAAOC,EAAkCxJ,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiBxG,OAfA1C,GAAkB,yCAA0C,kBAAmB6L,GAGzElJ,EAAiB,IAAIC,IAFN,2CAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsBuK,EAAiB/I,EAAwBrD,GAEtF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,YAUjBgJ,mCAAoC,SAAOC,EAA0B1J,G,YAAA,IAAAA,MAAA,K,wBAAoBK,SAAO,W,iFAiB5F,OAfA1C,GAAkB,qCAAsC,cAAe+L,GAGjEpJ,EAAiB,IAAIC,IAFN,sCAEwB7C,IAEzCN,IACAoD,EAAcpD,EAAcoD,aAG1BC,GAAyB,8BAAEC,OAAQ,QAAWF,GAAgBR,GAE9DW,EAAyB,GAI/B,GAAM3C,GALA4C,EAA0B,GAKqBxD,I,OAWrD,OAXA,SAIAwD,EAAwB,gBAAkB,mBAE1CzC,GAAgBmC,EAAgBK,EAAwBX,EAAQa,OAC5DC,EAAyBN,GAAeA,EAAYnB,QAAUmB,EAAYnB,QAAU,GACxFoB,EAAuBpB,SAAU,+CAAIuB,GAA4BE,GAA2Bd,EAAQX,SACpGoB,EAAuBqB,KAAO7C,GAAsByK,EAAajJ,EAAwBrD,GAElF,CAAP,EAAO,CACHgB,IAAKqB,GAAaa,GAClBN,QAASS,aAWakJ,CAA4BvM,GAC9D,MAAO,CAOGgD,iCAAN,SAAuCJ,G,kCAAgBK,SAAO,W,uEAChC,SAAMF,EAA0BC,iCAAiCJ,I,OAC3F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAetE2D,6BAAN,SAAmCC,EAAenJ,EAAe0G,EAAiB0C,EAAkBC,EAAiBC,EAAuBC,EAA6BpB,G,kCAAgBK,SAAO,W,uEAClK,SAAMF,EAA0BY,6BAA6BC,EAAMnJ,EAAM0G,EAAQ0C,EAASC,EAAQC,EAAaC,EAAmBpB,I,OAC5J,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtEiE,+BAAN,SAAqCvI,EAAYqI,EAAuBC,EAA6BpB,G,kCAAgBK,SAAO,W,uEAC9F,SAAMF,EAA0BkB,+BAA+BvI,EAAIqI,EAAaC,EAAmBpB,I,OAC7H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAatEqE,qCAAN,SAA2C3I,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEACjH,SAAMF,EAA0BsB,qCAAqC3I,EAAIkI,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OAChI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEsE,2CAAN,SAAiD5I,EAAY2F,EAAauB,G,kCAAgBK,SAAO,W,uEACnE,SAAMF,EAA0BuB,2CAA2C5I,EAAI2F,EAAKuB,I,OAC9G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEuE,wCAAN,SAA8C7I,EAAY2F,EAAauB,G,kCAAgBK,SAAO,W,uEAChE,SAAMF,EAA0BwB,wCAAwC7I,EAAI2F,EAAKuB,I,OAC3G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtEwE,0CAAN,SAAgD9I,EAAY2F,EAAaoD,EAAc7B,G,kCAAgBK,SAAO,W,uEAChF,SAAMF,EAA0ByB,0CAA0C9I,EAAI2F,EAAKoD,EAAO7B,I,OACpH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE2E,sCAAN,SAA4CjJ,EAAY+I,EAAc7B,G,kCAAgBK,SAAO,W,uEAC/D,SAAMF,EAA0B4B,sCAAsCjJ,EAAI+I,EAAO7B,I,OAC3G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE4E,iCAAN,SAAuClJ,EAAYmJ,EAA0CjC,G,kCAAgBK,SAAO,W,uEACtF,SAAMF,EAA0B6B,iCAAiClJ,EAAImJ,EAAqBjC,I,OACpH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE8E,8BAAN,SAAoCC,EAAkBC,EAAkBpC,G,kCAAgBK,SAAO,W,uEACjE,SAAMF,EAA0B+B,8BAA8BC,EAASC,EAAQpC,I,OACzG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEiF,2CAAN,SAAiDC,EAA0DtC,G,kCAAgBK,SAAO,W,uEACpG,SAAMF,EAA0BkC,2CAA2CC,EAA6BtC,I,OAClI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEmF,0CAAN,SAAgDC,EAAwDxC,G,kCAAgBK,SAAO,W,uEACjG,SAAMF,EAA0BoC,0CAA0CC,EAA4BxC,I,OAChI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEqF,mCAAN,SAAyCtB,EAAuBnB,G,kCAAgBK,SAAO,W,uEACzD,SAAMF,EAA0BsC,mCAAmCtB,EAAanB,I,OAC1G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtEsF,2BAAN,SAAiC1B,EAAenJ,EAAe0G,EAAiByB,G,kCAAgBK,SAAO,W,uEACzE,SAAMF,EAA0BuC,2BAA2B1B,EAAMnJ,EAAM0G,EAAQyB,I,OACzG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEuF,6BAAN,SAAmC7J,EAAYkH,G,kCAAgBK,SAAO,W,uEACxC,SAAMF,EAA0BwC,6BAA6B7J,EAAIkH,I,OAC3F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEwF,2CAAN,SAAiD9J,EAAY+J,EAAsD7C,G,kCAAgBK,SAAO,W,uEAC5G,SAAMF,EAA0ByC,2CAA2C9J,EAAI+J,EAA2B7C,I,OACpI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAYtE0F,2BAAN,SAAiC9B,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEAC3F,SAAMF,EAA0B2C,2BAA2B9B,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OAClH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE2F,4BAAN,SAAkCxE,EAAiByB,G,kCAAgBK,SAAO,W,uEAC5C,SAAMF,EAA0B4C,4BAA4BxE,EAAQyB,I,OAC9F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE4F,4BAAN,SAAkCC,EAA0CjD,G,kCAAgBK,SAAO,W,uEACrE,SAAMF,EAA0B6C,4BAA4BC,EAAqBjD,I,OAC3G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAetE8F,kCAAN,SAAwClC,EAAenJ,EAAe0G,EAAiB0C,EAAkBE,EAAuBC,EAA6BF,EAAiBlB,G,kCAAgBK,SAAO,W,uEACvK,SAAMF,EAA0B+C,kCAAkClC,EAAMnJ,EAAM0G,EAAQ0C,EAASE,EAAaC,EAAmBF,EAAQlB,I,OACjK,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtE+F,oCAAN,SAA0CrK,EAAYqI,EAAuBC,EAA6BpB,G,kCAAgBK,SAAO,W,uEACnG,SAAMF,EAA0BgD,oCAAoCrK,EAAIqI,EAAaC,EAAmBpB,I,OAClI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAatEgG,0CAAN,SAAgDtK,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEACtH,SAAMF,EAA0BiD,0CAA0CtK,EAAIkI,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OACrI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEiG,gDAAN,SAAsDvK,EAAY2F,EAAauB,G,kCAAgBK,SAAO,W,uEACxE,SAAMF,EAA0BkD,gDAAgDvK,EAAI2F,EAAKuB,I,OACnH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEkG,6CAAN,SAAmDxK,EAAY2F,EAAauB,G,kCAAgBK,SAAO,W,uEACrE,SAAMF,EAA0BmD,6CAA6CxK,EAAI2F,EAAKuB,I,OAChH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtEmG,+CAAN,SAAqDzK,EAAY2F,EAAaoD,EAAc7B,G,kCAAgBK,SAAO,W,uEACrF,SAAMF,EAA0BoD,+CAA+CzK,EAAI2F,EAAKoD,EAAO7B,I,OACzH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEoG,2CAAN,SAAiD1K,EAAY+I,EAAc7B,G,kCAAgBK,SAAO,W,uEACpE,SAAMF,EAA0BqD,2CAA2C1K,EAAI+I,EAAO7B,I,OAChH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEqG,sCAAN,SAA4C3K,EAAY4K,EAAoD1D,G,kCAAgBK,SAAO,W,uEACrG,SAAMF,EAA0BsD,sCAAsC3K,EAAI4K,EAA0B1D,I,OAC9H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEuG,oDAAN,SAA0D7K,EAAYkH,G,kCAAgBK,SAAO,W,uEAC/D,SAAMF,EAA0BwD,oDAAoD7K,EAAIkH,I,OAClH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtEwG,gDAAN,SAAsDC,EAAetF,EAAiBuF,EAAiC9D,G,kCAAgBK,SAAO,W,uEAChH,SAAMF,EAA0ByD,gDAAgDC,EAAOtF,EAAQuF,EAAuB9D,I,OAChJ,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE2G,mDAAN,SAAyDF,EAAetF,EAAiByB,G,kCAAgBK,SAAO,W,uEAClF,SAAMF,EAA0B4D,mDAAmDF,EAAOtF,EAAQyB,I,OAC5H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAatE4G,oDAAN,SAA0DH,EAAe7C,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEACnI,SAAMF,EAA0B6D,oDAAoDH,EAAO7C,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OAClJ,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE6G,qDAAN,SAA2DJ,EAAeK,EAA4ClE,G,kCAAgBK,SAAO,W,uEAC/G,SAAMF,EAA0B8D,qDAAqDJ,EAAOK,EAAsBlE,I,OAC5I,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE+G,8DAAN,SAAoEN,EAAeO,EAAiBpE,G,kCAAgBK,SAAO,W,uEAC7F,SAAMF,EAA0BgE,8DAA8DN,EAAOO,EAASpE,I,OACxI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEiH,2DAAN,SAAiER,EAAeO,EAAiBpE,G,kCAAgBK,SAAO,W,uEAC1F,SAAMF,EAA0BkE,2DAA2DR,EAAOO,EAASpE,I,OACrI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtEkH,6DAAN,SAAmET,EAAeO,EAAiBF,EAA4ClE,G,kCAAgBK,SAAO,W,uEACxI,SAAMF,EAA0BmE,6DAA6DT,EAAOO,EAASF,EAAsBlE,I,OAC7J,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEmH,mCAAN,SAAyCC,EAA4BxE,G,kCAAgBK,SAAO,W,uEAC9D,SAAMF,EAA0BoE,mCAAmCC,EAAcxE,I,OAC3G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtEqH,0BAAN,SAAgCzD,EAAenJ,EAAe0G,EAAiByB,G,kCAAgBK,SAAO,W,uEACxE,SAAMF,EAA0BsE,0BAA0BzD,EAAMnJ,EAAM0G,EAAQyB,I,OACxG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEsH,4BAAN,SAAkC5L,EAAYkH,G,kCAAgBK,SAAO,W,uEACvC,SAAMF,EAA0BuE,4BAA4B5L,EAAIkH,I,OAC1F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEuH,qDAAN,SAA2DC,EAA4B5E,G,kCAAgBK,SAAO,W,uEAChF,SAAMF,EAA0BwE,qDAAqDC,EAAoB5E,I,OACnI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEyH,iCAAN,SAAuCC,EAAsC9E,G,kCAAgBK,SAAO,W,uEACtE,SAAMF,EAA0B0E,iCAAiCC,EAAmB9E,I,OAC9G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAYtE2H,+BAAN,SAAqC/D,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEAC/F,SAAMF,EAA0B4E,+BAA+B/D,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OACtH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE4H,iCAAN,SAAuClM,EAAYkH,G,kCAAgBK,SAAO,W,uEAC5C,SAAMF,EAA0B6E,iCAAiClM,EAAIkH,I,OAC/F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtE6H,wCAAN,SAA8CjE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEACxG,SAAMF,EAA0B8E,wCAAwCjE,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OAC/H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE8H,6CAAN,SAAmDpM,EAAYkH,G,kCAAgBK,SAAO,W,uEACxD,SAAMF,EAA0B+E,6CAA6CpM,EAAIkH,I,OAC3G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE+H,0CAAN,SAAgDrM,EAAYkH,G,kCAAgBK,SAAO,W,uEACrD,SAAMF,EAA0BgF,0CAA0CrM,EAAIkH,I,OACxG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEgI,4CAAN,SAAkDtM,EAAYuM,EAAgErF,G,kCAAgBK,SAAO,W,uEACvH,SAAMF,EAA0BiF,4CAA4CtM,EAAIuM,EAAgCrF,I,OAC1I,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEkI,yCAAN,SAA+CC,EAAwCvF,G,kCAAgBK,SAAO,W,uEAChF,SAAMF,EAA0BmF,yCAAyCC,EAAoBvF,I,OACvH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAYtEoI,sCAAN,SAA4CxE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEACtG,SAAMF,EAA0BqF,sCAAsCxE,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OAC7H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAYtEqI,kCAAN,SAAwCzE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEAClG,SAAMF,EAA0BsF,kCAAkCzE,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OACzH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAYtEsI,iCAAN,SAAuC1E,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEACjG,SAAMF,EAA0BuF,iCAAiC1E,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OACxH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEuI,sCAAN,SAA4C7M,EAAYkH,G,kCAAgBK,SAAO,W,uEACjD,SAAMF,EAA0BwF,sCAAsC7M,EAAIkH,I,OACpG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEwI,mCAAN,SAAyC9M,EAAYkH,G,kCAAgBK,SAAO,W,uEAC9C,SAAMF,EAA0ByF,mCAAmC9M,EAAIkH,I,OACjG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEyI,qCAAN,SAA2C/M,EAAYgN,EAAwC9F,G,kCAAgBK,SAAO,W,uEACxF,SAAMF,EAA0B0F,qCAAqC/M,EAAIgN,EAAoB9F,I,OACvH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE2I,kCAAN,SAAwCC,EAAoDhG,G,kCAAgBK,SAAO,W,uEACrF,SAAMF,EAA0B4F,kCAAkCC,EAA0BhG,I,OACtH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtE6I,0BAAN,SAAgCjF,EAAenJ,EAAe0G,EAAiByB,G,kCAAgBK,SAAO,W,uEACxE,SAAMF,EAA0B8F,0BAA0BjF,EAAMnJ,EAAM0G,EAAQyB,I,OACxG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE8I,4BAAN,SAAkCpN,EAAYkH,G,kCAAgBK,SAAO,W,uEACvC,SAAMF,EAA0B+F,4BAA4BpN,EAAIkH,I,OAC1F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE+I,6BAAN,SAAmC5H,EAAiByB,G,kCAAgBK,SAAO,W,uEAC7C,SAAMF,EAA0BgG,6BAA6B5H,EAAQyB,I,OAC/F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEgJ,+BAAN,SAAqCtN,EAAYkH,G,kCAAgBK,SAAO,W,uEAC1C,SAAMF,EAA0BiG,+BAA+BtN,EAAIkH,I,OAC7F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEiJ,yBAAN,SAA+B9H,EAAiByB,G,kCAAgBK,SAAO,W,uEACzC,SAAMF,EAA0BkG,yBAAyB9H,EAAQyB,I,OAC3F,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEkJ,2BAAN,SAAiCxN,EAAYkH,G,kCAAgBK,SAAO,W,uEACtC,SAAMF,EAA0BmG,2BAA2BxN,EAAIkH,I,OACzF,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAiBtEmJ,kCAAN,SAAwCvF,EAAenJ,EAAe0G,EAAiBiI,EAAyBrF,EAAuBC,EAA6BF,EAAiBD,EAAkBwF,EAAiBzG,G,kCAAgBK,SAAO,W,uEACjN,SAAMF,EAA0BoG,kCAAkCvF,EAAMnJ,EAAM0G,EAAQiI,EAAerF,EAAaC,EAAmBF,EAAQD,EAASwF,EAAQzG,I,OACxL,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEsJ,uCAAN,SAA6C5N,EAAYkH,G,kCAAgBK,SAAO,W,uEAClD,SAAMF,EAA0BuG,uCAAuC5N,EAAIkH,I,OACrG,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAatEuJ,oCAAN,SAA0C7N,EAAY0N,EAAyBrF,EAAuBC,EAA6BwF,EAA6B5G,G,kCAAgBK,SAAO,W,uEACzJ,SAAMF,EAA0BwG,oCAAoC7N,EAAI0N,EAAerF,EAAaC,EAAmBwF,EAAmB5G,I,OACpK,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAatEyJ,0CAAN,SAAgD/N,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEACtH,SAAMF,EAA0B0G,0CAA0C/N,EAAIkI,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OACrI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE0J,gDAAN,SAAsDhO,EAAY2F,EAAauB,G,kCAAgBK,SAAO,W,uEACxE,SAAMF,EAA0B2G,gDAAgDhO,EAAI2F,EAAKuB,I,OACnH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE2J,6CAAN,SAAmDjO,EAAY2F,EAAauB,G,kCAAgBK,SAAO,W,uEACrE,SAAMF,EAA0B4G,6CAA6CjO,EAAI2F,EAAKuB,I,OAChH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtE4J,+CAAN,SAAqDlO,EAAY2F,EAAaoD,EAAc7B,G,kCAAgBK,SAAO,W,uEACrF,SAAMF,EAA0B6G,+CAA+ClO,EAAI2F,EAAKoD,EAAO7B,I,OACzH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE6J,2CAAN,SAAiDnO,EAAY+I,EAAc7B,G,kCAAgBK,SAAO,W,uEACpE,SAAMF,EAA0B8G,2CAA2CnO,EAAI+I,EAAO7B,I,OAChH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE8J,2CAAN,SAAiDpO,EAAYmK,EAA0CjD,G,kCAAgBK,SAAO,W,uEAChG,SAAMF,EAA0B+G,2CAA2CpO,EAAImK,EAAqBjD,I,OAC9H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE+J,sCAAN,SAA4CrO,EAAYsO,EAAoDpH,G,kCAAgBK,SAAO,W,uEACrG,SAAMF,EAA0BgH,sCAAsCrO,EAAIsO,EAA0BpH,I,OAC9H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAatEiK,qDAAN,SAA2DvO,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,G,kCAAgBK,SAAO,W,uEACjI,SAAMF,EAA0BkH,qDAAqDvO,EAAIkI,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,I,OAChJ,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAWtEkK,gDAAN,SAAsDxO,EAAYkI,EAAenJ,EAAemI,G,kCAAgBK,SAAO,W,uEACzF,SAAMF,EAA0BmH,gDAAgDxO,EAAIkI,EAAMnJ,EAAMmI,I,OAC1H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEmK,mCAAN,SAAyCC,EAAsDxH,G,kCAAgBK,SAAO,W,uEACxF,SAAMF,EAA0BoH,mCAAmCC,EAA2BxH,I,OACxH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEqK,uEAAN,SAA6EC,EAAeC,EAAmB3H,G,kCAAgBK,SAAO,W,uEACxG,SAAMF,EAA0BsH,uEAAuEC,EAAOC,EAAW3H,I,OACnJ,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YActEwK,2DAAN,SAAiEF,EAAe1G,EAAenJ,EAAe0G,EAAiB2C,EAAiBD,EAAkBjB,G,kCAAgBK,SAAO,W,uEAC3J,SAAMF,EAA0ByH,2DAA2DF,EAAO1G,EAAMnJ,EAAM0G,EAAQ2C,EAAQD,EAASjB,I,OACjK,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtEyK,4DAAN,SAAkEH,EAAeI,EAAoE9H,G,kCAAgBK,SAAO,W,uEAC9I,SAAMF,EAA0B0H,4DAA4DH,EAAOI,EAAkC9H,I,OAC/J,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAUtE2K,0EAAN,SAAgFL,EAAeM,EAA4BhI,G,kCAAgBK,SAAO,W,uEACpH,SAAMF,EAA0B4H,0EAA0EL,EAAOM,EAAoBhI,I,OAC/J,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE6K,0CAAN,SAAgDC,EAAgBlI,G,kCAAgBK,SAAO,W,uEACzD,SAAMF,EAA0B8H,0CAA0CC,EAAQlI,I,OAC5G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE+K,kCAAN,SAAwCC,EAA0CpI,G,kCAAgBK,SAAO,W,uEAC3E,SAAMF,EAA0BgI,kCAAkCC,EAAqBpI,I,OACjH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEiL,wCAAN,SAA8CC,EAAsDtI,G,kCAAgBK,SAAO,W,uEAC7F,SAAMF,EAA0BkI,wCAAwCC,EAA2BtI,I,OAC7H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEmL,oCAAN,SAA0CC,EAA4BxI,G,kCAAgBK,SAAO,W,uEAC/D,SAAMF,EAA0BoI,oCAAoCC,EAAcxI,I,OAC5G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEqL,wCAAN,SAA8CC,EAAkD1I,G,kCAAgBK,SAAO,W,uEACzF,SAAMF,EAA0BsI,wCAAwCC,EAAyB1I,I,OAC3H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEuL,2CAAN,SAAiDC,EAAwD5I,G,kCAAgBK,SAAO,W,uEAClG,SAAMF,EAA0BwI,2CAA2CC,EAA4B5I,I,OACjI,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEyL,qCAAN,SAA2CC,EAA8B9I,G,kCAAgBK,SAAO,W,uEAClE,SAAMF,EAA0B0I,qCAAqCC,EAAe9I,I,OAC9G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE2L,sCAAN,SAA4CC,EAA8ChJ,G,kCAAgBK,SAAO,W,uEACnF,SAAMF,EAA0B4I,sCAAsCC,EAAuBhJ,I,OACvH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE6L,wCAAN,SAA8CC,EAAoClJ,G,kCAAgBK,SAAO,W,uEAC3E,SAAMF,EAA0B8I,wCAAwCC,EAAkBlJ,I,OACpH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStE+L,yCAAN,SAA+CC,EAAsCpJ,G,kCAAgBK,SAAO,W,uEAC9E,SAAMF,EAA0BgJ,yCAAyCC,EAAmBpJ,I,OACtH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEiM,0CAAN,SAAgDC,EAAsDtJ,G,kCAAgBK,SAAO,W,uEAC/F,SAAMF,EAA0BkJ,0CAA0CC,EAA2BtJ,I,OAC/H,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEmM,uCAAN,SAA6CC,EAAkCxJ,G,kCAAgBK,SAAO,W,uEACxE,SAAMF,EAA0BoJ,uCAAuCC,EAAiBxJ,I,OAClH,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,YAStEqM,mCAAN,SAAyCC,EAA0B1J,G,kCAAgBK,SAAO,W,uEAC5D,SAAMF,EAA0BsJ,mCAAmCC,EAAa1J,I,OAC1G,OADM4J,EAAoB,SACnB,CAAP,EAAOhK,GAAsBgK,EAAmB,KAAa1M,GAAWE,cAmgEpF,4B,+CAuqCA,OAvqCgC,oBAQrB,YAAAgD,iCAAP,SAAwCJ,GAAxC,WACI,OAAOE,GAAarH,KAAKuE,eAAegD,iCAAiCJ,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAiB1H,YAAA0D,6BAAP,SAAoCC,EAAenJ,EAAe0G,EAAiB0C,EAAkBC,EAAiBC,EAAuBC,EAA6BpB,GAA1K,WACI,OAAOE,GAAarH,KAAKuE,eAAe2D,6BAA6BC,EAAMnJ,EAAM0G,EAAQ0C,EAASC,EAAQC,EAAaC,EAAmBpB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAa3L,YAAAgE,+BAAP,SAAsCvI,EAAYqI,EAAuBC,EAA6BpB,GAAtG,WACI,OAAOE,GAAarH,KAAKuE,eAAeiE,+BAA+BvI,EAAIqI,EAAaC,EAAmBpB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAe5J,YAAAoE,qCAAP,SAA4C3I,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAAzH,WACI,OAAOE,GAAarH,KAAKuE,eAAeqE,qCAAqC3I,EAAIkI,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY/J,YAAAqE,2CAAP,SAAkD5I,EAAY2F,EAAauB,GAA3E,WACI,OAAOE,GAAarH,KAAKuE,eAAesE,2CAA2C5I,EAAI2F,EAAKuB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY7I,YAAAsE,wCAAP,SAA+C7I,EAAY2F,EAAauB,GAAxE,WACI,OAAOE,GAAarH,KAAKuE,eAAeuE,wCAAwC7I,EAAI2F,EAAKuB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAa1I,YAAAuE,0CAAP,SAAiD9I,EAAY2F,EAAaoD,EAAc7B,GAAxF,WACI,OAAOE,GAAarH,KAAKuE,eAAewE,0CAA0C9I,EAAI2F,EAAKoD,EAAO7B,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYnJ,YAAA0E,sCAAP,SAA6CjJ,EAAY+I,EAAc7B,GAAvE,WACI,OAAOE,GAAarH,KAAKuE,eAAe2E,sCAAsCjJ,EAAI+I,EAAO7B,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY1I,YAAA2E,iCAAP,SAAwClJ,EAAYmJ,EAA0CjC,GAA9F,WACI,OAAOE,GAAarH,KAAKuE,eAAe4E,iCAAiClJ,EAAImJ,EAAqBjC,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYnJ,YAAA6E,8BAAP,SAAqCC,EAAkBC,EAAkBpC,GAAzE,WACI,OAAOE,GAAarH,KAAKuE,eAAe8E,8BAA8BC,EAASC,EAAQpC,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWxI,YAAAgF,2CAAP,SAAkDC,EAA0DtC,GAA5G,WACI,OAAOE,GAAarH,KAAKuE,eAAeiF,2CAA2CC,EAA6BtC,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWjK,YAAAkF,0CAAP,SAAiDC,EAAwDxC,GAAzG,WACI,OAAOE,GAAarH,KAAKuE,eAAemF,0CAA0CC,EAA4BxC,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW/J,YAAAoF,mCAAP,SAA0CtB,EAAuBnB,GAAjE,WACI,OAAOE,GAAarH,KAAKuE,eAAeqF,mCAAmCtB,EAAanB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAazI,YAAAqF,2BAAP,SAAkC1B,EAAenJ,EAAe0G,EAAiByB,GAAjF,WACI,OAAOE,GAAarH,KAAKuE,eAAesF,2BAA2B1B,EAAMnJ,EAAM0G,EAAQyB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWxI,YAAAsF,6BAAP,SAAoC7J,EAAYkH,GAAhD,WACI,OAAOE,GAAarH,KAAKuE,eAAeuF,6BAA6B7J,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY1H,YAAAuF,2CAAP,SAAkD9J,EAAY+J,EAAsD7C,GAApH,WACI,OAAOE,GAAarH,KAAKuE,eAAewF,2CAA2C9J,EAAI+J,EAA2B7C,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAcnK,YAAAyF,2BAAP,SAAkC9B,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAAnG,WACI,OAAOE,GAAarH,KAAKuE,eAAe0F,2BAA2B9B,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWjJ,YAAA0F,4BAAP,SAAmCxE,EAAiByB,GAApD,WACI,OAAOE,GAAarH,KAAKuE,eAAe2F,4BAA4BxE,EAAQyB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW7H,YAAA2F,4BAAP,SAAmCC,EAA0CjD,GAA7E,WACI,OAAOE,GAAarH,KAAKuE,eAAe4F,4BAA4BC,EAAqBjD,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAiB1I,YAAA6F,kCAAP,SAAyClC,EAAenJ,EAAe0G,EAAiB0C,EAAkBE,EAAuBC,EAA6BF,EAAiBlB,GAA/K,WACI,OAAOE,GAAarH,KAAKuE,eAAe8F,kCAAkClC,EAAMnJ,EAAM0G,EAAQ0C,EAASE,EAAaC,EAAmBF,EAAQlB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAahM,YAAA8F,oCAAP,SAA2CrK,EAAYqI,EAAuBC,EAA6BpB,GAA3G,WACI,OAAOE,GAAarH,KAAKuE,eAAe+F,oCAAoCrK,EAAIqI,EAAaC,EAAmBpB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAejK,YAAA+F,0CAAP,SAAiDtK,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAA9H,WACI,OAAOE,GAAarH,KAAKuE,eAAegG,0CAA0CtK,EAAIkI,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYpK,YAAAgG,gDAAP,SAAuDvK,EAAY2F,EAAauB,GAAhF,WACI,OAAOE,GAAarH,KAAKuE,eAAeiG,gDAAgDvK,EAAI2F,EAAKuB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYlJ,YAAAiG,6CAAP,SAAoDxK,EAAY2F,EAAauB,GAA7E,WACI,OAAOE,GAAarH,KAAKuE,eAAekG,6CAA6CxK,EAAI2F,EAAKuB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAa/I,YAAAkG,+CAAP,SAAsDzK,EAAY2F,EAAaoD,EAAc7B,GAA7F,WACI,OAAOE,GAAarH,KAAKuE,eAAemG,+CAA+CzK,EAAI2F,EAAKoD,EAAO7B,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYxJ,YAAAmG,2CAAP,SAAkD1K,EAAY+I,EAAc7B,GAA5E,WACI,OAAOE,GAAarH,KAAKuE,eAAeoG,2CAA2C1K,EAAI+I,EAAO7B,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY/I,YAAAoG,sCAAP,SAA6C3K,EAAY4K,EAAoD1D,GAA7G,WACI,OAAOE,GAAarH,KAAKuE,eAAeqG,sCAAsC3K,EAAI4K,EAA0B1D,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW7J,YAAAsG,oDAAP,SAA2D7K,EAAYkH,GAAvE,WACI,OAAOE,GAAarH,KAAKuE,eAAeuG,oDAAoD7K,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAajJ,YAAAuG,gDAAP,SAAuDC,EAAetF,EAAiBuF,EAAiC9D,GAAxH,WACI,OAAOE,GAAarH,KAAKuE,eAAewG,gDAAgDC,EAAOtF,EAAQuF,EAAuB9D,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY/K,YAAA0G,mDAAP,SAA0DF,EAAetF,EAAiByB,GAA1F,WACI,OAAOE,GAAarH,KAAKuE,eAAe2G,mDAAmDF,EAAOtF,EAAQyB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAe3J,YAAA2G,oDAAP,SAA2DH,EAAe7C,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAA3I,WACI,OAAOE,GAAarH,KAAKuE,eAAe4G,oDAAoDH,EAAO7C,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYjL,YAAA4G,qDAAP,SAA4DJ,EAAeK,EAA4ClE,GAAvH,WACI,OAAOE,GAAarH,KAAKuE,eAAe6G,qDAAqDJ,EAAOK,EAAsBlE,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY3K,YAAA8G,8DAAP,SAAqEN,EAAeO,EAAiBpE,GAArG,WACI,OAAOE,GAAarH,KAAKuE,eAAe+G,8DAA8DN,EAAOO,EAASpE,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYvK,YAAAgH,2DAAP,SAAkER,EAAeO,EAAiBpE,GAAlG,WACI,OAAOE,GAAarH,KAAKuE,eAAeiH,2DAA2DR,EAAOO,EAASpE,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAapK,YAAAiH,6DAAP,SAAoET,EAAeO,EAAiBF,EAA4ClE,GAAhJ,WACI,OAAOE,GAAarH,KAAKuE,eAAekH,6DAA6DT,EAAOO,EAASF,EAAsBlE,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW5L,YAAAkH,mCAAP,SAA0CC,EAA4BxE,GAAtE,WACI,OAAOE,GAAarH,KAAKuE,eAAemH,mCAAmCC,EAAcxE,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAa1I,YAAAoH,0BAAP,SAAiCzD,EAAenJ,EAAe0G,EAAiByB,GAAhF,WACI,OAAOE,GAAarH,KAAKuE,eAAeqH,0BAA0BzD,EAAMnJ,EAAM0G,EAAQyB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWvI,YAAAqH,4BAAP,SAAmC5L,EAAYkH,GAA/C,WACI,OAAOE,GAAarH,KAAKuE,eAAesH,4BAA4B5L,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWzH,YAAAsH,qDAAP,SAA4DC,EAA4B5E,GAAxF,WACI,OAAOE,GAAarH,KAAKuE,eAAeuH,qDAAqDC,EAAoB5E,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWlK,YAAAwH,iCAAP,SAAwCC,EAAsC9E,GAA9E,WACI,OAAOE,GAAarH,KAAKuE,eAAeyH,iCAAiCC,EAAmB9E,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAc7I,YAAA0H,+BAAP,SAAsC/D,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAAvG,WACI,OAAOE,GAAarH,KAAKuE,eAAe2H,+BAA+B/D,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWrJ,YAAA2H,iCAAP,SAAwClM,EAAYkH,GAApD,WACI,OAAOE,GAAarH,KAAKuE,eAAe4H,iCAAiClM,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAa9H,YAAA4H,wCAAP,SAA+CjE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAAhH,WACI,OAAOE,GAAarH,KAAKuE,eAAe6H,wCAAwCjE,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW9J,YAAA6H,6CAAP,SAAoDpM,EAAYkH,GAAhE,WACI,OAAOE,GAAarH,KAAKuE,eAAe8H,6CAA6CpM,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW1I,YAAA8H,0CAAP,SAAiDrM,EAAYkH,GAA7D,WACI,OAAOE,GAAarH,KAAKuE,eAAe+H,0CAA0CrM,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYvI,YAAA+H,4CAAP,SAAmDtM,EAAYuM,EAAgErF,GAA/H,WACI,OAAOE,GAAarH,KAAKuE,eAAegI,4CAA4CtM,EAAIuM,EAAgCrF,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWzK,YAAAiI,yCAAP,SAAgDC,EAAwCvF,GAAxF,WACI,OAAOE,GAAarH,KAAKuE,eAAekI,yCAAyCC,EAAoBvF,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cActJ,YAAAmI,sCAAP,SAA6CxE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAA9G,WACI,OAAOE,GAAarH,KAAKuE,eAAeoI,sCAAsCxE,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAc5J,YAAAoI,kCAAP,SAAyCzE,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAA1G,WACI,OAAOE,GAAarH,KAAKuE,eAAeqI,kCAAkCzE,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAcxJ,YAAAqI,iCAAP,SAAwC1E,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAAzG,WACI,OAAOE,GAAarH,KAAKuE,eAAesI,iCAAiC1E,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWvJ,YAAAsI,sCAAP,SAA6C7M,EAAYkH,GAAzD,WACI,OAAOE,GAAarH,KAAKuE,eAAeuI,sCAAsC7M,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWnI,YAAAuI,mCAAP,SAA0C9M,EAAYkH,GAAtD,WACI,OAAOE,GAAarH,KAAKuE,eAAewI,mCAAmC9M,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYhI,YAAAwI,qCAAP,SAA4C/M,EAAYgN,EAAwC9F,GAAhG,WACI,OAAOE,GAAarH,KAAKuE,eAAeyI,qCAAqC/M,EAAIgN,EAAoB9F,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWtJ,YAAA0I,kCAAP,SAAyCC,EAAoDhG,GAA7F,WACI,OAAOE,GAAarH,KAAKuE,eAAe2I,kCAAkCC,EAA0BhG,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAarJ,YAAA4I,0BAAP,SAAiCjF,EAAenJ,EAAe0G,EAAiByB,GAAhF,WACI,OAAOE,GAAarH,KAAKuE,eAAe6I,0BAA0BjF,EAAMnJ,EAAM0G,EAAQyB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWvI,YAAA6I,4BAAP,SAAmCpN,EAAYkH,GAA/C,WACI,OAAOE,GAAarH,KAAKuE,eAAe8I,4BAA4BpN,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWzH,YAAA8I,6BAAP,SAAoC5H,EAAiByB,GAArD,WACI,OAAOE,GAAarH,KAAKuE,eAAe+I,6BAA6B5H,EAAQyB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW9H,YAAA+I,+BAAP,SAAsCtN,EAAYkH,GAAlD,WACI,OAAOE,GAAarH,KAAKuE,eAAegJ,+BAA+BtN,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW5H,YAAAgJ,yBAAP,SAAgC9H,EAAiByB,GAAjD,WACI,OAAOE,GAAarH,KAAKuE,eAAeiJ,yBAAyB9H,EAAQyB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW1H,YAAAiJ,2BAAP,SAAkCxN,EAAYkH,GAA9C,WACI,OAAOE,GAAarH,KAAKuE,eAAekJ,2BAA2BxN,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAmBxH,YAAAkJ,kCAAP,SAAyCvF,EAAenJ,EAAe0G,EAAiBiI,EAAyBrF,EAAuBC,EAA6BF,EAAiBD,EAAkBwF,EAAiBzG,GAAzN,WACI,OAAOE,GAAarH,KAAKuE,eAAemJ,kCAAkCvF,EAAMnJ,EAAM0G,EAAQiI,EAAerF,EAAaC,EAAmBF,EAAQD,EAASwF,EAAQzG,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWvN,YAAAqJ,uCAAP,SAA8C5N,EAAYkH,GAA1D,WACI,OAAOE,GAAarH,KAAKuE,eAAesJ,uCAAuC5N,EAAIkH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAepI,YAAAsJ,oCAAP,SAA2C7N,EAAY0N,EAAyBrF,EAAuBC,EAA6BwF,EAA6B5G,GAAjK,WACI,OAAOE,GAAarH,KAAKuE,eAAeuJ,oCAAoC7N,EAAI0N,EAAerF,EAAaC,EAAmBwF,EAAmB5G,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAenM,YAAAwJ,0CAAP,SAAiD/N,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAA9H,WACI,OAAOE,GAAarH,KAAKuE,eAAeyJ,0CAA0C/N,EAAIkI,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYpK,YAAAyJ,gDAAP,SAAuDhO,EAAY2F,EAAauB,GAAhF,WACI,OAAOE,GAAarH,KAAKuE,eAAe0J,gDAAgDhO,EAAI2F,EAAKuB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYlJ,YAAA0J,6CAAP,SAAoDjO,EAAY2F,EAAauB,GAA7E,WACI,OAAOE,GAAarH,KAAKuE,eAAe2J,6CAA6CjO,EAAI2F,EAAKuB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAa/I,YAAA2J,+CAAP,SAAsDlO,EAAY2F,EAAaoD,EAAc7B,GAA7F,WACI,OAAOE,GAAarH,KAAKuE,eAAe4J,+CAA+ClO,EAAI2F,EAAKoD,EAAO7B,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYxJ,YAAA4J,2CAAP,SAAkDnO,EAAY+I,EAAc7B,GAA5E,WACI,OAAOE,GAAarH,KAAKuE,eAAe6J,2CAA2CnO,EAAI+I,EAAO7B,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY/I,YAAA6J,2CAAP,SAAkDpO,EAAYmK,EAA0CjD,GAAxG,WACI,OAAOE,GAAarH,KAAKuE,eAAe8J,2CAA2CpO,EAAImK,EAAqBjD,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY7J,YAAA8J,sCAAP,SAA6CrO,EAAYsO,EAAoDpH,GAA7G,WACI,OAAOE,GAAarH,KAAKuE,eAAe+J,sCAAsCrO,EAAIsO,EAA0BpH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAe7J,YAAAgK,qDAAP,SAA4DvO,EAAYkI,EAAenJ,EAAe0G,EAAiB0C,EAAkBjB,GAAzI,WACI,OAAOE,GAAarH,KAAKuE,eAAeiK,qDAAqDvO,EAAIkI,EAAMnJ,EAAM0G,EAAQ0C,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAa/K,YAAAiK,gDAAP,SAAuDxO,EAAYkI,EAAenJ,EAAemI,GAAjG,WACI,OAAOE,GAAarH,KAAKuE,eAAekK,gDAAgDxO,EAAIkI,EAAMnJ,EAAMmI,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWzJ,YAAAkK,mCAAP,SAA0CC,EAAsDxH,GAAhG,WACI,OAAOE,GAAarH,KAAKuE,eAAemK,mCAAmCC,EAA2BxH,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYvJ,YAAAoK,uEAAP,SAA8EC,EAAeC,EAAmB3H,GAAhH,WACI,OAAOE,GAAarH,KAAKuE,eAAeqK,uEAAuEC,EAAOC,EAAW3H,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAgBlL,YAAAuK,2DAAP,SAAkEF,EAAe1G,EAAenJ,EAAe0G,EAAiB2C,EAAiBD,EAAkBjB,GAAnK,WACI,OAAOE,GAAarH,KAAKuE,eAAewK,2DAA2DF,EAAO1G,EAAMnJ,EAAM0G,EAAQ2C,EAAQD,EAASjB,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAYhM,YAAAwK,4DAAP,SAAmEH,EAAeI,EAAoE9H,GAAtJ,WACI,OAAOE,GAAarH,KAAKuE,eAAeyK,4DAA4DH,EAAOI,EAAkC9H,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAY9L,YAAA0K,0EAAP,SAAiFL,EAAeM,EAA4BhI,GAA5H,WACI,OAAOE,GAAarH,KAAKuE,eAAe2K,0EAA0EL,EAAOM,EAAoBhI,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW9L,YAAA4K,0CAAP,SAAiDC,EAAgBlI,GAAjE,WACI,OAAOE,GAAarH,KAAKuE,eAAe6K,0CAA0CC,EAAQlI,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW3I,YAAA8K,kCAAP,SAAyCC,EAA0CpI,GAAnF,WACI,OAAOE,GAAarH,KAAKuE,eAAe+K,kCAAkCC,EAAqBpI,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWhJ,YAAAgL,wCAAP,SAA+CC,EAAsDtI,GAArG,WACI,OAAOE,GAAarH,KAAKuE,eAAeiL,wCAAwCC,EAA2BtI,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW5J,YAAAkL,oCAAP,SAA2CC,EAA4BxI,GAAvE,WACI,OAAOE,GAAarH,KAAKuE,eAAemL,oCAAoCC,EAAcxI,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW3I,YAAAoL,wCAAP,SAA+CC,EAAkD1I,GAAjG,WACI,OAAOE,GAAarH,KAAKuE,eAAeqL,wCAAwCC,EAAyB1I,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW1J,YAAAsL,2CAAP,SAAkDC,EAAwD5I,GAA1G,WACI,OAAOE,GAAarH,KAAKuE,eAAeuL,2CAA2CC,EAA4B5I,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWhK,YAAAwL,qCAAP,SAA4CC,EAA8B9I,GAA1E,WACI,OAAOE,GAAarH,KAAKuE,eAAeyL,qCAAqCC,EAAe9I,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW7I,YAAA0L,sCAAP,SAA6CC,EAA8ChJ,GAA3F,WACI,OAAOE,GAAarH,KAAKuE,eAAe2L,sCAAsCC,EAAuBhJ,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWtJ,YAAA4L,wCAAP,SAA+CC,EAAoClJ,GAAnF,WACI,OAAOE,GAAarH,KAAKuE,eAAe6L,wCAAwCC,EAAkBlJ,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWnJ,YAAA8L,yCAAP,SAAgDC,EAAsCpJ,GAAtF,WACI,OAAOE,GAAarH,KAAKuE,eAAe+L,yCAAyCC,EAAmBpJ,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWrJ,YAAAgM,0CAAP,SAAiDC,EAAsDtJ,GAAvG,WACI,OAAOE,GAAarH,KAAKuE,eAAeiM,0CAA0CC,EAA2BtJ,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAW9J,YAAAkM,uCAAP,SAA8CC,EAAkCxJ,GAAhF,WACI,OAAOE,GAAarH,KAAKuE,eAAemM,uCAAuCC,EAAiBxJ,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAWjJ,YAAAoM,mCAAP,SAA0CC,EAA0B1J,GAApE,WACI,OAAOE,GAAarH,KAAKuE,eAAeqM,mCAAmCC,EAAa1J,GAAS6J,MAAK,SAAC5J,GAAY,OAAAA,EAAQ,EAAK3C,MAAO,EAAKD,cAEpJ,EAvqCA,CAAgCyM,IGhianBC,ICUb,WAmDI,WAAYC,QAAA,IAAAA,MAAA,IACRnR,KAAKoR,OAASD,EAAMC,OACpBpR,KAAKqR,SAAWF,EAAME,SACtBrR,KAAKsR,SAAWH,EAAMG,SACtBtR,KAAKqF,YAAc8L,EAAM9L,YACzBrF,KAAKwE,SAAW2M,EAAM3M,SACtBxE,KAAK2H,YAAcwJ,EAAMxJ,YACzB3H,KAAKuR,aAAeJ,EAAMI,aAavB,YAAAhL,WAAP,SAAkBiL,GACd,IAAMC,EAAmB,IAAIC,OAAO,8DAAiE,KACrG,OAAgB,OAATF,IAAkBC,EAASE,KAAKH,IAAgC,gCAAvBA,EAAKI,gBAzE7D,GDV8B,SAAAC,GAAU,OAAAvT,OAAOwT,KAAKD,GACjDE,KAAI,SAAAnM,GAAO,OAAGA,EAAG,IAAI8C,mBAAmBmJ,EAAOjM,OAC/C5E,KAAK,O,+CERKgR,GAAmC,WAC9C,IAAMC,GAAS,IAAAC,aAEf,OAAID,aAAM,EAANA,EAAQE,aACH,kBAACC,GAAA,EAAe,MAGlB,kBAACC,GAAgB,OAGbA,GAA4C,WACvD,IAAMJ,GAAS,IAAAC,aACTI,GAAO,IAAAC,WAEPC,GAAU,IAAAC,cACVC,GAAW,IAAAC,eAEX,GAAsB,IAAAC,WAAkB,GAAvCC,EAAM,KAAEC,EAAS,KAClB,GAAgC,IAAAF,YAA/B/B,EAAW,KAAEkC,EAAc,MAElC,IAAAC,YAAU,YAEkB,gD,6EAEO,SADhB,WAAkBN,EAAShN,QACjB,OAET,GAAMuN,KADlB,M,QAE4B,KAA1BC,OADEA,EAAQ,eACL,EAALA,EAAOC,kBACTX,EAAQlO,QAAQ,CACdoB,OAAQ,KAEVoN,GAAU,I,oCAMf,CAACJ,EAAShN,SAEb,IAAMuN,EAAiB,kE,uEACD,SAAMX,aAAI,EAAJA,EAAMc,IAAIC,Y,OAKnB,OALXhO,EAAc,SAKH,GAJL,IAAIiO,GAAW,CACzBjO,YAAW,EACXb,UAAUyN,aAAM,EAANA,EAAQmB,IAAIG,cAAe,KAGpC7C,uCAAuC,CACtC8C,WAAYvB,aAAM,EAANA,EAAQmB,IAAIK,UACxBC,UAAWzB,aAAM,EAANA,EAAQmB,IAAIO,WAExB3C,MAAK,SAAC4C,GAAS,OAAAA,EAAK3K,S,OACvB,MAAO,CAAP,EANiB,mBASnB,IAAA+J,YAAU,YAEgB,gD,uEACM,SAAMC,K,cAA5BY,EAAsB,SAC5Bd,EAAec,G,aAIhB,CAAC5B,aAAM,EAANA,EAAQmB,IAAIG,YAAajB,IAE7B,IAAMwB,EAAmB,SAAOC,EAAgBC,GAAiB,uD,0CAC/D,QAAkBrN,IAAdqN,EACF,MAAM,IAAIpP,MAAM,yB,OAElB4N,EAAQyB,KAAK,YAAYD,G,WAGrBE,EAAwB,SAACH,EAAgBC,GAC7C,QAAkBrN,IAAdqN,EACF,MAAM,IAAIpP,MAAM,yBAElB,OAAO4N,EAAQ2B,WAAW,CAAEtN,SAAU,YAAYmN,KAG9CI,EAAoB,SAAOC,GAAa,uD,kDAE5C,GAAIxD,EAAa,CACf,GAAIA,EAAYyD,iBAAmBzD,EAAYsC,eAAgB,CAC7D,QAAiCxM,IAA7BkK,EAAY0D,aACd,MAAM,IAAI3P,MAAM,kDAKlB,OAHM4P,EAAc,kBAAyB,CAAEjP,IAAKkP,OAAO/B,SAASgC,KAAM1M,MAAO,CAAE6K,OAAQ,UACrFtN,EFzFgB,SAACoP,EAAiBH,EAAqBI,GAMnE,OAAUD,EAAO,IAAIzD,GALN,CACb2D,SAAUL,EACVM,eAAgBF,IEsFAG,CAAelE,EAAY0D,aAAcC,EAAaC,OAAO/B,SAASgC,MAClFD,OAAO/B,SAASgC,KAAOnP,EAChB,CAAP,GAAO,GAET,MAAO,CAAP,EAAO8O,GAET,MAAO,CAAP,GAAO,UAOT,QAAe1N,IAAXsL,QAAwCtL,IAAhBkK,EAC1B,OAAO,kBAAC,MAAO,MAGX,OAA2BoB,aAAM,EAANA,EAAQ+C,SAAU,GAC7CC,EADe,gBACoB,WADb,QAC6B,iCAEnDC,EACJ,kBAAC,MAAe,CACdC,MAAM,MACNC,OAAO,qBACPC,SAAU,kBAAC,MAAO,MAClBC,OAAQ,SAACC,GACP,OACE,kBAACA,EAAyB,CACxBzB,iBAAkBA,EAClBI,sBAAuBA,EACvBE,kBAAmBA,EACnBoB,sBArBD3C,EAsBCoC,iBAAkBA,OAO5B,OAAO,kBAAC,MAAkB,K,IAAGC,E,MAG/B,a,sGC7Ha9C,EAA2C,WAC9C,IAAAqD,GAAM,IAAAC,kBAAgB,EAC9B,OACE,kBAAC,EAAAC,YAAW,KACV,kBAAC,EAAAC,WAAU,CAACC,QAAQ,QAClB,kBAAC,EAAAC,eAAc,CAACC,KAAM,OACtB,kBAAC,EAAAC,MAAK,CAACC,aAAa,KAAKjX,KAAK,MAC3ByW,EAAE,iCAEL,kBAAC,EAAAS,eAAc,KACZT,EAAE,mCAEL,kBAAC,EAAAU,OAAM,CAACN,QAAQ,UAAUO,QAAS,WAAO3B,OAAO/B,SAASgC,KAAO,0CAA2Ce,EAAE","file":"5860.c797792687fb6196a4b1.js","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createIcon = exports.getSize = exports.IconSize = void 0;\nconst tslib_1 = require(\"tslib\");\nconst React = tslib_1.__importStar(require(\"react\"));\nvar IconSize;\n(function (IconSize) {\n    IconSize[\"sm\"] = \"sm\";\n    IconSize[\"md\"] = \"md\";\n    IconSize[\"lg\"] = \"lg\";\n    IconSize[\"xl\"] = \"xl\";\n})(IconSize = exports.IconSize || (exports.IconSize = {}));\nexports.getSize = (size) => {\n    switch (size) {\n        case IconSize.sm:\n            return '1em';\n        case IconSize.md:\n            return '1.5em';\n        case IconSize.lg:\n            return '2em';\n        case IconSize.xl:\n            return '3em';\n        default:\n            return '1em';\n    }\n};\nlet currentId = 0;\n/**\n * Factory to create Icon class components for consumers\n */\nfunction createIcon({ name, xOffset = 0, yOffset = 0, width, height, svgPath }) {\n    var _a;\n    return _a = class SVGIcon extends React.Component {\n            constructor() {\n                super(...arguments);\n                this.id = `icon-title-${currentId++}`;\n            }\n            render() {\n                const _a = this.props, { size, color, title, noVerticalAlign } = _a, props = tslib_1.__rest(_a, [\"size\", \"color\", \"title\", \"noVerticalAlign\"]);\n                const hasTitle = Boolean(title);\n                const heightWidth = exports.getSize(size);\n                const baseAlign = -0.125 * Number.parseFloat(heightWidth);\n                const style = noVerticalAlign ? null : { verticalAlign: `${baseAlign}em` };\n                const viewBox = [xOffset, yOffset, width, height].join(' ');\n                return (React.createElement(\"svg\", Object.assign({ style: style, fill: color, height: heightWidth, width: heightWidth, viewBox: viewBox, \"aria-labelledby\": hasTitle ? this.id : null, \"aria-hidden\": hasTitle ? null : true, role: \"img\" }, props),\n                    hasTitle && React.createElement(\"title\", { id: this.id }, title),\n                    React.createElement(\"path\", { d: svgPath })));\n            }\n        },\n        _a.displayName = name,\n        _a.defaultProps = {\n            color: 'currentColor',\n            size: IconSize.sm,\n            noVerticalAlign: false\n        },\n        _a;\n}\nexports.createIcon = createIcon;\n//# sourceMappingURL=createIcon.js.map","\"use strict\"\nexports.__esModule = true;\nexports.WrenchIconConfig = {\n  name: 'WrenchIcon',\n  height: 512,\n  width: 512,\n  svgPath: 'M507.73 109.1c-2.24-9.03-13.54-12.09-20.12-5.51l-74.36 74.36-67.88-11.31-11.31-67.88 74.36-74.36c6.62-6.62 3.43-17.9-5.66-20.16-47.38-11.74-99.55.91-136.58 37.93-39.64 39.64-50.55 97.1-34.05 147.2L18.74 402.76c-24.99 24.99-24.99 65.51 0 90.5 24.99 24.99 65.51 24.99 90.5 0l213.21-213.21c50.12 16.71 107.47 5.68 147.37-34.22 37.07-37.07 49.7-89.32 37.91-136.73zM64 472c-13.25 0-24-10.75-24-24 0-13.26 10.75-24 24-24s24 10.74 24 24c0 13.25-10.75 24-24 24z',\n  yOffset: 0,\n  xOffset: 0,\n};\nexports.WrenchIcon = require('../createIcon').createIcon(exports.WrenchIconConfig);\nexports[\"default\"] = exports.WrenchIcon;","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from './configuration';\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\n// @ts-ignore\nimport { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';\n\n/**\n * \n * @export\n * @interface AccessReview\n */\nexport interface AccessReview {\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    action: AccessReviewActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    resource_type: AccessReviewResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReview\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface AccessReviewResponse\n */\nexport interface AccessReviewResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    action?: AccessReviewResponseActionEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccessReviewResponse\n     */\n    allowed: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    resource_type?: AccessReviewResponseResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof AccessReviewResponse\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResponseActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum AccessReviewResponseResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface AccessTokenCfg\n */\nexport interface AccessTokenCfg {\n    /**\n     * \n     * @type {{ [key: string]: object; }}\n     * @memberof AccessTokenCfg\n     */\n    auths: { [key: string]: object; };\n}\n/**\n * \n * @export\n * @interface Account\n */\nexport interface Account {\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Account\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Account\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Account\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {Organization}\n     * @memberof Account\n     */\n    organization?: Organization;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Account\n     */\n    service_account?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Account\n     */\n    username: string;\n}\n/**\n * \n * @export\n * @interface AccountAllOf\n */\nexport interface AccountAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountAllOf\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof AccountAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof AccountAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {Organization}\n     * @memberof AccountAllOf\n     */\n    organization?: Organization;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountAllOf\n     */\n    service_account?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountAllOf\n     */\n    username: string;\n}\n/**\n * \n * @export\n * @interface AccountList\n */\nexport interface AccountList {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof AccountList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof AccountList\n     */\n    items: Array<Account>;\n}\n/**\n * \n * @export\n * @interface AccountListAllOf\n */\nexport interface AccountListAllOf {\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof AccountListAllOf\n     */\n    items?: Array<Account>;\n}\n/**\n * \n * @export\n * @interface AccountPatchRequest\n */\nexport interface AccountPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    ban_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    ban_description?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountPatchRequest\n     */\n    banned?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    first_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    last_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountPatchRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof AccountPatchRequest\n     */\n    service_account?: boolean;\n}\n/**\n * \n * @export\n * @interface AccountReference\n */\nexport interface AccountReference {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReference\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface AccountReferenceAllOf\n */\nexport interface AccountReferenceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    email?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof AccountReferenceAllOf\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface Capability\n */\nexport interface Capability {\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Capability\n     */\n    inherited: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Capability\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface CapabilityAllOf\n */\nexport interface CapabilityAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof CapabilityAllOf\n     */\n    inherited: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityAllOf\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityAllOf\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface CapabilityReview\n */\nexport interface CapabilityReview {\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReview\n     */\n    result: string;\n}\n/**\n * \n * @export\n * @interface CapabilityReviewRequest\n */\nexport interface CapabilityReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    capability: CapabilityReviewRequestCapabilityEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof CapabilityReviewRequest\n     */\n    type: CapabilityReviewRequestTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CapabilityReviewRequestCapabilityEnum {\n    ManageClusterAdmin = 'manage_cluster_admin'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum CapabilityReviewRequestTypeEnum {\n    Cluster = 'Cluster'\n}\n\n/**\n * \n * @export\n * @interface ClusterAuthorizationRequest\n */\nexport interface ClusterAuthorizationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    availability_zone?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    byoc?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    cluster_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    disconnected?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    product_category?: ClusterAuthorizationRequestProductCategoryEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationRequest\n     */\n    product_id?: ClusterAuthorizationRequestProductIdEnum;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationRequest\n     */\n    reserve?: boolean;\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ClusterAuthorizationRequest\n     */\n    resources?: Array<ReservedResource>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ClusterAuthorizationRequestProductCategoryEnum {\n    AssistedInstall = 'assistedInstall'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ClusterAuthorizationRequestProductIdEnum {\n    Ocp = 'ocp',\n    Osd = 'osd',\n    Osdtrial = 'osdtrial',\n    Moa = 'moa',\n    Rhmi = 'rhmi'\n}\n\n/**\n * \n * @export\n * @interface ClusterAuthorizationResponse\n */\nexport interface ClusterAuthorizationResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterAuthorizationResponse\n     */\n    allowed: boolean;\n    /**\n     * \n     * @type {Array<ExcessResource>}\n     * @memberof ClusterAuthorizationResponse\n     */\n    excess_resources: Array<ExcessResource>;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterAuthorizationResponse\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ClusterAuthorizationResponse\n     */\n    subscription?: ObjectReference;\n}\n/**\n * \n * @export\n * @interface ClusterMetricsNodes\n */\nexport interface ClusterMetricsNodes {\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    compute?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    infra?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    master?: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterMetricsNodes\n     */\n    total?: number;\n}\n/**\n * \n * @export\n * @interface ClusterRegistrationRequest\n */\nexport interface ClusterRegistrationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationRequest\n     */\n    authorization_token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationRequest\n     */\n    cluster_id?: string;\n}\n/**\n * \n * @export\n * @interface ClusterRegistrationResponse\n */\nexport interface ClusterRegistrationResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    authorization_token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    cluster_id?: string;\n    /**\n     * Cluster Registration expiration in Unix time\n     * @type {string}\n     * @memberof ClusterRegistrationResponse\n     */\n    expires_at?: string;\n}\n/**\n * \n * @export\n * @interface ClusterResource\n */\nexport interface ClusterResource {\n    /**\n     * \n     * @type {ClusterResourceTotal}\n     * @memberof ClusterResource\n     */\n    total: ClusterResourceTotal;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterResource\n     */\n    updated_timestamp: string;\n    /**\n     * \n     * @type {ClusterResourceTotal}\n     * @memberof ClusterResource\n     */\n    used: ClusterResourceTotal;\n}\n/**\n * \n * @export\n * @interface ClusterResourceTotal\n */\nexport interface ClusterResourceTotal {\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterResourceTotal\n     */\n    unit: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ClusterResourceTotal\n     */\n    value: number;\n}\n/**\n * \n * @export\n * @interface ClusterUpgrade\n */\nexport interface ClusterUpgrade {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ClusterUpgrade\n     */\n    available?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    updated_timestamp?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ClusterUpgrade\n     */\n    version?: string;\n}\n/**\n * \n * @export\n * @interface EphemeralResourceQuota\n */\nexport interface EphemeralResourceQuota {\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof EphemeralResourceQuota\n     */\n    byoc?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof EphemeralResourceQuota\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof EphemeralResourceQuota\n     */\n    sku_count?: number;\n}\n/**\n * \n * @export\n * @interface ErrorAllOf\n */\nexport interface ErrorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    operation_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorAllOf\n     */\n    reason?: string;\n}\n/**\n * \n * @export\n * @interface ErrorList\n */\nexport interface ErrorList {\n    /**\n     * \n     * @type {string}\n     * @memberof ErrorList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ErrorList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorList\n     */\n    items: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ErrorListAllOf\n */\nexport interface ErrorListAllOf {\n    /**\n     * \n     * @type {Array<Error>}\n     * @memberof ErrorListAllOf\n     */\n    items?: Array<Error>;\n}\n/**\n * \n * @export\n * @interface ExcessResource\n */\nexport interface ExcessResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExcessResource\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ExcessResource\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResource\n     */\n    resource_type?: string;\n}\n/**\n * \n * @export\n * @interface ExcessResourceAllOf\n */\nexport interface ExcessResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExcessResourceAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ExcessResourceAllOf\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ExcessResourceAllOf\n     */\n    resource_type?: string;\n}\n/**\n * \n * @export\n * @interface ExportControlReview\n */\nexport interface ExportControlReview {\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExportControlReview\n     */\n    restricted: boolean;\n}\n/**\n * \n * @export\n * @interface ExportControlReviewRequest\n */\nexport interface ExportControlReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ExportControlReviewRequest\n     */\n    account_username: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ExportControlReviewRequest\n     */\n    ignore_cache?: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureReview\n */\nexport interface FeatureReview {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureReview\n     */\n    feature: string;\n}\n/**\n * \n * @export\n * @interface FeatureReviewResponse\n */\nexport interface FeatureReviewResponse {\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureReviewResponse\n     */\n    enabled: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureReviewResponse\n     */\n    feature_id: string;\n}\n/**\n * \n * @export\n * @interface FeatureToggle\n */\nexport interface FeatureToggle {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggle\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureToggle\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggleAllOf\n */\nexport interface FeatureToggleAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof FeatureToggleAllOf\n     */\n    enabled: boolean;\n}\n/**\n * \n * @export\n * @interface FeatureToggleQueryRequest\n */\nexport interface FeatureToggleQueryRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggleQueryRequest\n     */\n    organization_id: string;\n}\n/**\n * \n * @export\n * @interface FeatureToggleQueryRequestAllOf\n */\nexport interface FeatureToggleQueryRequestAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof FeatureToggleQueryRequestAllOf\n     */\n    organization_id: string;\n}\n/**\n * \n * @export\n * @interface Label\n */\nexport interface Label {\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Label\n     */\n    internal: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Label\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface LabelAllOf\n */\nexport interface LabelAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof LabelAllOf\n     */\n    internal: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    key: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof LabelAllOf\n     */\n    value: string;\n}\n/**\n * \n * @export\n * @interface LabelList\n */\nexport interface LabelList {\n    /**\n     * \n     * @type {string}\n     * @memberof LabelList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof LabelList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof LabelList\n     */\n    items: Array<Label>;\n}\n/**\n * \n * @export\n * @interface LabelListAllOf\n */\nexport interface LabelListAllOf {\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof LabelListAllOf\n     */\n    items?: Array<Label>;\n}\n/**\n * \n * @export\n * @interface List\n */\nexport interface List {\n    /**\n     * \n     * @type {string}\n     * @memberof List\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof List\n     */\n    total: number;\n}\n/**\n * \n * @export\n * @interface Metric\n */\nexport interface Metric {\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    health_state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    metrics?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Metric\n     */\n    query_timestamp?: string;\n}\n/**\n * \n * @export\n * @interface MetricAllOf\n */\nexport interface MetricAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    health_state?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    metrics?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof MetricAllOf\n     */\n    query_timestamp?: string;\n}\n/**\n * \n * @export\n * @interface MetricsList\n */\nexport interface MetricsList {\n    /**\n     * \n     * @type {string}\n     * @memberof MetricsList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof MetricsList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsList\n     */\n    items: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface MetricsListAllOf\n */\nexport interface MetricsListAllOf {\n    /**\n     * \n     * @type {Array<Metric>}\n     * @memberof MetricsListAllOf\n     */\n    items?: Array<Metric>;\n}\n/**\n * \n * @export\n * @interface ModelError\n */\nexport interface ModelError {\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    operation_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ModelError\n     */\n    reason?: string;\n}\n/**\n * \n * @export\n * @interface NotificationContactCreateRequest\n */\nexport interface NotificationContactCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationContactCreateRequest\n     */\n    account_identifier?: string;\n}\n/**\n * \n * @export\n * @interface NotificationRequest\n */\nexport interface NotificationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    bcc_address?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof NotificationRequest\n     */\n    include_red_hat_associates?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    subject?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof NotificationRequest\n     */\n    template_name: string;\n    /**\n     * \n     * @type {Array<TemplateParameter>}\n     * @memberof NotificationRequest\n     */\n    template_parameters?: Array<TemplateParameter>;\n}\n/**\n * \n * @export\n * @interface ObjectReference\n */\nexport interface ObjectReference {\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ObjectReference\n     */\n    kind?: string;\n}\n/**\n * \n * @export\n * @interface OneMetric\n */\nexport interface OneMetric {\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    cluster_type: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_cpu: ClusterResource;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_memory: ClusterResource;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    compute_nodes_sockets: ClusterResource;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    console_url: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    cpu: ClusterResource;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    critical_alerts_firing: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    health_state?: OneMetricHealthStateEnum;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    memory: ClusterResource;\n    /**\n     * \n     * @type {ClusterMetricsNodes}\n     * @memberof OneMetric\n     */\n    nodes: ClusterMetricsNodes;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    openshift_version: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    operating_system: string;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    operators_condition_failing: number;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    query_timestamp?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    region: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    sockets: ClusterResource;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    state: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OneMetric\n     */\n    state_description: string;\n    /**\n     * \n     * @type {ClusterResource}\n     * @memberof OneMetric\n     */\n    storage: ClusterResource;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_cpu_total: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_obligation_exists: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OneMetric\n     */\n    subscription_socket_total: number;\n    /**\n     * \n     * @type {ClusterUpgrade}\n     * @memberof OneMetric\n     */\n    upgrade: ClusterUpgrade;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum OneMetricHealthStateEnum {\n    Healthy = 'healthy',\n    Unhealthy = 'unhealthy',\n    Unknown = 'unknown'\n}\n\n/**\n * \n * @export\n * @interface Organization\n */\nexport interface Organization {\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Organization\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Organization\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Organization\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface OrganizationAllOf\n */\nexport interface OrganizationAllOf {\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof OrganizationAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof OrganizationAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface OrganizationList\n */\nexport interface OrganizationList {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof OrganizationList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Organization>}\n     * @memberof OrganizationList\n     */\n    items: Array<Organization>;\n}\n/**\n * \n * @export\n * @interface OrganizationListAllOf\n */\nexport interface OrganizationListAllOf {\n    /**\n     * \n     * @type {Array<Organization>}\n     * @memberof OrganizationListAllOf\n     */\n    items?: Array<Organization>;\n}\n/**\n * \n * @export\n * @interface OrganizationPatchRequest\n */\nexport interface OrganizationPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    ebs_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    external_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof OrganizationPatchRequest\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface Permission\n */\nexport interface Permission {\n    /**\n     * \n     * @type {string}\n     * @memberof Permission\n     */\n    action?: PermissionActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Permission\n     */\n    resource?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PermissionActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n\n/**\n * \n * @export\n * @interface PermissionAllOf\n */\nexport interface PermissionAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionAllOf\n     */\n    action?: PermissionAllOfActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionAllOf\n     */\n    resource?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum PermissionAllOfActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n\n/**\n * \n * @export\n * @interface PermissionList\n */\nexport interface PermissionList {\n    /**\n     * \n     * @type {string}\n     * @memberof PermissionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PermissionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof PermissionList\n     */\n    items: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface PermissionListAllOf\n */\nexport interface PermissionListAllOf {\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof PermissionListAllOf\n     */\n    items?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface Plan\n */\nexport interface Plan {\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Plan\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface PlanAllOf\n */\nexport interface PlanAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    category?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof PlanAllOf\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface PlanList\n */\nexport interface PlanList {\n    /**\n     * \n     * @type {string}\n     * @memberof PlanList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof PlanList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Plan>}\n     * @memberof PlanList\n     */\n    items: Array<Plan>;\n}\n/**\n * \n * @export\n * @interface PlanListAllOf\n */\nexport interface PlanListAllOf {\n    /**\n     * \n     * @type {Array<Plan>}\n     * @memberof PlanListAllOf\n     */\n    items?: Array<Plan>;\n}\n/**\n * \n * @export\n * @interface PullSecretRequest\n */\nexport interface PullSecretRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof PullSecretRequest\n     */\n    external_resource_id: string;\n}\n/**\n * \n * @export\n * @interface QuotaCost\n */\nexport interface QuotaCost {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCost\n     */\n    allowed: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCost\n     */\n    consumed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCost\n     */\n    quota_id: string;\n    /**\n     * \n     * @type {Array<RelatedResource>}\n     * @memberof QuotaCost\n     */\n    related_resources?: Array<RelatedResource>;\n}\n/**\n * \n * @export\n * @interface QuotaCostAllOf\n */\nexport interface QuotaCostAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostAllOf\n     */\n    consumed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostAllOf\n     */\n    quota_id: string;\n    /**\n     * \n     * @type {Array<RelatedResource>}\n     * @memberof QuotaCostAllOf\n     */\n    related_resources?: Array<RelatedResource>;\n}\n/**\n * \n * @export\n * @interface QuotaCostList\n */\nexport interface QuotaCostList {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaCostList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaCostList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<QuotaCost>}\n     * @memberof QuotaCostList\n     */\n    items: Array<QuotaCost>;\n}\n/**\n * \n * @export\n * @interface QuotaCostListAllOf\n */\nexport interface QuotaCostListAllOf {\n    /**\n     * \n     * @type {Array<QuotaCost>}\n     * @memberof QuotaCostListAllOf\n     */\n    items?: Array<QuotaCost>;\n}\n/**\n * \n * @export\n * @interface QuotaSummary\n */\nexport interface QuotaSummary {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummary\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof QuotaSummary\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummary\n     */\n    reserved: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummary\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryAllOf\n */\nexport interface QuotaSummaryAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryAllOf\n     */\n    allowed: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof QuotaSummaryAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryAllOf\n     */\n    reserved: number;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryAllOf\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryList\n */\nexport interface QuotaSummaryList {\n    /**\n     * \n     * @type {string}\n     * @memberof QuotaSummaryList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof QuotaSummaryList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<QuotaSummary>}\n     * @memberof QuotaSummaryList\n     */\n    items: Array<QuotaSummary>;\n}\n/**\n * \n * @export\n * @interface QuotaSummaryListAllOf\n */\nexport interface QuotaSummaryListAllOf {\n    /**\n     * \n     * @type {Array<QuotaSummary>}\n     * @memberof QuotaSummaryListAllOf\n     */\n    items?: Array<QuotaSummary>;\n}\n/**\n * \n * @export\n * @interface Registry\n */\nexport interface Registry {\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    kind?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Registry\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Registry\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RegistryAllOf\n */\nexport interface RegistryAllOf {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryAllOf\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryAllOf\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCreateRequest\n */\nexport interface RegistryCreateRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryCreateRequest\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCreateRequest\n     */\n    url: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredential\n */\nexport interface RegistryCredential {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    kind?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredential\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredential\n     */\n    registry?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredential\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialAllOf\n */\nexport interface RegistryCredentialAllOf {\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredentialAllOf\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RegistryCredentialAllOf\n     */\n    registry?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialAllOf\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialList\n */\nexport interface RegistryCredentialList {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryCredentialList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<RegistryCredential>}\n     * @memberof RegistryCredentialList\n     */\n    items: Array<RegistryCredential>;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialListAllOf\n */\nexport interface RegistryCredentialListAllOf {\n    /**\n     * \n     * @type {Array<RegistryCredential>}\n     * @memberof RegistryCredentialListAllOf\n     */\n    items?: Array<RegistryCredential>;\n}\n/**\n * \n * @export\n * @interface RegistryCredentialPatchRequest\n */\nexport interface RegistryCredentialPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    external_resource_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    registry_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    token?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryCredentialPatchRequest\n     */\n    username?: string;\n}\n/**\n * \n * @export\n * @interface RegistryList\n */\nexport interface RegistryList {\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RegistryList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Registry>}\n     * @memberof RegistryList\n     */\n    items: Array<Registry>;\n}\n/**\n * \n * @export\n * @interface RegistryListAllOf\n */\nexport interface RegistryListAllOf {\n    /**\n     * \n     * @type {Array<Registry>}\n     * @memberof RegistryListAllOf\n     */\n    items?: Array<Registry>;\n}\n/**\n * \n * @export\n * @interface RegistryRequest\n */\nexport interface RegistryRequest {\n    /**\n     * \n     * @type {boolean}\n     * @memberof RegistryRequest\n     */\n    cloudAlias?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    org_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    team_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RegistryRequest\n     */\n    url?: string;\n}\n/**\n * \n * @export\n * @interface RelatedResource\n */\nexport interface RelatedResource {\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    billing_model: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    byoc: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RelatedResource\n     */\n    cost: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    product: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    product_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResource\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface RelatedResourceAllOf\n */\nexport interface RelatedResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    availability_zone_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    billing_model: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    byoc: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    cloud_provider: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RelatedResourceAllOf\n     */\n    cost: number;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    product: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    product_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RelatedResourceAllOf\n     */\n    resource_type: string;\n}\n/**\n * \n * @export\n * @interface ReservedResource\n */\nexport interface ReservedResource {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResource\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResource\n     */\n    cluster?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResource\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ReservedResource\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResource\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface ReservedResourceAllOf\n */\nexport interface ReservedResourceAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    billing_model?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResourceAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ReservedResourceAllOf\n     */\n    cluster?: boolean;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceAllOf\n     */\n    count?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof ReservedResourceAllOf\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceAllOf\n     */\n    updated_at?: string;\n}\n/**\n * \n * @export\n * @interface ReservedResourceList\n */\nexport interface ReservedResourceList {\n    /**\n     * \n     * @type {string}\n     * @memberof ReservedResourceList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ReservedResourceList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ReservedResourceList\n     */\n    items: Array<ReservedResource>;\n}\n/**\n * \n * @export\n * @interface ReservedResourceListAllOf\n */\nexport interface ReservedResourceListAllOf {\n    /**\n     * \n     * @type {Array<ReservedResource>}\n     * @memberof ReservedResourceListAllOf\n     */\n    items?: Array<ReservedResource>;\n}\n/**\n * \n * @export\n * @interface ResourceQuota\n */\nexport interface ResourceQuota {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     * @deprecated\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResourceQuota\n     * @deprecated\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     * @deprecated\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     * @deprecated\n     */\n    resource_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuota\n     */\n    sku_count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    type?: ResourceQuotaTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuota\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceQuotaAllOf\n */\nexport interface ResourceQuotaAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     * @deprecated\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof ResourceQuotaAllOf\n     * @deprecated\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     * @deprecated\n     */\n    resource_name: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     * @deprecated\n     */\n    resource_type: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    sku?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaAllOf\n     */\n    sku_count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    type?: ResourceQuotaAllOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaAllOf\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaAllOfTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceQuotaList\n */\nexport interface ResourceQuotaList {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<ResourceQuota>}\n     * @memberof ResourceQuotaList\n     */\n    items: Array<ResourceQuota>;\n}\n/**\n * \n * @export\n * @interface ResourceQuotaListAllOf\n */\nexport interface ResourceQuotaListAllOf {\n    /**\n     * \n     * @type {Array<ResourceQuota>}\n     * @memberof ResourceQuotaListAllOf\n     */\n    items?: Array<ResourceQuota>;\n}\n/**\n * \n * @export\n * @interface ResourceQuotaRequest\n */\nexport interface ResourceQuotaRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaRequest\n     */\n    sku: string;\n    /**\n     * \n     * @type {number}\n     * @memberof ResourceQuotaRequest\n     */\n    sku_count: number;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceQuotaRequest\n     */\n    type?: ResourceQuotaRequestTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceQuotaRequestTypeEnum {\n    Config = 'Config',\n    Manual = 'Manual',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceReview\n */\nexport interface ResourceReview {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    action: ResourceReviewActionEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    cluster_ids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    cluster_uuids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    organization_ids: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReview\n     */\n    resource_type: ResourceReviewResourceTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof ResourceReview\n     */\n    subscription_ids: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface ResourceReviewRequest\n */\nexport interface ResourceReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    account_username?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    action?: ResourceReviewRequestActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof ResourceReviewRequest\n     */\n    resource_type?: ResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewRequestActionEnum {\n    Get = 'get',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum ResourceReviewRequestResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface Role\n */\nexport interface Role {\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Role\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof Role\n     */\n    permissions?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface RoleAllOf\n */\nexport interface RoleAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<Permission>}\n     * @memberof RoleAllOf\n     */\n    permissions?: Array<Permission>;\n}\n/**\n * \n * @export\n * @interface RoleBinding\n */\nexport interface RoleBinding {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    kind?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBinding\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    organization?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    role?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBinding\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    type?: RoleBindingTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBinding\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum RoleBindingTypeEnum {\n    Application = 'Application',\n    Subscription = 'Subscription',\n    Organization = 'Organization'\n}\n\n/**\n * \n * @export\n * @interface RoleBindingAllOf\n */\nexport interface RoleBindingAllOf {\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    account?: ObjectReference;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingAllOf\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    organization?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    role?: ObjectReference;\n    /**\n     * \n     * @type {ObjectReference}\n     * @memberof RoleBindingAllOf\n     */\n    subscription?: ObjectReference;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    type?: RoleBindingAllOfTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingAllOf\n     */\n    updated_at?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum RoleBindingAllOfTypeEnum {\n    Application = 'Application',\n    Subscription = 'Subscription',\n    Organization = 'Organization'\n}\n\n/**\n * \n * @export\n * @interface RoleBindingCreateRequest\n */\nexport interface RoleBindingCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    account_id: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingCreateRequest\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    role_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingCreateRequest\n     */\n    type: string;\n}\n/**\n * \n * @export\n * @interface RoleBindingList\n */\nexport interface RoleBindingList {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleBindingList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<RoleBinding>}\n     * @memberof RoleBindingList\n     */\n    items: Array<RoleBinding>;\n}\n/**\n * \n * @export\n * @interface RoleBindingListAllOf\n */\nexport interface RoleBindingListAllOf {\n    /**\n     * \n     * @type {Array<RoleBinding>}\n     * @memberof RoleBindingListAllOf\n     */\n    items?: Array<RoleBinding>;\n}\n/**\n * \n * @export\n * @interface RoleBindingRequest\n */\nexport interface RoleBindingRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    account_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof RoleBindingRequest\n     */\n    config_managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    role_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof RoleBindingRequest\n     */\n    type?: string;\n}\n/**\n * \n * @export\n * @interface RoleList\n */\nexport interface RoleList {\n    /**\n     * \n     * @type {string}\n     * @memberof RoleList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof RoleList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Role>}\n     * @memberof RoleList\n     */\n    items: Array<Role>;\n}\n/**\n * \n * @export\n * @interface RoleListAllOf\n */\nexport interface RoleListAllOf {\n    /**\n     * \n     * @type {Array<Role>}\n     * @memberof RoleListAllOf\n     */\n    items?: Array<Role>;\n}\n/**\n * \n * @export\n * @interface SKU\n */\nexport interface SKU {\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    kind?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SKU\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKU\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {Array<EphemeralResourceQuota>}\n     * @memberof SKU\n     */\n    resources?: Array<EphemeralResourceQuota>;\n}\n/**\n * \n * @export\n * @interface SKUAllOf\n */\nexport interface SKUAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    availability_zone_type?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SKUAllOf\n     */\n    byoc: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    resource_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SKUAllOf\n     */\n    resource_type?: string;\n    /**\n     * \n     * @type {Array<EphemeralResourceQuota>}\n     * @memberof SKUAllOf\n     */\n    resources?: Array<EphemeralResourceQuota>;\n}\n/**\n * \n * @export\n * @interface SelfAccessReview\n */\nexport interface SelfAccessReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    action: SelfAccessReviewActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    resource_type: SelfAccessReviewResourceTypeEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfAccessReview\n     */\n    subscription_id?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfAccessReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfAccessReviewResourceTypeEnum {\n    AddOn = 'AddOn',\n    Flavour = 'Flavour',\n    Account = 'Account',\n    AccountPool = 'AccountPool',\n    Cluster = 'Cluster',\n    Plan = 'Plan',\n    Subscription = 'Subscription',\n    Organization = 'Organization',\n    Role = 'Role',\n    Permission = 'Permission',\n    RoleBinding = 'RoleBinding',\n    Registry = 'Registry',\n    RegistryCredential = 'RegistryCredential',\n    CurrentAccount = 'CurrentAccount',\n    AccessReview = 'AccessReview',\n    SelfAcccessReview = 'SelfAcccessReview',\n    ResourceReview = 'ResourceReview',\n    SelfResourceReview = 'SelfResourceReview',\n    ClusterRegistration = 'ClusterRegistration',\n    AccessToken = 'AccessToken',\n    ClusterAuthorization = 'ClusterAuthorization',\n    SelfManagedCluster = 'SelfManagedCluster',\n    RedhatManagedCluster = 'RedhatManagedCluster',\n    ExportControlReview = 'ExportControlReview',\n    ClusterLog = 'ClusterLog',\n    ClusterCredential = 'ClusterCredential',\n    ClusterMetric = 'ClusterMetric',\n    ResourceQuota = 'ResourceQuota',\n    ReservedResource = 'ReservedResource',\n    Dashboard = 'Dashboard',\n    ClusterProviderAndRegion = 'ClusterProviderAndRegion',\n    ServiceLog = 'ServiceLog',\n    InternalServiceLog = 'InternalServiceLog',\n    CsLogs = 'CSLogs',\n    QuotaSummary = 'QuotaSummary',\n    SubscriptionLabel = 'SubscriptionLabel',\n    OrganizationLabel = 'OrganizationLabel',\n    SubscriptionLabelInternal = 'SubscriptionLabelInternal',\n    SelfAccessReview = 'SelfAccessReview',\n    SubscriptionInternal = 'SubscriptionInternal'\n}\n\n/**\n * \n * @export\n * @interface SelfFeatureReview\n */\nexport interface SelfFeatureReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfFeatureReview\n     */\n    feature: string;\n}\n/**\n * \n * @export\n * @interface SelfResourceReview\n */\nexport interface SelfResourceReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReview\n     */\n    action: SelfResourceReviewActionEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    cluster_ids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    cluster_uuids: Array<string>;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    organization_ids: Array<string>;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReview\n     */\n    resource_type: SelfResourceReviewResourceTypeEnum;\n    /**\n     * \n     * @type {Array<string>}\n     * @memberof SelfResourceReview\n     */\n    subscription_ids: Array<string>;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewActionEnum {\n    Get = 'get',\n    List = 'list',\n    Create = 'create',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface SelfResourceReviewRequest\n */\nexport interface SelfResourceReviewRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReviewRequest\n     */\n    action?: SelfResourceReviewRequestActionEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfResourceReviewRequest\n     */\n    resource_type?: SelfResourceReviewRequestResourceTypeEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewRequestActionEnum {\n    Get = 'get',\n    Delete = 'delete',\n    Update = 'update'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SelfResourceReviewRequestResourceTypeEnum {\n    Cluster = 'Cluster',\n    Subscription = 'Subscription'\n}\n\n/**\n * \n * @export\n * @interface SelfTermsReview\n */\nexport interface SelfTermsReview {\n    /**\n     * \n     * @type {string}\n     * @memberof SelfTermsReview\n     */\n    event_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SelfTermsReview\n     */\n    site_code?: string;\n}\n/**\n * \n * @export\n * @interface SkuList\n */\nexport interface SkuList {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<SKU>}\n     * @memberof SkuList\n     */\n    items: Array<SKU>;\n}\n/**\n * \n * @export\n * @interface SkuListAllOf\n */\nexport interface SkuListAllOf {\n    /**\n     * \n     * @type {Array<SKU>}\n     * @memberof SkuListAllOf\n     */\n    items?: Array<SKU>;\n}\n/**\n * \n * @export\n * @interface SkuRules\n */\nexport interface SkuRules {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    kind?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRules\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    quota_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRules\n     */\n    sku?: string;\n}\n/**\n * \n * @export\n * @interface SkuRulesAllOf\n */\nexport interface SkuRulesAllOf {\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesAllOf\n     */\n    allowed?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesAllOf\n     */\n    quota_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesAllOf\n     */\n    sku?: string;\n}\n/**\n * \n * @export\n * @interface SkuRulesList\n */\nexport interface SkuRulesList {\n    /**\n     * \n     * @type {string}\n     * @memberof SkuRulesList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SkuRulesList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<SkuRules>}\n     * @memberof SkuRulesList\n     */\n    items: Array<SkuRules>;\n}\n/**\n * \n * @export\n * @interface SkuRulesListAllOf\n */\nexport interface SkuRulesListAllOf {\n    /**\n     * \n     * @type {Array<SkuRules>}\n     * @memberof SkuRulesListAllOf\n     */\n    items?: Array<SkuRules>;\n}\n/**\n * \n * @export\n * @interface Subscription\n */\nexport interface Subscription {\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    kind?: string;\n    /**\n     * If set, the date the subscription expires based on the billing model\n     * @type {string}\n     * @memberof Subscription\n     */\n    billing_expiration_date?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof Subscription\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cluster_billing_model?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof Subscription\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {AccountReference}\n     * @memberof Subscription\n     */\n    creator?: AccountReference;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof Subscription\n     */\n    labels?: Array<Label>;\n    /**\n     * Last time this subscription were reconciled about cluster usage\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_reconcile_date?: string;\n    /**\n     * Last time status was set to Released for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_released_at?: string;\n    /**\n     * Last telemetry authorization request for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof Subscription\n     */\n    last_telemetry_date?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    managed: boolean;\n    /**\n     * \n     * @type {Array<OneMetric>}\n     * @memberof Subscription\n     */\n    metrics?: Array<OneMetric>;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof Subscription\n     */\n    notification_contacts?: Array<Account>;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {Plan}\n     * @memberof Subscription\n     */\n    plan?: Plan;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    product_bundle?: SubscriptionProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof Subscription\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    service_level?: SubscriptionServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof Subscription\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    support_level?: SubscriptionSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    system_units?: SubscriptionSystemUnitsEnum;\n    /**\n     * If the subscription is a trial, date the trial ends\n     * @type {string}\n     * @memberof Subscription\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Subscription\n     */\n    usage?: SubscriptionUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionAllOf\n */\nexport interface SubscriptionAllOf {\n    /**\n     * If set, the date the subscription expires based on the billing model\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    billing_expiration_date?: string;\n    /**\n     * \n     * @type {Array<Capability>}\n     * @memberof SubscriptionAllOf\n     */\n    capabilities?: Array<Capability>;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cluster_billing_model?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionAllOf\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    created_at?: string;\n    /**\n     * \n     * @type {AccountReference}\n     * @memberof SubscriptionAllOf\n     */\n    creator?: AccountReference;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {Array<Label>}\n     * @memberof SubscriptionAllOf\n     */\n    labels?: Array<Label>;\n    /**\n     * Last time this subscription were reconciled about cluster usage\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_reconcile_date?: string;\n    /**\n     * Last time status was set to Released for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_released_at?: string;\n    /**\n     * Last telemetry authorization request for this cluster/subscription in Unix time\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    last_telemetry_date?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionAllOf\n     */\n    managed: boolean;\n    /**\n     * \n     * @type {Array<OneMetric>}\n     * @memberof SubscriptionAllOf\n     */\n    metrics?: Array<OneMetric>;\n    /**\n     * \n     * @type {Array<Account>}\n     * @memberof SubscriptionAllOf\n     */\n    notification_contacts?: Array<Account>;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {Plan}\n     * @memberof SubscriptionAllOf\n     */\n    plan?: Plan;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    product_bundle?: SubscriptionAllOfProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionAllOf\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    service_level?: SubscriptionAllOfServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionAllOf\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    support_level?: SubscriptionAllOfSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    system_units?: SubscriptionAllOfSystemUnitsEnum;\n    /**\n     * If the subscription is a trial, date the trial ends\n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    updated_at?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionAllOf\n     */\n    usage?: SubscriptionAllOfUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionAllOfUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionCreateRequest\n */\nexport interface SubscriptionCreateRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    cluster_uuid: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    plan_id: SubscriptionCreateRequestPlanIdEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionCreateRequest\n     */\n    status: SubscriptionCreateRequestStatusEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionCreateRequestPlanIdEnum {\n    Ocp = 'OCP'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionCreateRequestStatusEnum {\n    Disconnected = 'Disconnected'\n}\n\n/**\n * \n * @export\n * @interface SubscriptionList\n */\nexport interface SubscriptionList {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionList\n     */\n    kind: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    page: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    size: number;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionList\n     */\n    total: number;\n    /**\n     * \n     * @type {Array<Subscription>}\n     * @memberof SubscriptionList\n     */\n    items: Array<Subscription>;\n}\n/**\n * \n * @export\n * @interface SubscriptionListAllOf\n */\nexport interface SubscriptionListAllOf {\n    /**\n     * \n     * @type {Array<Subscription>}\n     * @memberof SubscriptionListAllOf\n     */\n    items?: Array<Subscription>;\n}\n/**\n * \n * @export\n * @interface SubscriptionPatchRequest\n */\nexport interface SubscriptionPatchRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    billing_expiration_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cloud_account_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cloud_provider_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cluster_billing_model?: SubscriptionPatchRequestClusterBillingModelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    console_url?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    consumer_uuid?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionPatchRequest\n     */\n    cpu_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    creator_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    display_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    external_cluster_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionPatchRequest\n     */\n    managed?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    organization_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    plan_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    product_bundle?: SubscriptionPatchRequestProductBundleEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    provenance?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    region_id?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof SubscriptionPatchRequest\n     */\n    released?: boolean;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    service_level?: SubscriptionPatchRequestServiceLevelEnum;\n    /**\n     * \n     * @type {number}\n     * @memberof SubscriptionPatchRequest\n     */\n    socket_total?: number;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    support_level?: SubscriptionPatchRequestSupportLevelEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    system_units?: SubscriptionPatchRequestSystemUnitsEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    trial_end_date?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SubscriptionPatchRequest\n     */\n    usage?: SubscriptionPatchRequestUsageEnum;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestClusterBillingModelEnum {\n    Standard = 'standard',\n    Marketplace = 'marketplace'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestProductBundleEnum {\n    Openshift = 'Openshift',\n    JBossMiddleware = 'JBoss-Middleware',\n    IbmCloudPak = 'IBM-CloudPak'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestServiceLevelEnum {\n    L1L3 = 'L1-L3',\n    L3Only = 'L3-only'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestSupportLevelEnum {\n    Eval = 'Eval',\n    Standard = 'Standard',\n    Premium = 'Premium',\n    SelfSupport = 'Self-Support',\n    None = 'None'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestSystemUnitsEnum {\n    CoresVCpu = 'Cores/vCPU',\n    Sockets = 'Sockets'\n}\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SubscriptionPatchRequestUsageEnum {\n    Production = 'Production',\n    DevelopmentTest = 'Development/Test',\n    DisasterRecovery = 'Disaster Recovery',\n    Academic = 'Academic'\n}\n\n/**\n * \n * @export\n * @interface Summary\n */\nexport interface Summary {\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    href?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    kind?: string;\n    /**\n     * \n     * @type {Array<SummaryMetrics>}\n     * @memberof Summary\n     */\n    metrics: Array<SummaryMetrics>;\n    /**\n     * \n     * @type {string}\n     * @memberof Summary\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface SummaryAllOf\n */\nexport interface SummaryAllOf {\n    /**\n     * \n     * @type {Array<SummaryMetrics>}\n     * @memberof SummaryAllOf\n     */\n    metrics: Array<SummaryMetrics>;\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryAllOf\n     */\n    name?: string;\n}\n/**\n * \n * @export\n * @interface SummaryMetrics\n */\nexport interface SummaryMetrics {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryMetrics\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<SummaryVector>}\n     * @memberof SummaryMetrics\n     */\n    vector?: Array<SummaryVector>;\n}\n/**\n * \n * @export\n * @interface SummaryMetricsAllOf\n */\nexport interface SummaryMetricsAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryMetricsAllOf\n     */\n    name?: string;\n    /**\n     * \n     * @type {Array<SummaryVector>}\n     * @memberof SummaryMetricsAllOf\n     */\n    vector?: Array<SummaryVector>;\n}\n/**\n * \n * @export\n * @interface SummaryVector\n */\nexport interface SummaryVector {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryVector\n     */\n    time?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SummaryVector\n     */\n    value?: number;\n}\n/**\n * \n * @export\n * @interface SummaryVectorAllOf\n */\nexport interface SummaryVectorAllOf {\n    /**\n     * \n     * @type {string}\n     * @memberof SummaryVectorAllOf\n     */\n    time?: string;\n    /**\n     * \n     * @type {number}\n     * @memberof SummaryVectorAllOf\n     */\n    value?: number;\n}\n/**\n * \n * @export\n * @interface SupportCasesCreatedResponse\n */\nexport interface SupportCasesCreatedResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    caseNumber?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    description?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    severity?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    status?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    summary?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesCreatedResponse\n     */\n    uri?: string;\n}\n/**\n * \n * @export\n * @interface SupportCasesRequest\n */\nexport interface SupportCasesRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    account_number?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    case_language?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    cluster_uuid?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    contact_sso_name?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    description: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    event_stream_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    openshift_cluster_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    product?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    severity: SupportCasesRequestSeverityEnum;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    subscription_id?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    summary: string;\n    /**\n     * \n     * @type {string}\n     * @memberof SupportCasesRequest\n     */\n    version?: string;\n}\n\n/**\n    * @export\n    * @enum {string}\n    */\nexport enum SupportCasesRequestSeverityEnum {\n    _1Urgent = '1 (Urgent)',\n    _2High = '2 (High)',\n    _3Normal = '3 (Normal)',\n    _4Low = '4 (Low)'\n}\n\n/**\n * \n * @export\n * @interface TemplateParameter\n */\nexport interface TemplateParameter {\n    /**\n     * \n     * @type {string}\n     * @memberof TemplateParameter\n     */\n    content: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TemplateParameter\n     */\n    name: string;\n}\n/**\n * \n * @export\n * @interface TermsReview\n */\nexport interface TermsReview {\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    account_username: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    event_code?: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReview\n     */\n    site_code?: string;\n}\n/**\n * \n * @export\n * @interface TermsReviewResponse\n */\nexport interface TermsReviewResponse {\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    account_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    organization_id: string;\n    /**\n     * \n     * @type {string}\n     * @memberof TermsReviewResponse\n     */\n    redirect_url?: string;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TermsReviewResponse\n     */\n    terms_available: boolean;\n    /**\n     * \n     * @type {boolean}\n     * @memberof TermsReviewResponse\n     */\n    terms_required: boolean;\n}\n/**\n * \n * @export\n * @interface TokenAuthorizationRequest\n */\nexport interface TokenAuthorizationRequest {\n    /**\n     * \n     * @type {string}\n     * @memberof TokenAuthorizationRequest\n     */\n    authorization_token?: string;\n}\n/**\n * \n * @export\n * @interface TokenAuthorizationResponse\n */\nexport interface TokenAuthorizationResponse {\n    /**\n     * \n     * @type {Account}\n     * @memberof TokenAuthorizationResponse\n     */\n    account?: Account;\n}\n\n/**\n * DefaultApi - axios parameter creator\n * @export\n */\nexport const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccessTokenPost: async (options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/access_token`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdPatch: async (id: string, accountPatchRequest: AccountPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'id', id)\n            // verify required parameter 'accountPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsIdPatch', 'accountPatchRequest', accountPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accountPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsPost: async (account: Account, dryRun?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'account' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1AccountsPost', 'account', account)\n            const localVarPath = `/api/accounts_mgmt/v1/accounts`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (dryRun !== undefined) {\n                localVarQueryParameter['dryRun'] = dryRun;\n            }\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(account, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterAuthorizationsPost: async (clusterAuthorizationRequest: ClusterAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'clusterAuthorizationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ClusterAuthorizationsPost', 'clusterAuthorizationRequest', clusterAuthorizationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/cluster_authorizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(clusterAuthorizationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterRegistrationsPost: async (clusterRegistrationRequest: ClusterRegistrationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'clusterRegistrationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ClusterRegistrationsPost', 'clusterRegistrationRequest', clusterRegistrationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/cluster_registrations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(clusterRegistrationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1CurrentAccountGet: async (fetchLabels?: boolean, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/current_account`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/errors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1ErrorsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/errors/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1FeatureTogglesIdQueryPost: async (id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'id', id)\n            // verify required parameter 'featureToggleQueryRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1FeatureTogglesIdQueryPost', 'featureToggleQueryRequest', featureToggleQueryRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/feature_toggles/{id}/query`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(featureToggleQueryRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1LabelsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/labels`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1MetricsGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/metrics`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1NotifyPost: async (notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'notificationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1NotifyPost', 'notificationRequest', notificationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/notify`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsGet: async (page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdGet: async (id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdPatch: async (id: string, organizationPatchRequest: OrganizationPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'id', id)\n            // verify required parameter 'organizationPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdPatch', 'organizationPatchRequest', organizationPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(organizationPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{id}/summary_dashboard`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet: async (orgId: string, search?: string, fetchRelatedResources?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_cost`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fetchRelatedResources !== undefined) {\n                localVarQueryParameter['fetchRelatedResources'] = fetchRelatedResources;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet: async (orgId: string, search?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/quota_summary`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet: async (orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet', 'orgId', orgId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost: async (orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'orgId', orgId)\n            // verify required parameter 'resourceQuotaRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost', 'resourceQuotaRequest', resourceQuotaRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete', 'quotaId', quotaId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet: async (orgId: string, quotaId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet', 'quotaId', quotaId)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch: async (orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'orgId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'orgId', orgId)\n            // verify required parameter 'quotaId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'quotaId', quotaId)\n            // verify required parameter 'resourceQuotaRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch', 'resourceQuotaRequest', resourceQuotaRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations/{orgId}/resource_quota/{quotaId}`\n                .replace(`{${\"orgId\"}}`, encodeURIComponent(String(orgId)))\n                .replace(`{${\"quotaId\"}}`, encodeURIComponent(String(quotaId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceQuotaRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsPost: async (organization: Organization, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'organization' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1OrganizationsPost', 'organization', organization)\n            const localVarPath = `/api/accounts_mgmt/v1/organizations`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(organization, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/plans`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PlansIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/plans/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete: async (externalResourceId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'externalResourceId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PullSecretsExternalResourceIdDelete', 'externalResourceId', externalResourceId)\n            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets/{externalResourceId}`\n                .replace(`{${\"externalResourceId\"}}`, encodeURIComponent(String(externalResourceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsPost: async (pullSecretRequest: PullSecretRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'pullSecretRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1PullSecretsPost', 'pullSecretRequest', pullSecretRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/pull_secrets`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(pullSecretRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/registries`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistriesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registries/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdPatch: async (id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'id', id)\n            // verify required parameter 'registryCredentialPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsIdPatch', 'registryCredentialPatchRequest', registryCredentialPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(registryCredentialPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsPost: async (registryCredential: RegistryCredential, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'registryCredential' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RegistryCredentialsPost', 'registryCredential', registryCredential)\n            const localVarPath = `/api/accounts_mgmt/v1/registry_credentials`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(registryCredential, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ReservedResourcesGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/reserved_resources`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ResourceQuotaGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/resource_quota`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsGet: async (page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdPatch: async (id: string, roleBindingRequest: RoleBindingRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'id', id)\n            // verify required parameter 'roleBindingRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsIdPatch', 'roleBindingRequest', roleBindingRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsPost: async (roleBindingCreateRequest: RoleBindingCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'roleBindingCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RoleBindingsPost', 'roleBindingCreateRequest', roleBindingCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/role_bindings`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(roleBindingCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesGet: async (page?: number, size?: number, search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/roles`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1RolesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/roles/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/sku_rules`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SkuRulesIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/sku_rules/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusGet: async (search?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/skus`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusIdGet: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SkusIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/skus/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsGet: async (page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options: any = {}): Promise<RequestArgs> => {\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fetchAccounts !== undefined) {\n                localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n            if (labels !== undefined) {\n                localVarQueryParameter['labels'] = labels;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdDelete: async (id: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdDelete', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdGet: async (id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (fetchAccounts !== undefined) {\n                localVarQueryParameter['fetchAccounts'] = fetchAccounts;\n            }\n\n            if (fetchLabels !== undefined) {\n                localVarQueryParameter['fetchLabels'] = fetchLabels;\n            }\n\n            if (fetchCapabilities !== undefined) {\n                localVarQueryParameter['fetchCapabilities'] = fetchCapabilities;\n            }\n\n            if (fetchCpuAndSocket !== undefined) {\n                localVarQueryParameter['fetchCpuAndSocket'] = fetchCpuAndSocket;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet: async (id: string, key: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet', 'key', key)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch: async (id: string, key: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'id', id)\n            // verify required parameter 'key' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'key', key)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels/{key}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)))\n                .replace(`{${\"key\"}}`, encodeURIComponent(String(key)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsPost: async (id: string, label: Label, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'id', id)\n            // verify required parameter 'label' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdLabelsPost', 'label', label)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/labels`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(label, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdNotifyPost: async (id: string, notificationRequest: NotificationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'id', id)\n            // verify required parameter 'notificationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdNotifyPost', 'notificationRequest', notificationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/notify`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdPatch: async (id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'id', id)\n            // verify required parameter 'subscriptionPatchRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdPatch', 'subscriptionPatchRequest', subscriptionPatchRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionPatchRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet: async (id: string, page?: number, size?: number, search?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/reserved_resources`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet: async (id: string, page?: number, size?: number, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'id' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsIdSupportCasesGet', 'id', id)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{id}/support_cases`\n                .replace(`{${\"id\"}}`, encodeURIComponent(String(id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsPost: async (subscriptionCreateRequest: SubscriptionCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subscriptionCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsPost', 'subscriptionCreateRequest', subscriptionCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(subscriptionCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete: async (subId: string, accountId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'subId', subId)\n            // verify required parameter 'accountId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete', 'accountId', accountId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts/{accountId}`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)))\n                .replace(`{${\"accountId\"}}`, encodeURIComponent(String(accountId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet: async (subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet', 'subId', subId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n            if (page !== undefined) {\n                localVarQueryParameter['page'] = page;\n            }\n\n            if (size !== undefined) {\n                localVarQueryParameter['size'] = size;\n            }\n\n            if (search !== undefined) {\n                localVarQueryParameter['search'] = search;\n            }\n\n            if (fields !== undefined) {\n                localVarQueryParameter['fields'] = fields;\n            }\n\n            if (orderBy !== undefined) {\n                localVarQueryParameter['orderBy'] = orderBy;\n            }\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost: async (subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'subId', subId)\n            // verify required parameter 'notificationContactCreateRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost', 'notificationContactCreateRequest', notificationContactCreateRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/notification_contacts`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(notificationContactCreateRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet: async (subId: string, reservedResourceId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'subId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'subId', subId)\n            // verify required parameter 'reservedResourceId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet', 'reservedResourceId', reservedResourceId)\n            const localVarPath = `/api/accounts_mgmt/v1/subscriptions/{subId}/reserved_resources/{reservedResourceId}`\n                .replace(`{${\"subId\"}}`, encodeURIComponent(String(subId)))\n                .replace(`{${\"reservedResourceId\"}}`, encodeURIComponent(String(reservedResourceId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesCaseIdDelete: async (caseId: string, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'caseId' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SupportCasesCaseIdDelete', 'caseId', caseId)\n            const localVarPath = `/api/accounts_mgmt/v1/support_cases/{caseId}`\n                .replace(`{${\"caseId\"}}`, encodeURIComponent(String(caseId)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesPost: async (supportCasesRequest: SupportCasesRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'supportCasesRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1SupportCasesPost', 'supportCasesRequest', supportCasesRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/support_cases`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(supportCasesRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1TokenAuthorizationPost: async (tokenAuthorizationRequest: TokenAuthorizationRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'tokenAuthorizationRequest' is not null or undefined\n            assertParamExists('apiAccountsMgmtV1TokenAuthorizationPost', 'tokenAuthorizationRequest', tokenAuthorizationRequest)\n            const localVarPath = `/api/accounts_mgmt/v1/token_authorization`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(tokenAuthorizationRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1AccessReviewPost: async (accessReview: AccessReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'accessReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1AccessReviewPost', 'accessReview', accessReview)\n            const localVarPath = `/api/authorizations/v1/access_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(accessReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1CapabilityReviewPost: async (capabilityReviewRequest: CapabilityReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'capabilityReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1CapabilityReviewPost', 'capabilityReviewRequest', capabilityReviewRequest)\n            const localVarPath = `/api/authorizations/v1/capability_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(capabilityReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ExportControlReviewPost: async (exportControlReviewRequest: ExportControlReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'exportControlReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1ExportControlReviewPost', 'exportControlReviewRequest', exportControlReviewRequest)\n            const localVarPath = `/api/authorizations/v1/export_control_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(exportControlReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review feature to perform an action on it such as toggle a feature on/off\n         * @param {FeatureReview} featureReview Feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1FeatureReviewPost: async (featureReview: FeatureReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'featureReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1FeatureReviewPost', 'featureReview', featureReview)\n            const localVarPath = `/api/authorizations/v1/feature_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(featureReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ResourceReviewPost: async (resourceReviewRequest: ResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'resourceReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1ResourceReviewPost', 'resourceReviewRequest', resourceReviewRequest)\n            const localVarPath = `/api/authorizations/v1/resource_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(resourceReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfAccessReviewPost: async (selfAccessReview: SelfAccessReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfAccessReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfAccessReviewPost', 'selfAccessReview', selfAccessReview)\n            const localVarPath = `/api/authorizations/v1/self_access_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfAccessReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your ability to toggle a feature\n         * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfFeatureReviewPost: async (selfFeatureReview: SelfFeatureReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfFeatureReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfFeatureReviewPost', 'selfFeatureReview', selfFeatureReview)\n            const localVarPath = `/api/authorizations/v1/self_feature_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfFeatureReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfResourceReviewPost: async (selfResourceReviewRequest: SelfResourceReviewRequest, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfResourceReviewRequest' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfResourceReviewPost', 'selfResourceReviewRequest', selfResourceReviewRequest)\n            const localVarPath = `/api/authorizations/v1/self_resource_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfResourceReviewRequest, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfTermsReviewPost: async (selfTermsReview: SelfTermsReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'selfTermsReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1SelfTermsReviewPost', 'selfTermsReview', selfTermsReview)\n            const localVarPath = `/api/authorizations/v1/self_terms_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(selfTermsReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1TermsReviewPost: async (termsReview: TermsReview, options: any = {}): Promise<RequestArgs> => {\n            // verify required parameter 'termsReview' is not null or undefined\n            assertParamExists('apiAuthorizationsV1TermsReviewPost', 'termsReview', termsReview)\n            const localVarPath = `/api/authorizations/v1/terms_review`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n\n            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};\n            const localVarHeaderParameter = {} as any;\n            const localVarQueryParameter = {} as any;\n\n            // authentication Bearer required\n            // http bearer authentication required\n            await setBearerAuthToObject(localVarHeaderParameter, configuration)\n\n\n    \n            localVarHeaderParameter['Content-Type'] = 'application/json';\n\n            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};\n            localVarRequestOptions.data = serializeDataIfNeeded(termsReview, localVarRequestOptions, configuration)\n\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        },\n    }\n};\n\n/**\n * DefaultApi - functional programming interface\n * @export\n */\nexport const DefaultApiFp = function(configuration?: Configuration) {\n    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccessTokenPost(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccessTokenPost(options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1AccountsPost(account, dryRun, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterAuthorizationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ClusterRegistrationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ErrorList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Error>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ErrorsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureToggle>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1MetricsGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MetricsList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1MetricsGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1NotifyPost(notificationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrganizationList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Summary>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaCostList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuotaSummaryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuota>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Organization>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1OrganizationsPost(organization, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PlanList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PlansIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Plan>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PlansIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessTokenCfg>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Registry>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistriesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredentialList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RegistryCredential>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceQuotaList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBindingList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleBinding>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RoleList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesGet(page, size, search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1RolesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Role>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1RolesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRulesList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuRules>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkuRulesIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkusGet(search?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SkuList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusGet(search, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SkusIdGet(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SKU>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SkusIdGet(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SubscriptionList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdDelete(id, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LabelList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Label>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResourceList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Subscription>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccountList>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Account>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ReservedResource>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SupportCasesCreatedResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenAuthorizationResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1AccessReviewPost(accessReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CapabilityReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ExportControlReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review feature to perform an action on it such as toggle a feature on/off\n         * @param {FeatureReview} featureReview Feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1FeatureReviewPost(featureReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ResourceReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AccessReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your ability to toggle a feature\n         * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<FeatureReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SelfResourceReview>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        async apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TermsReviewResponse>> {\n            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthorizationsV1TermsReviewPost(termsReview, options);\n            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);\n        },\n    }\n};\n\n/**\n * DefaultApi - factory interface\n * @export\n */\nexport const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {\n    const localVarFp = DefaultApiFp(configuration)\n    return {\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg> {\n            return localVarFp.apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of accounts\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList> {\n            return localVarFp.apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an account by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an account\n         * @param {string} id The id of record\n         * @param {AccountPatchRequest} accountPatchRequest Updated account data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new account\n         * @param {Account} account Account data\n         * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n         * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse> {\n            return localVarFp.apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n         * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse> {\n            return localVarFp.apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get the authenticated account\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of errors\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList> {\n            return localVarFp.apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an error by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error> {\n            return localVarFp.apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Query a feature toggle by id\n         * @param {string} id The id of record\n         * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle> {\n            return localVarFp.apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of metrics\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList> {\n            return localVarFp.apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Notify the owner of cluster/subscription\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of organizations\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an organization by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update an organization\n         * @param {string} id The id of record\n         * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of organizations clusters based on metrics\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of quota cost\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): AxiosPromise<QuotaCostList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a summary of resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {string} orgId The id of organization\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new resource quota\n         * @param {string} orgId The id of organization\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a resource quota by id\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a resource quota\n         * @param {string} orgId The id of organization\n         * @param {string} quotaId The id of quota\n         * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new organization\n         * @param {Organization} organization Organization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization> {\n            return localVarFp.apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get all plans\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList> {\n            return localVarFp.apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a plan by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan> {\n            return localVarFp.apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a pull secret\n         * @param {string} externalResourceId The external resource id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Return access token generated from registries in docker format\n         * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg> {\n            return localVarFp.apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of registries\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList> {\n            return localVarFp.apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get an registry by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry> {\n            return localVarFp.apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * List Registry Credentials\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a registry credential by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a registry credentials by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a registry credential\n         * @param {string} id The id of record\n         * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Request the creation of a registry credential\n         * @param {RegistryCredential} registryCredential Registry credential data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential> {\n            return localVarFp.apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {\n            return localVarFp.apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of resource quota objects\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList> {\n            return localVarFp.apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of role bindings\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a role binding\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a role binding\n         * @param {string} id The id of record\n         * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new role binding\n         * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding> {\n            return localVarFp.apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of roles\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList> {\n            return localVarFp.apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a role by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role> {\n            return localVarFp.apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKU Rules\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList> {\n            return localVarFp.apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a sku rules by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules> {\n            return localVarFp.apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of UHC product SKUs\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList> {\n            return localVarFp.apiAccountsMgmtV1SkusGet(search, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a sku by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU> {\n            return localVarFp.apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of subscriptions\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a subscription by id\n         * @param {string} id The id of record\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get a subscription by id\n         * @param {string} id The id of record\n         * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n         * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n         * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n         * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of labels\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get subscription labels by label key\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {string} key The key of the label\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new label or update an existing label\n         * @param {string} id The id of record\n         * @param {Label} label Label data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Notify the owner of a subscription\n         * @param {string} id The id of record\n         * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Update a subscription\n         * @param {string} id The id of record\n         * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of reserved resources\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n         * @param {string} id The id of record\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Create a new subscription\n         * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Deletes a notification contact by subscription and account id\n         * @param {string} subId The id of subscription\n         * @param {string} accountId The id of account\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Returns a list of notification contacts for the given subscription\n         * @param {string} subId The id of subscription\n         * @param {number} [page] Page number of record list when record list exceeds specified page size\n         * @param {number} [size] Maximum number of records to return\n         * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n         * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n         * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Add an account as a notification contact to this subscription\n         * @param {string} subId The id of subscription\n         * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Get reserved resources by id\n         * @param {string} subId The id of subscription\n         * @param {string} reservedResourceId The id of reserved resource\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource> {\n            return localVarFp.apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Delete a support case\n         * @param {string} caseId The id of a support case\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void> {\n            return localVarFp.apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary create a support case for the subscription\n         * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse> {\n            return localVarFp.apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Finds the account owner of the provided token\n         * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse> {\n            return localVarFp.apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n         * @param {AccessReview} accessReview Access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n            return localVarFp.apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s capabilities\n         * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview> {\n            return localVarFp.apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n         * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview> {\n            return localVarFp.apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review feature to perform an action on it such as toggle a feature on/off\n         * @param {FeatureReview} featureReview Feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): AxiosPromise<FeatureReviewResponse> {\n            return localVarFp.apiAuthorizationsV1FeatureReviewPost(featureReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview> {\n            return localVarFp.apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your ability to perform an action on a particular resource or resource type\n         * @param {SelfAccessReview} selfAccessReview Self access review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your ability to toggle a feature\n         * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): AxiosPromise<FeatureReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n         * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview> {\n            return localVarFp.apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review your status of Terms\n         * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n            return localVarFp.apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(axios, basePath));\n        },\n        /**\n         * \n         * @summary Review an account\\'s status of Terms\n         * @param {TermsReview} termsReview Data to check terms for\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse> {\n            return localVarFp.apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(axios, basePath));\n        },\n    };\n};\n\n/**\n * DefaultApi - interface\n * @export\n * @interface DefaultApi\n */\nexport interface DefaultApiInterface {\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccessTokenPost(options?: any): AxiosPromise<AccessTokenCfg>;\n\n    /**\n     * \n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<AccountList>;\n\n    /**\n     * \n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any): AxiosPromise<ClusterAuthorizationResponse>;\n\n    /**\n     * \n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any): AxiosPromise<ClusterRegistrationResponse>;\n\n    /**\n     * \n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<ErrorList>;\n\n    /**\n     * \n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any): AxiosPromise<Error>;\n\n    /**\n     * \n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any): AxiosPromise<FeatureToggle>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1MetricsGet(search?: string, options?: any): AxiosPromise<MetricsList>;\n\n    /**\n     * \n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any): AxiosPromise<OrganizationList>;\n\n    /**\n     * \n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any): AxiosPromise<Summary>;\n\n    /**\n     * \n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any): AxiosPromise<QuotaCostList>;\n\n    /**\n     * \n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any): AxiosPromise<QuotaSummaryList>;\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;\n\n    /**\n     * \n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any): AxiosPromise<ResourceQuota>;\n\n    /**\n     * \n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any): AxiosPromise<Organization>;\n\n    /**\n     * \n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<PlanList>;\n\n    /**\n     * \n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PlansIdGet(id: string, options?: any): AxiosPromise<Plan>;\n\n    /**\n     * \n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any): AxiosPromise<AccessTokenCfg>;\n\n    /**\n     * \n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryList>;\n\n    /**\n     * \n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any): AxiosPromise<Registry>;\n\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RegistryCredentialList>;\n\n    /**\n     * \n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any): AxiosPromise<RegistryCredential>;\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ResourceQuotaList>;\n\n    /**\n     * \n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<RoleBindingList>;\n\n    /**\n     * \n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any): AxiosPromise<RoleBinding>;\n\n    /**\n     * \n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any): AxiosPromise<RoleList>;\n\n    /**\n     * \n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1RolesIdGet(id: string, options?: any): AxiosPromise<Role>;\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any): AxiosPromise<SkuRulesList>;\n\n    /**\n     * \n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any): AxiosPromise<SkuRules>;\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkusGet(search?: string, options?: any): AxiosPromise<SkuList>;\n\n    /**\n     * \n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SkusIdGet(id: string, options?: any): AxiosPromise<SKU>;\n\n    /**\n     * \n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any): AxiosPromise<SubscriptionList>;\n\n    /**\n     * \n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<LabelList>;\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any): AxiosPromise<Label>;\n\n    /**\n     * \n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any): AxiosPromise<ReservedResourceList>;\n\n    /**\n     * \n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any): AxiosPromise<Subscription>;\n\n    /**\n     * \n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any): AxiosPromise<AccountList>;\n\n    /**\n     * \n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any): AxiosPromise<Account>;\n\n    /**\n     * \n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any): AxiosPromise<ReservedResource>;\n\n    /**\n     * \n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any): AxiosPromise<void>;\n\n    /**\n     * \n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any): AxiosPromise<SupportCasesCreatedResponse>;\n\n    /**\n     * \n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any): AxiosPromise<TokenAuthorizationResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any): AxiosPromise<CapabilityReview>;\n\n    /**\n     * \n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any): AxiosPromise<ExportControlReview>;\n\n    /**\n     * \n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any): AxiosPromise<FeatureReviewResponse>;\n\n    /**\n     * \n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any): AxiosPromise<ResourceReview>;\n\n    /**\n     * \n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any): AxiosPromise<AccessReviewResponse>;\n\n    /**\n     * \n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any): AxiosPromise<FeatureReviewResponse>;\n\n    /**\n     * \n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any): AxiosPromise<SelfResourceReview>;\n\n    /**\n     * \n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n\n    /**\n     * \n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApiInterface\n     */\n    apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any): AxiosPromise<TermsReviewResponse>;\n\n}\n\n/**\n * DefaultApi - object-oriented interface\n * @export\n * @class DefaultApi\n * @extends {BaseAPI}\n */\nexport class DefaultApi extends BaseAPI implements DefaultApiInterface {\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccessTokenPost(options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccessTokenPost(options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of accounts\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsGet(page?: number, size?: number, search?: string, orderBy?: string, fields?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsGet(page, size, search, orderBy, fields, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an account by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an account\n     * @param {string} id The id of record\n     * @param {AccountPatchRequest} accountPatchRequest Updated account data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsIdPatch(id: string, accountPatchRequest: AccountPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsIdPatch(id, accountPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new account\n     * @param {Account} account Account data\n     * @param {boolean} [dryRun] If true, instructs API to avoid making any changes, but rather run through validations only.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1AccountsPost(account: Account, dryRun?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1AccountsPost(account, dryRun, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Authorizes new cluster creation against an exsiting RH Subscription.\n     * @param {ClusterAuthorizationRequest} clusterAuthorizationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest: ClusterAuthorizationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterAuthorizationsPost(clusterAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds or creates a cluster registration with a registy credential token and cluster ID\n     * @param {ClusterRegistrationRequest} clusterRegistrationRequest Cluster and authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest: ClusterRegistrationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ClusterRegistrationsPost(clusterRegistrationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get the authenticated account\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1CurrentAccountGet(fetchLabels?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1CurrentAccountGet(fetchLabels, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of errors\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ErrorsGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an error by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ErrorsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ErrorsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Query a feature toggle by id\n     * @param {string} id The id of record\n     * @param {FeatureToggleQueryRequest} featureToggleQueryRequest The context of the query\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1FeatureTogglesIdQueryPost(id: string, featureToggleQueryRequest: FeatureToggleQueryRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1FeatureTogglesIdQueryPost(id, featureToggleQueryRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1LabelsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1LabelsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of metrics\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1MetricsGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1MetricsGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Notify the owner of cluster/subscription\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a cluster/subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1NotifyPost(notificationRequest: NotificationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1NotifyPost(notificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of organizations\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsGet(page?: number, size?: number, search?: string, orderBy?: string, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsGet(page, size, search, orderBy, fetchLabels, fetchCapabilities, fields, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an organization by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdGet(id: string, fetchLabels?: boolean, fetchCapabilities?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdGet(id, fetchLabels, fetchCapabilities, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update an organization\n     * @param {string} id The id of record\n     * @param {OrganizationPatchRequest} organizationPatchRequest Updated organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdPatch(id: string, organizationPatchRequest: OrganizationPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdPatch(id, organizationPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of organizations clusters based on metrics\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsIdSummaryDashboardGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of quota cost\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchRelatedResources] If true, includes the related resources in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId: string, search?: string, fetchRelatedResources?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, search, fetchRelatedResources, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a summary of resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId: string, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdQuotaSummaryGet(orgId, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {string} orgId The id of organization\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaGet(orgId, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new resource quota\n     * @param {string} orgId The id of organization\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaPost(orgId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId: string, quotaId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdDelete(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a resource quota by id\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId: string, quotaId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdGet(orgId, quotaId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a resource quota\n     * @param {string} orgId The id of organization\n     * @param {string} quotaId The id of quota\n     * @param {ResourceQuotaRequest} resourceQuotaRequest Updated resource quota data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId: string, quotaId: string, resourceQuotaRequest: ResourceQuotaRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsOrgIdResourceQuotaQuotaIdPatch(orgId, quotaId, resourceQuotaRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new organization\n     * @param {Organization} organization Organization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1OrganizationsPost(organization: Organization, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1OrganizationsPost(organization, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get all plans\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PlansGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a plan by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PlansIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PlansIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a pull secret\n     * @param {string} externalResourceId The external resource id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsExternalResourceIdDelete(externalResourceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Return access token generated from registries in docker format\n     * @param {PullSecretRequest} pullSecretRequest Identifier of the resource in the external service that this pull secret relates to\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1PullSecretsPost(pullSecretRequest: PullSecretRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1PullSecretsPost(pullSecretRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of registries\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistriesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get an registry by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistriesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistriesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * List Registry Credentials\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a registry credential by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a registry credentials by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a registry credential\n     * @param {string} id The id of record\n     * @param {RegistryCredentialPatchRequest} registryCredentialPatchRequest Updated registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsIdPatch(id: string, registryCredentialPatchRequest: RegistryCredentialPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsIdPatch(id, registryCredentialPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Request the creation of a registry credential\n     * @param {RegistryCredential} registryCredential Registry credential data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RegistryCredentialsPost(registryCredential: RegistryCredential, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RegistryCredentialsPost(registryCredential, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ReservedResourcesGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ReservedResourcesGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of resource quota objects\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1ResourceQuotaGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1ResourceQuotaGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of role bindings\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsGet(page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsGet(page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a role binding\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a role binding\n     * @param {string} id The id of record\n     * @param {RoleBindingRequest} roleBindingRequest Updated role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsIdPatch(id: string, roleBindingRequest: RoleBindingRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsIdPatch(id, roleBindingRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new role binding\n     * @param {RoleBindingCreateRequest} roleBindingCreateRequest Role binding data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest: RoleBindingCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RoleBindingsPost(roleBindingCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of roles\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RolesGet(page?: number, size?: number, search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesGet(page, size, search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a role by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1RolesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1RolesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKU Rules\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkuRulesGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a sku rules by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkuRulesIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkuRulesIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of UHC product SKUs\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkusGet(search?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusGet(search, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a sku by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SkusIdGet(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SkusIdGet(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of subscriptions\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {string} [labels] Specifies the criteria to filter the subscription resource based on their labels. A label is represented as a &#x60;key&#x3D;value&#x60; pair,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar\\&quot; &#x60;&#x60;&#x60;  and multiple labels are separated by comma,  &#x60;&#x60;&#x60; labels &#x3D; \\&quot;foo&#x3D;bar,fooz&#x3D;barz\\&quot; &#x60;&#x60;&#x60;\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsGet(page?: number, size?: number, search?: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fields?: string, orderBy?: string, labels?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsGet(page, size, search, fetchAccounts, fetchLabels, fetchCapabilities, fields, orderBy, labels, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a subscription by id\n     * @param {string} id The id of record\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdDelete(id: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdDelete(id, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get a subscription by id\n     * @param {string} id The id of record\n     * @param {boolean} [fetchAccounts] If true, includes the account reference information in the output. Could slow request response time.\n     * @param {boolean} [fetchLabels] If true, includes the labels on a subscription/organization/account in the output. Could slow request response time.\n     * @param {boolean} [fetchCapabilities] If true, includes the capabilities on a subscription in the output. Could slow request response time.\n     * @param {boolean} [fetchCpuAndSocket] If true, fetches, from the clusters service, the total numbers of CPU\\&#39;s and sockets under an obligation, and includes in the output. Could slow request response time.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdGet(id: string, fetchAccounts?: boolean, fetchLabels?: boolean, fetchCapabilities?: boolean, fetchCpuAndSocket?: boolean, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdGet(id, fetchAccounts, fetchLabels, fetchCapabilities, fetchCpuAndSocket, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of labels\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyDelete(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get subscription labels by label key\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id: string, key: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyGet(id, key, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {string} key The key of the label\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id: string, key: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsKeyPatch(id, key, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new label or update an existing label\n     * @param {string} id The id of record\n     * @param {Label} label Label data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdLabelsPost(id: string, label: Label, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdLabelsPost(id, label, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Notify the owner of a subscription\n     * @param {string} id The id of record\n     * @param {NotificationRequest} notificationRequest The contents of the notification to send to the owner of a subscription in addition to the set of template parameters which are sent automatically ACCOUNT_USERNAME, FIRST_NAME, LAST_NAME, ORGANIZATION_NAME, ORGANIZATION_EXTERNAL_ID\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdNotifyPost(id: string, notificationRequest: NotificationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdNotifyPost(id, notificationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Update a subscription\n     * @param {string} id The id of record\n     * @param {SubscriptionPatchRequest} subscriptionPatchRequest Updated subscription data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdPatch(id: string, subscriptionPatchRequest: SubscriptionPatchRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdPatch(id, subscriptionPatchRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of reserved resources\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id: string, page?: number, size?: number, search?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdReservedResourcesGet(id, page, size, search, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of open support creates opened against the external cluster id of this subscrption\n     * @param {string} id The id of record\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id: string, page?: number, size?: number, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsIdSupportCasesGet(id, page, size, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Create a new subscription\n     * @param {SubscriptionCreateRequest} subscriptionCreateRequest Subscription Creation data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest: SubscriptionCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsPost(subscriptionCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Deletes a notification contact by subscription and account id\n     * @param {string} subId The id of subscription\n     * @param {string} accountId The id of account\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId: string, accountId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsAccountIdDelete(subId, accountId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Returns a list of notification contacts for the given subscription\n     * @param {string} subId The id of subscription\n     * @param {number} [page] Page number of record list when record list exceeds specified page size\n     * @param {number} [size] Maximum number of records to return\n     * @param {string} [search] Specifies the search criteria. The syntax of this parameter is similar to the syntax of the _where_ clause of an SQL statement, using the names of the json attributes / column names of the account. For example, in order to retrieve all the accounts with a username starting with &#x60;my&#x60;:  &#x60;&#x60;&#x60;sql username like \\&#39;my%\\&#39; &#x60;&#x60;&#x60;  The search criteria can also be applied on related resource. For example, in order to retrieve all the subscriptions labeled by &#x60;foo&#x3D;bar&#x60;,  &#x60;&#x60;&#x60;sql labels.key &#x3D; \\&#39;foo\\&#39; and labels.value &#x3D; \\&#39;bar\\&#39; &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then all the accounts that the user has permission to see will be returned.\n     * @param {string} [fields] Supplies a comma-separated list of fields to be returned. Fields of sub-structures and of arrays use &lt;structure&gt;.&lt;field&gt; notation. &lt;stucture&gt;.* means all field of a structure Example: For each Subscription to get id, href, plan(id and kind) and labels (all fields)  &#x60;&#x60;&#x60; ocm get subscriptions --parameter fields&#x3D;id,href,plan.id,plan.kind,labels.* --parameter fetchLabels&#x3D;true &#x60;&#x60;&#x60;\n     * @param {string} [orderBy] Specifies the order by criteria. The syntax of this parameter is similar to the syntax of the _order by_ clause of an SQL statement, but using the names of the json attributes / column of the account. For example, in order to retrieve all accounts ordered by username:  &#x60;&#x60;&#x60;sql username asc &#x60;&#x60;&#x60;  Or in order to retrieve all accounts ordered by username _and_ first name:  &#x60;&#x60;&#x60;sql username asc, firstName asc &#x60;&#x60;&#x60;  If the parameter isn\\&#39;t provided, or if the value is empty, then no explicit ordering will be applied.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId: string, page?: number, size?: number, search?: string, fields?: string, orderBy?: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsGet(subId, page, size, search, fields, orderBy, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Add an account as a notification contact to this subscription\n     * @param {string} subId The id of subscription\n     * @param {NotificationContactCreateRequest} notificationContactCreateRequest Add a notification contact by an account\\&#39;s username\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId: string, notificationContactCreateRequest: NotificationContactCreateRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdNotificationContactsPost(subId, notificationContactCreateRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Get reserved resources by id\n     * @param {string} subId The id of subscription\n     * @param {string} reservedResourceId The id of reserved resource\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId: string, reservedResourceId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SubscriptionsSubIdReservedResourcesReservedResourceIdGet(subId, reservedResourceId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Delete a support case\n     * @param {string} caseId The id of a support case\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId: string, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesCaseIdDelete(caseId, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary create a support case for the subscription\n     * @param {SupportCasesRequest} supportCasesRequest The contents of the support case to be created\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1SupportCasesPost(supportCasesRequest: SupportCasesRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1SupportCasesPost(supportCasesRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Finds the account owner of the provided token\n     * @param {TokenAuthorizationRequest} tokenAuthorizationRequest Token authorization data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest: TokenAuthorizationRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAccountsMgmtV1TokenAuthorizationPost(tokenAuthorizationRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s access to perform an action on a particular resource or resource type\n     * @param {AccessReview} accessReview Access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1AccessReviewPost(accessReview: AccessReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1AccessReviewPost(accessReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s capabilities\n     * @param {CapabilityReviewRequest} capabilityReviewRequest Capability review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest: CapabilityReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1CapabilityReviewPost(capabilityReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Determine whether a user is restricted from downloading Red Hat software based on export control compliance. \n     * @param {ExportControlReviewRequest} exportControlReviewRequest Export control review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest: ExportControlReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1ExportControlReviewPost(exportControlReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review feature to perform an action on it such as toggle a feature on/off\n     * @param {FeatureReview} featureReview Feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1FeatureReviewPost(featureReview: FeatureReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1FeatureReviewPost(featureReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Obtain resource ids for resources an account may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {ResourceReviewRequest} resourceReviewRequest Resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest: ResourceReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1ResourceReviewPost(resourceReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your ability to perform an action on a particular resource or resource type\n     * @param {SelfAccessReview} selfAccessReview Self access review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview: SelfAccessReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfAccessReviewPost(selfAccessReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your ability to toggle a feature\n     * @param {SelfFeatureReview} selfFeatureReview Self feature review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview: SelfFeatureReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfFeatureReviewPost(selfFeatureReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Obtain resource ids for resources you may perform the specified action upon. Resource ids returned as [\\\"*\\\"] is shorthand for all ids.\n     * @param {SelfResourceReviewRequest} selfResourceReviewRequest Self resource review data\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest: SelfResourceReviewRequest, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfResourceReviewPost(selfResourceReviewRequest, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review your status of Terms\n     * @param {SelfTermsReview} selfTermsReview Data to check self terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview: SelfTermsReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1SelfTermsReviewPost(selfTermsReview, options).then((request) => request(this.axios, this.basePath));\n    }\n\n    /**\n     * \n     * @summary Review an account\\'s status of Terms\n     * @param {TermsReview} termsReview Data to check terms for\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof DefaultApi\n     */\n    public apiAuthorizationsV1TermsReviewPost(termsReview: TermsReview, options?: any) {\n        return DefaultApiFp(this.configuration).apiAuthorizationsV1TermsReviewPost(termsReview, options).then((request) => request(this.axios, this.basePath));\n    }\n}\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport globalAxios, { AxiosPromise, AxiosInstance } from 'axios';\n\nexport const BASE_PATH = \"https://api.openshift.com\".replace(/\\/+$/, \"\");\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n/**\n *\n * @export\n * @interface RequestArgs\n */\nexport interface RequestArgs {\n    url: string;\n    options: any;\n}\n\n/**\n *\n * @export\n * @class BaseAPI\n */\nexport class BaseAPI {\n    protected configuration: Configuration | undefined;\n\n    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected axios: AxiosInstance = globalAxios) {\n        if (configuration) {\n            this.configuration = configuration;\n            this.basePath = configuration.basePath || this.basePath;\n        }\n    }\n};\n\n/**\n *\n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nimport { Configuration } from \"./configuration\";\nimport { RequiredError,　RequestArgs } from \"./base\";\nimport { AxiosInstance } from 'axios';\n\n/**\n *\n * @export\n */\nexport const DUMMY_BASE_URL = 'https://example.com'\n\n/**\n *\n * @throws {RequiredError}\n * @export\n */\nexport const assertParamExists = function (functionName: string, paramName: string, paramValue: unknown) {\n    if (paramValue === null || paramValue === undefined) {\n        throw new RequiredError(paramName, `Required parameter ${paramName} was null or undefined when calling ${functionName}.`);\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setApiKeyToObject = async function (object: any, keyParamName: string, configuration?: Configuration) {\n    if (configuration && configuration.apiKey) {\n        const localVarApiKeyValue = typeof configuration.apiKey === 'function'\n            ? await configuration.apiKey(keyParamName)\n            : await configuration.apiKey;\n        object[keyParamName] = localVarApiKeyValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBasicAuthToObject = function (object: any, configuration?: Configuration) {\n    if (configuration && (configuration.username || configuration.password)) {\n        object[\"auth\"] = { username: configuration.username, password: configuration.password };\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setBearerAuthToObject = async function (object: any, configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const accessToken = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken()\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + accessToken;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setOAuthToObject = async function (object: any, name: string, scopes: string[], configuration?: Configuration) {\n    if (configuration && configuration.accessToken) {\n        const localVarAccessTokenValue = typeof configuration.accessToken === 'function'\n            ? await configuration.accessToken(name, scopes)\n            : await configuration.accessToken;\n        object[\"Authorization\"] = \"Bearer \" + localVarAccessTokenValue;\n    }\n}\n\n/**\n *\n * @export\n */\nexport const setSearchParams = function (url: URL, ...objects: any[]) {\n    const searchParams = new URLSearchParams(url.search);\n    for (const object of objects) {\n        for (const key in object) {\n            if (Array.isArray(object[key])) {\n                searchParams.delete(key);\n                for (const item of object[key]) {\n                    searchParams.append(key, item);\n                }\n            } else {\n                searchParams.set(key, object[key]);\n            }\n        }\n    }\n    url.search = searchParams.toString();\n}\n\n/**\n *\n * @export\n */\nexport const serializeDataIfNeeded = function (value: any, requestOptions: any, configuration?: Configuration) {\n    const nonString = typeof value !== 'string';\n    const needsSerialization = nonString && configuration && configuration.isJsonMime\n        ? configuration.isJsonMime(requestOptions.headers['Content-Type'])\n        : nonString;\n    return needsSerialization\n        ? JSON.stringify(value !== undefined ? value : {})\n        : (value || \"\");\n}\n\n/**\n *\n * @export\n */\nexport const toPathString = function (url: URL) {\n    return url.pathname + url.search + url.hash\n}\n\n/**\n *\n * @export\n */\nexport const createRequestFunction = function (axiosArgs: RequestArgs, globalAxios: AxiosInstance, BASE_PATH: string, configuration?: Configuration) {\n    return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {\n        const axiosRequestArgs = {...axiosArgs.options, url: (configuration?.basePath || basePath) + axiosArgs.url};\n        return axios.request(axiosRequestArgs);\n    };\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = params => Object.keys(params)\n  .map(key => `${key}=${encodeURIComponent(params[key])}`)\n  .join('&');\n\n\n","/* tslint:disable */\n/* eslint-disable */\n/**\n * Account Management Service API\n * Manage user subscriptions and clusters\n *\n * The version of the OpenAPI document: 0.0.1\n * \n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\n\n\nexport interface ConfigurationParameters {\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    username?: string;\n    password?: string;\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    basePath?: string;\n    baseOptions?: any;\n    formDataCtor?: new () => any;\n}\n\nexport class Configuration {\n    /**\n     * parameter for apiKey security\n     * @param name security name\n     * @memberof Configuration\n     */\n    apiKey?: string | Promise<string> | ((name: string) => string) | ((name: string) => Promise<string>);\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    username?: string;\n    /**\n     * parameter for basic security\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    password?: string;\n    /**\n     * parameter for oauth2 security\n     * @param name security name\n     * @param scopes oauth2 scope\n     * @memberof Configuration\n     */\n    accessToken?: string | Promise<string> | ((name?: string, scopes?: string[]) => string) | ((name?: string, scopes?: string[]) => Promise<string>);\n    /**\n     * override base path\n     *\n     * @type {string}\n     * @memberof Configuration\n     */\n    basePath?: string;\n    /**\n     * base options for axios calls\n     *\n     * @type {any}\n     * @memberof Configuration\n     */\n    baseOptions?: any;\n    /**\n     * The FormData constructor that will be used to create multipart form data\n     * requests. You can inject this here so that execution environments that\n     * do not support the FormData class can still run the generated client.\n     *\n     * @type {new () => FormData}\n     */\n    formDataCtor?: new () => any;\n\n    constructor(param: ConfigurationParameters = {}) {\n        this.apiKey = param.apiKey;\n        this.username = param.username;\n        this.password = param.password;\n        this.accessToken = param.accessToken;\n        this.basePath = param.basePath;\n        this.baseOptions = param.baseOptions;\n        this.formDataCtor = param.formDataCtor;\n    }\n\n    /**\n     * Check if the given MIME is a JSON MIME.\n     * JSON MIME examples:\n     *   application/json\n     *   application/json; charset=UTF8\n     *   APPLICATION/JSON\n     *   application/vnd.company+json\n     * @param mime - MIME (Multipurpose Internet Mail Extensions)\n     * @return True if the given MIME is JSON, false otherwise.\n     */\n    public isJsonMime(mime: string): boolean {\n        const jsonMime: RegExp = new RegExp('^(application\\/json|[^;/ \\t]+\\/[^;/ \\t]+[+]json)[ \\t]*(;.*)?$', 'i');\n        return mime !== null && (jsonMime.test(mime) || mime.toLowerCase() === 'application/json-patch+json');\n    }\n}\n","import React, { useEffect, useState } from 'react';\nimport { useHistory, useLocation } from 'react-router-dom';\nimport { useAuth, useConfig } from '@bf2/ui-shared';\nimport { Configuration, DefaultApi, TermsReviewResponse } from '@openapi/ams';\nimport { getTermsAppURL } from '@app/utils/termsApp';\nimport queryString from 'query-string';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { Loading, FederatedModule, DevelopmentPreview } from '@app/components';\n\nexport const KasPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <KasPageConnected />;\n};\n\nexport const KasPageConnected: React.FunctionComponent = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const history = useHistory();\n  const location = useLocation();\n\n  const [create, setCreate] = useState<boolean>(false);\n  const [termsReview, setTermsReview] = useState<TermsReviewResponse | undefined>();\n\n  useEffect(() => {\n    // Handle being passed ?create=true by setting the create state, then removing it from the search params\n    const handleCreateParam = async () => {\n      const parsed = queryString.parse(location.search);\n      const c = parsed['create'] === 'true';\n      if (c) {\n        const terms = await getTermsReview();\n        if (terms?.terms_required === false) {\n          history.replace({\n            search: '',\n          });\n          setCreate(true);\n        }\n      }\n    };\n\n    handleCreateParam();\n  }, [location.search]);\n\n  const getTermsReview = async () => {\n    const accessToken = await auth?.ams.getToken();\n    const ams = new DefaultApi({\n      accessToken,\n      basePath: config?.ams.apiBasePath || '',\n    } as Configuration);\n    const response = await ams\n      .apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: config?.ams.eventCode,\n        site_code: config?.ams.siteCode,\n      })\n      .then((resp) => resp.data);\n    return response;\n  };\n\n  useEffect(() => {\n    // Load the terms review state asynchronously, to avoid the user waiting when they press the Create Kafka Instance button\n    const selfTermsReview = async () => {\n      const termsReviewResponse = await getTermsReview();\n      setTermsReview(termsReviewResponse);\n    };\n\n    selfTermsReview();\n  }, [config?.ams.apiBasePath, auth]);\n\n  const onConnectToRoute = async (event: unknown, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    history.push(`/streams/${routePath}`);\n  };\n\n  const getConnectToRoutePath = (event: unknown, routePath: string) => {\n    if (routePath === undefined) {\n      throw new Error('Route path is missing');\n    }\n    return history.createHref({ pathname: `/streams/${routePath}` });\n  };\n\n  const preCreateInstance = async (open: boolean) => {\n    // if termsReview is set, we can proceed, otherwise wait for the effect to complete - the state update will cause the page to rerender\n    if (termsReview) {\n      if (termsReview.terms_available || termsReview.terms_required) {\n        if (termsReview.redirect_url === undefined) {\n          throw new Error('terms must be signed but there is no terms url');\n        }\n        const redirectURL = queryString.stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n        const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n        window.location.href = url;\n        return false;\n      }\n      return open;\n    }\n    return false;\n  };\n\n  const createDialogOpen = () => {\n    return create;\n  };\n\n  if (config === undefined || termsReview === undefined) {\n    return <Loading />;\n  }\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  const osStreams = (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      fallback={<Loading />}\n      render={(OpenshiftStreamsFederated) => {\n        return (\n          <OpenshiftStreamsFederated\n            onConnectToRoute={onConnectToRoute}\n            getConnectToRoutePath={getConnectToRoutePath}\n            preCreateInstance={preCreateInstance}\n            shouldOpenCreateModal={createDialogOpen()}\n            tokenEndPointUrl={tokenEndPointUrl}\n          />\n        );\n      }}\n    />\n  );\n\n  return <DevelopmentPreview> {osStreams} </DevelopmentPreview>;\n};\n\nexport default KasPage;\n","import React from 'react';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const ServiceDownPage: React.FunctionComponent = () => {\n  const { t } = useTranslation();\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t('serviceDown.serviceDownTitle')}\n        </Title>\n        <EmptyStateBody>\n          {t('serviceDown.serviceDownMessage')}\n        </EmptyStateBody>\n        <Button variant=\"primary\" onClick={() => {window.location.href = \"https://status.starter.openshift.com/\"}}>{t('serviceDown.serviceDownButton')}</Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n"],"sourceRoot":""}