{"version":3,"file":"8007.775bb27b2e7b9c4086c5.js","mappings":"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","sources":["webpack://application-services-ui/./src/app/AppRoutes.tsx","webpack://application-services-ui/./src/app/App.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModule.tsx","webpack://application-services-ui/./src/app/components/PrincipalsProvider/PrincipalsProvider.tsx","webpack://application-services-ui/./src/app/components/InstanceDrawer/InstanceDrawer.tsx","webpack://application-services-ui/./src/app/components/FederatedModule/moduleInfo.ts","webpack://application-services-ui/./src/app/components/FederatedModule/FederatedModuleContext.tsx","webpack://application-services-ui/./src/app/components/KasModalLoader/KasModalLoader.tsx","webpack://application-services-ui/./src/app/services/fetch.ts","webpack://application-services-ui/./src/app/hooks/quota.ts","webpack://application-services-ui/./src/app/services/termsReview.ts","webpack://application-services-ui/./src/app/utils/termsApp.ts","webpack://application-services-ui/./src/app/hooks/modal.ts","webpack://application-services-ui/./src/app/hooks/insights.ts","webpack://application-services-ui/./src/app/hooks/keycloak.ts","webpack://application-services-ui/./src/app/hooks/useMASToken.ts","webpack://application-services-ui/./src/app/pages/APIManagement/APIManagementPage.tsx","webpack://application-services-ui/./src/app/pages/CosPage/CosPage.tsx","webpack://application-services-ui/./src/app/pages/DataScience/DataSciencePage.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaFederatedComponent.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Topics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/TopicDetails.tsx","webpack://application-services-ui/./src/app/pages/Kafka/CreateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/UpdateTopic.tsx","webpack://application-services-ui/./src/app/pages/Kafka/Dashboard.tsx","webpack://application-services-ui/./src/app/pages/Kafka/ConsumerGroups.tsx","webpack://application-services-ui/./src/app/pages/Kafka/AclPermissions.tsx","webpack://application-services-ui/./src/app/pages/Kafka/kafka-instance.ts","webpack://application-services-ui/./src/app/pages/Kafka/KafkaRoutes.tsx","webpack://application-services-ui/./src/app/pages/Kafka/KafkaMainView.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaTopicsFromAdmin.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchTopicsMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/ConnectedMetrics.tsx","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchKafkaInstanceMetrics.ts","webpack://application-services-ui/./src/app/pages/Kafka/api/fetchMetricsKpi.ts","webpack://application-services-ui/./src/app/pages/Kas/KasPage.tsx","webpack://application-services-ui/./src/app/pages/NotFound/NotFoundPage.tsx","webpack://application-services-ui/./src/app/pages/Overview/OverviewPage.tsx","webpack://application-services-ui/./src/app/pages/Resources/ResourcesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceAccounts/ServiceAccountsPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceDown/ServiceDownPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactVersion.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/Artifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ArtifactsRedirect.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/DownloadArtifacts.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/FederatedApicurioComponent.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/utils.ts","webpack://application-services-ui/./src/app/pages/ServiceRegistry/RulesPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistryPage.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/SrsLayout.tsx","webpack://application-services-ui/./src/app/pages/ServiceRegistry/ServiceRegistrySchemaMapping.tsx","webpack://application-services-ui/./src/app/pages/AccessDenied/AccessDeniedPage.tsx","webpack://application-services-ui/./src/app/providers/config/utils.ts","webpack://application-services-ui/./src/app/providers/config/EmbeddedConfigContextProvider.tsx","webpack://application-services-ui/./src/app/providers/config/ServiceConstants.ts","webpack://application-services-ui/./src/app/providers/config/ServiceConstantsContextProvider.tsx","webpack://application-services-ui/./src/app/providers/featureflags/FeatureFlags.tsx","webpack://application-services-ui/./src/app/store/index.ts","webpack://application-services-ui/./src/app/utils/Routing.tsx","webpack://application-services-ui/./src/app/utils/getBaseName.ts","webpack://application-services-ui/./src/app/utils/a11y.ts","webpack://application-services-ui/./src/app/utils/useDocumentTitle.ts","webpack://application-services-ui/./src/app/utils/keycloak/keycloakUtils.ts"],"sourcesContent":["import React from 'react';\nimport { Redirect, Route, RouteComponentProps, Switch, useHistory } from 'react-router-dom';\nimport { LastLocationProvider } from 'react-router-last-location';\nimport { ErrorBoundary } from 'react-error-boundary';\nimport getBaseName from './utils/getBaseName';\nimport {\n  DevelopmentPreview,\n  AppServicesPageNotFound,\n  AppServicesEmptyState,\n  AppServicesEmptyStateVariant,\n} from '@rhoas/app-services-ui-components';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange } from '@app/utils/Routing';\nimport { useDocumentTitle } from '@app/utils';\nimport { KafkaMainView } from '@app/pages/Kafka';\nimport { BasenameContext } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useTranslation } from 'react-i18next';\nimport { Button } from '@patternfly/react-core';\n\nconst QuickStartLoaderFederated = React.lazy(() => import('@app/pages/Resources/QuickStartLoaderFederated'));\n\nconst APIManagementPage = React.lazy(() => import('@app/pages/APIManagement/APIManagementPage'));\nconst ArtifactRedirect = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactsRedirect'));\nconst Artifacts = React.lazy(() => import('@app/pages/ServiceRegistry/Artifacts'));\nconst ArtifactVersionDetails = React.lazy(() => import('@app/pages/ServiceRegistry/ArtifactVersion'));\nconst DataSciencePage = React.lazy(() => import('@app/pages/DataScience/DataSciencePage'));\n\nconst KasPage = React.lazy(() => import('@app/pages/Kas/KasPage'));\nconst OverviewPage = React.lazy(() => import('@app/pages/Overview/OverviewPage'));\nconst ResourcesPage = React.lazy(() => import('@app/pages/Resources/ResourcesPage'));\nconst RulesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RulesPage'));\nconst RolesPage = React.lazy(() => import('@app/pages/ServiceRegistry/RolesPage'));\nconst ServiceAccountsPage = React.lazy(() => import('@app/pages/ServiceAccounts/ServiceAccountsPage'));\nconst CosPage = React.lazy(() => import('@app/pages/CosPage/CosPage'));\nconst ServiceRegistryPage = React.lazy(() => import('@app/pages/ServiceRegistry/ServiceRegistryPage'));\n\nconst RedirectToOverview: React.FunctionComponent = () => <Redirect to=\"/overview\" />;\nconst RedirectToStreamsKafkas: React.FunctionComponent = () => <Redirect to=\"/streams/kafkas\" />;\nconst RedirectToServiceAccounts: React.FunctionComponent = () => <Redirect to=\"/service-accounts\" />;\nconst RedirectToResources: React.FunctionComponent = () => <Redirect to=\"/learning-resources\" />;\n\nconst appRoutes: AppRouteConfig<any>[] = [\n  {\n    component: KafkaMainView,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas/:id',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas/:id',\n    devPreview: false,\n  },\n  {\n    // Handle the redirect from application-services/streams to application-services/streams/kafkas\n    component: RedirectToStreamsKafkas,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToStreamsKafkas,\n    // Handle the redirect for the old url application-services/openshift-streams to application-services/streams/kafkas\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/openshift-streams',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: KasPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/kafkas',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    basename: '/streams/kafkas',\n    devPreview: false,\n  },\n  {\n    component: ServiceRegistryPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: Artifacts,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: RulesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/rules',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: RolesPage,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/roles',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: ArtifactRedirect,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: ArtifactVersionDetails,\n    exact: true,\n    label: 'Service Registry',\n    path: '/service-registry/t/:tenantId/artifacts/:groupId/:artifactId/versions/:version',\n    title: 'Service Registry | Red Hat OpenShift Application Services',\n    basename: '/service-registry',\n  },\n  {\n    component: CosPage,\n    exact: false,\n    label: 'COS',\n    path: '/cos',\n    title: 'COS',\n    basename: `${getBaseName(window.location.pathname)}/cos`,\n    devPreview: true,\n  },\n  {\n    component: ServiceAccountsPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: false,\n  },\n  {\n    component: RedirectToServiceAccounts,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/streams/service-accounts',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: false,\n  },\n  {\n    component: OverviewPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/overview',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: RedirectToOverview,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: APIManagementPage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/api-management',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    component: DataSciencePage,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/data-science',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n  },\n  {\n    // Handle the redirect for the old url application-services/streams/resources to application-services/learning-resources\n    component: RedirectToResources,\n    label: 'QuickStarts for Red Hat OpenShift Application Services',\n    path: '/streams/resources',\n    title: 'QuickStarts for Red Hat OpenShift Application Services',\n    devPreview: true,\n  },\n  {\n    component: ResourcesPage,\n    exact: true,\n    label: 'Learning Resources | Red Hat OpenShift Application Services',\n    path: '/learning-resources',\n    title: 'Learning Resources | Red Hat OpenShift Application Services',\n    devPreview: false,\n  },\n];\n\nconst WrappedRoute: React.FunctionComponent<IAppRoute<any>> = ({\n  component: Component,\n  isAsync = false,\n  title,\n  basename,\n  devPreview,\n  ...rest\n}) => {\n  const { t } = useTranslation();\n  const history = useHistory();\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n  const getBasename = () => {\n    return basename || '';\n  };\n  const onClickButton = () => history.push('/');\n\n  function wrapRoute(routeProps: RouteComponentProps) {\n    return (\n      <ErrorBoundary\n        fallbackRender={({ error }) =>\n          error.message === '404' ? (\n            <AppServicesPageNotFound />\n          ) : (\n            <AppServicesEmptyState\n              emptyStateProps={{\n                variant: AppServicesEmptyStateVariant.UnexpectedError,\n              }}\n              emptyStateIconProps={{\n                className: 'icon-color',\n              }}\n              titleProps={{\n                title: t('common:something_went_wrong'),\n              }}\n              emptyStateBodyProps={{\n                body: t('common:unexpected_error'),\n              }}\n            >\n              <Button onClick={onClickButton}>{t('common:return_to_home_page')}</Button>\n            </AppServicesEmptyState>\n          )\n        }\n      >\n        <DevelopmentPreview show={devPreview}>\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        </DevelopmentPreview>\n      </ErrorBoundary>\n    );\n  }\n\n  return <Route render={wrapRoute} {...rest} />;\n};\n\nconst AppRoutes = (): React.ReactElement => (\n  <>\n    <LastLocationProvider>\n      <React.Suspense fallback={<AppServicesLoading />}>\n        <Switch>\n          {flattenedRoutes(appRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => (\n            <WrappedRoute\n              path={path}\n              exact={exact}\n              component={component}\n              key={idx}\n              title={title}\n              isAsync={isAsync}\n              {...rest}\n            />\n          ))}\n          <PageNotFoundRoute title=\"404 Page Not Found\" />\n        </Switch>\n      </React.Suspense>\n    </LastLocationProvider>\n    <QuickStartLoaderFederated />\n  </>\n);\n\nexport { AppRoutes, appRoutes };\n","import React, { useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { NotificationsPortal } from '@redhat-cloud-services/frontend-components-notifications/';\nimport { AppRoutes } from '@app/AppRoutes';\nimport { FederatedModuleProvider } from '@app/components';\nimport { useInsights } from '@app/hooks';\n\nexport const App: React.FunctionComponent = () => {\n  const insights = useInsights();\n  const history = useHistory();\n\n  const getAppId = () => {\n    const defaultAppId = 'overview';\n\n    const parts = history.location.pathname.split('/');\n    if (parts.length > 1) {\n      if (parts[1] === '') {\n        return defaultAppId;\n      } else {\n        if (parts[1] === 'openshift-streams') {\n          return 'streams';\n        }\n        return parts[1];\n      }\n    } else {\n      return defaultAppId;\n    }\n  };\n\n  useEffect(() => {\n    insights.chrome.init();\n    const appId = getAppId();\n    insights.chrome.identifyApp(appId);\n\n    const unregister = insights.chrome.on('APP_NAVIGATION', (event) => {\n      const streamUrls = ['kafkas', 'service-accounts', 'resources'];\n      history.push(`/${streamUrls.includes(event.navId) ? 'streams/' : ''}${event.navId}`);\n    });\n    return () => {\n      unregister();\n    };\n  }, [getAppId, history, insights.chrome]);\n\n  return (\n    <FederatedModuleProvider>\n      <NotificationsPortal />\n      <AppRoutes />\n    </FederatedModuleProvider>\n  );\n};\n\n/**\n * connect: https://github.com/reactjs/react-redux/blob/master/docs/api.md\n *          https://reactjs.org/docs/higher-order-components.html\n */\nexport default connect()(App);\n","/* eslint-disable camelcase */\n/* eslint-disable no-undef */\nimport React, { ComponentType, ReactNode, useEffect, useRef, useState } from 'react';\nimport { AssetsContext } from \"@rhoas/app-services-ui-shared\";\nimport { ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\nimport { useFederatedModule } from \"@app/components\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nconst useIsMounted = () => {\n  const isMounted = useRef(false);\n  useEffect(() => {\n    isMounted.current = true;\n    return () => {\n      isMounted.current = false;\n    };\n  }, []);\n  return isMounted;\n};\n\ndeclare function __webpack_init_sharing__(shareScope: string);\n\ndeclare const __webpack_share_scopes__: {\n  default: unknown;\n};\n\ntype Container = {\n  init: (shareScopes: unknown) => Promise<void>;\n  get: (module: string) => Promise<{ (): { default: ComponentType<any> } }>;\n};\n\nfunction loadComponent(scope, module) {\n  return async () => {\n    // Initializes the share scope. This fills it with known provided modules from this build and all remotes\n    await __webpack_init_sharing__('default');\n    const container = window[scope] as unknown as Container; // or get the container somewhere else\n    // Initialize the container, it may provide shared modules\n    await container.init(__webpack_share_scopes__.default);\n    const factory = await container.get(module);\n    const Module = factory();\n    console.debug(`loaded ${module} from ${scope}`);\n    return Module;\n  };\n}\n\nconst useDynamicScript = (url: string) => {\n  const isMounted = useIsMounted();\n  const [ready, setReady] = React.useState(false);\n  const [failed, setFailed] = React.useState(false);\n\n  React.useEffect(() => {\n    let element;\n    if (isMounted.current) {\n      if (!url) {\n        setFailed(true);\n        return;\n      }\n\n      element = document.createElement('script');\n\n      element.src = url;\n      element.type = 'text/javascript';\n      element.async = true;\n\n      setReady(false);\n      setFailed(false);\n\n      element.onload = () => {\n        console.log(`Dynamic federated module Loaded: ${url}`);\n        setReady(true);\n      };\n\n      element.onerror = () => {\n        console.error(`Dynamic federated module Error: ${url}`);\n        setReady(false);\n        setFailed(true);\n      };\n\n      document.head.appendChild(element);\n    }\n\n    return () => {\n      if (element) {\n        console.log(`Dynamic federated module Removed: ${url}`);\n        document.head.removeChild(element);\n      }\n    };\n  }, [url]);\n\n  return {\n    ready,\n    failed,\n  };\n};\n\nexport type FederatedModuleProps = {\n  scope: string;\n  module: string;\n  render: (component: React.LazyExoticComponent<React.ComponentType<any>>) => ReactNode;\n  fallback?: React.ReactNode;\n};\n\nexport const FederatedModule: React.FunctionComponent<FederatedModuleProps> = ({ scope, module, render, fallback }) => {\n  const isMounted = useIsMounted();\n\n  const { getModuleInfo, modules } = useFederatedModule();\n  const [moduleInfo, setModuleInfo] = useState<ModuleInfo | undefined>();\n\n  useEffect(() => {\n    const fetchModuleInfo = async () => {\n      const moduleInfo = await getModuleInfo(\n        modules[scope].basePath,\n        scope,\n        modules[scope].fallbackBasePath\n      );\n      if (isMounted.current) {\n        setModuleInfo(moduleInfo);\n      }\n    };\n    fetchModuleInfo();\n  }, [scope, modules]);\n\n  if (moduleInfo !== undefined) {\n    return <DynamicFederatedModule scope={scope} module={module} render={render} moduleInfo={moduleInfo} />;\n  }\n  if (fallback !== undefined) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n\ntype DynamicFederatedModuleProps = FederatedModuleProps & {\n  moduleInfo: ModuleInfo;\n};\n\nconst DynamicFederatedModule: React.FunctionComponent<DynamicFederatedModuleProps> = ({\n  moduleInfo,\n  fallback,\n  scope,\n  render,\n  module,\n}) => {\n  const { ready, failed } = useDynamicScript(moduleInfo.entryPoint);\n\n  if (ready && !failed) {\n    const Component = React.lazy(loadComponent(scope, module));\n\n    const getPath = () => {\n      return moduleInfo.basePath;\n    };\n\n    return (\n      <AssetsContext.Provider value={{ getPath }}>\n        <React.Suspense fallback={<AppServicesLoading />}>{render(Component)}</React.Suspense>\n      </AssetsContext.Provider>\n    );\n  }\n\n  if (fallback) {\n    return <>{fallback}</>;\n  }\n  return null;\n};\n","import React, { useEffect, useState } from 'react';\nimport { Configuration, KafkaRequest, SecurityApi } from '@rhoas/kafka-management-sdk';\nimport { Principal, PrincipalsContext, PrincipalType, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { PrincipalApi } from '@redhat-cloud-services/rbac-client';\n\nexport type PrincipalsProviderProps = {\n  kafkaInstance?: KafkaRequest;\n};\n\nexport const usePrincipal = () => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  const [serviceAccountPrincipals, setServiceAccountPrincipals] = useState<Principal[] | undefined>();\n  const [userAcountPrincipals, setUserAccountPrincipals] = useState<Principal[] | undefined>();\n\n  useEffect(() => {\n    const fetchUserAccounts = async () => {\n      if (config !== undefined && auth !== undefined && config.rbac.basePath !== undefined) {\n        const accessToken = await auth.kas.getToken();\n        const principalApi = new PrincipalApi({\n          accessToken,\n          basePath: config?.rbac.basePath,\n        });\n\n        try {\n          const userAccounts = await principalApi.listPrincipals(-1).then((response) =>\n            response.data.data.map((p) => {\n              return {\n                id: p.username,\n                principalType: PrincipalType.UserAccount,\n                displayName: `${p.first_name} ${p.last_name}`,\n                emailAddress: p.email,\n              } as Principal;\n            })\n          );\n          setUserAccountPrincipals(userAccounts);\n        } catch (e) {\n          // temp fix - this API is only available to org admins\n          // needs a proper approach longer term\n        }\n      }\n    };\n    fetchUserAccounts();\n  }, [auth, config]);\n\n  useEffect(() => {\n    const fetchServiceAccounts = async () => {\n      if (config !== undefined && auth !== undefined && config.rbac.basePath !== undefined) {\n        const accessToken = await auth.kas.getToken();\n        const securityApi = new SecurityApi({\n          accessToken,\n          basePath: config.kas.apiBasePath,\n        } as Configuration);\n        const serviceAccounts = await securityApi.getServiceAccounts().then((response) =>\n          response.data.items.map((sa) => {\n            return {\n              id: sa.client_id,\n              displayName: sa.name,\n              principalType: PrincipalType.ServiceAccount,\n            } as Principal;\n          })\n        );\n\n        setServiceAccountPrincipals(serviceAccounts);\n      }\n    };\n    fetchServiceAccounts();\n  }, [auth, config]);\n\n  const value = {\n    getAllPrincipals: () => {\n      let answer: Principal[] = [];\n      if (userAcountPrincipals !== undefined && serviceAccountPrincipals !== undefined) {\n        answer = answer.concat(userAcountPrincipals);\n      }\n      if (serviceAccountPrincipals !== undefined) {\n        answer = answer.concat(serviceAccountPrincipals);\n      }\n      return answer;\n    },\n    getAllUserAccounts: () => {\n      return userAcountPrincipals;\n    },\n    getAllServiceAccounts: () => {\n      return serviceAccountPrincipals;\n    },\n  };\n\n  return value;\n};\n\nexport const PrincipalsProvider: React.FunctionComponent<PrincipalsProviderProps> = ({ children }) => {\n  const { getAllPrincipals } = usePrincipal();\n  return <PrincipalsContext.Provider value={{ getAllPrincipals }}>{children}</PrincipalsContext.Provider>;\n};\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useHistory } from 'react-router-dom';\n\ntype InstanceDrawerProps = {\n  kafkaDetail: KafkaRequest | undefined;\n  isExpanded: boolean | undefined;\n  activeTab: string;\n  onClose: () => void;\n};\n\nexport const InstanceDrawer: React.FC<InstanceDrawerProps> = ({\n  isExpanded,\n  onClose,\n  kafkaDetail,\n  activeTab,\n  children,\n}) => {\n  const config = useConfig();\n  const history = useHistory();\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const { authServerUrl, realm } = config?.masSso || {};\n  const tokenEndPointUrl = `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n\n  const onDeleteInstance = () => {\n    history.push('/streams/kafkas');\n  };\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./InstanceDrawer\"\n      fallback={children}\n      render={(InstanceDrawerFederated) => {\n        return (\n          <InstanceDrawerFederated\n            tokenEndPointUrl={tokenEndPointUrl}\n            isExpanded={isExpanded}\n            onClose={onClose}\n            instanceDetail={kafkaDetail}\n            activeTab={activeTab}\n            onDeleteInstance={onDeleteInstance}\n          >\n            {children}\n          </InstanceDrawerFederated>\n        );\n      }}\n    />\n  );\n};\n","export type ModuleInfo = {\n  entryPoint: string\n  basePath: string\n}\n\nexport type FetchModuleInfoFunction = {\n  (baseUrl: string, scope: string, fallbackBasePath?: string): Promise<ModuleInfo | undefined>\n}\n\nexport const fetchModuleInfo: FetchModuleInfoFunction = async (baseUrl, scope, fallbackBasePath) => {\n\n  const fedModsJsonFileName = \"fed-mods.json\";\n\n  type FedMods = {\n    [key: string]: {\n      entry: string[],\n      modules: string[]\n    };\n  };\n\n  const fetchModuleInfo = async (basePath: string) => {\n    const url = `${basePath}/${fedModsJsonFileName}`;\n    const response = await fetch(url);\n    return await response.json()\n      .then(json => json as FedMods)\n      .then(fedMods => fedMods[scope])\n      .then(s => s.entry[0])\n      .then(path => {\n        if (path.startsWith(basePath)) {\n          return {\n            entryPoint: path,\n            basePath\n          };\n        }\n        return {\n          entryPoint: `${basePath}${path}`,\n          basePath\n        }\n      });\n  }\n\n  try {\n    // First try to fetch the main entry point\n    return await fetchModuleInfo(baseUrl);\n  } catch (e) {\n    if (fallbackBasePath) {\n      try {\n        // If fetching the main entry point failed, and there is a fallback, try fetching that\n        // This allows us to use remote versions locally, transparently\n        return await fetchModuleInfo(fallbackBasePath)\n      } catch (e1) {\n        return undefined;\n      }\n    }\n  }\n  return undefined;\n}\n","import React, { useRef } from \"react\";\nimport { FederatedModuleConfig, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\nimport { fetchModuleInfo, FetchModuleInfoFunction, ModuleInfo } from \"@app/components/FederatedModule/moduleInfo\";\n\nexport type FederatedModuleContextProps = {\n  modules: {\n    [module: string]: FederatedModuleConfig\n  };\n  getModuleInfo: FetchModuleInfoFunction;\n}\n\nexport const FederatedModuleContext = React.createContext<FederatedModuleContextProps | undefined>(undefined);\n\nexport const FederatedModuleProvider: React.FunctionComponent = ({ children }) => {\n\n  type ModuleInfoCache = {\n    [key:string]: ModuleInfo\n  }\n\n  const moduleInfoCache = useRef<ModuleInfoCache>({} as ModuleInfoCache );\n  const config = useConfig();\n\n  if (config === undefined) {\n    return <AppServicesLoading/>;\n  }\n\n  const getModuleInfo: FetchModuleInfoFunction = async ( baseUrl,scope, fallbackBasePath) => {\n    if (moduleInfoCache.current[scope] !== undefined) {\n      return moduleInfoCache.current[scope];\n    }\n    const answer = await fetchModuleInfo(baseUrl, scope, fallbackBasePath);\n    if (answer !== undefined) {\n      moduleInfoCache.current[scope] = answer;\n    }\n    return answer;\n  }\n\n  return (\n    <FederatedModuleContext.Provider value={{\n      modules: config.federatedModules,\n      getModuleInfo\n    }}>\n      {children}\n    </FederatedModuleContext.Provider>\n  );\n}\n\nexport const useFederatedModule = (): FederatedModuleContextProps => {\n  const answer = React.useContext(FederatedModuleContext);\n  if (answer === undefined) {\n    throw new Error('must be used inside FederatedModuleContext provider');\n  }\n  return answer;\n}\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\n\nexport const KasModalLoader: React.FC = ({ children }) => {\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./KasModalLoader\"\n      fallback={null}\n      render={(KasModalLoaderFederated) => {\n        return <KasModalLoaderFederated>{children}</KasModalLoaderFederated>;\n      }}\n    />\n  );\n};\n","import { Reducer, useEffect, useReducer, useRef } from 'react';\nimport { AxiosResponse } from 'axios';\n\nexport type Response<T> = {\n  status: Status;\n  error?: Error;\n  data: T | undefined;\n};\n\nexport enum Status {\n  IDLE,\n  FETCHING,\n  FETCHED,\n  FETCH_ERROR,\n}\n\nexport type ServiceProps<T> = {\n  fetch: () => Promise<AxiosResponse<T>>;\n  key: string;\n};\n\nexport const useFetch = <T extends any>({ key, fetch }: ServiceProps<T>): Response<T> => {\n  const cache = useRef({});\n\n  type Action<T> = {\n    type: Status;\n    payload?: T;\n    error?: Error;\n  };\n\n  const initialState = {\n    status: Status.IDLE,\n    error: undefined,\n    data: undefined,\n  } as Response<T>;\n\n  const [state, dispatch] = useReducer<Reducer<Response<T>, Action<T>>>((states, action: Action<T>) => {\n    switch (action.type) {\n      case Status.FETCHING:\n        return { ...initialState, status: Status.FETCHING };\n      case Status.FETCHED:\n        return { ...initialState, status: Status.FETCHED, data: action.payload };\n      case Status.FETCH_ERROR:\n        return { ...initialState, status: Status.FETCH_ERROR, error: action.error };\n      default:\n        return state;\n    }\n  }, initialState);\n\n  useEffect(() => {\n    let cancelRequest = false;\n\n    const doFetch = async () => {\n      dispatch({ type: Status.FETCHING });\n      if (cache.current[key]) {\n        const data = cache.current[key];\n        dispatch({ type: Status.FETCHED, payload: data });\n      } else {\n        try {\n          const response = await fetch();\n          cache.current[key] = response.data;\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCHED, payload: response.data });\n        } catch (error) {\n          if (cancelRequest) return;\n          dispatch({ type: Status.FETCH_ERROR, payload: error.message });\n        }\n      }\n    };\n\n    doFetch();\n\n    return function cleanup() {\n      cancelRequest = true;\n    };\n  }, []);\n\n  return state;\n};\n","import { useEffect, useState, useMemo } from 'react';\nimport { useAuth, useConfig, Quota, QuotaValue, QuotaType, ProductType } from '@rhoas/app-services-ui-shared';\nimport { Configuration, AppServicesApi } from '@rhoas/account-management-sdk';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\n\nexport const useQuota = (productId: ProductType) => {\n    const config = useConfig();\n    const auth = useAuth();\n    const constants =  useConstants();\n\n    const [orgId, setOrgId] = useState();\n\n    useEffect(() => {\n        const getCurrentAccount = async () => {\n            if (!orgId) {\n                const accessToken = await auth?.ams.getToken();\n                const ams = new AppServicesApi({\n                    accessToken,\n                    basePath: config?.ams.apiBasePath || '',\n                } as Configuration);\n\n                await ams.apiAccountsMgmtV1CurrentAccountGet().then((account) => {\n                    const orgID = account?.data?.organization?.id;\n                    setOrgId(orgID);\n                });\n            }\n        };\n\n        getCurrentAccount();\n    }, [config?.ams.apiBasePath, auth]);\n\n    const getQuotaTypesByProductId = () => {\n        const kasQuotaId = constants.kafka.ams.instanceQuotaId\n        const kasTrialQuotaId  =  constants.kafka.ams.trialQuotaId\n        const srsQuotaId = constants.serviceRegistry.ams.instanceQuotaId\n        const srsTrialQuotaId  =  constants.serviceRegistry.ams.trialQuotaId\n        if (productId === ProductType.kas) {\n            return { quotaId: kasQuotaId, trialQuotaId: kasTrialQuotaId, quotaKey: QuotaType.kas, trialQuotaKey: QuotaType.kasTrial };\n        } else if (productId === ProductType.srs) {\n            return { quotaId: srsQuotaId, trialQuotaId: srsTrialQuotaId, quotaKey: QuotaType.srs, trialQuotaKey: QuotaType.srsTrial };\n        }\n    }\n\n    const getQuota = async () => {\n        let filteredQuota: Quota = { loading: true, isServiceDown: false, data: undefined };\n\n        if (orgId) {\n            const { quotaId, trialQuotaId, quotaKey, trialQuotaKey } = getQuotaTypesByProductId() || {};\n\n            const accessToken = await auth?.ams.getToken();\n            const ams = new AppServicesApi({\n                accessToken,\n                basePath: config?.ams.apiBasePath || '',\n            } as Configuration);\n\n            await ams\n                .apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet(orgId, undefined, true)\n                .then((res) => {\n                    const quotaData = new Map<QuotaType, QuotaValue>();\n                    const quota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === quotaId\n                    )[0];\n\n                    const trialQuota = res?.data?.items?.filter(\n                        (q) => q.quota_id.trim() === trialQuotaId\n                    )[0];\n\n                    if (quota && quota.allowed > 0) {\n                        const remaining = quota?.allowed - quota?.consumed;\n                        quotaData?.set(quotaKey, {\n                            allowed: quota?.allowed,\n                            consumed: quota?.consumed,\n                            remaining: remaining < 0 ? 0 : remaining\n                        });\n                    }\n\n                    if (trialQuota) {\n                        quotaData?.set(trialQuotaKey, {\n                            allowed: trialQuota?.allowed,\n                            consumed: trialQuota?.consumed,\n                            remaining: trialQuota?.allowed - trialQuota?.consumed\n                        });\n                    }\n\n                    filteredQuota.loading = false;\n                    filteredQuota.data = quotaData;\n                })\n                .catch((error) => {\n                    filteredQuota.loading = false;\n                    filteredQuota.isServiceDown = true;\n                });\n        }\n        return filteredQuota;\n    };\n\n    const contextValue = useMemo(() => {\n        return { orgId, getQuota };\n    }, [orgId, getQuota]);\n\n    return contextValue;\n}\n\n","import { Auth, Config, useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { Configuration, AppServicesApi, TermsReviewResponse } from '@rhoas/account-management-sdk';\nimport { useFetch } from '@app/services/fetch';\nimport { useEffect, useRef } from \"react\";\n\nexport type ITermsConfig = {\n  eventCode: string;\n  siteCode: string;\n}\n\nexport const useTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n\n  return useFetch(fetchTermsReviewFactory(config, auth, termsConfig));\n};\n\nexport const useAsyncTermsReview = (termsConfig: ITermsConfig) => {\n  const config = useConfig();\n  const auth = useAuth();\n  const ref = useRef<TermsReviewResponse | undefined>();\n\n  // Return a function that either returns the lazily loaded terms review, or waits for the terms review to load\n  const load = async (): Promise<TermsReviewResponse> => {\n    if (ref.current !== undefined) {\n      // return the cached copy\n      return ref.current;\n    }\n    const answer = await fetchTermsReviewFactory(config, auth, termsConfig).fetch().then(r => r.data);\n    ref.current = answer;\n    return answer;\n  }\n\n  useEffect(() => {\n    // Lazy-load the terms review\n    load();\n  }, [config, auth]);\n  return load;\n}\n\nconst fetchTermsReviewFactory = (config: Config, auth: Auth, termsConfig: ITermsConfig) => {\n  return {\n    key: 'selfTermsReview',\n    fetch: async () => {\n      const accessToken = await auth?.ams.getToken();\n      const defaultApi = new AppServicesApi({\n        accessToken,\n        basePath: config?.ams.apiBasePath || '',\n      } as Configuration);\n      return await defaultApi.apiAuthorizationsV1SelfTermsReviewPost({\n        event_code: termsConfig.eventCode,\n        site_code: termsConfig.siteCode,\n      });\n    },\n  }\n}\n","/**\n * get the URL to TnC (Terms and Conditions) app.\n * @param baseURL is the base URL of TnC UX app;\n * @param redirectURL is the return URL if the user clicks \"Accept\", \"Deny\", or \"Defer\"\n * @param cancelURL is the return URL if the user clicks \"Cancel\".\n */\nexport const getTermsAppURL = (baseURL: string, redirectURL: string, cancelURL: string) => {\n  const params = {\n    redirect: redirectURL,\n    cancelRedirect: cancelURL,\n  };\n  // baseURL contains params already.\n  return `${baseURL}&${buildUrlParams(params)}`;\n};\n\nexport const buildUrlParams = (params) =>\n  Object.keys(params)\n    .map((key) => `${key}=${encodeURIComponent(params[key])}`)\n    .join('&');\n","import { useLocation } from 'react-router-dom';\nimport { parse as parseQueryString, stringifyUrl } from 'query-string';\nimport { useAsyncTermsReview, ITermsConfig } from '@app/services/termsReview';\nimport { getTermsAppURL } from '@app/utils/termsApp';\n\nexport const useModalControl = (termsConfig: ITermsConfig) => {\n    const loadTermsReview = useAsyncTermsReview(termsConfig);\n    const location = useLocation();\n\n    const shouldOpenCreateModal = async () => {\n        const parsed = parseQueryString(location.search);\n        const c = parsed['create'] === 'true';\n        if (c) {\n            const termsReview = await loadTermsReview();\n            if (!termsReview.terms_required) {\n                return true;\n            }\n        }\n        return false;\n    };\n\n    const preCreateInstance = async (open: boolean) => {\n        const termsReview = await loadTermsReview();\n        if (termsReview.terms_available || termsReview.terms_required) {\n            if (termsReview.redirect_url === undefined) {\n                throw new Error('terms must be signed but there is no terms url');\n            }\n            const redirectURL = stringifyUrl({ url: window.location.href, query: { create: 'true' } });\n            const url = getTermsAppURL(termsReview.redirect_url, redirectURL, window.location.href);\n            window.location.href = url;\n            return false;\n        }\n        return open;\n    };\n\n    return { shouldOpenCreateModal, preCreateInstance };\n};","import { InsightsType } from \"@app/utils\";\n\nexport const useInsights = () => {\n  const insights = window['insights'] as InsightsType;\n  if (insights === undefined) {\n    throw new Error(\"must be used inside an initialized insights context\");\n  }\n  return insights;\n}\n","import { KeycloakConfig, KeycloakInstance } from \"keycloak-js\";\nimport { Auth, Config, useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { getAccessToken, initKeycloak } from \"@app/utils\";\nimport { useEffect, useRef } from \"react\";\nimport { useInsights } from \"@app/hooks/insights\";\n\nconst init = async (config: Config, getInsightsAccessToken: () => Promise<string>) => {\n  const keycloakConfig = {\n    url: config.masSso.authServerUrl,\n    clientId: config.masSso.clientId,\n    realm: config.masSso.realm,\n  } as KeycloakConfig;\n  return await initKeycloak(keycloakConfig, getInsightsAccessToken);\n}\n\nexport const useAuth = (): Auth => {\n  const keycloakInstance = useRef<KeycloakInstance>();\n  const config = useConfig();\n  const insights = useInsights();\n\n  if (config === undefined || insights.chrome.auth === undefined) {\n    throw new Error(\"useAuth must be used inside a config provider, and insights auth\");\n  }\n\n  const insightsChromeAuth = insights.chrome.auth;\n\n  const getKeycloakInstance = async () => {\n    const instance = keycloakInstance.current;\n    if (instance === undefined) {\n      const answer = await init(config, insightsChromeAuth.getToken);\n      keycloakInstance.current = answer;\n      return answer;\n    }\n    return instance;\n  }\n\n  useEffect(() => {\n    // Start loading keycloak immediately\n    getKeycloakInstance();\n  }, [config, insightsChromeAuth]);\n\n  const getMASSSOToken = async () => {\n    const keycloakInstance = await getKeycloakInstance();\n    return getAccessToken(keycloakInstance, insightsChromeAuth.getToken)\n  };\n\n  const getUsername = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.username;\n  }\n\n  const isOrgAdmin = async () => {\n    const user = await insightsChromeAuth.getUser();\n    return user.identity.user.is_org_admin;\n  }\n\n  const getToken = insightsChromeAuth.getToken;\n\n  return {\n    getUsername,\n    isOrgAdmin,\n    kafka: {\n      getToken: getMASSSOToken,\n    },\n    kas: {\n      getToken,\n    },\n    ams: {\n      getToken,\n    },\n    srs: {\n      getToken,\n    },\n    apicurio_registry: {\n      getToken: getMASSSOToken,\n    },\n  };\n\n}\n","import { } from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { buildTokenEndPointUrl } from \"@app/utils\";\n\nexport const useMASToken = () => {\n    const config = useConfig();\n    const getTokenEndPointUrl = () => {\n        if (config) {\n            return buildTokenEndPointUrl(config.masSso.authServerUrl, config.masSso.realm);\n        }\n        return undefined;\n    };\n\n    return { getTokenEndPointUrl };\n}\n","import React from 'react';\nimport { APIManagementPage } from '@rhoas/app-services-ui-components';\n\nexport const APIManagementOverviewPage: React.FunctionComponent = () => {\n  return (\n    <APIManagementPage />\n  );\n};\n\nexport default APIManagementOverviewPage;\n","import { FederatedModule } from '@app/components';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport React from 'react';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\n\nexport const CosPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage/>;\n  }\n\n  return (\n    <FederatedModule\n      scope=\"cos\"\n      fallback={<AppServicesLoading/>}\n      module=\"./OpenshiftManagedConnectors\"\n      render={(OpenshiftManagedConnectors) => <OpenshiftManagedConnectors/>}\n    />\n  )\n};\n\nexport default CosPage;\n","import React from 'react';\nimport { DataSciencePage } from '@rhoas/app-services-ui-components';\n\nexport const DataScienceOverViewPage: React.FunctionComponent = () => {\n\n  return (\n    <DataSciencePage />\n  );\n};\n\nexport default DataScienceOverViewPage;","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { KafkaRequest } from '@rhoas/kafka-management-sdk';\n\nexport type KafkaFederatedComponentProps = UnderlyingProps & {\n  module: string;\n};\n\nexport type UnderlyingProps = {\n  activeTab?: number;\n  getToken?: () => Promise<string>;\n  apiBasePath: string;\n  kafkaName?: string;\n  kafkaPageLink?: string;\n  kafkaInstanceLink?: string;\n  onError?: (errorCode: number, message?: string) => void;\n  handleInstanceDrawer?: (isOpen: boolean, activeTab?: string) => void;\n  showMetrics?: JSX.Element;\n  showSchemas?: JSX.Element;\n  kafka?: KafkaRequest;\n  redirectAfterDeleteInstance?: () => void;\n};\n\n// Provides properties for component path and it's underlying properties\nexport const KafkaFederatedComponent: React.FunctionComponent<KafkaFederatedComponentProps> = ({ module, ...rest }) => {\n  return (\n    <FederatedModule\n      data-ouia-app-id=\"dataPlane-streams\"\n      scope=\"kafka\"\n      module={module}\n      render={(FederatedKafka) => <FederatedKafka {...rest} />}\n    />\n  );\n};\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const Topics: React.FunctionComponent<UnderlyingProps> = (props) => (\n    <KafkaFederatedComponent module=\"./Topics\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const TopicDetails: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./TopicDetails\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const CreateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./CreateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from \"@app/pages/Kafka/KafkaFederatedComponent\";\n\nexport const UpdateTopic: React.FunctionComponent<UnderlyingProps> = (props) => (\n  <KafkaFederatedComponent\n    module=\"./UpdateTopic\"\n    {...props}\n  />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const Dashboard: React.FunctionComponent<UnderlyingProps> = (props) => ( \n    <KafkaFederatedComponent module=\"./Dashboard\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const ConsumerGroups: React.FunctionComponent<UnderlyingProps> = (props) => (\n   <KafkaFederatedComponent module=\"./ConsumerGroups\" {...props} />\n);\n","import React from 'react';\nimport { KafkaFederatedComponent, UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\n\nexport const AclPermissions: React.FunctionComponent<UnderlyingProps> = (props) => (\n     <KafkaFederatedComponent module=\"./AclPermissions\" {...props} />\n);\n","import { useEffect, useState } from 'react';\nimport { Configuration, DefaultApi, KafkaRequest } from '@rhoas/kafka-management-sdk';\nimport { useParams } from 'react-router-dom';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\n\nexport const getAdminServerUrl = (kafkaRequest?: KafkaRequest): string => {\n  if (kafkaRequest === undefined) {\n    throw new Error('kafkaRequest cannot be undefined');\n  }\n  return `https://admin-server-${kafkaRequest?.bootstrap_server_host}/rest`;\n};\n\nexport type KafkaInstance = {\n  kafkaDetail: Required<KafkaRequest>;\n  adminServerUrl: string;\n};\n\nexport const useKafkaInstance = (): KafkaInstance | false | undefined => {\n  const config = useConfig();\n  const auth = useAuth();\n  const [kafkaRequest, setKafkaRequest] = useState<KafkaRequest | false | undefined>();\n  const { id } = useParams<{ id: string }>();\n  useEffect(() => {\n    const getAdminApiUrl = async () => {\n      if (auth === undefined || config === undefined) {\n        return;\n      }\n      const accessToken = await auth.kas.getToken();\n      const kasService = new DefaultApi({\n        accessToken,\n        basePath: config.kas.apiBasePath || '',\n      } as Configuration);\n      try {\n        const kafka = await kasService.getKafkaById(id);\n        setKafkaRequest(kafka.data);\n      } catch (e) {\n        setKafkaRequest(false);\n      }\n    };\n\n    getAdminApiUrl();\n  }, [auth, config, id]);\n\n  return kafkaRequest\n    ? {\n        kafkaDetail: kafkaRequest as Required<KafkaRequest>,\n        adminServerUrl: getAdminServerUrl(kafkaRequest),\n      }\n    : kafkaRequest;\n};\n","import React from 'react';\nimport { Route, Switch, useRouteMatch } from 'react-router-dom';\nimport { AppRouteConfig, flattenedRoutes, IAppRoute, PageNotFoundRoute, useA11yRouteChange } from '@app/utils/Routing';\nimport { useDocumentTitle } from '@app/utils';\nimport { CreateTopic, TopicDetails, Topics, UpdateTopic, Dashboard, ConsumerGroups, AclPermissions } from '@app/pages';\nimport { UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\nimport { BasenameContext } from '@rhoas/app-services-ui-shared';\n\nconst kafkaRoutes: AppRouteConfig<UnderlyingProps>[] = [\n  {\n    component: Topics,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topics',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: TopicDetails,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topics/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: CreateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/create',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: UpdateTopic,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/topic/update/:topicName',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: Dashboard,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/dashboard',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: ConsumerGroups,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/consumer-groups',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n  {\n    component: AclPermissions,\n    exact: true,\n    label: 'Red Hat OpenShift Streams for Apache Kafka',\n    path: '/acls',\n    title: 'Red Hat OpenShift Streams for Apache Kafka',\n    devPreview: true,\n  },\n];\n\ntype WrappedRouteProps = IAppRoute<UnderlyingProps> & {\n  underlyingProps: UnderlyingProps;\n  url: string;\n};\n\n/**\n * The wrapped route allows us to apply the basename, document title and accessible route change for all components\n * without having to add these to each component. They must happen inside the route.\n */\nconst WrappedRoute: React.FunctionComponent<WrappedRouteProps> = ({\n  component: Component,\n  isAsync = false,\n  title,\n  underlyingProps,\n  url,\n  ...rest\n}) => {\n  useA11yRouteChange(isAsync);\n  useDocumentTitle(title);\n\n  const getBasename = () => {\n    return url;\n  };\n\n  return (\n    <Route\n      render={(routeProps) => {\n        return (\n          <BasenameContext.Provider value={{ getBasename }}>\n            <Component {...underlyingProps} {...rest} {...routeProps} />\n          </BasenameContext.Provider>\n        );\n      }}\n      {...rest}\n    />\n  );\n};\n\nconst KafkaRoutes = (props): React.ReactElement => {\n  const routeMatch = useRouteMatch();\n\n  return (\n    <Switch>\n      {flattenedRoutes(kafkaRoutes).map(({ path, exact, component, title, isAsync, ...rest }, idx) => {\n        const routePath = `${routeMatch.path}${path}`;\n        console.log(`Creating route for ${routePath}`);\n        return (\n          <WrappedRoute\n            path={routePath}\n            exact={exact}\n            component={component}\n            key={idx}\n            title={title}\n            isAsync={isAsync}\n            underlyingProps={props}\n            url={routeMatch.url}\n            {...rest}\n          />\n        );\n      })}\n      <PageNotFoundRoute title=\"404 Page Not Found\" />\n    </Switch>\n  );\n};\n\nexport { KafkaRoutes, kafkaRoutes };\n","import React, { useState } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { InstanceDrawer } from '@app/components';\nimport { AccessDeniedPage, ConnectedMetrics, ServiceDownPage } from '@app/pages';\nimport { useKafkaInstance } from '@app/pages/Kafka/kafka-instance';\nimport { UnderlyingProps } from '@app/pages/Kafka/KafkaFederatedComponent';\nimport { PrincipalsProvider } from '@app/components/PrincipalsProvider/PrincipalsProvider';\nimport { useAuth, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ServiceRegistrySchemaMapping } from '@app/pages/ServiceRegistry';\nimport { KafkaRoutes } from './KafkaRoutes';\n\nexport const KafkaMainView = (): React.ReactElement => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const kafka = useKafkaInstance();\n\n  const [error, setError] = useState<undefined | number>();\n  const [isInstanceDrawerOpen, setIsInstanceDrawerOpen] = useState<boolean | undefined>();\n  const [activeDrawerTab, setActiveDrawerTab] = useState<string>('');\n\n  const handleInstanceDrawer = (isOpen: boolean, activeTab?: string) => {\n    activeTab && setActiveDrawerTab(activeTab);\n    setIsInstanceDrawerOpen(isOpen);\n  };\n\n  const onCloseInstanceDrawer = () => {\n    setIsInstanceDrawerOpen(false);\n  };\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  if (kafka === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  if (kafka === false) {\n    throw new Error('404');\n  }\n\n  const redirectAfterDeleteInstance = () => {\n    history.push('/streams/kafkas');\n  };\n\n  const { kafkaDetail, adminServerUrl } = kafka;\n\n  const props = {\n    kafkaPageLink: history.createHref({\n      pathname: '/streams/kafkas',\n    }),\n    kafkaInstanceLink: history.createHref({\n      pathname: `/streams/kafkas/${kafkaDetail.id}/topics`,\n    }),\n    showMetrics: <ConnectedMetrics kafkaId={kafkaDetail.id} kafkaAdminUrl={adminServerUrl} />,\n    onError: (code: number) => {\n      setError(code);\n    },\n    kafkaName: kafkaDetail.name,\n    apiBasePath: adminServerUrl,\n    getToken: auth?.kafka.getToken,\n    handleInstanceDrawer,\n    showSchemas: <ServiceRegistrySchemaMapping />,\n    kafka: kafkaDetail,\n    redirectAfterDeleteInstance,\n  } as UnderlyingProps;\n\n  if (error === 401) {\n    return <AccessDeniedPage />;\n  }\n\n  return (\n    <div className=\"app-services-ui--u-display-contents\" data-ouia-app-id=\"dataPlane-streams\">\n      <PrincipalsProvider kafkaInstance={kafkaDetail}>\n        <InstanceDrawer\n          isExpanded={isInstanceDrawerOpen}\n          onClose={onCloseInstanceDrawer}\n          kafkaDetail={kafkaDetail}\n          activeTab={activeDrawerTab}\n        >\n          <KafkaRoutes {...props} />\n        </InstanceDrawer>\n      </PrincipalsProvider>\n    </div>\n  );\n};\n","import { TopicsApi } from '@rhoas/kafka-instance-sdk';\nimport { Configuration } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters } from './types';\n\nexport async function fetchKafkaTopisFromAdmin({\n  accessToken,\n  basePath,\n}: BasicApiConfigurationParameters): Promise<string[]> {\n  const api = new TopicsApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n  const response = await api.getTopics(undefined, 100, 100, undefined, undefined, undefined, undefined);\n  return (response.data.items || []).map((t) => t.name as string);\n}\n","import { GetTopicsMetricsResponse, PartitionBytesMetric, TimeSeriesMetrics } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from './types';\n\nexport type FetchTopicsMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n  selectedTopic: string | undefined;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchTopicMetrics({\n  accessToken,\n  basePath,\n  kafkaId,\n  duration,\n  interval,\n  selectedTopic,\n}: FetchTopicsMetricsProps): Promise<Omit<GetTopicsMetricsResponse, 'kafkaTopics'>> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(kafkaId, duration, interval, [\n    'kafka_server_brokertopicmetrics_bytes_in_total',\n    'kafka_server_brokertopicmetrics_bytes_out_total',\n    'kafka_topic:kafka_log_log_size:sum',\n    'kafka_server_brokertopicmetrics_messages_in_total',\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(m.values && m.metric && m.metric.topic && m.metric.name)\n  ) as SafeRangeQuery[];\n\n  // Also filter for metrics about the selectedTopic, if specified\n  const filteredMetrics = safeMetrics.filter((m) =>\n    // filter for metrics for the selectedTopic, if needed\n    selectedTopic !== undefined ? m.metric?.topic === selectedTopic : true\n  );\n\n  // get the unique topics we have metrics for in the selected time range\n  const topics = Array.from(new Set(safeMetrics.map((m) => m.metric.topic)));\n\n  const bytesIncoming: TimeSeriesMetrics = {};\n  const bytesOutgoing: TimeSeriesMetrics = {};\n  const bytesPerPartition: PartitionBytesMetric = {};\n  const incomingMessageRate: TimeSeriesMetrics = {};\n\n  filteredMetrics.forEach((m) => {\n    const { __name__: name, topic } = m.metric;\n\n    function addAggregatedTotalBytesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(({ value, timestamp }) => (metric[timestamp] = value + (metric[timestamp] || 0)));\n    }\n\n    function addAggregatePartitionBytes() {\n      const partition = bytesPerPartition[topic] || {};\n      m.values.forEach(({ value, timestamp }) => (partition[timestamp] = value + (partition[timestamp] || 0)));\n      bytesPerPartition[topic] = partition;\n    }\n\n    switch (name) {\n      case 'kafka_server_brokertopicmetrics_bytes_in_total':\n        addAggregatedTotalBytesTo(bytesIncoming);\n        break;\n      case 'kafka_server_brokertopicmetrics_bytes_out_total':\n        addAggregatedTotalBytesTo(bytesOutgoing);\n        break;\n      case 'kafka_topic:kafka_log_log_size:sum':\n        addAggregatePartitionBytes();\n        break;\n      case 'kafka_server_brokertopicmetrics_messages_in_total':\n        addAggregatedTotalBytesTo(incomingMessageRate);\n        break;\n    }\n  });\n\n  return {\n    metricsTopics: topics,\n    bytesOutgoing,\n    bytesIncoming,\n    bytesPerPartition,\n    incomingMessageRate,\n  };\n}\n","import React, { useCallback, VoidFunctionComponent } from 'react';\nimport { useHistory } from 'react-router-dom';\nimport { useAuth, useBasename, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading, Metrics, MetricsProps } from '@rhoas/app-services-ui-components';\nimport { fetchKafkaInstanceMetrics, fetchKafkaTopisFromAdmin, fetchMetricsKpi, fetchTopicMetrics } from './api';\n\ntype ConnectedMetricsProps = {\n  kafkaId: string;\n  kafkaAdminUrl: string;\n};\n\nexport const ConnectedMetrics: VoidFunctionComponent<ConnectedMetricsProps> = ({ kafkaId, kafkaAdminUrl }) => {\n  const auth = useAuth();\n  const history = useHistory();\n  const config = useConfig();\n  const { getBasename } = useBasename() || {};\n  const basename = getBasename && getBasename();\n\n  const onCreateTopic = () => {\n    history.push(`${basename}/topic/create`);\n  };\n\n  const getKafkaInstanceMetrics: MetricsProps['getKafkaInstanceMetrics'] = useCallback(\n    (props) =>\n      fetchKafkaInstanceMetrics({\n        ...props,\n        kafkaId,\n        basePath: config.kas.apiBasePath,\n        accessToken: auth?.kas.getToken(),\n      }),\n    [auth?.kas, config.kas.apiBasePath, kafkaId]\n  );\n\n  const getTopicMetrics: MetricsProps['getTopicsMetrics'] = useCallback(\n    async (props) => {\n      const [kafkaTopics, metrics] = await Promise.all([\n        fetchKafkaTopisFromAdmin({\n          accessToken: auth?.kafka.getToken(),\n          basePath: kafkaAdminUrl,\n        }),\n        fetchTopicMetrics({\n          ...props,\n          kafkaId,\n          basePath: config.kas.apiBasePath,\n          accessToken: auth?.kas.getToken(),\n        }),\n      ]);\n      const { metricsTopics, bytesIncoming, bytesOutgoing, bytesPerPartition, incomingMessageRate } = metrics;\n      return {\n        kafkaTopics,\n        metricsTopics,\n        bytesIncoming,\n        bytesOutgoing,\n        bytesPerPartition,\n        incomingMessageRate,\n      };\n    },\n    [auth?.kafka, auth?.kas, config.kas.apiBasePath, kafkaAdminUrl, kafkaId]\n  );\n\n  const getMetricsKpi: MetricsProps['getMetricsKpi'] = useCallback(\n    () =>\n      fetchMetricsKpi({\n        kafkaId,\n        basePath: config.kas.apiBasePath,\n        accessToken: auth?.kas.getToken(),\n      }),\n    [auth?.kas, config.kas.apiBasePath, kafkaId]\n  );\n\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <Metrics\n      onCreateTopic={onCreateTopic}\n      getTopicsMetrics={getTopicMetrics}\n      getKafkaInstanceMetrics={getKafkaInstanceMetrics}\n      getMetricsKpi={getMetricsKpi}\n    />\n  );\n};\n","import { GetKafkaInstanceMetricsResponse, TimeSeriesMetrics } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, SafeRangeQuery } from './types';\n\ntype FetchKafkaInstanceMetricsProps = {\n  kafkaId: string;\n  duration: number;\n  interval: number;\n} & BasicApiConfigurationParameters;\nexport async function fetchKafkaInstanceMetrics({\n  kafkaId,\n  duration,\n  interval,\n  accessToken,\n  basePath,\n}: FetchKafkaInstanceMetricsProps): Promise<GetKafkaInstanceMetricsResponse> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  const response = await apisService.getMetricsByRangeQuery(kafkaId, duration, interval, [\n    'kubelet_volume_stats_used_bytes',\n    'kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum',\n    'kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum',\n  ]);\n\n  // Remove all results with no data. Not sure this can really  happen but since\n  // the types allow for undefined we need to do a bit of defensive programming.\n  const safeMetrics: SafeRangeQuery[] = (response.data.items || []).filter(\n    (m) =>\n      // defensive programming\n      !(\n        m.values &&\n        m.metric &&\n        m.metric.topic &&\n        m.metric.name &&\n        m.metric.persistentvolumeclaim &&\n        m.metric.persistentvolumeclaim.includes('zookeeper')\n      )\n  ) as SafeRangeQuery[];\n\n  const usedDiskSpaceMetrics: TimeSeriesMetrics = {};\n  const connectionAttemptRateMetrics: TimeSeriesMetrics = {};\n  const clientConnectionsMetrics: TimeSeriesMetrics = {};\n\n  safeMetrics.forEach((m) => {\n    const { __name__: name } = m.metric;\n\n    function addAggregatedValuesTo(metric: TimeSeriesMetrics) {\n      m.values.forEach(({ value, timestamp }) => (metric[timestamp] = value + (metric[timestamp] || 0)));\n    }\n\n    switch (name) {\n      case 'kubelet_volume_stats_used_bytes':\n        addAggregatedValuesTo(usedDiskSpaceMetrics);\n        break;\n      case 'kafka_namespace:kafka_server_socket_server_metrics_connection_creation_rate:sum':\n        addAggregatedValuesTo(connectionAttemptRateMetrics);\n        break;\n      case 'kafka_namespace:kafka_server_socket_server_metrics_connection_count:sum':\n        addAggregatedValuesTo(clientConnectionsMetrics);\n        break;\n    }\n  });\n\n  return {\n    usedDiskSpaceMetrics,\n    clientConnectionsMetrics,\n    connectionAttemptRateMetrics,\n  };\n}\n","import { GetMetricsKpiResponse } from '@rhoas/app-services-ui-components';\nimport { Configuration, DefaultApi, InstantQuery } from '@rhoas/kafka-management-sdk';\nimport { BasicApiConfigurationParameters, NoUndefinedField } from './types';\n\nexport type FetchMetricsKpiProps = {\n  kafkaId: string;\n} & BasicApiConfigurationParameters;\n\nexport async function fetchMetricsKpi({\n  accessToken,\n  basePath,\n  kafkaId,\n}: FetchMetricsKpiProps): Promise<Omit<GetMetricsKpiResponse, 'kafkaTopics'>> {\n  const apisService = new DefaultApi(\n    new Configuration({\n      accessToken,\n      basePath,\n    })\n  );\n\n  let topics = 0,\n    topicPartitions = 0,\n    consumerGroups = 0;\n\n  const response = await apisService.getMetricsByInstantQuery(kafkaId, [\n    'kafka_topic:kafka_topic_partitions:sum', // (Number of topic partitions)\n    'kafka_topic:kafka_topic_partitions:count', // (Number of topics)\n    'consumergroup:kafka_consumergroup_members:count', // (number of consumer groups - note that this metric will appear after a consumer group is created. There should be handled by the UI in a way that the metric isn't visible if no consumer groups are created)\n  ]);\n\n  const safeMetrics: NoUndefinedField<InstantQuery[]> = (response.data.items || []) as NoUndefinedField<InstantQuery[]>;\n\n  safeMetrics.forEach(({ metric, value }) => {\n    const { __name__: name } = metric;\n\n    switch (name) {\n      case 'kafka_topic:kafka_topic_partitions:sum':\n        topicPartitions = value;\n        break;\n      case 'kafka_topic:kafka_topic_partitions:count':\n        topics = value;\n        break;\n      case 'consumergroup:kafka_consumergroup_members:count':\n        consumerGroups = value;\n        break;\n    }\n  });\n  return {\n    consumerGroups,\n    topicPartitions,\n    topics,\n  };\n}\n","import React from 'react';\nimport { ProductType, QuotaContext, useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { FederatedModule, usePrincipal } from '@app/components';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { ITermsConfig } from '@app/services';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\n\nconst KasPage: React.FC = () => {\n  const config = useConfig();\n  const constants =  useConstants();\n  const { getQuota } = useQuota(ProductType?.kas);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.kafka.ams.termsAndConditionsEventCode,\n    siteCode: constants.kafka.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getTokenEndPointUrl } = useMASToken();\n  const { getAllUserAccounts } = usePrincipal();\n\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./OpenshiftStreams\"\n      fallback={<AppServicesLoading />}\n      render={(OpenshiftStreamsFederated) => {\n        if (config?.serviceDown) {\n          return <ServiceDownPage />;\n        }\n\n        return (\n          <QuotaContext.Provider value={{ getQuota }}>\n            <OpenshiftStreamsFederated\n              preCreateInstance={preCreateInstance}\n              shouldOpenCreateModal={shouldOpenCreateModal}\n              tokenEndPointUrl={getTokenEndPointUrl()}\n              getAllUserAccounts={getAllUserAccounts}\n            />\n          </QuotaContext.Provider>\n        );\n      }}\n    />\n  );\n};\n\nexport default KasPage;\n","import * as React from 'react';\nimport { ExclamationTriangleIcon } from '@patternfly/react-icons';\nimport {\n  PageSection,\n  Title,\n  Button,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { useHistory } from 'react-router-dom';\n\nconst NotFoundPage: React.FunctionComponent = () => {\n  function GoHomeBtn() {\n    const history = useHistory();\n    function handleClick() {\n      history.push('/');\n    }\n    return (\n      <Button onClick={handleClick}>Take me home</Button>\n    );\n  }\n\n  return (\n    <PageSection>\n    <EmptyState variant=\"full\">\n      <EmptyStateIcon icon={ExclamationTriangleIcon} />\n      <Title headingLevel=\"h1\" size=\"lg\">\n        404 Page not found\n      </Title>\n      <EmptyStateBody>\n        We didn&apos;t find a page that matches the address you navigated to.\n      </EmptyStateBody>\n      <GoHomeBtn />\n    </EmptyState>\n  </PageSection>\n  )\n};\n\nexport { NotFoundPage };\n\nexport default NotFoundPage;\n\n","import { OverviewPage } from '@rhoas/app-services-ui-components';\nimport React from 'react';\n\nexport const ConnectedOverviewPage: React.FunctionComponent = () => {\n  const beta = location.pathname.startsWith('/beta');\n\n  const kafkaHref = '/streams/kafkas';\n\n  const serviceRegistryHref = beta ? '/service-registry' : '/beta/application-services/service-registry';\n\n  return <OverviewPage toKafkaHref={kafkaHref} toServiceRegistryHref={serviceRegistryHref} />;\n};\n\nexport default ConnectedOverviewPage;\n","import React, { FunctionComponent } from 'react';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ResourcesPage: FunctionComponent = () => (\n  <FederatedModule\n    scope=\"guides\"\n    module=\"./QuickStartCatalog\"\n    fallback={<AppServicesLoading/>}\n    render={(QuickStartCatalogFederated) => <QuickStartCatalogFederated/>}\n  />\n);\n\nexport default ResourcesPage;\n","import React from 'react';\nimport { FederatedModule } from '@app/components';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages/ServiceDown/ServiceDownPage';\nimport { AppServicesLoading } from \"@rhoas/app-services-ui-components\";\n\nexport const ServiceAccountsPage: React.FunctionComponent = () => {\n  const config = useConfig();\n  return (\n    <FederatedModule\n      scope=\"kas\"\n      module=\"./ServiceAccounts\"\n      fallback={<AppServicesLoading/>}\n      render={(ServiceAccountsFederated) => {\n\n\n        if (config?.serviceDown) {\n          return <ServiceDownPage/>;\n        }\n        return <ServiceAccountsFederated/>;\n      }}\n    />\n  );\n};\n\nexport default ServiceAccountsPage;\n","import React from 'react';\nimport WrenchIcon from '@patternfly/react-icons/dist/js/icons/wrench-icon';\nimport { PageSection, Title, Button, EmptyState, EmptyStateIcon, EmptyStateBody } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\nexport const ServiceDownPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['appTemporaryFixMe']);\n  return (\n    <PageSection>\n      <EmptyState variant=\"full\">\n        <EmptyStateIcon icon={WrenchIcon} />\n        <Title headingLevel=\"h1\" size=\"lg\">\n          {t('serviceDown.serviceDownTitle')}\n        </Title>\n        <EmptyStateBody>{t('serviceDown.serviceDownMessage')}</EmptyStateBody>\n        <Button\n          variant=\"primary\"\n          onClick={() => {\n            window.location.href = 'https://status.starter.openshift.com/';\n          }}\n        >\n          {t('serviceDown.serviceDownButton')}\n        </Button>\n      </EmptyState>\n    </PageSection>\n  );\n};\n","import React from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactVersionDetails: React.FunctionComponent = () => {\n  const config = useConfig();  \n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactVersionDetailsConnected />;\n};\n\nconst ArtifactVersionDetailsConnected: React.FunctionComponent = () => {\n  const { artifactId }=useParams<{artifactId:string}>();\n  \n  return (\n    <SrsLayout breadcrumbId=\"srs.artifacts_details\" artifactId={artifactId} render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactVersionPage\" />\n    )}/>\n  );\n};\n\nexport default ArtifactVersionDetails;\n","import { FederatedApicurioComponent } from '@app/pages/ServiceRegistry/FederatedApicurioComponent';\nimport React from 'react';\nimport { SrsLayout } from '@app/pages/ServiceRegistry/SrsLayout';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { ServiceDownPage } from '@app/pages';\n\nexport const Artifacts: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactsConnected />;\n};\n\nconst ArtifactsConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout\n      breadcrumbId=\"srs.artifacts\"\n      render={(registry) => <FederatedApicurioComponent module=\"./FederatedArtifactsPage\" registry={registry} />}\n    />\n  );\n};\n\nexport default Artifacts;\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const ArtifactRedirect: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ArtifactRedirectConnected />;\n};\n\nconst ArtifactRedirectConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedArtifactRedirectPage\" />\n    )} />\n  );\n};\n\nexport default ArtifactRedirect;\n","import React from 'react';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { FederatedApicurioComponent } from './FederatedApicurioComponent';\n\ntype DownloadArtifactsProps = {\n  registry: Registry;\n  downloadLabel?: string;\n};\n\nexport const DownloadArtifacts: React.FC<DownloadArtifactsProps> = ({ registry, downloadLabel }) => {\n  return (\n    <FederatedApicurioComponent\n      module=\"./FederatedDownloadArtifacts\"\n      registry={registry}\n      fileName={registry.name}\n      downloadLinkLabel={downloadLabel}\n    />\n  );\n};\n","import React from 'react';\nimport { ConfigType, createApicurioConfig } from '@app/pages/ServiceRegistry/utils';\nimport { FederatedModule, usePrincipal } from '@app/components';\nimport { useHistory, useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { useAuth, useBasename, useConfig } from '@rhoas/app-services-ui-shared';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport type FederatedApicurioComponentProps = {\n  module: string;\n  registry: Registry | undefined;\n  topicName?: string;\n  groupId?: string | null | undefined;\n  version?: string;\n  registryId?: string;\n  basename?: string;\n  fileName?: string;\n  downloadLinkLabel?: string;\n};\n\ntype ServiceRegistryParams = {\n  groupId: string;\n  artifactId: string;\n  version: string;\n};\n\nexport const FederatedApicurioComponent: React.FC<FederatedApicurioComponentProps> = ({\n  module,\n  registry,\n  ...rest\n}) => {\n  let federateConfig: ConfigType;\n  const auth = useAuth();\n  const config = useConfig();\n  const history = useHistory();\n  const basename = useBasename();\n  const getToken = auth?.apicurio_registry.getToken;\n  const currentlyLoggedInuser = auth?.getUsername() || '';\n\n  const { groupId, artifactId, version } = useParams<ServiceRegistryParams>();\n  const { getAllPrincipals } = usePrincipal();\n\n  if (config === undefined || registry === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  const principals = getAllPrincipals()?.filter((p) => p.id !== currentlyLoggedInuser && p.id !== registry?.owner);\n\n  if (getToken && basename) {\n    federateConfig = createApicurioConfig(\n      config,\n      registry.registryUrl as string,\n      `${basename.getBasename()}/t/${registry?.id}`,\n      getToken,\n      principals\n    );\n  }\n\n  return (\n    <FederatedModule\n      scope=\"apicurio_registry\"\n      module={module}\n      fallback={<AppServicesLoading />}\n      render={(ServiceRegistryFederated) => {\n        return (\n          <ServiceRegistryFederated\n            config={federateConfig}\n            tenantId={registry.id}\n            groupId={groupId}\n            artifactId={artifactId}\n            version={version}\n            history={history}\n            {...rest}\n          />\n        );\n      }}\n    />\n  );\n};\n","import { Principal } from '@rhoas/app-services-ui-shared';\nimport { Config } from \"@rhoas/app-services-ui-shared\";\n\n\nexport interface FeaturesConfig {\n  readOnly?: boolean;\n  breadcrumbs?: boolean;\n  multiTenant?: boolean;\n}\n\nexport interface ArtifactsConfig {\n  url: string;\n}\n\nexport interface UiConfig {\n  contextPath?: string;\n  navPrefixPath?: string;\n}\n\nexport interface AuthConfig {\n  type: string;\n  getToken: () => Promise<string>;\n}\n\n// Used when `type=keycloakjs`\nexport interface KeycloakJsAuthConfig extends AuthConfig {\n  options?: any;\n}\n\n// Used when `type=none`\nexport interface NoneAuthConfig extends AuthConfig { }\n\nexport interface ConfigType {\n  artifacts: ArtifactsConfig;\n  auth: KeycloakJsAuthConfig | NoneAuthConfig;\n  features?: FeaturesConfig;\n  ui: UiConfig;\n  principals?: Principal[] | undefined;\n}\n\nconst createApicurioConfig = (config: Config, apiUrl: string, navPathPrefix: string,\n  getToken: () => Promise<string> | undefined, principals?: Principal[] | undefined) => {\n  const apicurioConfig: ConfigType = {\n    artifacts: {\n      url: `${apiUrl}/apis/registry`,\n    },\n    auth: {\n      type: 'gettoken',\n      getToken,\n    },\n    features: {\n      readOnly: false,\n      breadcrumbs: false,\n      roleManagement: true,\n      multiTenant: true,\n    },\n    ui: {\n      navPrefixPath: navPathPrefix,\n    },\n    principals\n  } as ConfigType;\n\n  return apicurioConfig;\n};\n\nexport { createApicurioConfig };\n","import { FederatedApicurioComponent } from \"@app/pages/ServiceRegistry/FederatedApicurioComponent\";\nimport React from \"react\";\nimport { SrsLayout } from \"@app/pages/ServiceRegistry/SrsLayout\";\nimport { useConfig } from \"@rhoas/app-services-ui-shared\";\nimport { ServiceDownPage } from \"@app/pages\";\n\nexport const RulesPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <RulesPageConnected />;\n};\n\nconst RulesPageConnected: React.FunctionComponent = () => {\n  return (\n    <SrsLayout breadcrumbId=\"srs.global_rules\" render={registry => (\n      <FederatedApicurioComponent registry={registry} module=\"./FederatedRulesPage\"/>\n    )}/>\n  );\n};\n\nexport default RulesPage;\n","import React from 'react';\nimport { useConfig } from '@rhoas/app-services-ui-shared';\nimport { FederatedModule, KasModalLoader } from '@app/components';\nimport { ServiceDownPage } from '@app/pages';\nimport { useModalControl, useQuota, useMASToken } from '@app/hooks';\nimport { AppServicesLoading, DevelopmentPreview } from '@rhoas/app-services-ui-components';\nimport { ProductType, QuotaContext } from '@rhoas/app-services-ui-shared';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { ITermsConfig } from '@app/services';\nimport { DownloadArtifacts } from './DownloadArtifacts';\nimport { useConstants } from '@app/providers/config/ServiceConstants';\n\nexport const ServiceRegistryPage: React.FunctionComponent = () => {\n  const config = useConfig();\n\n  if (config?.serviceDown) {\n    return <ServiceDownPage />;\n  }\n\n  return <ServiceRegistryPageConnected />;\n};\n\nexport const ServiceRegistryPageConnected: React.FC = () => {\n  const config = useConfig();\n  const constants =  useConstants();\n  const { getQuota } = useQuota(ProductType.srs);\n  const { preCreateInstance, shouldOpenCreateModal } = useModalControl({\n    eventCode: constants.serviceRegistry.ams.termsAndConditionsEventCode,\n    siteCode: constants.serviceRegistry.ams.termsAndConditionsSiteCode,\n  } as ITermsConfig);\n  const { getTokenEndPointUrl } = useMASToken();\n\n  // Wait for the config and the registry to load\n  if (config === undefined) {\n    return <AppServicesLoading />;\n  }\n\n  return (\n    <DevelopmentPreview>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistry\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <QuotaContext.Provider value={{ getQuota }}>\n              <KasModalLoader>\n                <ServiceRegistryFederated\n                  preCreateInstance={preCreateInstance}\n                  shouldOpenCreateModal={shouldOpenCreateModal}\n                  tokenEndPointUrl={getTokenEndPointUrl()}\n                  renderDownloadArtifacts={(registry: Registry, downloadLabel?: string) => (\n                    <DownloadArtifacts registry={registry} downloadLabel={downloadLabel} />\n                  )}\n                />\n              </KasModalLoader>\n            </QuotaContext.Provider>\n          );\n        }}\n      />\n    </DevelopmentPreview>\n  );\n};\n\nexport default ServiceRegistryPage;\n","import React from 'react';\nimport { FederatedModule, KasModalLoader } from '@app/components';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\nimport { useMASToken } from '@app/hooks';\nimport { DownloadArtifacts } from './DownloadArtifacts';\n\ntype SrsLayoutProps = {\n  render: (registry: Registry) => JSX.Element;\n  breadcrumbId?: string;\n  artifactId?: string;\n};\n\nexport const SrsLayout: React.FC<SrsLayoutProps> = ({ render, breadcrumbId, artifactId }) => {\n  const { getTokenEndPointUrl } = useMASToken();\n  return (\n    <FederatedModule\n      scope=\"srs\"\n      module=\"./ApicurioRegistry\"\n      fallback={<AppServicesLoading />}\n      render={(ServiceRegistryFederated) => {\n        return (\n          <KasModalLoader>\n            <ServiceRegistryFederated\n              render={render}\n              breadcrumbId={breadcrumbId}\n              tokenEndPointUrl={getTokenEndPointUrl()}\n              artifactId={artifactId}\n              renderDownloadArtifacts={(registry:Registry, downloadLabel?:string)=><DownloadArtifacts registry={registry} downloadLabel={downloadLabel}/>}\n            />\n          </KasModalLoader>\n        );\n      }}\n    />\n  );\n};\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Registry } from '@rhoas/registry-management-sdk';\nimport { FederatedApicurioComponent } from './FederatedApicurioComponent';\nimport { FederatedModule } from '@app/components';\nimport { AppServicesLoading } from '@rhoas/app-services-ui-components';\n\nexport const ServiceRegistrySchemaMapping: React.FC = () => {\n  const { topicName } = useParams<{ topicName: string }>();\n  const basename = '/service-registry';\n\n  return (\n    <>\n      <FederatedModule\n        scope=\"srs\"\n        module=\"./ServiceRegistryMapping\"\n        fallback={<AppServicesLoading />}\n        render={(ServiceRegistryFederated) => {\n          return (\n            <ServiceRegistryFederated\n              basename={basename}\n              topicName={topicName}\n              renderSchema={(registry: Registry) => (\n                <FederatedApicurioComponent\n                  module=\"./FederatedSchemaMapping\"\n                  registry={registry}\n                  topicName={topicName}\n                  groupId={null}\n                  version={'latest'}\n                  registryId={registry?.id}\n                  basename={basename}\n                />\n              )}\n            />\n          );\n        }}\n      />\n    </>\n  );\n};\n","import React from 'react';\n\nimport { Main, NotAuthorized } from '@redhat-cloud-services/frontend-components';\n\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Link } from 'react-router-dom';\n\ninterface GetLinkProps {\n  href?: string;\n}\n\nconst GetLink: React.FunctionComponent<GetLinkProps> = ({ href, children }) => <Link to={href || ''}>{children}</Link>;\n\nexport const AccessDeniedPage: React.FunctionComponent = () => {\n  const { t } = useTranslation(['appTemporaryFixMe']);\n\n  const accessDeniedDetails = (\n    <Trans\n      i18nKey=\"accessdenied.accessDeniedDescription\"\n      t={t}\n      components={[<GetLink key=\"kafkas\" href=\"/streams/kafkas\" />]}\n    />\n  );\n\n  return (\n    <Main>\n      <NotAuthorized\n        title={t('accessdenied.accessDeniedTitle')}\n        description={accessDeniedDetails}\n        prevPageButtonText={t('accessdenied.accessDeniedButtonText')}\n        showReturnButton={true}\n      />\n    </Main>\n  );\n};\n","import { Config } from '@rhoas/app-services-ui-shared';\n\nconst defaultHostname = 'console.redhat.com';\n\ntype FederatedModulesConfig = Config['federatedModules'];\n\ntype EnvironmentConfig = {\n  hostnames: string[];\n  fetchConfig?: boolean;\n  type?: string;\n  config: Omit<Config, 'federatedModules'>;\n};\n\nexport type EnvironmentConfigs = Array<EnvironmentConfig>;\n\nexport const filterEnvironmentConfig = (environmentConfig: EnvironmentConfigs): EnvironmentConfig => {\n  const hostname = window.location.hostname;\n  console.log(`Filter config for ${hostname}`);\n  const possibleConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(hostname));\n  if (possibleConfigs.length > 1) {\n    throw new Error(`Unable to find config for ${hostname}, more than one config matched ${possibleConfigs}`);\n  } else if (possibleConfigs.length < 1) {\n    // Use the default config\n    const possibleDefaultConfigs = environmentConfig.filter((entry) => entry.hostnames.includes(defaultHostname));\n    if (possibleDefaultConfigs.length > 1) {\n      throw new Error(`Unable to load default config, more than one config matched ${possibleConfigs}`);\n    } else if (possibleDefaultConfigs.length < 1) {\n      throw new Error(`Unable to load default config, no configs matched`);\n    } else {\n      return possibleDefaultConfigs[0];\n    }\n  }\n  return possibleConfigs[0];\n};\n\nexport const addFederatedModulesToConfig = (\n  environmentConfig: EnvironmentConfig,\n  federatedModulesConfig: FederatedModulesConfig,\n  beta: boolean\n): Config => {\n  const federatedModules = {} as FederatedModulesConfig;\n  Object.entries(federatedModulesConfig).forEach(([k, v]) => {\n    let { basePath } = v;\n    let fallbackBasePath: string | undefined = undefined;\n    if (environmentConfig.type !== 'proxy') {\n      basePath = v.fallbackBasePath;\n    } else {\n      fallbackBasePath = v.fallbackBasePath;\n    }\n    if (!beta) {\n      if (basePath.startsWith('/beta')) {\n        basePath = basePath.substring(5);\n      }\n      if (fallbackBasePath?.startsWith('/beta')) {\n        fallbackBasePath = fallbackBasePath.substring(5);\n      }\n    }\n    federatedModules[k] = {\n      basePath,\n      fallbackBasePath\n    };\n  });\n  return {\n    ...environmentConfig.config,\n    federatedModules,\n  };\n};\n","import React from 'react';\nimport { Config, ConfigContext } from '@rhoas/app-services-ui-shared';\nimport configs from '../../../../config/config.json';\nimport { addFederatedModulesToConfig, EnvironmentConfigs, filterEnvironmentConfig } from '@app/providers/config/utils';\nimport { useFeatureFlags } from \"@app/providers/featureflags/FeatureFlags\";\n\ndeclare const __webpack_public_path__: string;\n\nexport const EmbeddedConfigProvider: React.FunctionComponent = ({ children }) => {\n\n  const { beta } = useFeatureFlags();\n\n  const [value, setValue] = React.useState<Config | undefined>(() => {\n    const environmentConfig = filterEnvironmentConfig(configs.config as EnvironmentConfigs);\n    if (environmentConfig.fetchConfig) {\n      return undefined;\n    }\n    const config = addFederatedModulesToConfig(environmentConfig, configs.federatedModules, beta);\n    console.log('Done loading config', config);\n    return config;\n  });\n\n  React.useEffect(() => {\n    (async () => {\n      if (value === undefined) {\n        const response = await fetch(`${__webpack_public_path__}config.json`);\n        const jsonConfig = await response.json();\n        const environmentConfig = filterEnvironmentConfig(jsonConfig.config);\n        const config = addFederatedModulesToConfig(environmentConfig, jsonConfig.federatedModules, beta);\n        console.debug('Done loading config', config);\n        setValue(config);\n      }\n    })();\n  }, []);\n  return <ConfigContext.Provider value={value}>{children}</ConfigContext.Provider>;\n};\n","import React from \"react\";\nimport { useContext } from \"react\";\n\n/**\n * Configuration for AMS\n */\nexport type AmsConfig = {\n  termsAndConditionsEventCode: string;\n  termsAndConditionsSiteCode: string;\n  instanceQuotaId: string;\n  trialQuotaId: string;\n}\n\nexport type ServiceConstants = {\n  version: number;\n  kafka: {\n    ams: AmsConfig;\n  },\n  serviceRegistry: {\n    ams: AmsConfig;\n  }\n}\n\n/**\n * The ConstantContext allows access to the constants for the application.\n */\nexport const ConstantContext: React.Context<ServiceConstants | undefined> =\n  React.createContext<ServiceConstants | undefined>(undefined);\n\n/**\n * useConstants is a custom hook that is a shorthand for useContext(ConfigContext)\n */\nexport const useConstants = (): ServiceConstants => {\n  const answer = useContext(ConstantContext);\n  if (answer === undefined) {\n    throw new Error(\"useConstants must be used inside an ServiceConstantsContextProvider\");\n  }\n  return answer;\n}\n","import React from 'react';\nimport { ConstantContext, ServiceConstants } from './ServiceConstants';\nimport constantsFallback   from '../../../../static/configs/service-constants.json'\n\nexport const ServiceConstantsContextProvider: React.FunctionComponent = ({ children }) => {\n  return <ConstantContext.Provider value={constantsFallback as ServiceConstants}>{children}</ConstantContext.Provider>;\n};\n","import React, { useContext } from \"react\";\nimport { useLocation } from \"react-router-dom\";\n\nexport type FeatureFlags = {\n  beta: boolean\n}\n\nexport const FeatureFlagsContext = React.createContext<FeatureFlags | undefined>(undefined);\n\nexport const useFeatureFlags = (): FeatureFlags => {\n  const answer = useContext(FeatureFlagsContext);\n  if (answer === undefined) {\n    throw new Error('useFeatureFlags must be used inside a FeatureFlagContext provider');\n  }\n  return answer;\n};\n\nexport const FeatureFlagProvider: React.FunctionComponent = ({\n                                                               children\n                                                             }) => {\n  const value = {\n    beta: window.location.pathname.startsWith('/beta')\n  } as FeatureFlags;\n  return (\n    <FeatureFlagsContext.Provider value={value}>\n      {children}\n    </FeatureFlagsContext.Provider>\n  )\n}\n","import ReducerRegistry from '@redhat-cloud-services/frontend-components-utilities/ReducerRegistry/ReducerRegistry';\nimport promiseMiddleware from 'redux-promise-middleware';\nimport { notificationsReducer } from '@redhat-cloud-services/frontend-components-notifications/redux';\n\nlet registry;\n\nexport function init(...middleware) {\n  if (!registry) {\n    registry = new ReducerRegistry({}, [promiseMiddleware, ...middleware]);\n\n    //If you want to register all of your reducers, this is good place.\n\n    registry.register({\n      notifications: notificationsReducer,\n    });\n  }\n\n  return registry;\n}\n\nexport function getStore() {\n  return registry.getStore();\n}\n\nexport function register(...args) {\n  return registry.register(...args);\n}\n","import React from 'react';\nimport { Route, RouteComponentProps } from 'react-router-dom';\nimport { accessibleRouteChangeHandler, useDocumentTitle } from '@app/utils';\nimport { useLastLocation } from 'react-router-last-location';\n\nconst NotFoundPage = React.lazy(() => import('@app/pages/NotFound/NotFoundPage'));\n\nlet routeFocusTimer: number;\n\nexport interface IAppRoute<T> {\n  label?: string; // Excluding the label will exclude the route from the nav sidebar in AppLayout\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  component: React.ComponentType<RouteComponentProps> | React.ComponentType<T>;\n  /* eslint-enable @typescript-eslint/no-explicit-any */\n  exact?: boolean;\n  path: string;\n  title: string;\n  isAsync?: boolean;\n  routes?: undefined;\n  basename?: string;\n  devPreview?: boolean;\n}\n\nexport interface IAppRouteGroup<T> {\n  label: string;\n  routes: IAppRoute<T>[];\n}\n\nexport type AppRouteConfig<T> = IAppRoute<T> | IAppRouteGroup<T>;\n\n\n// a custom hook for sending focus to the primary content container\n// after a view has loaded so that subsequent press of tab key\n// sends focus directly to relevant content\nexport const useA11yRouteChange = (isAsync: boolean) => {\n  const lastNavigation = useLastLocation();\n  React.useEffect(() => {\n    if (!isAsync && lastNavigation !== null) {\n      routeFocusTimer = accessibleRouteChangeHandler();\n    }\n    return () => {\n      window.clearTimeout(routeFocusTimer);\n    };\n  }, [isAsync, lastNavigation]);\n};\n\nexport const PageNotFoundRoute: React.FunctionComponent<{ title: string }> = ({ title }: { title: string }) => {\n  useDocumentTitle(title);\n  return <Route component={NotFoundPage}/>;\n};\n\nexport const flattenedRoutes = <T, >(routes: AppRouteConfig<T>[]) => routes.reduce(\n  (flattened, route) => [...flattened, ...(route.routes ? route.routes : [route])],\n  [] as IAppRoute<T>[]\n);\n","function getBaseName(pathname) {\n  let release = '/';\n  const pathName = pathname.split('/');\n\n  pathName.shift();\n\n  if (pathName[0] === 'beta') {\n    pathName.shift();\n    release = `/beta/`;\n  }\n\n  return `${release}${pathName[0]}`;\n}\n\nexport default getBaseName;\n","function accessibleRouteChangeHandler() {\n  return window.setTimeout(() => {\n    const mainContainer = document.getElementById('primary-app-container');\n    if (mainContainer) {\n      mainContainer.focus();\n    }\n  }, 50);\n}\n\nexport { accessibleRouteChangeHandler };\n","import * as React from 'react';\n\n// a custom hook for setting the page title\nexport function useDocumentTitle(title: string) {\n  React.useEffect(() => {\n    const originalTitle = document.title;\n    document.title = title;\n\n    return () => {\n      document.title = originalTitle;\n    };\n  }, [title]);\n}\n","import Keycloak, { KeycloakConfig, KeycloakInitOptions, KeycloakInstance } from 'keycloak-js';\nimport Cookies from 'js-cookie';\nimport { Base64 } from 'js-base64';\nimport jwtDecode, { JwtPayload } from 'jwt-decode';\nimport getUnixTime from 'date-fns/getUnixTime';\n\nconst REFRESH_TOKEN_COOKIE_NAME = 'mrt';\nconst MIN_VALIDITY = 50;\ntype StoredToken = {\n  refreshToken: string;\n  rhUserId: string;\n};\n\n\n/**\n * Initiate keycloak instance.\n *\n * Set keycloak to undefined if\n * keycloak isn't configured\n *\n */\nexport const initKeycloak = async (\n  config: KeycloakConfig,\n  getInsightsAccessToken: () => Promise<string>\n): Promise<KeycloakInstance> => {\n  const initOptions = {\n    responseMode: 'query',\n    enableLogging: false,\n  } as KeycloakInitOptions;\n\n  const refreshToken = await retrieveRefreshToken(getInsightsAccessToken);\n\n  if (refreshToken !== undefined && config.url !== undefined) {\n    // try to get an access token from the token endpoint so that we can pass it to initOptions\n    const url = buildTokenEndPointUrl(config.url, config.realm);\n    const body = new URLSearchParams();\n    body.append('grant_type', 'refresh_token');\n    body.append('refresh_token', refreshToken);\n    body.append('client_id', config.clientId);\n\n    const response = await fetch(url, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/x-www-form-urlencoded'\n      },\n      body,\n    });\n    if (response.status === 200) {\n      console.debug('found valid access token');\n      const json = await response.json();\n      const accessToken = json['access_token'];\n      initOptions.token = accessToken;\n      initOptions.refreshToken = refreshToken;\n    } else {\n      console.debug('error getting access token from endpoint');\n      initOptions.onLoad = 'login-required';\n    }\n  } else {\n    const urlParams = new URLSearchParams(window.location.search);\n    if (!urlParams.has('state')) {\n      // only when this isn't a redirect back from MASSSO\n      console.debug('did not find refresh token, will require a full login');\n      initOptions.onLoad = 'login-required';\n    }\n  }\n  const keycloak = Keycloak(config);\n  await keycloak.init(initOptions);\n  if (keycloak.refreshToken) {\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak;\n};\n\nconst retrieveRefreshToken = async (getInsightsAccessToken: () => Promise<string>): Promise<string | undefined> => {\n  const encoded = Cookies.get(REFRESH_TOKEN_COOKIE_NAME);\n  if (encoded === undefined) {\n    return undefined;\n  }\n  const storedToken = Base64.decode(encoded);\n  const storedRefreshToken = (JSON.parse(storedToken) as unknown) as StoredToken;\n  // parse the refresh token so we can later check for validity\n  let refreshJWT: JwtPayload | undefined;\n  try {\n    refreshJWT = jwtDecode<JwtPayload>(storedRefreshToken.refreshToken);\n  } catch {\n    clearRefreshToken();\n    return undefined;\n  }\n\n  // if the JWT exists, and has an expiry\n  if (refreshJWT === undefined || refreshJWT.exp === undefined) {\n    clearRefreshToken();\n    return undefined;\n  }\n  const now = getUnixTime(new Date());\n  if (now > refreshJWT.exp + MIN_VALIDITY) {\n    // the token is invalid\n    clearRefreshToken();\n    return undefined;\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  if (insightsJWT['account_id'] !== storedRefreshToken.rhUserId) {\n    clearRefreshToken();\n    return undefined;\n  }\n  return storedRefreshToken.refreshToken;\n};\n\nconst clearRefreshToken = () => {\n  console.debug('clearing stored refresh token');\n  Cookies.remove(REFRESH_TOKEN_COOKIE_NAME);\n};\n\nconst storeRefreshToken = async (refreshToken: string, getInsightsAccessToken: () => Promise<string>) => {\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const rhUserId = insightsJWT['account_id'];\n  const storedToken = JSON.stringify({\n    refreshToken,\n    rhUserId,\n  } as StoredToken);\n  const encoded = Base64.encode(storedToken);\n  console.debug('storing refresh token');\n  Cookies.set(REFRESH_TOKEN_COOKIE_NAME, encoded);\n};\n\n/**\n * Use keycloak update token function to retrieve\n * an access token. If an unexpired access token\n * is in memory, it will return it, otherwise it\n * will use the refresh token to get a new access\n * token.\n *\n * It will also save the refresh token into a cookies\n *\n * @return keycloak token\n * @throws error if a token is not available\n *\n */\nexport const getAccessToken = async (keycloak: KeycloakInstance, getInsightsAccessToken: () => Promise<string>): Promise<string> => {\n  await keycloak.updateToken(MIN_VALIDITY);\n  if (!keycloak.token || !keycloak.tokenParsed) {\n    throw new Error('No token from keycloak!');\n  }\n  const insightsToken = await getInsightsAccessToken();\n  const insightsJWT = jwtDecode<JwtPayload>(insightsToken);\n  const accountId = insightsJWT['account_id'];\n  const rhUserId = keycloak.tokenParsed['rh-user-id'];\n  if (accountId !== rhUserId) {\n    console.debug(`Triggering MASSSO logout because sso.redhat.com account_id claim does not match the MASSSO rh-user-id claim. account_id: ${accountId}, rh-user-id ${rhUserId}`);\n    await logout(keycloak);\n    return '';\n  }\n  if (keycloak.refreshToken) {\n    // Save the most recent refresh token\n    await storeRefreshToken(keycloak.refreshToken, getInsightsAccessToken);\n  }\n  return keycloak.token;\n};\n\n/**\n * logout of keycloak, clear cache and offline store then redirect to\n * keycloak login page\n *\n * @param k the keycloak instance\n * @param client offix client\n *\n */\nconst logout = async (k: Keycloak.KeycloakInstance | undefined) => {\n  if (k) {\n    console.debug('Performing MASSSO logout');\n    await k.logout();\n  }\n};\n\nexport const buildTokenEndPointUrl = (authServerUrl: string, realm: string) => {\n    return `${authServerUrl}/realms/${realm}/protocol/openid-connect/token`;\n};\n"],"names":["QuickStartLoaderFederated","APIManagementPage","ArtifactRedirect","Artifacts","ArtifactVersionDetails","DataSciencePage","KasPage","OverviewPage","ResourcesPage","RulesPage","RolesPage","ServiceAccountsPage","CosPage","ServiceRegistryPage","RedirectToStreamsKafkas","Redirect","to","appRoutes","component","Kafka","label","path","title","basename","devPreview","exact","getBaseName","window","location","pathname","WrappedRoute","Component","isAsync","rest","t","useTranslation","history","useHistory","getBasename","onClickButton","push","Route","render","routeProps","ErrorBoundary","fallbackRender","message","AppServicesPageNotFound","AppServicesEmptyState","emptyStateProps","variant","AppServicesEmptyStateVariant","emptyStateIconProps","className","titleProps","emptyStateBodyProps","body","Button","onClick","DevelopmentPreview","show","BasenameContext","value","AppRoutes","LastLocationProvider","fallback","AppServicesLoading","Switch","map","idx","key","connect","insights","getAppId","defaultAppId","parts","split","length","useEffect","chrome","init","appId","identifyApp","unregister","on","event","includes","navId","useIsMounted","isMounted","useRef","current","FederatedModule","scope","module","getModuleInfo","modules","useState","moduleInfo","setModuleInfo","basePath","fallbackBasePath","undefined","DynamicFederatedModule","url","ready","setReady","failed","setFailed","element","document","createElement","src","type","async","onload","console","log","onerror","error","head","appendChild","removeChild","useDynamicScript","entryPoint","container","default","get","factory","Module","debug","loadComponent","AssetsContext","getPath","usePrincipal","config","useConfig","auth","useAuth","serviceAccountPrincipals","setServiceAccountPrincipals","userAcountPrincipals","setUserAccountPrincipals","rbac","kas","getToken","accessToken","principalApi","PrincipalApi","listPrincipals","then","response","data","p","id","username","principalType","PrincipalType","displayName","first_name","last_name","emailAddress","email","userAccounts","SecurityApi","apiBasePath","getServiceAccounts","items","sa","client_id","name","serviceAccounts","getAllPrincipals","answer","concat","getAllUserAccounts","getAllServiceAccounts","PrincipalsProvider","children","PrincipalsContext","InstanceDrawer","isExpanded","onClose","kafkaDetail","activeTab","masSso","authServerUrl","realm","tokenEndPointUrl","onDeleteInstance","InstanceDrawerFederated","instanceDetail","fetchModuleInfo","baseUrl","fetch","json","fedMods","s","entry","startsWith","FederatedModuleContext","FederatedModuleProvider","moduleInfoCache","Provider","federatedModules","useFederatedModule","Error","KasModalLoader","KasModalLoaderFederated","Status","useQuota","productId","constants","orgId","setOrgId","ams","AppServicesApi","apiAccountsMgmtV1CurrentAccountGet","account","orgID","organization","getQuota","filteredQuota","loading","isServiceDown","kasQuotaId","kafka","instanceQuotaId","kasTrialQuotaId","trialQuotaId","srsQuotaId","serviceRegistry","srsTrialQuotaId","ProductType","quotaId","quotaKey","QuotaType","trialQuotaKey","apiAccountsMgmtV1OrganizationsOrgIdQuotaCostGet","res","quotaData","Map","quota","filter","q","quota_id","trim","trialQuota","allowed","remaining","consumed","set","catch","useMemo","fetchTermsReviewFactory","termsConfig","apiAuthorizationsV1SelfTermsReviewPost","event_code","eventCode","site_code","siteCode","buildUrlParams","params","Object","keys","encodeURIComponent","join","useModalControl","loadTermsReview","ref","load","Promise","r","useAsyncTermsReview","useLocation","shouldOpenCreateModal","parsed","parse","search","terms_required","preCreateInstance","open","termsReview","terms_available","redirect_url","redirectURL","stringifyUrl","href","query","create","baseURL","cancelURL","redirect","cancelRedirect","getTermsAppURL","useInsights","getInsightsAccessToken","keycloakConfig","clientId","keycloakInstance","insightsChromeAuth","getKeycloakInstance","instance","getMASSSOToken","getUsername","getUser","identity","user","isOrgAdmin","is_org_admin","srs","apicurio_registry","useMASToken","getTokenEndPointUrl","APIManagementOverviewPage","serviceDown","OpenshiftManagedConnectors","DataScienceOverViewPage","KafkaFederatedComponent","FederatedKafka","Topics","props","TopicDetails","CreateTopic","UpdateTopic","Dashboard","ConsumerGroups","AclPermissions","getAdminServerUrl","kafkaRequest","bootstrap_server_host","kafkaRoutes","underlyingProps","KafkaRoutes","routeMatch","useRouteMatch","routePath","KafkaMainView","setKafkaRequest","useParams","kasService","DefaultApi","getKafkaById","adminServerUrl","useKafkaInstance","setError","isInstanceDrawerOpen","setIsInstanceDrawerOpen","activeDrawerTab","setActiveDrawerTab","kafkaPageLink","createHref","kafkaInstanceLink","showMetrics","kafkaId","kafkaAdminUrl","onError","code","kafkaName","handleInstanceDrawer","isOpen","showSchemas","ServiceRegistry","redirectAfterDeleteInstance","kafkaInstance","fetchKafkaTopisFromAdmin","TopicsApi","Configuration","getTopics","fetchTopicMetrics","duration","interval","selectedTopic","getMetricsByRangeQuery","safeMetrics","m","values","metric","topic","filteredMetrics","topics","Array","from","Set","bytesIncoming","bytesOutgoing","bytesPerPartition","incomingMessageRate","forEach","partition","addAggregatedTotalBytesTo","timestamp","metricsTopics","ConnectedMetrics","useBasename","getKafkaInstanceMetrics","useCallback","persistentvolumeclaim","usedDiskSpaceMetrics","connectionAttemptRateMetrics","clientConnectionsMetrics","addAggregatedValuesTo","fetchKafkaInstanceMetrics","getTopicMetrics","all","kafkaTopics","metrics","getMetricsKpi","apisService","topicPartitions","consumerGroups","getMetricsByInstantQuery","fetchMetricsKpi","Metrics","onCreateTopic","getTopicsMetrics","termsAndConditionsEventCode","termsAndConditionsSiteCode","OpenshiftStreamsFederated","QuotaContext","NotFoundPage","PageSection","EmptyState","EmptyStateIcon","icon","ExclamationTriangleIcon","Title","headingLevel","size","EmptyStateBody","ConnectedOverviewPage","serviceRegistryHref","toKafkaHref","toServiceRegistryHref","QuickStartCatalogFederated","ServiceAccountsFederated","ServiceDownPage","ArtifactVersionDetailsConnected","artifactId","breadcrumbId","registry","ArtifactsConnected","ArtifactRedirectConnected","DownloadArtifacts","downloadLabel","fileName","downloadLinkLabel","FederatedApicurioComponent","federateConfig","currentlyLoggedInuser","groupId","version","principals","owner","apiUrl","navPathPrefix","artifacts","features","readOnly","breadcrumbs","roleManagement","multiTenant","ui","navPrefixPath","createApicurioConfig","registryUrl","ServiceRegistryFederated","tenantId","RulesPageConnected","ServiceRegistryPageConnected","renderDownloadArtifacts","SrsLayout","ServiceRegistrySchemaMapping","topicName","renderSchema","registryId","GetLink","Link","AccessDeniedPage","accessDeniedDetails","Trans","i18nKey","components","Main","NotAuthorized","description","prevPageButtonText","showReturnButton","filterEnvironmentConfig","environmentConfig","hostname","possibleConfigs","hostnames","possibleDefaultConfigs","addFederatedModulesToConfig","federatedModulesConfig","beta","entries","k","v","substring","EmbeddedConfigProvider","fetchConfig","setValue","jsonConfig","ConfigContext","ConstantContext","useConstants","useContext","ServiceConstantsContextProvider","FeatureFlagsContext","useFeatureFlags","FeatureFlagProvider","middleware","register","notifications","routeFocusTimer","useA11yRouteChange","lastNavigation","useLastLocation","clearTimeout","PageNotFoundRoute","flattenedRoutes","routes","reduce","flattened","route","release","pathName","shift","accessibleRouteChangeHandler","setTimeout","mainContainer","getElementById","focus","useDocumentTitle","originalTitle","REFRESH_TOKEN_COOKIE_NAME","initKeycloak","initOptions","responseMode","enableLogging","retrieveRefreshToken","refreshToken","buildTokenEndPointUrl","URLSearchParams","append","method","headers","status","token","onLoad","has","keycloak","storeRefreshToken","encoded","storedToken","Base64","storedRefreshToken","JSON","refreshJWT","clearRefreshToken","exp","getUnixTime","Date","insightsToken","rhUserId","insightsJWT","stringify","getAccessToken","updateToken","tokenParsed","accountId","logout"],"sourceRoot":""}